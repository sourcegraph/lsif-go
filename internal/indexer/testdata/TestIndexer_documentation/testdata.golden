# <a name="">Index <small>(new page,exported)</small></a>

# Index

- [Package testdata](#github.com-sourcegraph-lsif-go-internal-testdata)
- [Package secret](#internal-secret)
- [Package notests](#internal-shouldvisit-notests)
- [Package tests](#internal-shouldvisit-tests)
- [Package pkg](#internal-shouldvisit-tests_separate)
- [Package pkg_test](#internal-shouldvisit-tests_separate_test)

## <a name="github.com-sourcegraph-lsif-go-internal-testdata">Package testdata <small>(new page)</small></a>

Package testdata 

testdata is a small package containing sample Go source code used for testing the indexing routines of github.com/sourcegraph/lsif-go. 

## Index

- [Constants](#github.com-sourcegraph-lsif-go-internal-testdata-const)
  - [const Const](#github.com-sourcegraph-lsif-go-internal-testdata-const-Const)
  - [const ConstBlock1](#github.com-sourcegraph-lsif-go-internal-testdata-const-ConstBlock1)
  - [const ConstBlock2](#github.com-sourcegraph-lsif-go-internal-testdata-const-ConstBlock2)
  - [const Score](#github.com-sourcegraph-lsif-go-internal-testdata-const-Score)
  - [const secretScore](#github.com-sourcegraph-lsif-go-internal-testdata-const-secretScore)
- [Variables](#github.com-sourcegraph-lsif-go-internal-testdata-var)
  - [var Var](#github.com-sourcegraph-lsif-go-internal-testdata-var-Var)
  - [var unexportedVar](#github.com-sourcegraph-lsif-go-internal-testdata-var-unexportedVar)
  - [var BigVar](#github.com-sourcegraph-lsif-go-internal-testdata-var-BigVar)
  - [var VarBlock1](#github.com-sourcegraph-lsif-go-internal-testdata-var-VarBlock1)
  - [var VarBlock2](#github.com-sourcegraph-lsif-go-internal-testdata-var-VarBlock2)
  - [var _](#github.com-sourcegraph-lsif-go-internal-testdata-var-_)
  - [var wg](#github.com-sourcegraph-lsif-go-internal-testdata-var-wg)
- [Types](#github.com-sourcegraph-lsif-go-internal-testdata-type)
  - [type Embedded struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-Embedded)
  - [type Struct struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-Struct)
  - [type Interface interface](#github.com-sourcegraph-lsif-go-internal-testdata-type-Interface)
    - [func NewInterface() Interface](#github.com-sourcegraph-lsif-go-internal-testdata-type-Interface-NewInterface)
  - [type X struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-X)
  - [type Y struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-Y)
  - [type TestInterface interface](#github.com-sourcegraph-lsif-go-internal-testdata-type-TestInterface)
  - [type TestStruct struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-TestStruct)
    - [func (ts *TestStruct) Doer(ctx context.Context, data string) (score int, err error)](#github.com-sourcegraph-lsif-go-internal-testdata-type-TestStruct-Doer)
  - [type TestEmptyStruct struct{}](#github.com-sourcegraph-lsif-go-internal-testdata-type-TestEmptyStruct)
  - [type StructTagRegression struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-StructTagRegression)
  - [type TestEqualsStruct struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-TestEqualsStruct)
  - [type ParallelizableFunc func(ctx context.Context) error](#github.com-sourcegraph-lsif-go-internal-testdata-type-ParallelizableFunc)
  - [type SecretBurger secret.Burger](#github.com-sourcegraph-lsif-go-internal-testdata-type-SecretBurger)
  - [type BadBurger struct](#github.com-sourcegraph-lsif-go-internal-testdata-type-BadBurger)
- [Functions](#github.com-sourcegraph-lsif-go-internal-testdata-func)
  - [func Parallel(ctx context.Context, fns ...ParallelizableFunc) error](#github.com-sourcegraph-lsif-go-internal-testdata-func-Parallel)
  - [func Switch(interfaceValue interface{}) bool](#github.com-sourcegraph-lsif-go-internal-testdata-func-Switch)

### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const">Constants</a>

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const-Const">const Const <small>(exported)</small></a>

```Go
const Const = 5
```

Const is a constant equal to 5. It's the best constant I've ever written. ðŸ˜¹ 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const-ConstBlock1">const ConstBlock1 <small>(exported)</small></a>

```Go
const ConstBlock1 = 1
```

Docs for the const block itself. 

ConstBlock1 is a constant in a block. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const-ConstBlock2">const ConstBlock2 <small>(exported)</small></a>

```Go
const ConstBlock2 = 2
```

Docs for the const block itself. 

ConstBlock2 is a constant in a block. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const-Score">const Score <small>(exported)</small></a>

```Go
const Score = uint64(42)
```

Score is just a hardcoded number. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-const-secretScore">const secretScore</a>

```Go
const secretScore = secret.SecretScore
```

### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var">Variables</a>

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-Var">var Var <small>(exported)</small></a>

```Go
var Var Interface = ...
```

Var is a variable interface. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-unexportedVar">var unexportedVar</a>

```Go
var unexportedVar Interface = ...
```

unexportedVar is an unexported variable interface. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-BigVar">var BigVar <small>(exported)</small></a>

```Go
var BigVar Interface = ...
```

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-VarBlock1">var VarBlock1 <small>(exported)</small></a>

```Go
var VarBlock1 = "if you're reading this"
```

What are docs, really? I can't say for sure, I don't write any. But look, a CAT! 

```
      |\      _,,,---,,_
ZZZzz /,`.-'`'    -.  ;-;;,_
     |,4-  ) )-,_. ,\ (  `'-'
    '---''(_/--'  `-'\_)

```
It's sleeping! Some people write that as `sleeping` but Markdown isn't allowed in Go docstrings, right? right?! 

This has some docs 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-VarBlock2">var VarBlock2 <small>(exported)</small></a>

```Go
var VarBlock2 = "hi"
```

What are docs, really? I can't say for sure, I don't write any. But look, a CAT! 

```
      |\      _,,,---,,_
ZZZzz /,`.-'`'    -.  ;-;;,_
     |,4-  ) )-,_. ,\ (  `'-'
    '---''(_/--'  `-'\_)

```
It's sleeping! Some people write that as `sleeping` but Markdown isn't allowed in Go docstrings, right? right?! 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-_">var _</a>

```Go
var _ = Interface(&Struct{})
```

Yeah this is some Go magic incantation which is common. 

```
 ,_     _
 |\\_,-~/
 / _  _ |    ,--.
(  @  @ )   / ,-'
 \  _T_/-._( (
/         `. \
|         _  \ |
\ \ ,  /      |
 || |-_\__   /
((_/`(____,-'

```
#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type">Types</a>

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-Embedded">type Embedded struct <small>(exported)</small></a>

```Go
type Embedded struct {
	// EmbeddedField has some docs!
	EmbeddedField string
	Field         string // conflicts with parent "Field"
}
```

Embedded is a struct, to be embedded in another struct. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-Struct">type Struct struct <small>(exported)</small></a>

```Go
type Struct struct {
	*Embedded
	Field     string
	Anonymous struct {
		FieldA int
		FieldB int
		FieldC int
	}
}
```

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-Interface">type Interface interface <small>(exported)</small></a>

```Go
type Interface interface {
	ImplementsInterface() string
}
```

Interface has docs too 

##### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-Interface-NewInterface">func NewInterface() Interface <small>(exported)</small></a>

```Go
func NewInterface() Interface
```

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-X">type X struct <small>(exported)</small></a>

```Go
type X struct {
	bar string
}
```

Go can be fun 

And confusing 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-Y">type Y struct <small>(exported)</small></a>

```Go
type Y struct {
	baz float
}
```

Go can be fun 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-TestInterface">type TestInterface interface <small>(exported)</small></a>

```Go
type TestInterface interface {
	// Do does a test thing.
	Do(ctx context.Context, data string) (score int, _ error)
}
```

TestInterface is an interface used for testing. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-TestStruct">type TestStruct struct <small>(exported)</small></a>

```Go
type TestStruct struct {
	// SimpleA docs
	SimpleA int
	// SimpleB docs
	SimpleB int
	// SimpleC docs
	SimpleC int

	FieldWithTag           string `json:"tag"`
	FieldWithAnonymousType struct {
		NestedA string
		NestedB string
		// NestedC docs
		NestedC string
	}

	EmptyStructField struct{}
}
```

TestStruct is a struct used for testing. 

##### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-TestStruct-Doer">func (ts *TestStruct) Doer(ctx context.Context, data string) (score int, err error) <small>(exported)</small></a>

```Go
func (ts *TestStruct) Doer(ctx context.Context, data string) (score int, err error)
```

Doer is similar to the test interface (but not the same). 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-TestEmptyStruct">type TestEmptyStruct struct{} <small>(exported)</small></a>

```Go
type TestEmptyStruct struct{}
```

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-StructTagRegression">type StructTagRegression struct <small>(exported)</small></a>

```Go
type StructTagRegression struct {
	Value int `key:",range=[:}"`
}
```

StructTagRegression is a struct that caused panic in the wild. Added here to support a regression test. 

See [https://github.com/tal-tech/go-zero/blob/11dd3d75ecceaa3f5772024fb3f26dec1ada8e9c/core/mapping/unmarshaler_test.go#L2272](https://github.com/tal-tech/go-zero/blob/11dd3d75ecceaa3f5772024fb3f26dec1ada8e9c/core/mapping/unmarshaler_test.go#L2272). 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-TestEqualsStruct">type TestEqualsStruct struct <small>(exported)</small></a>

```Go
type TestEqualsStruct = struct {
	Value int
}
```

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-ParallelizableFunc">type ParallelizableFunc func(ctx context.Context) error <small>(exported)</small></a>

```Go
type ParallelizableFunc func(ctx context.Context) error
```

ParallelizableFunc is a function that can be called concurrently with other instances of this function type. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-SecretBurger">type SecretBurger secret.Burger <small>(exported)</small></a>

```Go
type SecretBurger = secret.Burger
```

Type aliased doc 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-type-BadBurger">type BadBurger struct <small>(exported)</small></a>

```Go
type BadBurger = struct {
	Field string
}
```

### <a name="github.com-sourcegraph-lsif-go-internal-testdata-func">Functions</a>

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-func-Parallel">func Parallel(ctx context.Context, fns ...ParallelizableFunc) error <small>(exported)</small></a>

```Go
func Parallel(ctx context.Context, fns ...ParallelizableFunc) error
```

Parallel invokes each of the given parallelizable functions in their own goroutines and returns the first error to occur. This method will block until all goroutines have returned. 

#### <a name="github.com-sourcegraph-lsif-go-internal-testdata-func-Switch">func Switch(interfaceValue interface{}) bool <small>(exported)</small></a>

```Go
func Switch(interfaceValue interface{}) bool
```

## <a name="internal-secret">Package secret <small>(new page)</small></a>

secret is a package that holds secrets. 

## Index

- [Constants](#internal-secret-const)
  - [const SecretScore](#internal-secret-const-SecretScore)
- [Types](#internal-secret-type)
  - [type Burger struct](#internal-secret-type-Burger)

### <a name="internal-secret-const">Constants</a>

#### <a name="internal-secret-const-SecretScore">const SecretScore <small>(exported)</small></a>

```Go
const SecretScore = uint64(43)
```

SecretScore is like score but _secret_. 

### <a name="internal-secret-type">Types</a>

#### <a name="internal-secret-type-Burger">type Burger struct <small>(exported)</small></a>

```Go
type Burger struct {
	Field int
}
```

Original doc 

## <a name="internal-shouldvisit-notests">Package notests <small>(new page)</small></a>

This package has no tests. 

## Index

- [Functions](#internal-shouldvisit-notests-func)
  - [func foo() bool](#internal-shouldvisit-notests-func-foo)

### <a name="internal-shouldvisit-notests-func">Functions</a>

#### <a name="internal-shouldvisit-notests-func-foo">func foo() bool</a>

```Go
func foo() bool
```

## <a name="internal-shouldvisit-tests">Package tests <small>(new page)</small></a>

This package has tests. 

## Index

- [Functions](#internal-shouldvisit-tests-func)
  - [func foo() bool](#internal-shouldvisit-tests-func-foo)
  - [func TestFoo(t *testing.T)](#internal-shouldvisit-tests-func-TestFoo)

### <a name="internal-shouldvisit-tests-func">Functions</a>

#### <a name="internal-shouldvisit-tests-func-foo">func foo() bool</a>

```Go
func foo() bool
```

#### <a name="internal-shouldvisit-tests-func-TestFoo">func TestFoo(t *testing.T)</a>

```Go
func TestFoo(t *testing.T)
```

## <a name="internal-shouldvisit-tests_separate">Package pkg <small>(new page)</small></a>

This package has tests, but in a separate _test package. 

## Index

- [Functions](#internal-shouldvisit-tests_separate-func)
  - [func foo() bool](#internal-shouldvisit-tests_separate-func-foo)

### <a name="internal-shouldvisit-tests_separate-func">Functions</a>

#### <a name="internal-shouldvisit-tests_separate-func-foo">func foo() bool</a>

```Go
func foo() bool
```

## <a name="internal-shouldvisit-tests_separate_test">Package pkg_test <small>(new page)</small></a>

## Index

- [Functions](#internal-shouldvisit-tests_separate_test-func)
  - [func TestFoo(t *testing.T)](#internal-shouldvisit-tests_separate_test-func-TestFoo)

### <a name="internal-shouldvisit-tests_separate_test-func">Functions</a>

#### <a name="internal-shouldvisit-tests_separate_test-func-TestFoo">func TestFoo(t *testing.T)</a>

```Go
func TestFoo(t *testing.T)
```

