# <a name="">Index <small>(new page,exported)</small></a>

# Index

- [Package http](#net-http)
- [Package cgi](#cgi)
- [Package cookiejar](#cookiejar)
- [Package cookiejar_test](#cookiejar_test)
- [Package fcgi](#fcgi)
- [Package httptest](#httptest)
- [Package httptest_test](#httptest_test)
- [Package httptrace](#httptrace)
- [Package httptrace_test](#httptrace_test)
- [Package httputil](#httputil)
- [Package httputil_test](#httputil_test)
- [Package internal](#internal)
- [Package pprof](#pprof)
- [Package http_test](#net-http_test)

## <a name="net-http">Package http <small>(new page,exported)</small></a>

Package http provides HTTP client and server implementations. 

Get, Head, Post, and PostForm make HTTP (or HTTPS) requests: 

```
resp, err := http.Get("[http://example.com/](http://example.com/)")
...
resp, err := http.Post("[http://example.com/upload](http://example.com/upload)", "image/jpeg", &buf)
...
resp, err := http.PostForm("[http://example.com/form](http://example.com/form)",
	url.Values{"key": {"Value"}, "id": {"123"}})

```
The client must close the response body when finished with it: 

```
resp, err := http.Get("[http://example.com/](http://example.com/)")
if err != nil {
	// handle error
}
defer resp.Body.Close()
body, err := io.ReadAll(resp.Body)
// ...

```
For control over HTTP client headers, redirect policy, and other settings, create a Client: 

```
client := &http.Client{
	CheckRedirect: redirectPolicyFunc,
}

resp, err := client.Get("[http://example.com](http://example.com)")
// ...

req, err := http.NewRequest("GET", "[http://example.com](http://example.com)", nil)
// ...
req.Header.Add("If-None-Match", `W/"wyzzy"`)
resp, err := client.Do(req)
// ...

```
For control over proxies, TLS configuration, keep-alives, compression, and other settings, create a Transport: 

```
tr := &http.Transport{
	MaxIdleConns:       10,
	IdleConnTimeout:    30 * time.Second,
	DisableCompression: true,
}
client := &http.Client{Transport: tr}
resp, err := client.Get("[https://example.com](https://example.com)")

```
Clients and Transports are safe for concurrent use by multiple goroutines and for efficiency should only be created once and re-used. 

ListenAndServe starts an HTTP server with a given address and handler. The handler is usually nil, which means to use DefaultServeMux. Handle and HandleFunc add handlers to DefaultServeMux: 

```
http.Handle("/foo", fooHandler)

http.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
})

log.Fatal(http.ListenAndServe(":8080", nil))

```
More control over the server's behavior is available by creating a custom Server: 

```
s := &http.Server{
	Addr:           ":8080",
	Handler:        myHandler,
	ReadTimeout:    10 * time.Second,
	WriteTimeout:   10 * time.Second,
	MaxHeaderBytes: 1 << 20,
}
log.Fatal(s.ListenAndServe())

```
Starting with Go 1.6, the http package has transparent support for the HTTP/2 protocol when using HTTPS. Programs that must disable HTTP/2 can do so by setting Transport.TLSNextProto (for clients) or Server.TLSNextProto (for servers) to a non-nil, empty map. Alternatively, the following GODEBUG environment variables are currently supported: 

```
GODEBUG=http2client=0  # disable HTTP/2 client support
GODEBUG=http2server=0  # disable HTTP/2 server support
GODEBUG=http2debug=1   # enable verbose HTTP/2 debug logs
GODEBUG=http2debug=2   # ... even more verbose, with frame dumps

```
The GODEBUG variables are not covered by Go's API compatibility promise. Please report any issues before disabling HTTP/2 support: [https://golang.org/s/http2bug](https://golang.org/s/http2bug) 

The http package's Transport and Server both automatically enable HTTP/2 support for simple configurations. To enable HTTP/2 for more complex configurations, to use lower-level HTTP/2 features, or to use a newer version of Go's http2 package, import "golang.org/x/net/http2" directly and use its ConfigureTransport and/or ConfigureServer functions. Manually configuring HTTP/2 via the golang.org/x/net/http2 package takes precedence over the net/http package's built-in HTTP/2 support. 

## Index

- [Constants](#net-http-const)
  - [const maxBodySlurpSize](#net-http-const-maxBodySlurpSize)
  - [const SameSiteDefaultMode](#net-http-const-SameSiteDefaultMode)
  - [const SameSiteLaxMode](#net-http-const-SameSiteLaxMode)
  - [const SameSiteStrictMode](#net-http-const-SameSiteStrictMode)
  - [const SameSiteNoneMode](#net-http-const-SameSiteNoneMode)
  - [const extraCookieLength](#net-http-const-extraCookieLength)
  - [const condNone](#net-http-const-condNone)
  - [const condTrue](#net-http-const-condTrue)
  - [const condFalse](#net-http-const-condFalse)
  - [const indexPage](#net-http-const-indexPage)
  - [const b](#net-http-const-b)
  - [const http2cipher_TLS_NULL_WITH_NULL_NULL](#net-http-const-http2cipher_TLS_NULL_WITH_NULL_NULL)
  - [const http2cipher_TLS_RSA_WITH_NULL_MD5](#net-http-const-http2cipher_TLS_RSA_WITH_NULL_MD5)
  - [const http2cipher_TLS_RSA_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_NULL_SHA)
  - [const http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5](#net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5)
  - [const http2cipher_TLS_RSA_WITH_RC4_128_MD5](#net-http-const-http2cipher_TLS_RSA_WITH_RC4_128_MD5)
  - [const http2cipher_TLS_RSA_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5](#net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5)
  - [const http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA)
  - [const http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5](#net-http-const-http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5)
  - [const http2cipher_TLS_DH_anon_WITH_RC4_128_MD5](#net-http-const-http2cipher_TLS_DH_anon_WITH_RC4_128_MD5)
  - [const http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_KRB5_WITH_DES_CBC_SHA](#net-http-const-http2cipher_TLS_KRB5_WITH_DES_CBC_SHA)
  - [const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_KRB5_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_KRB5_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA](#net-http-const-http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA)
  - [const http2cipher_TLS_KRB5_WITH_DES_CBC_MD5](#net-http-const-http2cipher_TLS_KRB5_WITH_DES_CBC_MD5)
  - [const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5](#net-http-const-http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5)
  - [const http2cipher_TLS_KRB5_WITH_RC4_128_MD5](#net-http-const-http2cipher_TLS_KRB5_WITH_RC4_128_MD5)
  - [const http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5](#net-http-const-http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5)
  - [const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5](#net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5)
  - [const http2cipher_TLS_PSK_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA)
  - [const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA)
  - [const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA)
  - [const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_NULL_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_NULL_SHA256)
  - [const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA)
  - [const http2cipher_TLS_PSK_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_PSK_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_RSA_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA](#net-http-const-http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA)
  - [const http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_PSK_WITH_NULL_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA256)
  - [const http2cipher_TLS_PSK_WITH_NULL_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256)
  - [const http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV](#net-http-const-http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV)
  - [const http2cipher_TLS_FALLBACK_SCSV](#net-http-const-http2cipher_TLS_FALLBACK_SCSV)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDH_anon_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDH_anon_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384)
  - [const http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384)
  - [const http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384)
  - [const http2cipher_TLS_RSA_WITH_AES_128_CCM](#net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CCM)
  - [const http2cipher_TLS_RSA_WITH_AES_256_CCM](#net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CCM)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM)
  - [const http2cipher_TLS_RSA_WITH_AES_128_CCM_8](#net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CCM_8)
  - [const http2cipher_TLS_RSA_WITH_AES_256_CCM_8](#net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CCM_8)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8)
  - [const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8)
  - [const http2cipher_TLS_PSK_WITH_AES_128_CCM](#net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CCM)
  - [const http2cipher_TLS_PSK_WITH_AES_256_CCM](#net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CCM)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM)
  - [const http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM)
  - [const http2cipher_TLS_PSK_WITH_AES_128_CCM_8](#net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CCM_8)
  - [const http2cipher_TLS_PSK_WITH_AES_256_CCM_8](#net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CCM_8)
  - [const http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8](#net-http-const-http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8)
  - [const http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8](#net-http-const-http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8)
  - [const http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256](#net-http-const-http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256)
  - [const http2dialOnMiss](#net-http-const-http2dialOnMiss)
  - [const http2noDialOnMiss](#net-http-const-http2noDialOnMiss)
  - [const singleUse](#net-http-const-singleUse)
  - [const singleUse](#net-http-const-singleUse)
  - [const http2ErrCodeNo](#net-http-const-http2ErrCodeNo)
  - [const http2ErrCodeProtocol](#net-http-const-http2ErrCodeProtocol)
  - [const http2ErrCodeInternal](#net-http-const-http2ErrCodeInternal)
  - [const http2ErrCodeFlowControl](#net-http-const-http2ErrCodeFlowControl)
  - [const http2ErrCodeSettingsTimeout](#net-http-const-http2ErrCodeSettingsTimeout)
  - [const http2ErrCodeStreamClosed](#net-http-const-http2ErrCodeStreamClosed)
  - [const http2ErrCodeFrameSize](#net-http-const-http2ErrCodeFrameSize)
  - [const http2ErrCodeRefusedStream](#net-http-const-http2ErrCodeRefusedStream)
  - [const http2ErrCodeCancel](#net-http-const-http2ErrCodeCancel)
  - [const http2ErrCodeCompression](#net-http-const-http2ErrCodeCompression)
  - [const http2ErrCodeConnect](#net-http-const-http2ErrCodeConnect)
  - [const http2ErrCodeEnhanceYourCalm](#net-http-const-http2ErrCodeEnhanceYourCalm)
  - [const http2ErrCodeInadequateSecurity](#net-http-const-http2ErrCodeInadequateSecurity)
  - [const http2ErrCodeHTTP11Required](#net-http-const-http2ErrCodeHTTP11Required)
  - [const http2frameHeaderLen](#net-http-const-http2frameHeaderLen)
  - [const http2FrameData](#net-http-const-http2FrameData)
  - [const http2FrameHeaders](#net-http-const-http2FrameHeaders)
  - [const http2FramePriority](#net-http-const-http2FramePriority)
  - [const http2FrameRSTStream](#net-http-const-http2FrameRSTStream)
  - [const http2FrameSettings](#net-http-const-http2FrameSettings)
  - [const http2FramePushPromise](#net-http-const-http2FramePushPromise)
  - [const http2FramePing](#net-http-const-http2FramePing)
  - [const http2FrameGoAway](#net-http-const-http2FrameGoAway)
  - [const http2FrameWindowUpdate](#net-http-const-http2FrameWindowUpdate)
  - [const http2FrameContinuation](#net-http-const-http2FrameContinuation)
  - [const http2FlagDataEndStream](#net-http-const-http2FlagDataEndStream)
  - [const http2FlagDataPadded](#net-http-const-http2FlagDataPadded)
  - [const http2FlagHeadersEndStream](#net-http-const-http2FlagHeadersEndStream)
  - [const http2FlagHeadersEndHeaders](#net-http-const-http2FlagHeadersEndHeaders)
  - [const http2FlagHeadersPadded](#net-http-const-http2FlagHeadersPadded)
  - [const http2FlagHeadersPriority](#net-http-const-http2FlagHeadersPriority)
  - [const http2FlagSettingsAck](#net-http-const-http2FlagSettingsAck)
  - [const http2FlagPingAck](#net-http-const-http2FlagPingAck)
  - [const http2FlagContinuationEndHeaders](#net-http-const-http2FlagContinuationEndHeaders)
  - [const http2FlagPushPromiseEndHeaders](#net-http-const-http2FlagPushPromiseEndHeaders)
  - [const http2FlagPushPromisePadded](#net-http-const-http2FlagPushPromisePadded)
  - [const http2minMaxFrameSize](#net-http-const-http2minMaxFrameSize)
  - [const http2maxFrameSize](#net-http-const-http2maxFrameSize)
  - [const max](#net-http-const-max)
  - [const http2ClientPreface](#net-http-const-http2ClientPreface)
  - [const http2initialMaxFrameSize](#net-http-const-http2initialMaxFrameSize)
  - [const http2NextProtoTLS](#net-http-const-http2NextProtoTLS)
  - [const http2initialHeaderTableSize](#net-http-const-http2initialHeaderTableSize)
  - [const http2initialWindowSize](#net-http-const-http2initialWindowSize)
  - [const http2defaultMaxReadFrameSize](#net-http-const-http2defaultMaxReadFrameSize)
  - [const http2stateIdle](#net-http-const-http2stateIdle)
  - [const http2stateOpen](#net-http-const-http2stateOpen)
  - [const http2stateHalfClosedLocal](#net-http-const-http2stateHalfClosedLocal)
  - [const http2stateHalfClosedRemote](#net-http-const-http2stateHalfClosedRemote)
  - [const http2stateClosed](#net-http-const-http2stateClosed)
  - [const http2SettingHeaderTableSize](#net-http-const-http2SettingHeaderTableSize)
  - [const http2SettingEnablePush](#net-http-const-http2SettingEnablePush)
  - [const http2SettingMaxConcurrentStreams](#net-http-const-http2SettingMaxConcurrentStreams)
  - [const http2SettingInitialWindowSize](#net-http-const-http2SettingInitialWindowSize)
  - [const http2SettingMaxFrameSize](#net-http-const-http2SettingMaxFrameSize)
  - [const http2SettingMaxHeaderListSize](#net-http-const-http2SettingMaxHeaderListSize)
  - [const http2bufWriterPoolBufferSize](#net-http-const-http2bufWriterPoolBufferSize)
  - [const http2prefaceTimeout](#net-http-const-http2prefaceTimeout)
  - [const http2firstSettingsTimeout](#net-http-const-http2firstSettingsTimeout)
  - [const http2handlerChunkWriteSize](#net-http-const-http2handlerChunkWriteSize)
  - [const http2defaultMaxStreams](#net-http-const-http2defaultMaxStreams)
  - [const http2maxQueuedControlFrames](#net-http-const-http2maxQueuedControlFrames)
  - [const perFieldOverhead](#net-http-const-perFieldOverhead)
  - [const typicalHeaders](#net-http-const-typicalHeaders)
  - [const WSAECONNABORTED](#net-http-const-WSAECONNABORTED)
  - [const WSAECONNRESET](#net-http-const-WSAECONNRESET)
  - [const size](#net-http-const-size)
  - [const statusRequestHeaderFieldsTooLarge](#net-http-const-statusRequestHeaderFieldsTooLarge)
  - [const maxUint31](#net-http-const-maxUint31)
  - [const http2TrailerPrefix](#net-http-const-http2TrailerPrefix)
  - [const http2transportDefaultConnFlow](#net-http-const-http2transportDefaultConnFlow)
  - [const http2transportDefaultStreamFlow](#net-http-const-http2transportDefaultStreamFlow)
  - [const http2transportDefaultStreamMinRefresh](#net-http-const-http2transportDefaultStreamMinRefresh)
  - [const http2defaultUserAgent](#net-http-const-http2defaultUserAgent)
  - [const http2maxAllocFrameSize](#net-http-const-http2maxAllocFrameSize)
  - [const maxBufs](#net-http-const-maxBufs)
  - [const max1xxResponses](#net-http-const-max1xxResponses)
  - [const hugeDuration](#net-http-const-hugeDuration)
  - [const settingSize](#net-http-const-settingSize)
  - [const maxFrameSize](#net-http-const-maxFrameSize)
  - [const http2priorityDefaultWeight](#net-http-const-http2priorityDefaultWeight)
  - [const http2priorityNodeOpen](#net-http-const-http2priorityNodeOpen)
  - [const http2priorityNodeClosed](#net-http-const-http2priorityNodeClosed)
  - [const http2priorityNodeIdle](#net-http-const-http2priorityNodeIdle)
  - [const maxInt64](#net-http-const-maxInt64)
  - [const MethodGet](#net-http-const-MethodGet)
  - [const MethodHead](#net-http-const-MethodHead)
  - [const MethodPost](#net-http-const-MethodPost)
  - [const MethodPut](#net-http-const-MethodPut)
  - [const MethodPatch](#net-http-const-MethodPatch)
  - [const MethodDelete](#net-http-const-MethodDelete)
  - [const MethodConnect](#net-http-const-MethodConnect)
  - [const MethodOptions](#net-http-const-MethodOptions)
  - [const MethodTrace](#net-http-const-MethodTrace)
  - [const defaultMaxMemory](#net-http-const-defaultMaxMemory)
  - [const defaultUserAgent](#net-http-const-defaultUserAgent)
  - [const Big](#net-http-const-Big)
  - [const prefix](#net-http-const-prefix)
  - [const deleteHostHeader](#net-http-const-deleteHostHeader)
  - [const keepHostHeader](#net-http-const-keepHostHeader)
  - [const bufferBeforeChunkingSize](#net-http-const-bufferBeforeChunkingSize)
  - [const TrailerPrefix](#net-http-const-TrailerPrefix)
  - [const debugServerConnections](#net-http-const-debugServerConnections)
  - [const DefaultMaxHeaderBytes](#net-http-const-DefaultMaxHeaderBytes)
  - [const TimeFormat](#net-http-const-TimeFormat)
  - [const days](#net-http-const-days)
  - [const months](#net-http-const-months)
  - [const maxPostHandlerReadBytes](#net-http-const-maxPostHandlerReadBytes)
  - [const rstAvoidanceDelay](#net-http-const-rstAvoidanceDelay)
  - [const runHooks](#net-http-const-runHooks)
  - [const skipHooks](#net-http-const-skipHooks)
  - [const size](#net-http-const-size)
  - [const errorHeaders](#net-http-const-errorHeaders)
  - [const publicErr](#net-http-const-publicErr)
  - [const shutdownPollIntervalMax](#net-http-const-shutdownPollIntervalMax)
  - [const StateNew](#net-http-const-StateNew)
  - [const StateActive](#net-http-const-StateActive)
  - [const StateIdle](#net-http-const-StateIdle)
  - [const StateHijacked](#net-http-const-StateHijacked)
  - [const StateClosed](#net-http-const-StateClosed)
  - [const sniffLen](#net-http-const-sniffLen)
  - [const socksVersion5](#net-http-const-socksVersion5)
  - [const socksAddrTypeIPv4](#net-http-const-socksAddrTypeIPv4)
  - [const socksAddrTypeFQDN](#net-http-const-socksAddrTypeFQDN)
  - [const socksAddrTypeIPv6](#net-http-const-socksAddrTypeIPv6)
  - [const socksCmdConnect](#net-http-const-socksCmdConnect)
  - [const sockscmdBind](#net-http-const-sockscmdBind)
  - [const socksAuthMethodNotRequired](#net-http-const-socksAuthMethodNotRequired)
  - [const socksAuthMethodUsernamePassword](#net-http-const-socksAuthMethodUsernamePassword)
  - [const socksAuthMethodNoAcceptableMethods](#net-http-const-socksAuthMethodNoAcceptableMethods)
  - [const socksStatusSucceeded](#net-http-const-socksStatusSucceeded)
  - [const socksauthUsernamePasswordVersion](#net-http-const-socksauthUsernamePasswordVersion)
  - [const socksauthStatusSucceeded](#net-http-const-socksauthStatusSucceeded)
  - [const StatusContinue](#net-http-const-StatusContinue)
  - [const StatusSwitchingProtocols](#net-http-const-StatusSwitchingProtocols)
  - [const StatusProcessing](#net-http-const-StatusProcessing)
  - [const StatusEarlyHints](#net-http-const-StatusEarlyHints)
  - [const StatusOK](#net-http-const-StatusOK)
  - [const StatusCreated](#net-http-const-StatusCreated)
  - [const StatusAccepted](#net-http-const-StatusAccepted)
  - [const StatusNonAuthoritativeInfo](#net-http-const-StatusNonAuthoritativeInfo)
  - [const StatusNoContent](#net-http-const-StatusNoContent)
  - [const StatusResetContent](#net-http-const-StatusResetContent)
  - [const StatusPartialContent](#net-http-const-StatusPartialContent)
  - [const StatusMultiStatus](#net-http-const-StatusMultiStatus)
  - [const StatusAlreadyReported](#net-http-const-StatusAlreadyReported)
  - [const StatusIMUsed](#net-http-const-StatusIMUsed)
  - [const StatusMultipleChoices](#net-http-const-StatusMultipleChoices)
  - [const StatusMovedPermanently](#net-http-const-StatusMovedPermanently)
  - [const StatusFound](#net-http-const-StatusFound)
  - [const StatusSeeOther](#net-http-const-StatusSeeOther)
  - [const StatusNotModified](#net-http-const-StatusNotModified)
  - [const StatusUseProxy](#net-http-const-StatusUseProxy)
  - [const _](#net-http-const-_)
  - [const StatusTemporaryRedirect](#net-http-const-StatusTemporaryRedirect)
  - [const StatusPermanentRedirect](#net-http-const-StatusPermanentRedirect)
  - [const StatusBadRequest](#net-http-const-StatusBadRequest)
  - [const StatusUnauthorized](#net-http-const-StatusUnauthorized)
  - [const StatusPaymentRequired](#net-http-const-StatusPaymentRequired)
  - [const StatusForbidden](#net-http-const-StatusForbidden)
  - [const StatusNotFound](#net-http-const-StatusNotFound)
  - [const StatusMethodNotAllowed](#net-http-const-StatusMethodNotAllowed)
  - [const StatusNotAcceptable](#net-http-const-StatusNotAcceptable)
  - [const StatusProxyAuthRequired](#net-http-const-StatusProxyAuthRequired)
  - [const StatusRequestTimeout](#net-http-const-StatusRequestTimeout)
  - [const StatusConflict](#net-http-const-StatusConflict)
  - [const StatusGone](#net-http-const-StatusGone)
  - [const StatusLengthRequired](#net-http-const-StatusLengthRequired)
  - [const StatusPreconditionFailed](#net-http-const-StatusPreconditionFailed)
  - [const StatusRequestEntityTooLarge](#net-http-const-StatusRequestEntityTooLarge)
  - [const StatusRequestURITooLong](#net-http-const-StatusRequestURITooLong)
  - [const StatusUnsupportedMediaType](#net-http-const-StatusUnsupportedMediaType)
  - [const StatusRequestedRangeNotSatisfiable](#net-http-const-StatusRequestedRangeNotSatisfiable)
  - [const StatusExpectationFailed](#net-http-const-StatusExpectationFailed)
  - [const StatusTeapot](#net-http-const-StatusTeapot)
  - [const StatusMisdirectedRequest](#net-http-const-StatusMisdirectedRequest)
  - [const StatusUnprocessableEntity](#net-http-const-StatusUnprocessableEntity)
  - [const StatusLocked](#net-http-const-StatusLocked)
  - [const StatusFailedDependency](#net-http-const-StatusFailedDependency)
  - [const StatusTooEarly](#net-http-const-StatusTooEarly)
  - [const StatusUpgradeRequired](#net-http-const-StatusUpgradeRequired)
  - [const StatusPreconditionRequired](#net-http-const-StatusPreconditionRequired)
  - [const StatusTooManyRequests](#net-http-const-StatusTooManyRequests)
  - [const StatusRequestHeaderFieldsTooLarge](#net-http-const-StatusRequestHeaderFieldsTooLarge)
  - [const StatusUnavailableForLegalReasons](#net-http-const-StatusUnavailableForLegalReasons)
  - [const StatusInternalServerError](#net-http-const-StatusInternalServerError)
  - [const StatusNotImplemented](#net-http-const-StatusNotImplemented)
  - [const StatusBadGateway](#net-http-const-StatusBadGateway)
  - [const StatusServiceUnavailable](#net-http-const-StatusServiceUnavailable)
  - [const StatusGatewayTimeout](#net-http-const-StatusGatewayTimeout)
  - [const StatusHTTPVersionNotSupported](#net-http-const-StatusHTTPVersionNotSupported)
  - [const StatusVariantAlsoNegotiates](#net-http-const-StatusVariantAlsoNegotiates)
  - [const StatusInsufficientStorage](#net-http-const-StatusInsufficientStorage)
  - [const StatusLoopDetected](#net-http-const-StatusLoopDetected)
  - [const StatusNotExtended](#net-http-const-StatusNotExtended)
  - [const StatusNetworkAuthenticationRequired](#net-http-const-StatusNetworkAuthenticationRequired)
  - [const DefaultMaxIdleConnsPerHost](#net-http-const-DefaultMaxIdleConnsPerHost)
  - [const h2max](#net-http-const-h2max)
  - [const max1xxResponses](#net-http-const-max1xxResponses)
  - [const maxWriteWaitBeforeConnReuse](#net-http-const-maxWriteWaitBeforeConnReuse)
  - [const debugRoundTrip](#net-http-const-debugRoundTrip)
  - [const wantCookieString](#net-http-const-wantCookieString)
  - [const MaxWriteWaitBeforeConnReuse](#net-http-const-MaxWriteWaitBeforeConnReuse)
  - [const badURL](#net-http-const-badURL)
  - [const writeCalls](#net-http-const-writeCalls)
  - [const shortBody](#net-http-const-shortBody)
  - [const connectionCloseHeader](#net-http-const-connectionCloseHeader)
- [Variables](#net-http-var)
  - [var DefaultClient](#net-http-var-DefaultClient)
  - [var cancelCtx](#net-http-var-cancelCtx)
  - [var cancelCtx](#net-http-var-cancelCtx)
  - [var once](#net-http-var-once)
  - [var timedOut](#net-http-var-timedOut)
  - [var ErrUseLastResponse](#net-http-var-ErrUseLastResponse)
  - [var testHookClientDoResult](#net-http-var-testHookClientDoResult)
  - [var deadline](#net-http-var-deadline)
  - [var reqs](#net-http-var-reqs)
  - [var resp](#net-http-var-resp)
  - [var copyHeaders](#net-http-var-copyHeaders)
  - [var reqBodyClosed](#net-http-var-reqBodyClosed)
  - [var redirectMethod](#net-http-var-redirectMethod)
  - [var includeBody](#net-http-var-includeBody)
  - [var urlStr](#net-http-var-urlStr)
  - [var err](#net-http-var-err)
  - [var didTimeout](#net-http-var-didTimeout)
  - [var shouldRedirect](#net-http-var-shouldRedirect)
  - [var ireqhdr](#net-http-var-ireqhdr)
  - [var icookies](#net-http-var-icookies)
  - [var changed](#net-http-var-changed)
  - [var ss](#net-http-var-ss)
  - [var b](#net-http-var-b)
  - [var buf](#net-http-var-buf)
  - [var part](#net-http-var-part)
  - [var cookieNameSanitizer](#net-http-var-cookieNameSanitizer)
  - [var dirs](#net-http-var-dirs)
  - [var err](#net-http-var-err)
  - [var list](#net-http-var-list)
  - [var list](#net-http-var-list)
  - [var errSeeker](#net-http-var-errSeeker)
  - [var errNoOverlap](#net-http-var-errNoOverlap)
  - [var ctype](#net-http-var-ctype)
  - [var buf](#net-http-var-buf)
  - [var sendContent](#net-http-var-sendContent)
  - [var unixEpochTime](#net-http-var-unixEpochTime)
  - [var errMissingSeek](#net-http-var-errMissingSeek)
  - [var errMissingReadDir](#net-http-var-errMissingReadDir)
  - [var list](#net-http-var-list)
  - [var ranges](#net-http-var-ranges)
  - [var r](#net-http-var-r)
  - [var w](#net-http-var-w)
  - [var _](#net-http-var-_)
  - [var _](#net-http-var-_)
  - [var http2dataChunkSizeClasses](#net-http-var-http2dataChunkSizeClasses)
  - [var http2dataChunkPools](#net-http-var-http2dataChunkPools)
  - [var http2errReadEmpty](#net-http-var-http2errReadEmpty)
  - [var ntotal](#net-http-var-ntotal)
  - [var http2errCodeName](#net-http-var-http2errCodeName)
  - [var http2errMixPseudoHeaderTypes](#net-http-var-http2errMixPseudoHeaderTypes)
  - [var http2errPseudoAfterRegular](#net-http-var-http2errPseudoAfterRegular)
  - [var http2padZeros](#net-http-var-http2padZeros)
  - [var http2frameName](#net-http-var-http2frameName)
  - [var http2flagName](#net-http-var-http2flagName)
  - [var http2frameParsers](#net-http-var-http2frameParsers)
  - [var buf](#net-http-var-buf)
  - [var http2fhBytes](#net-http-var-http2fhBytes)
  - [var http2ErrFrameTooLarge](#net-http-var-http2ErrFrameTooLarge)
  - [var padSize](#net-http-var-padSize)
  - [var err](#net-http-var-err)
  - [var http2errStreamID](#net-http-var-http2errStreamID)
  - [var http2errDepStreamID](#net-http-var-http2errDepStreamID)
  - [var http2errPadLength](#net-http-var-http2errPadLength)
  - [var http2errPadBytes](#net-http-var-http2errPadBytes)
  - [var flags](#net-http-var-flags)
  - [var flags](#net-http-var-flags)
  - [var padLength](#net-http-var-padLength)
  - [var v](#net-http-var-v)
  - [var flags](#net-http-var-flags)
  - [var flags](#net-http-var-flags)
  - [var padLength](#net-http-var-padLength)
  - [var flags](#net-http-var-flags)
  - [var isRequest](#net-http-var-isRequest)
  - [var isResponse](#net-http-var-isResponse)
  - [var remainSize](#net-http-var-remainSize)
  - [var sawRegular](#net-http-var-sawRegular)
  - [var invalid](#net-http-var-invalid)
  - [var hc](#net-http-var-hc)
  - [var buf](#net-http-var-buf)
  - [var http2DebugGoroutines](#net-http-var-http2DebugGoroutines)
  - [var http2goroutineSpace](#net-http-var-http2goroutineSpace)
  - [var http2littleBuf](#net-http-var-http2littleBuf)
  - [var cutoff](#net-http-var-cutoff)
  - [var maxVal](#net-http-var-maxVal)
  - [var v](#net-http-var-v)
  - [var http2commonBuildOnce](#net-http-var-http2commonBuildOnce)
  - [var http2commonLowerHeader](#net-http-var-http2commonLowerHeader)
  - [var http2commonCanonHeader](#net-http-var-http2commonCanonHeader)
  - [var http2VerboseLogs](#net-http-var-http2VerboseLogs)
  - [var http2logFrameWrites](#net-http-var-http2logFrameWrites)
  - [var http2logFrameReads](#net-http-var-http2logFrameReads)
  - [var http2inTests](#net-http-var-http2inTests)
  - [var http2clientPreface](#net-http-var-http2clientPreface)
  - [var http2stateName](#net-http-var-http2stateName)
  - [var http2settingName](#net-http-var-http2settingName)
  - [var http2bufWriterPool](#net-http-var-http2bufWriterPool)
  - [var http2errTimeout](#net-http-var-http2errTimeout)
  - [var http2sorterPool](#net-http-var-http2sorterPool)
  - [var http2errClosedPipeWrite](#net-http-var-http2errClosedPipeWrite)
  - [var http2errClientDisconnected](#net-http-var-http2errClientDisconnected)
  - [var http2errClosedBody](#net-http-var-http2errClosedBody)
  - [var http2errHandlerComplete](#net-http-var-http2errHandlerComplete)
  - [var http2errStreamClosed](#net-http-var-http2errStreamClosed)
  - [var http2responseWriterStatePool](#net-http-var-http2responseWriterStatePool)
  - [var http2testHookOnConn](#net-http-var-http2testHookOnConn)
  - [var http2testHookGetServerConn](#net-http-var-http2testHookGetServerConn)
  - [var http2testHookOnPanicMu](#net-http-var-http2testHookOnPanicMu)
  - [var http2testHookOnPanic](#net-http-var-http2testHookOnPanic)
  - [var ctx](#net-http-var-ctx)
  - [var http2settingsTimerMsg](#net-http-var-http2settingsTimerMsg)
  - [var http2idleTimerMsg](#net-http-var-http2idleTimerMsg)
  - [var http2shutdownTimerMsg](#net-http-var-http2shutdownTimerMsg)
  - [var http2gracefulShutdownMsg](#net-http-var-http2gracefulShutdownMsg)
  - [var http2errPrefaceTimeout](#net-http-var-http2errPrefaceTimeout)
  - [var http2errChanPool](#net-http-var-http2errChanPool)
  - [var http2writeDataPool](#net-http-var-http2writeDataPool)
  - [var frameWriteDone](#net-http-var-frameWriteDone)
  - [var ignoreWrite](#net-http-var-ignoreWrite)
  - [var err](#net-http-var-err)
  - [var http2errHandlerPanicked](#net-http-var-http2errHandlerPanicked)
  - [var http2goAwayTimeout](#net-http-var-http2goAwayTimeout)
  - [var tlsState](#net-http-var-tlsState)
  - [var trailer](#net-http-var-trailer)
  - [var url_](#net-http-var-url_)
  - [var requestURI](#net-http-var-requestURI)
  - [var err](#net-http-var-err)
  - [var errc](#net-http-var-errc)
  - [var streamID](#net-http-var-streamID)
  - [var ok](#net-http-var-ok)
  - [var _](#net-http-var-_)
  - [var _](#net-http-var-_)
  - [var _](#net-http-var-_)
  - [var ctype](#net-http-var-ctype)
  - [var clen](#net-http-var-clen)
  - [var date](#net-http-var-date)
  - [var http2ErrRecursivePush](#net-http-var-http2ErrRecursivePush)
  - [var http2ErrPushLimitReached](#net-http-var-http2ErrPushLimitReached)
  - [var _](#net-http-var-_)
  - [var http2connHeaders](#net-http-var-http2connHeaders)
  - [var x](#net-http-var-x)
  - [var http2got1xxFuncForTests](#net-http-var-http2got1xxFuncForTests)
  - [var http2ErrNoCachedConn](#net-http-var-http2ErrNoCachedConn)
  - [var http2errClientConnClosed](#net-http-var-http2errClientConnClosed)
  - [var http2errClientConnUnusable](#net-http-var-http2errClientConnUnusable)
  - [var http2errClientConnGotGoAway](#net-http-var-http2errClientConnGotGoAway)
  - [var maxConcurrentOkay](#net-http-var-maxConcurrentOkay)
  - [var http2shutdownEnterWaitStateHook](#net-http-var-http2shutdownEnterWaitStateHook)
  - [var http2errRequestCanceled](#net-http-var-http2errRequestCanceled)
  - [var requestedGzip](#net-http-var-requestedGzip)
  - [var respHeaderTimer](#net-http-var-respHeaderTimer)
  - [var waitingForConn](#net-http-var-waitingForConn)
  - [var waitingForConnErr](#net-http-var-waitingForConnErr)
  - [var http2errStopReqBodyWrite](#net-http-var-http2errStopReqBodyWrite)
  - [var http2errStopReqBodyWriteAndCancel](#net-http-var-http2errStopReqBodyWriteAndCancel)
  - [var http2errReqBodyTooLong](#net-http-var-http2errReqBodyTooLong)
  - [var sawEOF](#net-http-var-sawEOF)
  - [var n1](#net-http-var-n1)
  - [var allowed](#net-http-var-allowed)
  - [var trls](#net-http-var-trls)
  - [var path](#net-http-var-path)
  - [var didUA](#net-http-var-didUA)
  - [var t](#net-http-var-t)
  - [var connAdd](#net-http-var-connAdd)
  - [var streamAdd](#net-http-var-streamAdd)
  - [var http2errClosedResponseBody](#net-http-var-http2errClosedResponseBody)
  - [var refund](#net-http-var-refund)
  - [var code](#net-http-var-code)
  - [var p](#net-http-var-p)
  - [var http2errResponseHeaderListSize](#net-http-var-http2errResponseHeaderListSize)
  - [var http2errRequestHeaderListSize](#net-http-var-http2errRequestHeaderListSize)
  - [var http2noBody](#net-http-var-http2noBody)
  - [var empty](#net-http-var-empty)
  - [var des](#net-http-var-des)
  - [var n](#net-http-var-n)
  - [var timeFormats](#net-http-var-timeFormats)
  - [var headerNewlineToSpace](#net-http-var-headerNewlineToSpace)
  - [var headerSorterPool](#net-http-var-headerSorterPool)
  - [var formattedVals](#net-http-var-formattedVals)
  - [var aLongTimeAgo](#net-http-var-aLongTimeAgo)
  - [var omitBundledHTTP2](#net-http-var-omitBundledHTTP2)
  - [var NoBody](#net-http-var-NoBody)
  - [var _](#net-http-var-_)
  - [var _](#net-http-var-_)
  - [var ErrMissingFile](#net-http-var-ErrMissingFile)
  - [var ErrNotSupported](#net-http-var-ErrNotSupported)
  - [var ErrUnexpectedTrailer](#net-http-var-ErrUnexpectedTrailer)
  - [var ErrMissingBoundary](#net-http-var-ErrMissingBoundary)
  - [var ErrNotMultipart](#net-http-var-ErrNotMultipart)
  - [var ErrHeaderTooLong](#net-http-var-ErrHeaderTooLong)
  - [var ErrShortBody](#net-http-var-ErrShortBody)
  - [var ErrMissingContentLength](#net-http-var-ErrMissingContentLength)
  - [var reqWriteExcludeHeader](#net-http-var-reqWriteExcludeHeader)
  - [var ErrNoCookie](#net-http-var-ErrNoCookie)
  - [var multipartByReader](#net-http-var-multipartByReader)
  - [var errMissingHost](#net-http-var-errMissingHost)
  - [var bw](#net-http-var-bw)
  - [var textprotoReaderPool](#net-http-var-textprotoReaderPool)
  - [var s](#net-http-var-s)
  - [var ok](#net-http-var-ok)
  - [var reader](#net-http-var-reader)
  - [var err](#net-http-var-err)
  - [var newValues](#net-http-var-newValues)
  - [var e](#net-http-var-e)
  - [var respExcludeHeader](#net-http-var-respExcludeHeader)
  - [var ErrNoLocation](#net-http-var-ErrNoLocation)
  - [var ok](#net-http-var-ok)
  - [var ok](#net-http-var-ok)
  - [var buf](#net-http-var-buf)
  - [var ErrBodyNotAllowed](#net-http-var-ErrBodyNotAllowed)
  - [var ErrHijacked](#net-http-var-ErrHijacked)
  - [var ErrContentLength](#net-http-var-ErrContentLength)
  - [var ErrWriteAfterFlush](#net-http-var-ErrWriteAfterFlush)
  - [var ServerContextKey](#net-http-var-ServerContextKey)
  - [var LocalAddrContextKey](#net-http-var-LocalAddrContextKey)
  - [var crlf](#net-http-var-crlf)
  - [var colonSpace](#net-http-var-colonSpace)
  - [var t](#net-http-var-t)
  - [var bufioReaderPool](#net-http-var-bufioReaderPool)
  - [var bufioWriter2kPool](#net-http-var-bufioWriter2kPool)
  - [var bufioWriter4kPool](#net-http-var-bufioWriter4kPool)
  - [var copyBufPool](#net-http-var-copyBufPool)
  - [var errTooLarge](#net-http-var-errTooLarge)
  - [var wholeReqDeadline](#net-http-var-wholeReqDeadline)
  - [var hdrDeadline](#net-http-var-hdrDeadline)
  - [var frame](#net-http-var-frame)
  - [var extraHeaderKeys](#net-http-var-extraHeaderKeys)
  - [var headerContentLength](#net-http-var-headerContentLength)
  - [var headerDate](#net-http-var-headerDate)
  - [var excludeHeader](#net-http-var-excludeHeader)
  - [var setHeader](#net-http-var-setHeader)
  - [var discard](#net-http-var-discard)
  - [var tooBig](#net-http-var-tooBig)
  - [var _](#net-http-var-_)
  - [var ErrAbortHandler](#net-http-var-ErrAbortHandler)
  - [var query](#net-http-var-query)
  - [var htmlReplacer](#net-http-var-htmlReplacer)
  - [var DefaultServeMux](#net-http-var-DefaultServeMux)
  - [var defaultServeMux](#net-http-var-defaultServeMux)
  - [var err](#net-http-var-err)
  - [var stateName](#net-http-var-stateName)
  - [var testHookServerServe](#net-http-var-testHookServerServe)
  - [var ErrServerClosed](#net-http-var-ErrServerClosed)
  - [var tempDelay](#net-http-var-tempDelay)
  - [var err](#net-http-var-err)
  - [var ErrHandlerTimeout](#net-http-var-ErrHandlerTimeout)
  - [var cancelCtx](#net-http-var-cancelCtx)
  - [var _](#net-http-var-_)
  - [var uniqNameMu](#net-http-var-uniqNameMu)
  - [var uniqNameNext](#net-http-var-uniqNameNext)
  - [var sniffSignatures](#net-http-var-sniffSignatures)
  - [var mp4ftype](#net-http-var-mp4ftype)
  - [var mp4](#net-http-var-mp4)
  - [var socksnoDeadline](#net-http-var-socksnoDeadline)
  - [var socksaLongTimeAgo](#net-http-var-socksaLongTimeAgo)
  - [var a](#net-http-var-a)
  - [var err](#net-http-var-err)
  - [var c](#net-http-var-c)
  - [var dd](#net-http-var-dd)
  - [var err](#net-http-var-err)
  - [var c](#net-http-var-c)
  - [var statusText](#net-http-var-statusText)
  - [var ErrLineTooLong](#net-http-var-ErrLineTooLong)
  - [var buf](#net-http-var-buf)
  - [var rres](#net-http-var-rres)
  - [var ncopy](#net-http-var-ncopy)
  - [var body](#net-http-var-body)
  - [var nextra](#net-http-var-nextra)
  - [var suppressedHeaders304](#net-http-var-suppressedHeaders304)
  - [var suppressedHeadersNoBody](#net-http-var-suppressedHeadersNoBody)
  - [var cl](#net-http-var-cl)
  - [var err](#net-http-var-err)
  - [var ErrBodyReadAfterClose](#net-http-var-ErrBodyReadAfterClose)
  - [var singleCRLF](#net-http-var-singleCRLF)
  - [var doubleCRLF](#net-http-var-doubleCRLF)
  - [var errTrailerEOF](#net-http-var-errTrailerEOF)
  - [var err](#net-http-var-err)
  - [var n](#net-http-var-n)
  - [var nopCloserType](#net-http-var-nopCloserType)
  - [var DefaultTransport](#net-http-var-DefaultTransport)
  - [var err](#net-http-var-err)
  - [var resp](#net-http-var-resp)
  - [var errCannotRewind](#net-http-var-errCannotRewind)
  - [var ErrSkipAltProtocol](#net-http-var-ErrSkipAltProtocol)
  - [var envProxyOnce](#net-http-var-envProxyOnce)
  - [var envProxyFuncValue](#net-http-var-envProxyFuncValue)
  - [var errKeepAlivesDisabled](#net-http-var-errKeepAlivesDisabled)
  - [var errConnBroken](#net-http-var-errConnBroken)
  - [var errCloseIdle](#net-http-var-errCloseIdle)
  - [var errTooManyIdle](#net-http-var-errTooManyIdle)
  - [var errTooManyIdleHost](#net-http-var-errTooManyIdleHost)
  - [var errCloseIdleConns](#net-http-var-errCloseIdleConns)
  - [var errReadLoopExiting](#net-http-var-errReadLoopExiting)
  - [var errIdleConnTimeout](#net-http-var-errIdleConnTimeout)
  - [var errServerClosedIdle](#net-http-var-errServerClosedIdle)
  - [var oldTime](#net-http-var-oldTime)
  - [var removed](#net-http-var-removed)
  - [var zeroDialer](#net-http-var-zeroDialer)
  - [var timer](#net-http-var-timer)
  - [var err](#net-http-var-err)
  - [var firstTLSHost](#net-http-var-firstTLSHost)
  - [var hdr](#net-http-var-hdr)
  - [var err](#net-http-var-err)
  - [var resp](#net-http-var-resp)
  - [var err](#net-http-var-err)
  - [var _](#net-http-var-_)
  - [var h1](#net-http-var-h1)
  - [var errCallerOwnsConn](#net-http-var-errCallerOwnsConn)
  - [var resp](#net-http-var-resp)
  - [var errTimeout](#net-http-var-errTimeout)
  - [var errRequestCanceled](#net-http-var-errRequestCanceled)
  - [var errRequestCanceledConn](#net-http-var-errRequestCanceledConn)
  - [var testHookEnterRoundTrip](#net-http-var-testHookEnterRoundTrip)
  - [var testHookWaitResLoop](#net-http-var-testHookWaitResLoop)
  - [var testHookRoundTripRetried](#net-http-var-testHookRoundTripRetried)
  - [var testHookPrePendingDial](#net-http-var-testHookPrePendingDial)
  - [var testHookPostPendingDial](#net-http-var-testHookPostPendingDial)
  - [var testHookMu](#net-http-var-testHookMu)
  - [var testHookReadLoopBeforeNextRead](#net-http-var-testHookReadLoopBeforeNextRead)
  - [var continueCh](#net-http-var-continueCh)
  - [var respHeaderTimer](#net-http-var-respHeaderTimer)
  - [var portMap](#net-http-var-portMap)
  - [var errReadOnClosedResBody](#net-http-var-errReadOnClosedResBody)
  - [var writeSetCookiesTests](#net-http-var-writeSetCookiesTests)
  - [var logbuf](#net-http-var-logbuf)
  - [var addCookieTests](#net-http-var-addCookieTests)
  - [var readSetCookiesTests](#net-http-var-readSetCookiesTests)
  - [var readCookiesTests](#net-http-var-readCookiesTests)
  - [var logbuf](#net-http-var-logbuf)
  - [var logbuf](#net-http-var-logbuf)
  - [var benchmarkCookieString](#net-http-var-benchmarkCookieString)
  - [var c](#net-http-var-c)
  - [var c](#net-http-var-c)
  - [var DefaultUserAgent](#net-http-var-DefaultUserAgent)
  - [var NewLoggingConn](#net-http-var-NewLoggingConn)
  - [var ExportAppendTime](#net-http-var-ExportAppendTime)
  - [var ExportRefererForURL](#net-http-var-ExportRefererForURL)
  - [var ExportServerNewConn](#net-http-var-ExportServerNewConn)
  - [var ExportCloseWriteAndWait](#net-http-var-ExportCloseWriteAndWait)
  - [var ExportErrRequestCanceled](#net-http-var-ExportErrRequestCanceled)
  - [var ExportErrRequestCanceledConn](#net-http-var-ExportErrRequestCanceledConn)
  - [var ExportErrServerClosedIdle](#net-http-var-ExportErrServerClosedIdle)
  - [var ExportServeFile](#net-http-var-ExportServeFile)
  - [var ExportScanETag](#net-http-var-ExportScanETag)
  - [var ExportHttp2ConfigureServer](#net-http-var-ExportHttp2ConfigureServer)
  - [var Export_shouldCopyHeaderOnRedirect](#net-http-var-Export_shouldCopyHeaderOnRedirect)
  - [var Export_writeStatusLine](#net-http-var-Export_writeStatusLine)
  - [var Export_is408Message](#net-http-var-Export_is408Message)
  - [var SetEnterRoundTripHook](#net-http-var-SetEnterRoundTripHook)
  - [var SetRoundTripRetried](#net-http-var-SetRoundTripRetried)
  - [var ret](#net-http-var-ret)
  - [var ret](#net-http-var-ret)
  - [var headerWriteTests](#net-http-var-headerWriteTests)
  - [var buf](#net-http-var-buf)
  - [var parseTimeTests](#net-http-var-parseTimeTests)
  - [var hasTokenTests](#net-http-var-hasTokenTests)
  - [var testHeader](#net-http-var-testHeader)
  - [var buf](#net-http-var-buf)
  - [var got](#net-http-var-got)
  - [var valuesCount](#net-http-var-valuesCount)
  - [var cacheKeysTests](#net-http-var-cacheKeysTests)
  - [var proxy](#net-http-var-proxy)
  - [var ParseRangeTests](#net-http-var-ParseRangeTests)
  - [var noError](#net-http-var-noError)
  - [var noBodyStr](#net-http-var-noBodyStr)
  - [var noTrailer](#net-http-var-noTrailer)
  - [var reqTests](#net-http-var-reqTests)
  - [var bout](#net-http-var-bout)
  - [var badRequestTests](#net-http-var-badRequestTests)
  - [var reqWriteTests](#net-http-var-reqWriteTests)
  - [var braw](#net-http-var-braw)
  - [var praw](#net-http-var-praw)
  - [var wantErr](#net-http-var-wantErr)
  - [var buf](#net-http-var-buf)
  - [var respTests](#net-http-var-respTests)
  - [var bout](#net-http-var-bout)
  - [var readResponseCloseInMiddleTests](#net-http-var-readResponseCloseInMiddleTests)
  - [var buf](#net-http-var-buf)
  - [var wr](#net-http-var-wr)
  - [var responseLocationTests](#net-http-var-responseLocationTests)
  - [var err](#net-http-var-err)
  - [var buf](#net-http-var-buf)
  - [var buf](#net-http-var-buf)
  - [var buf1](#net-http-var-buf1)
  - [var buf2](#net-http-var-buf2)
  - [var braw](#net-http-var-braw)
  - [var _](#net-http-var-_)
  - [var actualReader](#net-http-var-actualReader)
- [Types](#net-http-type)
  - [type Client struct](#net-http-type-Client)
    - [func (c *Client) send(req *Request, deadline time.Time) (resp *Response, didTimeout func() bool, err error)](#net-http-type-Client-send)
    - [func (c *Client) deadline() time.Time](#net-http-type-Client-deadline)
    - [func (c *Client) transport() RoundTripper](#net-http-type-Client-transport)
    - [func (c *Client) Get(url string) (resp *Response, err error)](#net-http-type-Client-Get)
    - [func (c *Client) checkRedirect(req *Request, via []*Request) error](#net-http-type-Client-checkRedirect)
    - [func (c *Client) Do(req *Request) (*Response, error)](#net-http-type-Client-Do)
    - [func (c *Client) do(req *Request) (retres *Response, reterr error)](#net-http-type-Client-do)
    - [func (c *Client) makeHeadersCopier(ireq *Request) func(*Request)](#net-http-type-Client-makeHeadersCopier)
    - [func (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error)](#net-http-type-Client-Post)
    - [func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error)](#net-http-type-Client-PostForm)
    - [func (c *Client) Head(url string) (resp *Response, err error)](#net-http-type-Client-Head)
    - [func (c *Client) CloseIdleConnections()](#net-http-type-Client-CloseIdleConnections)
  - [type RoundTripper interface](#net-http-type-RoundTripper)
    - [func NewFileTransport(fs FileSystem) RoundTripper](#net-http-type-RoundTripper-NewFileTransport)
  - [type canceler interface](#net-http-type-canceler)
  - [type closeIdler interface](#net-http-type-closeIdler)
  - [type cancelTimerBody struct](#net-http-type-cancelTimerBody)
    - [func (b *cancelTimerBody) Read(p []byte) (n int, err error)](#net-http-type-cancelTimerBody-Read)
    - [func (b *cancelTimerBody) Close() error](#net-http-type-cancelTimerBody-Close)
  - [type Cookie struct](#net-http-type-Cookie)
    - [func (c *Cookie) String() string](#net-http-type-Cookie-String)
  - [type SameSite int](#net-http-type-SameSite)
  - [type fileTransport struct](#net-http-type-fileTransport)
    - [func (t fileTransport) RoundTrip(req *Request) (resp *Response, err error)](#net-http-type-fileTransport-RoundTrip)
  - [type populateResponse struct](#net-http-type-populateResponse)
    - [func newPopulateResponseWriter() (*populateResponse, <-chan *Response)](#net-http-type-populateResponse-newPopulateResponseWriter)
    - [func (pr *populateResponse) finish()](#net-http-type-populateResponse-finish)
    - [func (pr *populateResponse) sendResponse()](#net-http-type-populateResponse-sendResponse)
    - [func (pr *populateResponse) Header() Header](#net-http-type-populateResponse-Header)
    - [func (pr *populateResponse) WriteHeader(code int)](#net-http-type-populateResponse-WriteHeader)
    - [func (pr *populateResponse) Write(p []byte) (n int, err error)](#net-http-type-populateResponse-Write)
  - [type Dir string](#net-http-type-Dir)
    - [func (d Dir) Open(name string) (File, error)](#net-http-type-Dir-Open)
  - [type FileSystem interface](#net-http-type-FileSystem)
    - [func FS(fsys fs.FS) FileSystem](#net-http-type-FileSystem-FS)
  - [type File interface](#net-http-type-File)
  - [type anyDirs interface](#net-http-type-anyDirs)
  - [type fileInfoDirs []fs.FileInfo](#net-http-type-fileInfoDirs)
    - [func (d fileInfoDirs) len() int](#net-http-type-fileInfoDirs-len)
    - [func (d fileInfoDirs) isDir(i int) bool](#net-http-type-fileInfoDirs-isDir)
    - [func (d fileInfoDirs) name(i int) string](#net-http-type-fileInfoDirs-name)
  - [type dirEntryDirs []fs.DirEntry](#net-http-type-dirEntryDirs)
    - [func (d dirEntryDirs) len() int](#net-http-type-dirEntryDirs-len)
    - [func (d dirEntryDirs) isDir(i int) bool](#net-http-type-dirEntryDirs-isDir)
    - [func (d dirEntryDirs) name(i int) string](#net-http-type-dirEntryDirs-name)
  - [type condResult int](#net-http-type-condResult)
    - [func checkIfMatch(w ResponseWriter, r *Request) condResult](#net-http-type-condResult-checkIfMatch)
    - [func checkIfUnmodifiedSince(r *Request, modtime time.Time) condResult](#net-http-type-condResult-checkIfUnmodifiedSince)
    - [func checkIfNoneMatch(w ResponseWriter, r *Request) condResult](#net-http-type-condResult-checkIfNoneMatch)
    - [func checkIfModifiedSince(r *Request, modtime time.Time) condResult](#net-http-type-condResult-checkIfModifiedSince)
    - [func checkIfRange(w ResponseWriter, r *Request, modtime time.Time) condResult](#net-http-type-condResult-checkIfRange)
  - [type fileHandler struct](#net-http-type-fileHandler)
    - [func (f *fileHandler) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-fileHandler-ServeHTTP)
  - [type ioFS struct](#net-http-type-ioFS)
    - [func (f ioFS) Open(name string) (File, error)](#net-http-type-ioFS-Open)
  - [type ioFile struct](#net-http-type-ioFile)
    - [func (f ioFile) Close() error](#net-http-type-ioFile-Close)
    - [func (f ioFile) Read(b []byte) (int, error)](#net-http-type-ioFile-Read)
    - [func (f ioFile) Stat() (fs.FileInfo, error)](#net-http-type-ioFile-Stat)
    - [func (f ioFile) Seek(offset int64, whence int) (int64, error)](#net-http-type-ioFile-Seek)
    - [func (f ioFile) ReadDir(count int) ([]fs.DirEntry, error)](#net-http-type-ioFile-ReadDir)
    - [func (f ioFile) Readdir(count int) ([]fs.FileInfo, error)](#net-http-type-ioFile-Readdir)
  - [type httpRange struct](#net-http-type-httpRange)
    - [func (r httpRange) contentRange(size int64) string](#net-http-type-httpRange-contentRange)
    - [func (r httpRange) mimeHeader(contentType string, size int64) textproto.MIMEHeader](#net-http-type-httpRange-mimeHeader)
  - [type countingWriter int64](#net-http-type-countingWriter)
    - [func (w *countingWriter) Write(p []byte) (n int, err error)](#net-http-type-countingWriter-Write)
  - [type http2ClientConnPool interface](#net-http-type-http2ClientConnPool)
  - [type http2clientConnPoolIdleCloser interface](#net-http-type-http2clientConnPoolIdleCloser)
  - [type http2clientConnPool struct](#net-http-type-http2clientConnPool)
    - [func (p *http2clientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)](#net-http-type-http2clientConnPool-GetClientConn)
    - [func (p *http2clientConnPool) shouldTraceGetConn(st http2clientConnIdleState) bool](#net-http-type-http2clientConnPool-shouldTraceGetConn)
    - [func (p *http2clientConnPool) getClientConn(req *Request, addr string, dialOnMiss bool) (*http2ClientConn, error)](#net-http-type-http2clientConnPool-getClientConn)
    - [func (p *http2clientConnPool) getStartDialLocked(addr string) *http2dialCall](#net-http-type-http2clientConnPool-getStartDialLocked)
    - [func (p *http2clientConnPool) addConnIfNeeded(key string, t *http2Transport, c *tls.Conn) (used bool, err error)](#net-http-type-http2clientConnPool-addConnIfNeeded)
    - [func (p *http2clientConnPool) addConnLocked(key string, cc *http2ClientConn)](#net-http-type-http2clientConnPool-addConnLocked)
    - [func (p *http2clientConnPool) MarkDead(cc *http2ClientConn)](#net-http-type-http2clientConnPool-MarkDead)
    - [func (p *http2clientConnPool) closeIdleConnections()](#net-http-type-http2clientConnPool-closeIdleConnections)
  - [type http2dialCall struct](#net-http-type-http2dialCall)
    - [func (c *http2dialCall) dial(addr string)](#net-http-type-http2dialCall-dial)
  - [type http2addConnCall struct](#net-http-type-http2addConnCall)
    - [func (c *http2addConnCall) run(t *http2Transport, key string, tc *tls.Conn)](#net-http-type-http2addConnCall-run)
  - [type http2noDialClientConnPool struct](#net-http-type-http2noDialClientConnPool)
    - [func (p http2noDialClientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)](#net-http-type-http2noDialClientConnPool-GetClientConn)
  - [type http2dataBuffer struct](#net-http-type-http2dataBuffer)
    - [func (b *http2dataBuffer) Read(p []byte) (int, error)](#net-http-type-http2dataBuffer-Read)
    - [func (b *http2dataBuffer) bytesFromFirstChunk() []byte](#net-http-type-http2dataBuffer-bytesFromFirstChunk)
    - [func (b *http2dataBuffer) Len() int](#net-http-type-http2dataBuffer-Len)
    - [func (b *http2dataBuffer) Write(p []byte) (int, error)](#net-http-type-http2dataBuffer-Write)
    - [func (b *http2dataBuffer) lastChunkOrAlloc(want int64) []byte](#net-http-type-http2dataBuffer-lastChunkOrAlloc)
  - [type http2ErrCode uint32](#net-http-type-http2ErrCode)
    - [func (e http2ErrCode) String() string](#net-http-type-http2ErrCode-String)
  - [type http2ConnectionError http.http2ErrCode](#net-http-type-http2ConnectionError)
    - [func (e http2ConnectionError) Error() string](#net-http-type-http2ConnectionError-Error)
  - [type http2StreamError struct](#net-http-type-http2StreamError)
    - [func http2streamError(id uint32, code http2ErrCode) http2StreamError](#net-http-type-http2StreamError-http2streamError)
    - [func (e http2StreamError) Error() string](#net-http-type-http2StreamError-Error)
    - [func (se http2StreamError) writeFrame(ctx http2writeContext) error](#net-http-type-http2StreamError-writeFrame)
    - [func (se http2StreamError) staysWithinBuffer(max int) bool](#net-http-type-http2StreamError-staysWithinBuffer)
  - [type http2goAwayFlowError struct{}](#net-http-type-http2goAwayFlowError)
    - [func (http2goAwayFlowError) Error() string](#net-http-type-http2goAwayFlowError-Error)
  - [type http2connError struct](#net-http-type-http2connError)
    - [func (e http2connError) Error() string](#net-http-type-http2connError-Error)
  - [type http2pseudoHeaderError string](#net-http-type-http2pseudoHeaderError)
    - [func (e http2pseudoHeaderError) Error() string](#net-http-type-http2pseudoHeaderError-Error)
  - [type http2duplicatePseudoHeaderError string](#net-http-type-http2duplicatePseudoHeaderError)
    - [func (e http2duplicatePseudoHeaderError) Error() string](#net-http-type-http2duplicatePseudoHeaderError-Error)
  - [type http2headerFieldNameError string](#net-http-type-http2headerFieldNameError)
    - [func (e http2headerFieldNameError) Error() string](#net-http-type-http2headerFieldNameError-Error)
  - [type http2headerFieldValueError string](#net-http-type-http2headerFieldValueError)
    - [func (e http2headerFieldValueError) Error() string](#net-http-type-http2headerFieldValueError-Error)
  - [type http2flow struct](#net-http-type-http2flow)
    - [func (f *http2flow) setConnFlow(cf *http2flow)](#net-http-type-http2flow-setConnFlow)
    - [func (f *http2flow) available() int32](#net-http-type-http2flow-available)
    - [func (f *http2flow) take(n int32)](#net-http-type-http2flow-take)
    - [func (f *http2flow) add(n int32) bool](#net-http-type-http2flow-add)
  - [type http2FrameType uint8](#net-http-type-http2FrameType)
    - [func (t http2FrameType) String() string](#net-http-type-http2FrameType-String)
  - [type http2Flags uint8](#net-http-type-http2Flags)
    - [func (f http2Flags) Has(v http2Flags) bool](#net-http-type-http2Flags-Has)
  - [type http2frameParser func(fc *net/http.http2frameCache, fh net/http.http2FrameHeader, payload []byte) (net/http.http2Frame, error)](#net-http-type-http2frameParser)
    - [func http2typeFrameParser(t http2FrameType) http2frameParser](#net-http-type-http2frameParser-http2typeFrameParser)
  - [type http2FrameHeader struct](#net-http-type-http2FrameHeader)
    - [func http2ReadFrameHeader(r io.Reader) (http2FrameHeader, error)](#net-http-type-http2FrameHeader-http2ReadFrameHeader)
    - [func http2readFrameHeader(buf []byte, r io.Reader) (http2FrameHeader, error)](#net-http-type-http2FrameHeader-http2readFrameHeader)
    - [func (h http2FrameHeader) Header() http2FrameHeader](#net-http-type-http2FrameHeader-Header)
    - [func (h http2FrameHeader) String() string](#net-http-type-http2FrameHeader-String)
    - [func (h http2FrameHeader) writeDebug(buf *bytes.Buffer)](#net-http-type-http2FrameHeader-writeDebug)
    - [func (h *http2FrameHeader) checkValid()](#net-http-type-http2FrameHeader-checkValid)
    - [func (h *http2FrameHeader) invalidate()](#net-http-type-http2FrameHeader-invalidate)
  - [type http2Frame interface](#net-http-type-http2Frame)
    - [func http2parseDataFrame(fc *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseDataFrame)
    - [func http2parseSettingsFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseSettingsFrame)
    - [func http2parsePingFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parsePingFrame)
    - [func http2parseGoAwayFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseGoAwayFrame)
    - [func http2parseUnknownFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseUnknownFrame)
    - [func http2parseWindowUpdateFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseWindowUpdateFrame)
    - [func http2parseHeadersFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)](#net-http-type-http2Frame-http2parseHeadersFrame)
    - [func http2parsePriorityFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parsePriorityFrame)
    - [func http2parseRSTStreamFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseRSTStreamFrame)
    - [func http2parseContinuationFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)](#net-http-type-http2Frame-http2parseContinuationFrame)
    - [func http2parsePushPromise(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)](#net-http-type-http2Frame-http2parsePushPromise)
  - [type http2Framer struct](#net-http-type-http2Framer)
    - [func http2NewFramer(w io.Writer, r io.Reader) *http2Framer](#net-http-type-http2Framer-http2NewFramer)
    - [func (fr *http2Framer) maxHeaderListSize() uint32](#net-http-type-http2Framer-maxHeaderListSize)
    - [func (f *http2Framer) startWrite(ftype http2FrameType, flags http2Flags, streamID uint32)](#net-http-type-http2Framer-startWrite)
    - [func (f *http2Framer) endWrite() error](#net-http-type-http2Framer-endWrite)
    - [func (f *http2Framer) logWrite()](#net-http-type-http2Framer-logWrite)
    - [func (f *http2Framer) writeByte(v byte)](#net-http-type-http2Framer-writeByte)
    - [func (f *http2Framer) writeBytes(v []byte)](#net-http-type-http2Framer-writeBytes)
    - [func (f *http2Framer) writeUint16(v uint16)](#net-http-type-http2Framer-writeUint16)
    - [func (f *http2Framer) writeUint32(v uint32)](#net-http-type-http2Framer-writeUint32)
    - [func (fr *http2Framer) SetReuseFrames()](#net-http-type-http2Framer-SetReuseFrames)
    - [func (fr *http2Framer) SetMaxReadFrameSize(v uint32)](#net-http-type-http2Framer-SetMaxReadFrameSize)
    - [func (fr *http2Framer) ErrorDetail() error](#net-http-type-http2Framer-ErrorDetail)
    - [func (fr *http2Framer) ReadFrame() (http2Frame, error)](#net-http-type-http2Framer-ReadFrame)
    - [func (fr *http2Framer) connError(code http2ErrCode, reason string) error](#net-http-type-http2Framer-connError)
    - [func (fr *http2Framer) checkFrameOrder(f http2Frame) error](#net-http-type-http2Framer-checkFrameOrder)
    - [func (f *http2Framer) WriteData(streamID uint32, endStream bool, data []byte) error](#net-http-type-http2Framer-WriteData)
    - [func (f *http2Framer) WriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error](#net-http-type-http2Framer-WriteDataPadded)
    - [func (f *http2Framer) WriteSettings(settings ...http2Setting) error](#net-http-type-http2Framer-WriteSettings)
    - [func (f *http2Framer) WriteSettingsAck() error](#net-http-type-http2Framer-WriteSettingsAck)
    - [func (f *http2Framer) WritePing(ack bool, data [8]byte) error](#net-http-type-http2Framer-WritePing)
    - [func (f *http2Framer) WriteGoAway(maxStreamID uint32, code http2ErrCode, debugData []byte) error](#net-http-type-http2Framer-WriteGoAway)
    - [func (f *http2Framer) WriteWindowUpdate(streamID, incr uint32) error](#net-http-type-http2Framer-WriteWindowUpdate)
    - [func (f *http2Framer) WriteHeaders(p http2HeadersFrameParam) error](#net-http-type-http2Framer-WriteHeaders)
    - [func (f *http2Framer) WritePriority(streamID uint32, p http2PriorityParam) error](#net-http-type-http2Framer-WritePriority)
    - [func (f *http2Framer) WriteRSTStream(streamID uint32, code http2ErrCode) error](#net-http-type-http2Framer-WriteRSTStream)
    - [func (f *http2Framer) WriteContinuation(streamID uint32, endHeaders bool, headerBlockFragment []byte) error](#net-http-type-http2Framer-WriteContinuation)
    - [func (f *http2Framer) WritePushPromise(p http2PushPromiseParam) error](#net-http-type-http2Framer-WritePushPromise)
    - [func (f *http2Framer) WriteRawFrame(t http2FrameType, flags http2Flags, streamID uint32, payload []byte) error](#net-http-type-http2Framer-WriteRawFrame)
    - [func (fr *http2Framer) maxHeaderStringLen() int](#net-http-type-http2Framer-maxHeaderStringLen)
    - [func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFrame, error)](#net-http-type-http2Framer-readMetaFrame)
  - [type http2frameCache struct](#net-http-type-http2frameCache)
    - [func (fc *http2frameCache) getDataFrame() *http2DataFrame](#net-http-type-http2frameCache-getDataFrame)
  - [type http2DataFrame struct](#net-http-type-http2DataFrame)
    - [func (f *http2DataFrame) StreamEnded() bool](#net-http-type-http2DataFrame-StreamEnded)
    - [func (f *http2DataFrame) Data() []byte](#net-http-type-http2DataFrame-Data)
  - [type http2SettingsFrame struct](#net-http-type-http2SettingsFrame)
    - [func (f *http2SettingsFrame) IsAck() bool](#net-http-type-http2SettingsFrame-IsAck)
    - [func (f *http2SettingsFrame) Value(id http2SettingID) (v uint32, ok bool)](#net-http-type-http2SettingsFrame-Value)
    - [func (f *http2SettingsFrame) Setting(i int) http2Setting](#net-http-type-http2SettingsFrame-Setting)
    - [func (f *http2SettingsFrame) NumSettings() int](#net-http-type-http2SettingsFrame-NumSettings)
    - [func (f *http2SettingsFrame) HasDuplicates() bool](#net-http-type-http2SettingsFrame-HasDuplicates)
    - [func (f *http2SettingsFrame) ForeachSetting(fn func(http2Setting) error) error](#net-http-type-http2SettingsFrame-ForeachSetting)
  - [type http2PingFrame struct](#net-http-type-http2PingFrame)
    - [func (f *http2PingFrame) IsAck() bool](#net-http-type-http2PingFrame-IsAck)
  - [type http2GoAwayFrame struct](#net-http-type-http2GoAwayFrame)
    - [func (f *http2GoAwayFrame) DebugData() []byte](#net-http-type-http2GoAwayFrame-DebugData)
  - [type http2UnknownFrame struct](#net-http-type-http2UnknownFrame)
    - [func (f *http2UnknownFrame) Payload() []byte](#net-http-type-http2UnknownFrame-Payload)
  - [type http2WindowUpdateFrame struct](#net-http-type-http2WindowUpdateFrame)
  - [type http2HeadersFrame struct](#net-http-type-http2HeadersFrame)
    - [func (f *http2HeadersFrame) HeaderBlockFragment() []byte](#net-http-type-http2HeadersFrame-HeaderBlockFragment)
    - [func (f *http2HeadersFrame) HeadersEnded() bool](#net-http-type-http2HeadersFrame-HeadersEnded)
    - [func (f *http2HeadersFrame) StreamEnded() bool](#net-http-type-http2HeadersFrame-StreamEnded)
    - [func (f *http2HeadersFrame) HasPriority() bool](#net-http-type-http2HeadersFrame-HasPriority)
  - [type http2HeadersFrameParam struct](#net-http-type-http2HeadersFrameParam)
  - [type http2PriorityFrame struct](#net-http-type-http2PriorityFrame)
  - [type http2PriorityParam struct](#net-http-type-http2PriorityParam)
    - [func (p http2PriorityParam) IsZero() bool](#net-http-type-http2PriorityParam-IsZero)
  - [type http2RSTStreamFrame struct](#net-http-type-http2RSTStreamFrame)
  - [type http2ContinuationFrame struct](#net-http-type-http2ContinuationFrame)
    - [func (f *http2ContinuationFrame) HeaderBlockFragment() []byte](#net-http-type-http2ContinuationFrame-HeaderBlockFragment)
    - [func (f *http2ContinuationFrame) HeadersEnded() bool](#net-http-type-http2ContinuationFrame-HeadersEnded)
  - [type http2PushPromiseFrame struct](#net-http-type-http2PushPromiseFrame)
    - [func (f *http2PushPromiseFrame) HeaderBlockFragment() []byte](#net-http-type-http2PushPromiseFrame-HeaderBlockFragment)
    - [func (f *http2PushPromiseFrame) HeadersEnded() bool](#net-http-type-http2PushPromiseFrame-HeadersEnded)
  - [type http2PushPromiseParam struct](#net-http-type-http2PushPromiseParam)
  - [type http2streamEnder interface](#net-http-type-http2streamEnder)
  - [type http2headersEnder interface](#net-http-type-http2headersEnder)
  - [type http2headersOrContinuation interface](#net-http-type-http2headersOrContinuation)
  - [type http2MetaHeadersFrame struct](#net-http-type-http2MetaHeadersFrame)
    - [func (mh *http2MetaHeadersFrame) PseudoValue(pseudo string) string](#net-http-type-http2MetaHeadersFrame-PseudoValue)
    - [func (mh *http2MetaHeadersFrame) RegularFields() []hpack.HeaderField](#net-http-type-http2MetaHeadersFrame-RegularFields)
    - [func (mh *http2MetaHeadersFrame) PseudoFields() []hpack.HeaderField](#net-http-type-http2MetaHeadersFrame-PseudoFields)
    - [func (mh *http2MetaHeadersFrame) checkPseudos() error](#net-http-type-http2MetaHeadersFrame-checkPseudos)
  - [type http2goroutineLock uint64](#net-http-type-http2goroutineLock)
    - [func http2newGoroutineLock() http2goroutineLock](#net-http-type-http2goroutineLock-http2newGoroutineLock)
    - [func (g http2goroutineLock) check()](#net-http-type-http2goroutineLock-check)
    - [func (g http2goroutineLock) checkNotOn()](#net-http-type-http2goroutineLock-checkNotOn)
  - [type http2streamState int](#net-http-type-http2streamState)
    - [func (st http2streamState) String() string](#net-http-type-http2streamState-String)
  - [type http2Setting struct](#net-http-type-http2Setting)
    - [func (s http2Setting) String() string](#net-http-type-http2Setting-String)
    - [func (s http2Setting) Valid() error](#net-http-type-http2Setting-Valid)
  - [type http2SettingID uint16](#net-http-type-http2SettingID)
    - [func (s http2SettingID) String() string](#net-http-type-http2SettingID-String)
  - [type http2stringWriter interface](#net-http-type-http2stringWriter)
  - [type http2gate chan struct{}](#net-http-type-http2gate)
    - [func (g http2gate) Done()](#net-http-type-http2gate-Done)
    - [func (g http2gate) Wait()](#net-http-type-http2gate-Wait)
  - [type http2closeWaiter chan struct{}](#net-http-type-http2closeWaiter)
    - [func (cw *http2closeWaiter) Init()](#net-http-type-http2closeWaiter-Init)
    - [func (cw http2closeWaiter) Close()](#net-http-type-http2closeWaiter-Close)
    - [func (cw http2closeWaiter) Wait()](#net-http-type-http2closeWaiter-Wait)
  - [type http2bufferedWriter struct](#net-http-type-http2bufferedWriter)
    - [func http2newBufferedWriter(w io.Writer) *http2bufferedWriter](#net-http-type-http2bufferedWriter-http2newBufferedWriter)
    - [func (w *http2bufferedWriter) Available() int](#net-http-type-http2bufferedWriter-Available)
    - [func (w *http2bufferedWriter) Write(p []byte) (n int, err error)](#net-http-type-http2bufferedWriter-Write)
    - [func (w *http2bufferedWriter) Flush() error](#net-http-type-http2bufferedWriter-Flush)
  - [type http2httpError struct](#net-http-type-http2httpError)
    - [func (e *http2httpError) Error() string](#net-http-type-http2httpError-Error)
    - [func (e *http2httpError) Timeout() bool](#net-http-type-http2httpError-Timeout)
    - [func (e *http2httpError) Temporary() bool](#net-http-type-http2httpError-Temporary)
  - [type http2connectionStater interface](#net-http-type-http2connectionStater)
  - [type http2sorter struct](#net-http-type-http2sorter)
    - [func (s *http2sorter) Len() int](#net-http-type-http2sorter-Len)
    - [func (s *http2sorter) Swap(i, j int)](#net-http-type-http2sorter-Swap)
    - [func (s *http2sorter) Less(i, j int) bool](#net-http-type-http2sorter-Less)
    - [func (s *http2sorter) Keys(h Header) []string](#net-http-type-http2sorter-Keys)
    - [func (s *http2sorter) SortStrings(ss []string)](#net-http-type-http2sorter-SortStrings)
  - [type http2incomparable [0]func()](#net-http-type-http2incomparable)
  - [type http2pipe struct](#net-http-type-http2pipe)
    - [func (p *http2pipe) Len() int](#net-http-type-http2pipe-Len)
    - [func (p *http2pipe) Read(d []byte) (n int, err error)](#net-http-type-http2pipe-Read)
    - [func (p *http2pipe) Write(d []byte) (n int, err error)](#net-http-type-http2pipe-Write)
    - [func (p *http2pipe) CloseWithError(err error)](#net-http-type-http2pipe-CloseWithError)
    - [func (p *http2pipe) BreakWithError(err error)](#net-http-type-http2pipe-BreakWithError)
    - [func (p *http2pipe) closeWithErrorAndCode(err error, fn func())](#net-http-type-http2pipe-closeWithErrorAndCode)
    - [func (p *http2pipe) closeWithError(dst *error, err error, fn func())](#net-http-type-http2pipe-closeWithError)
    - [func (p *http2pipe) closeDoneLocked()](#net-http-type-http2pipe-closeDoneLocked)
    - [func (p *http2pipe) Err() error](#net-http-type-http2pipe-Err)
    - [func (p *http2pipe) Done() <-chan struct{}](#net-http-type-http2pipe-Done)
  - [type http2pipeBuffer interface](#net-http-type-http2pipeBuffer)
  - [type http2Server struct](#net-http-type-http2Server)
    - [func (s *http2Server) initialConnRecvWindowSize() int32](#net-http-type-http2Server-initialConnRecvWindowSize)
    - [func (s *http2Server) initialStreamRecvWindowSize() int32](#net-http-type-http2Server-initialStreamRecvWindowSize)
    - [func (s *http2Server) maxReadFrameSize() uint32](#net-http-type-http2Server-maxReadFrameSize)
    - [func (s *http2Server) maxConcurrentStreams() uint32](#net-http-type-http2Server-maxConcurrentStreams)
    - [func (s *http2Server) maxQueuedControlFrames() int](#net-http-type-http2Server-maxQueuedControlFrames)
    - [func (s *http2Server) ServeConn(c net.Conn, opts *http2ServeConnOpts)](#net-http-type-http2Server-ServeConn)
  - [type http2serverInternalState struct](#net-http-type-http2serverInternalState)
    - [func (s *http2serverInternalState) registerConn(sc *http2serverConn)](#net-http-type-http2serverInternalState-registerConn)
    - [func (s *http2serverInternalState) unregisterConn(sc *http2serverConn)](#net-http-type-http2serverInternalState-unregisterConn)
    - [func (s *http2serverInternalState) startGracefulShutdown()](#net-http-type-http2serverInternalState-startGracefulShutdown)
  - [type baseContexter interface](#net-http-type-baseContexter)
  - [type http2ServeConnOpts struct](#net-http-type-http2ServeConnOpts)
    - [func (o *http2ServeConnOpts) context() context.Context](#net-http-type-http2ServeConnOpts-context)
    - [func (o *http2ServeConnOpts) baseConfig() *Server](#net-http-type-http2ServeConnOpts-baseConfig)
    - [func (o *http2ServeConnOpts) handler() Handler](#net-http-type-http2ServeConnOpts-handler)
  - [type http2serverConn struct](#net-http-type-http2serverConn)
    - [func (sc *http2serverConn) rejectConn(err http2ErrCode, debug string)](#net-http-type-http2serverConn-rejectConn)
    - [func (sc *http2serverConn) maxHeaderListSize() uint32](#net-http-type-http2serverConn-maxHeaderListSize)
    - [func (sc *http2serverConn) curOpenStreams() uint32](#net-http-type-http2serverConn-curOpenStreams)
    - [func (sc *http2serverConn) Framer() *http2Framer](#net-http-type-http2serverConn-Framer)
    - [func (sc *http2serverConn) CloseConn() error](#net-http-type-http2serverConn-CloseConn)
    - [func (sc *http2serverConn) Flush() error](#net-http-type-http2serverConn-Flush)
    - [func (sc *http2serverConn) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)](#net-http-type-http2serverConn-HeaderEncoder)
    - [func (sc *http2serverConn) state(streamID uint32) (http2streamState, *http2stream)](#net-http-type-http2serverConn-state)
    - [func (sc *http2serverConn) setConnState(state ConnState)](#net-http-type-http2serverConn-setConnState)
    - [func (sc *http2serverConn) vlogf(format string, args ...interface{})](#net-http-type-http2serverConn-vlogf)
    - [func (sc *http2serverConn) logf(format string, args ...interface{})](#net-http-type-http2serverConn-logf)
    - [func (sc *http2serverConn) condlogf(err error, format string, args ...interface{})](#net-http-type-http2serverConn-condlogf)
    - [func (sc *http2serverConn) canonicalHeader(v string) string](#net-http-type-http2serverConn-canonicalHeader)
    - [func (sc *http2serverConn) readFrames()](#net-http-type-http2serverConn-readFrames)
    - [func (sc *http2serverConn) writeFrameAsync(wr http2FrameWriteRequest)](#net-http-type-http2serverConn-writeFrameAsync)
    - [func (sc *http2serverConn) closeAllStreamsOnConnClose()](#net-http-type-http2serverConn-closeAllStreamsOnConnClose)
    - [func (sc *http2serverConn) stopShutdownTimer()](#net-http-type-http2serverConn-stopShutdownTimer)
    - [func (sc *http2serverConn) notePanic()](#net-http-type-http2serverConn-notePanic)
    - [func (sc *http2serverConn) serve()](#net-http-type-http2serverConn-serve)
    - [func (sc *http2serverConn) awaitGracefulShutdown(sharedCh <-chan struct{}, privateCh chan struct{})](#net-http-type-http2serverConn-awaitGracefulShutdown)
    - [func (sc *http2serverConn) onSettingsTimer()](#net-http-type-http2serverConn-onSettingsTimer)
    - [func (sc *http2serverConn) onIdleTimer()](#net-http-type-http2serverConn-onIdleTimer)
    - [func (sc *http2serverConn) onShutdownTimer()](#net-http-type-http2serverConn-onShutdownTimer)
    - [func (sc *http2serverConn) sendServeMsg(msg interface{})](#net-http-type-http2serverConn-sendServeMsg)
    - [func (sc *http2serverConn) readPreface() error](#net-http-type-http2serverConn-readPreface)
    - [func (sc *http2serverConn) writeDataFromHandler(stream *http2stream, data []byte, endStream bool) error](#net-http-type-http2serverConn-writeDataFromHandler)
    - [func (sc *http2serverConn) writeFrameFromHandler(wr http2FrameWriteRequest) error](#net-http-type-http2serverConn-writeFrameFromHandler)
    - [func (sc *http2serverConn) writeFrame(wr http2FrameWriteRequest)](#net-http-type-http2serverConn-writeFrame)
    - [func (sc *http2serverConn) startFrameWrite(wr http2FrameWriteRequest)](#net-http-type-http2serverConn-startFrameWrite)
    - [func (sc *http2serverConn) wroteFrame(res http2frameWriteResult)](#net-http-type-http2serverConn-wroteFrame)
    - [func (sc *http2serverConn) scheduleFrameWrite()](#net-http-type-http2serverConn-scheduleFrameWrite)
    - [func (sc *http2serverConn) startGracefulShutdown()](#net-http-type-http2serverConn-startGracefulShutdown)
    - [func (sc *http2serverConn) startGracefulShutdownInternal()](#net-http-type-http2serverConn-startGracefulShutdownInternal)
    - [func (sc *http2serverConn) goAway(code http2ErrCode)](#net-http-type-http2serverConn-goAway)
    - [func (sc *http2serverConn) shutDownIn(d time.Duration)](#net-http-type-http2serverConn-shutDownIn)
    - [func (sc *http2serverConn) resetStream(se http2StreamError)](#net-http-type-http2serverConn-resetStream)
    - [func (sc *http2serverConn) processFrameFromReader(res http2readFrameResult) bool](#net-http-type-http2serverConn-processFrameFromReader)
    - [func (sc *http2serverConn) processFrame(f http2Frame) error](#net-http-type-http2serverConn-processFrame)
    - [func (sc *http2serverConn) processPing(f *http2PingFrame) error](#net-http-type-http2serverConn-processPing)
    - [func (sc *http2serverConn) processWindowUpdate(f *http2WindowUpdateFrame) error](#net-http-type-http2serverConn-processWindowUpdate)
    - [func (sc *http2serverConn) processResetStream(f *http2RSTStreamFrame) error](#net-http-type-http2serverConn-processResetStream)
    - [func (sc *http2serverConn) closeStream(st *http2stream, err error)](#net-http-type-http2serverConn-closeStream)
    - [func (sc *http2serverConn) processSettings(f *http2SettingsFrame) error](#net-http-type-http2serverConn-processSettings)
    - [func (sc *http2serverConn) processSetting(s http2Setting) error](#net-http-type-http2serverConn-processSetting)
    - [func (sc *http2serverConn) processSettingInitialWindowSize(val uint32) error](#net-http-type-http2serverConn-processSettingInitialWindowSize)
    - [func (sc *http2serverConn) processData(f *http2DataFrame) error](#net-http-type-http2serverConn-processData)
    - [func (sc *http2serverConn) processGoAway(f *http2GoAwayFrame) error](#net-http-type-http2serverConn-processGoAway)
    - [func (sc *http2serverConn) processHeaders(f *http2MetaHeadersFrame) error](#net-http-type-http2serverConn-processHeaders)
    - [func (sc *http2serverConn) processPriority(f *http2PriorityFrame) error](#net-http-type-http2serverConn-processPriority)
    - [func (sc *http2serverConn) newStream(id, pusherID uint32, state http2streamState) *http2stream](#net-http-type-http2serverConn-newStream)
    - [func (sc *http2serverConn) newWriterAndRequest(st *http2stream, f *http2MetaHeadersFrame) (*http2responseWriter, *Request, error)](#net-http-type-http2serverConn-newWriterAndRequest)
    - [func (sc *http2serverConn) newWriterAndRequestNoBody(st *http2stream, rp http2requestParam) (*http2responseWriter, *Request, error)](#net-http-type-http2serverConn-newWriterAndRequestNoBody)
    - [func (sc *http2serverConn) runHandler(rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request))](#net-http-type-http2serverConn-runHandler)
    - [func (sc *http2serverConn) writeHeaders(st *http2stream, headerData *http2writeResHeaders) error](#net-http-type-http2serverConn-writeHeaders)
    - [func (sc *http2serverConn) write100ContinueHeaders(st *http2stream)](#net-http-type-http2serverConn-write100ContinueHeaders)
    - [func (sc *http2serverConn) noteBodyReadFromHandler(st *http2stream, n int, err error)](#net-http-type-http2serverConn-noteBodyReadFromHandler)
    - [func (sc *http2serverConn) noteBodyRead(st *http2stream, n int)](#net-http-type-http2serverConn-noteBodyRead)
    - [func (sc *http2serverConn) sendWindowUpdate(st *http2stream, n int)](#net-http-type-http2serverConn-sendWindowUpdate)
    - [func (sc *http2serverConn) sendWindowUpdate32(st *http2stream, n int32)](#net-http-type-http2serverConn-sendWindowUpdate32)
    - [func (sc *http2serverConn) startPush(msg *http2startPushRequest)](#net-http-type-http2serverConn-startPush)
  - [type http2stream struct](#net-http-type-http2stream)
    - [func (st *http2stream) isPushed() bool](#net-http-type-http2stream-isPushed)
    - [func (st *http2stream) endStream()](#net-http-type-http2stream-endStream)
    - [func (st *http2stream) copyTrailersToHandlerRequest()](#net-http-type-http2stream-copyTrailersToHandlerRequest)
    - [func (st *http2stream) onWriteTimeout()](#net-http-type-http2stream-onWriteTimeout)
    - [func (st *http2stream) processTrailerHeaders(f *http2MetaHeadersFrame) error](#net-http-type-http2stream-processTrailerHeaders)
  - [type http2readFrameResult struct](#net-http-type-http2readFrameResult)
  - [type http2frameWriteResult struct](#net-http-type-http2frameWriteResult)
  - [type http2serverMessage int](#net-http-type-http2serverMessage)
  - [type http2requestParam struct](#net-http-type-http2requestParam)
  - [type http2bodyReadMsg struct](#net-http-type-http2bodyReadMsg)
  - [type http2requestBody struct](#net-http-type-http2requestBody)
    - [func (b *http2requestBody) Close() error](#net-http-type-http2requestBody-Close)
    - [func (b *http2requestBody) Read(p []byte) (n int, err error)](#net-http-type-http2requestBody-Read)
  - [type http2responseWriter struct](#net-http-type-http2responseWriter)
    - [func (w *http2responseWriter) Flush()](#net-http-type-http2responseWriter-Flush)
    - [func (w *http2responseWriter) CloseNotify() <-chan bool](#net-http-type-http2responseWriter-CloseNotify)
    - [func (w *http2responseWriter) Header() Header](#net-http-type-http2responseWriter-Header)
    - [func (w *http2responseWriter) WriteHeader(code int)](#net-http-type-http2responseWriter-WriteHeader)
    - [func (w *http2responseWriter) Write(p []byte) (n int, err error)](#net-http-type-http2responseWriter-Write)
    - [func (w *http2responseWriter) WriteString(s string) (n int, err error)](#net-http-type-http2responseWriter-WriteString)
    - [func (w *http2responseWriter) write(lenData int, dataB []byte, dataS string) (n int, err error)](#net-http-type-http2responseWriter-write)
    - [func (w *http2responseWriter) handlerDone()](#net-http-type-http2responseWriter-handlerDone)
    - [func (w *http2responseWriter) Push(target string, opts *PushOptions) error](#net-http-type-http2responseWriter-Push)
  - [type http2responseWriterState struct](#net-http-type-http2responseWriterState)
    - [func (rws *http2responseWriterState) hasTrailers() bool](#net-http-type-http2responseWriterState-hasTrailers)
    - [func (rws *http2responseWriterState) hasNonemptyTrailers() bool](#net-http-type-http2responseWriterState-hasNonemptyTrailers)
    - [func (rws *http2responseWriterState) declareTrailer(k string)](#net-http-type-http2responseWriterState-declareTrailer)
    - [func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error)](#net-http-type-http2responseWriterState-writeChunk)
    - [func (rws *http2responseWriterState) promoteUndeclaredTrailers()](#net-http-type-http2responseWriterState-promoteUndeclaredTrailers)
    - [func (rws *http2responseWriterState) writeHeader(code int)](#net-http-type-http2responseWriterState-writeHeader)
  - [type http2chunkWriter struct](#net-http-type-http2chunkWriter)
    - [func (cw http2chunkWriter) Write(p []byte) (n int, err error)](#net-http-type-http2chunkWriter-Write)
  - [type http2startPushRequest struct](#net-http-type-http2startPushRequest)
  - [type I interface](#net-http-type-I)
  - [type http2Transport struct](#net-http-type-http2Transport)
    - [func http2ConfigureTransports(t1 *Transport) (*http2Transport, error)](#net-http-type-http2Transport-http2ConfigureTransports)
    - [func http2configureTransports(t1 *Transport) (*http2Transport, error)](#net-http-type-http2Transport-http2configureTransports)
    - [func (t *http2Transport) maxHeaderListSize() uint32](#net-http-type-http2Transport-maxHeaderListSize)
    - [func (t *http2Transport) disableCompression() bool](#net-http-type-http2Transport-disableCompression)
    - [func (t *http2Transport) pingTimeout() time.Duration](#net-http-type-http2Transport-pingTimeout)
    - [func (t *http2Transport) connPool() http2ClientConnPool](#net-http-type-http2Transport-connPool)
    - [func (t *http2Transport) initConnPool()](#net-http-type-http2Transport-initConnPool)
    - [func (t *http2Transport) RoundTrip(req *Request) (*Response, error)](#net-http-type-http2Transport-RoundTrip)
    - [func (t *http2Transport) RoundTripOpt(req *Request, opt http2RoundTripOpt) (*Response, error)](#net-http-type-http2Transport-RoundTripOpt)
    - [func (t *http2Transport) CloseIdleConnections()](#net-http-type-http2Transport-CloseIdleConnections)
    - [func (t *http2Transport) dialClientConn(addr string, singleUse bool) (*http2ClientConn, error)](#net-http-type-http2Transport-dialClientConn)
    - [func (t *http2Transport) newTLSConfig(host string) *tls.Config](#net-http-type-http2Transport-newTLSConfig)
    - [func (t *http2Transport) dialTLS() func(string, string, *tls.Config) (net.Conn, error)](#net-http-type-http2Transport-dialTLS)
    - [func (t *http2Transport) dialTLSDefault(network, addr string, cfg *tls.Config) (net.Conn, error)](#net-http-type-http2Transport-dialTLSDefault)
    - [func (t *http2Transport) disableKeepAlives() bool](#net-http-type-http2Transport-disableKeepAlives)
    - [func (t *http2Transport) expectContinueTimeout() time.Duration](#net-http-type-http2Transport-expectContinueTimeout)
    - [func (t *http2Transport) NewClientConn(c net.Conn) (*http2ClientConn, error)](#net-http-type-http2Transport-NewClientConn)
    - [func (t *http2Transport) newClientConn(c net.Conn, singleUse bool) (*http2ClientConn, error)](#net-http-type-http2Transport-newClientConn)
    - [func (t *http2Transport) vlogf(format string, args ...interface{})](#net-http-type-http2Transport-vlogf)
    - [func (t *http2Transport) logf(format string, args ...interface{})](#net-http-type-http2Transport-logf)
    - [func (t *http2Transport) getBodyWriterState(cs *http2clientStream, body io.Reader) (s http2bodyWriterState)](#net-http-type-http2Transport-getBodyWriterState)
    - [func (t *http2Transport) idleConnTimeout() time.Duration](#net-http-type-http2Transport-idleConnTimeout)
  - [type http2ClientConn struct](#net-http-type-http2ClientConn)
    - [func (cc *http2ClientConn) healthCheck()](#net-http-type-http2ClientConn-healthCheck)
    - [func (cc *http2ClientConn) setGoAway(f *http2GoAwayFrame)](#net-http-type-http2ClientConn-setGoAway)
    - [func (cc *http2ClientConn) CanTakeNewRequest() bool](#net-http-type-http2ClientConn-CanTakeNewRequest)
    - [func (cc *http2ClientConn) idleState() http2clientConnIdleState](#net-http-type-http2ClientConn-idleState)
    - [func (cc *http2ClientConn) idleStateLocked() (st http2clientConnIdleState)](#net-http-type-http2ClientConn-idleStateLocked)
    - [func (cc *http2ClientConn) canTakeNewRequestLocked() bool](#net-http-type-http2ClientConn-canTakeNewRequestLocked)
    - [func (cc *http2ClientConn) tooIdleLocked() bool](#net-http-type-http2ClientConn-tooIdleLocked)
    - [func (cc *http2ClientConn) onIdleTimeout()](#net-http-type-http2ClientConn-onIdleTimeout)
    - [func (cc *http2ClientConn) closeIfIdle()](#net-http-type-http2ClientConn-closeIfIdle)
    - [func (cc *http2ClientConn) Shutdown(ctx context.Context) error](#net-http-type-http2ClientConn-Shutdown)
    - [func (cc *http2ClientConn) sendGoAway() error](#net-http-type-http2ClientConn-sendGoAway)
    - [func (cc *http2ClientConn) closeForError(err error) error](#net-http-type-http2ClientConn-closeForError)
    - [func (cc *http2ClientConn) Close() error](#net-http-type-http2ClientConn-Close)
    - [func (cc *http2ClientConn) closeForLostPing() error](#net-http-type-http2ClientConn-closeForLostPing)
    - [func (cc *http2ClientConn) frameScratchBuffer() []byte](#net-http-type-http2ClientConn-frameScratchBuffer)
    - [func (cc *http2ClientConn) putFrameScratchBuffer(buf []byte)](#net-http-type-http2ClientConn-putFrameScratchBuffer)
    - [func (cc *http2ClientConn) responseHeaderTimeout() time.Duration](#net-http-type-http2ClientConn-responseHeaderTimeout)
    - [func (cc *http2ClientConn) RoundTrip(req *Request) (*Response, error)](#net-http-type-http2ClientConn-RoundTrip)
    - [func (cc *http2ClientConn) roundTrip(req *Request) (res *Response, gotErrAfterReqBodyWrite bool, err error)](#net-http-type-http2ClientConn-roundTrip)
    - [func (cc *http2ClientConn) awaitOpenSlotForRequest(req *Request) error](#net-http-type-http2ClientConn-awaitOpenSlotForRequest)
    - [func (cc *http2ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize int, hdrs []byte) error](#net-http-type-http2ClientConn-writeHeaders)
    - [func (cc *http2ClientConn) encodeHeaders(req *Request, addGzipHeader bool, trailers string, contentLength int64) ([]byte, error)](#net-http-type-http2ClientConn-encodeHeaders)
    - [func (cc *http2ClientConn) encodeTrailers(req *Request) ([]byte, error)](#net-http-type-http2ClientConn-encodeTrailers)
    - [func (cc *http2ClientConn) writeHeader(name, value string)](#net-http-type-http2ClientConn-writeHeader)
    - [func (cc *http2ClientConn) newStream() *http2clientStream](#net-http-type-http2ClientConn-newStream)
    - [func (cc *http2ClientConn) forgetStreamID(id uint32)](#net-http-type-http2ClientConn-forgetStreamID)
    - [func (cc *http2ClientConn) streamByID(id uint32, andRemove bool) *http2clientStream](#net-http-type-http2ClientConn-streamByID)
    - [func (cc *http2ClientConn) readLoop()](#net-http-type-http2ClientConn-readLoop)
    - [func (cc *http2ClientConn) Ping(ctx context.Context) error](#net-http-type-http2ClientConn-Ping)
    - [func (cc *http2ClientConn) writeStreamReset(streamID uint32, code http2ErrCode, err error)](#net-http-type-http2ClientConn-writeStreamReset)
    - [func (cc *http2ClientConn) logf(format string, args ...interface{})](#net-http-type-http2ClientConn-logf)
    - [func (cc *http2ClientConn) vlogf(format string, args ...interface{})](#net-http-type-http2ClientConn-vlogf)
  - [type http2clientStream struct](#net-http-type-http2clientStream)
    - [func (cs *http2clientStream) get1xxTraceFunc() func(int, textproto.MIMEHeader) error](#net-http-type-http2clientStream-get1xxTraceFunc)
    - [func (cs *http2clientStream) awaitRequestCancel(req *Request)](#net-http-type-http2clientStream-awaitRequestCancel)
    - [func (cs *http2clientStream) cancelStream()](#net-http-type-http2clientStream-cancelStream)
    - [func (cs *http2clientStream) checkResetOrDone() error](#net-http-type-http2clientStream-checkResetOrDone)
    - [func (cs *http2clientStream) getStartedWrite() bool](#net-http-type-http2clientStream-getStartedWrite)
    - [func (cs *http2clientStream) abortRequestBodyWrite(err error)](#net-http-type-http2clientStream-abortRequestBodyWrite)
    - [func (cs *http2clientStream) writeRequestBody(body io.Reader, bodyCloser io.Closer) (err error)](#net-http-type-http2clientStream-writeRequestBody)
    - [func (cs *http2clientStream) awaitFlowControl(maxBytes int) (taken int32, err error)](#net-http-type-http2clientStream-awaitFlowControl)
    - [func (cs *http2clientStream) copyTrailers()](#net-http-type-http2clientStream-copyTrailers)
  - [type http2stickyErrWriter struct](#net-http-type-http2stickyErrWriter)
    - [func (sew http2stickyErrWriter) Write(p []byte) (n int, err error)](#net-http-type-http2stickyErrWriter-Write)
  - [type http2noCachedConnError struct{}](#net-http-type-http2noCachedConnError)
    - [func (http2noCachedConnError) IsHTTP2NoCachedConnError()](#net-http-type-http2noCachedConnError-IsHTTP2NoCachedConnError)
    - [func (http2noCachedConnError) Error() string](#net-http-type-http2noCachedConnError-Error)
  - [type http2RoundTripOpt struct](#net-http-type-http2RoundTripOpt)
  - [type http2clientConnIdleState struct](#net-http-type-http2clientConnIdleState)
  - [type http2resAndError struct](#net-http-type-http2resAndError)
  - [type http2clientConnReadLoop struct](#net-http-type-http2clientConnReadLoop)
    - [func (rl *http2clientConnReadLoop) cleanup()](#net-http-type-http2clientConnReadLoop-cleanup)
    - [func (rl *http2clientConnReadLoop) run() error](#net-http-type-http2clientConnReadLoop-run)
    - [func (rl *http2clientConnReadLoop) processHeaders(f *http2MetaHeadersFrame) error](#net-http-type-http2clientConnReadLoop-processHeaders)
    - [func (rl *http2clientConnReadLoop) handleResponse(cs *http2clientStream, f *http2MetaHeadersFrame) (*Response, error)](#net-http-type-http2clientConnReadLoop-handleResponse)
    - [func (rl *http2clientConnReadLoop) processTrailers(cs *http2clientStream, f *http2MetaHeadersFrame) error](#net-http-type-http2clientConnReadLoop-processTrailers)
    - [func (rl *http2clientConnReadLoop) processData(f *http2DataFrame) error](#net-http-type-http2clientConnReadLoop-processData)
    - [func (rl *http2clientConnReadLoop) endStream(cs *http2clientStream)](#net-http-type-http2clientConnReadLoop-endStream)
    - [func (rl *http2clientConnReadLoop) endStreamError(cs *http2clientStream, err error)](#net-http-type-http2clientConnReadLoop-endStreamError)
    - [func (rl *http2clientConnReadLoop) processGoAway(f *http2GoAwayFrame) error](#net-http-type-http2clientConnReadLoop-processGoAway)
    - [func (rl *http2clientConnReadLoop) processSettings(f *http2SettingsFrame) error](#net-http-type-http2clientConnReadLoop-processSettings)
    - [func (rl *http2clientConnReadLoop) processWindowUpdate(f *http2WindowUpdateFrame) error](#net-http-type-http2clientConnReadLoop-processWindowUpdate)
    - [func (rl *http2clientConnReadLoop) processResetStream(f *http2RSTStreamFrame) error](#net-http-type-http2clientConnReadLoop-processResetStream)
    - [func (rl *http2clientConnReadLoop) processPing(f *http2PingFrame) error](#net-http-type-http2clientConnReadLoop-processPing)
    - [func (rl *http2clientConnReadLoop) processPushPromise(f *http2PushPromiseFrame) error](#net-http-type-http2clientConnReadLoop-processPushPromise)
  - [type http2GoAwayError struct](#net-http-type-http2GoAwayError)
    - [func (e http2GoAwayError) Error() string](#net-http-type-http2GoAwayError-Error)
  - [type http2transportResponseBody struct](#net-http-type-http2transportResponseBody)
    - [func (b http2transportResponseBody) Read(p []byte) (n int, err error)](#net-http-type-http2transportResponseBody-Read)
    - [func (b http2transportResponseBody) Close() error](#net-http-type-http2transportResponseBody-Close)
  - [type http2erringRoundTripper struct](#net-http-type-http2erringRoundTripper)
    - [func (rt http2erringRoundTripper) RoundTripErr() error](#net-http-type-http2erringRoundTripper-RoundTripErr)
    - [func (rt http2erringRoundTripper) RoundTrip(*Request) (*Response, error)](#net-http-type-http2erringRoundTripper-RoundTrip)
  - [type http2gzipReader struct](#net-http-type-http2gzipReader)
    - [func (gz *http2gzipReader) Read(p []byte) (n int, err error)](#net-http-type-http2gzipReader-Read)
    - [func (gz *http2gzipReader) Close() error](#net-http-type-http2gzipReader-Close)
  - [type http2errorReader struct](#net-http-type-http2errorReader)
    - [func (r http2errorReader) Read(p []byte) (int, error)](#net-http-type-http2errorReader-Read)
  - [type http2bodyWriterState struct](#net-http-type-http2bodyWriterState)
    - [func (s http2bodyWriterState) cancel()](#net-http-type-http2bodyWriterState-cancel)
    - [func (s http2bodyWriterState) on100()](#net-http-type-http2bodyWriterState-on100)
    - [func (s http2bodyWriterState) scheduleBodyWrite()](#net-http-type-http2bodyWriterState-scheduleBodyWrite)
  - [type http2noDialH2RoundTripper struct](#net-http-type-http2noDialH2RoundTripper)
    - [func (rt http2noDialH2RoundTripper) RoundTrip(req *Request) (*Response, error)](#net-http-type-http2noDialH2RoundTripper-RoundTrip)
  - [type http2writeFramer interface](#net-http-type-http2writeFramer)
  - [type http2writeContext interface](#net-http-type-http2writeContext)
  - [type http2flushFrameWriter struct{}](#net-http-type-http2flushFrameWriter)
    - [func (http2flushFrameWriter) writeFrame(ctx http2writeContext) error](#net-http-type-http2flushFrameWriter-writeFrame)
    - [func (http2flushFrameWriter) staysWithinBuffer(max int) bool](#net-http-type-http2flushFrameWriter-staysWithinBuffer)
  - [type http2writeSettings []http.http2Setting](#net-http-type-http2writeSettings)
    - [func (s http2writeSettings) staysWithinBuffer(max int) bool](#net-http-type-http2writeSettings-staysWithinBuffer)
    - [func (s http2writeSettings) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeSettings-writeFrame)
  - [type http2writeGoAway struct](#net-http-type-http2writeGoAway)
    - [func (p *http2writeGoAway) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeGoAway-writeFrame)
    - [func (*http2writeGoAway) staysWithinBuffer(max int) bool](#net-http-type-http2writeGoAway-staysWithinBuffer)
  - [type http2writeData struct](#net-http-type-http2writeData)
    - [func (w *http2writeData) String() string](#net-http-type-http2writeData-String)
    - [func (w *http2writeData) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeData-writeFrame)
    - [func (w *http2writeData) staysWithinBuffer(max int) bool](#net-http-type-http2writeData-staysWithinBuffer)
  - [type http2handlerPanicRST struct](#net-http-type-http2handlerPanicRST)
    - [func (hp http2handlerPanicRST) writeFrame(ctx http2writeContext) error](#net-http-type-http2handlerPanicRST-writeFrame)
    - [func (hp http2handlerPanicRST) staysWithinBuffer(max int) bool](#net-http-type-http2handlerPanicRST-staysWithinBuffer)
  - [type http2writePingAck struct](#net-http-type-http2writePingAck)
    - [func (w http2writePingAck) writeFrame(ctx http2writeContext) error](#net-http-type-http2writePingAck-writeFrame)
    - [func (w http2writePingAck) staysWithinBuffer(max int) bool](#net-http-type-http2writePingAck-staysWithinBuffer)
  - [type http2writeSettingsAck struct{}](#net-http-type-http2writeSettingsAck)
    - [func (http2writeSettingsAck) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeSettingsAck-writeFrame)
    - [func (http2writeSettingsAck) staysWithinBuffer(max int) bool](#net-http-type-http2writeSettingsAck-staysWithinBuffer)
  - [type http2writeResHeaders struct](#net-http-type-http2writeResHeaders)
    - [func (w *http2writeResHeaders) staysWithinBuffer(max int) bool](#net-http-type-http2writeResHeaders-staysWithinBuffer)
    - [func (w *http2writeResHeaders) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeResHeaders-writeFrame)
    - [func (w *http2writeResHeaders) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error](#net-http-type-http2writeResHeaders-writeHeaderBlock)
  - [type http2writePushPromise struct](#net-http-type-http2writePushPromise)
    - [func (w *http2writePushPromise) staysWithinBuffer(max int) bool](#net-http-type-http2writePushPromise-staysWithinBuffer)
    - [func (w *http2writePushPromise) writeFrame(ctx http2writeContext) error](#net-http-type-http2writePushPromise-writeFrame)
    - [func (w *http2writePushPromise) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error](#net-http-type-http2writePushPromise-writeHeaderBlock)
  - [type http2write100ContinueHeadersFrame struct](#net-http-type-http2write100ContinueHeadersFrame)
    - [func (w http2write100ContinueHeadersFrame) writeFrame(ctx http2writeContext) error](#net-http-type-http2write100ContinueHeadersFrame-writeFrame)
    - [func (w http2write100ContinueHeadersFrame) staysWithinBuffer(max int) bool](#net-http-type-http2write100ContinueHeadersFrame-staysWithinBuffer)
  - [type http2writeWindowUpdate struct](#net-http-type-http2writeWindowUpdate)
    - [func (wu http2writeWindowUpdate) staysWithinBuffer(max int) bool](#net-http-type-http2writeWindowUpdate-staysWithinBuffer)
    - [func (wu http2writeWindowUpdate) writeFrame(ctx http2writeContext) error](#net-http-type-http2writeWindowUpdate-writeFrame)
  - [type http2WriteScheduler interface](#net-http-type-http2WriteScheduler)
    - [func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler](#net-http-type-http2WriteScheduler-http2NewPriorityWriteScheduler)
    - [func http2NewRandomWriteScheduler() http2WriteScheduler](#net-http-type-http2WriteScheduler-http2NewRandomWriteScheduler)
  - [type http2OpenStreamOptions struct](#net-http-type-http2OpenStreamOptions)
  - [type http2FrameWriteRequest struct](#net-http-type-http2FrameWriteRequest)
    - [func (wr http2FrameWriteRequest) StreamID() uint32](#net-http-type-http2FrameWriteRequest-StreamID)
    - [func (wr http2FrameWriteRequest) isControl() bool](#net-http-type-http2FrameWriteRequest-isControl)
    - [func (wr http2FrameWriteRequest) DataSize() int](#net-http-type-http2FrameWriteRequest-DataSize)
    - [func (wr http2FrameWriteRequest) Consume(n int32) (http2FrameWriteRequest, http2FrameWriteRequest, int)](#net-http-type-http2FrameWriteRequest-Consume)
    - [func (wr http2FrameWriteRequest) String() string](#net-http-type-http2FrameWriteRequest-String)
    - [func (wr *http2FrameWriteRequest) replyToWriter(err error)](#net-http-type-http2FrameWriteRequest-replyToWriter)
  - [type http2writeQueue struct](#net-http-type-http2writeQueue)
    - [func (q *http2writeQueue) empty() bool](#net-http-type-http2writeQueue-empty)
    - [func (q *http2writeQueue) push(wr http2FrameWriteRequest)](#net-http-type-http2writeQueue-push)
    - [func (q *http2writeQueue) shift() http2FrameWriteRequest](#net-http-type-http2writeQueue-shift)
    - [func (q *http2writeQueue) consume(n int32) (http2FrameWriteRequest, bool)](#net-http-type-http2writeQueue-consume)
  - [type http2writeQueuePool []*http.http2writeQueue](#net-http-type-http2writeQueuePool)
    - [func (p *http2writeQueuePool) put(q *http2writeQueue)](#net-http-type-http2writeQueuePool-put)
    - [func (p *http2writeQueuePool) get() *http2writeQueue](#net-http-type-http2writeQueuePool-get)
  - [type http2PriorityWriteSchedulerConfig struct](#net-http-type-http2PriorityWriteSchedulerConfig)
  - [type http2priorityNodeState int](#net-http-type-http2priorityNodeState)
  - [type http2priorityNode struct](#net-http-type-http2priorityNode)
    - [func (n *http2priorityNode) setParent(parent *http2priorityNode)](#net-http-type-http2priorityNode-setParent)
    - [func (n *http2priorityNode) addBytes(b int64)](#net-http-type-http2priorityNode-addBytes)
    - [func (n *http2priorityNode) walkReadyInOrder(openParent bool, tmp *[]*http2priorityNode, f func(*http2priorityNode, bool) bool) bool](#net-http-type-http2priorityNode-walkReadyInOrder)
  - [type http2sortPriorityNodeSiblings []*http.http2priorityNode](#net-http-type-http2sortPriorityNodeSiblings)
    - [func (z http2sortPriorityNodeSiblings) Len() int](#net-http-type-http2sortPriorityNodeSiblings-Len)
    - [func (z http2sortPriorityNodeSiblings) Swap(i, k int)](#net-http-type-http2sortPriorityNodeSiblings-Swap)
    - [func (z http2sortPriorityNodeSiblings) Less(i, k int) bool](#net-http-type-http2sortPriorityNodeSiblings-Less)
  - [type http2priorityWriteScheduler struct](#net-http-type-http2priorityWriteScheduler)
    - [func (ws *http2priorityWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)](#net-http-type-http2priorityWriteScheduler-OpenStream)
    - [func (ws *http2priorityWriteScheduler) CloseStream(streamID uint32)](#net-http-type-http2priorityWriteScheduler-CloseStream)
    - [func (ws *http2priorityWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)](#net-http-type-http2priorityWriteScheduler-AdjustStream)
    - [func (ws *http2priorityWriteScheduler) Push(wr http2FrameWriteRequest)](#net-http-type-http2priorityWriteScheduler-Push)
    - [func (ws *http2priorityWriteScheduler) Pop() (wr http2FrameWriteRequest, ok bool)](#net-http-type-http2priorityWriteScheduler-Pop)
    - [func (ws *http2priorityWriteScheduler) addClosedOrIdleNode(list *[]*http2priorityNode, maxSize int, n *http2priorityNode)](#net-http-type-http2priorityWriteScheduler-addClosedOrIdleNode)
    - [func (ws *http2priorityWriteScheduler) removeNode(n *http2priorityNode)](#net-http-type-http2priorityWriteScheduler-removeNode)
  - [type http2randomWriteScheduler struct](#net-http-type-http2randomWriteScheduler)
    - [func (ws *http2randomWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)](#net-http-type-http2randomWriteScheduler-OpenStream)
    - [func (ws *http2randomWriteScheduler) CloseStream(streamID uint32)](#net-http-type-http2randomWriteScheduler-CloseStream)
    - [func (ws *http2randomWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)](#net-http-type-http2randomWriteScheduler-AdjustStream)
    - [func (ws *http2randomWriteScheduler) Push(wr http2FrameWriteRequest)](#net-http-type-http2randomWriteScheduler-Push)
    - [func (ws *http2randomWriteScheduler) Pop() (http2FrameWriteRequest, bool)](#net-http-type-http2randomWriteScheduler-Pop)
  - [type Header map[string][]string](#net-http-type-Header)
    - [func cloneOrMakeHeader(hdr Header) Header](#net-http-type-Header-cloneOrMakeHeader)
    - [func http2cloneHeader(h Header) Header](#net-http-type-Header-http2cloneHeader)
    - [func fixTrailer(header Header, chunked bool) (Header, error)](#net-http-type-Header-fixTrailer)
    - [func (h Header) Add(key, value string)](#net-http-type-Header-Add)
    - [func (h Header) Set(key, value string)](#net-http-type-Header-Set)
    - [func (h Header) Get(key string) string](#net-http-type-Header-Get)
    - [func (h Header) Values(key string) []string](#net-http-type-Header-Values)
    - [func (h Header) get(key string) string](#net-http-type-Header-get)
    - [func (h Header) has(key string) bool](#net-http-type-Header-has)
    - [func (h Header) Del(key string)](#net-http-type-Header-Del)
    - [func (h Header) Write(w io.Writer) error](#net-http-type-Header-Write)
    - [func (h Header) write(w io.Writer, trace *httptrace.ClientTrace) error](#net-http-type-Header-write)
    - [func (h Header) Clone() Header](#net-http-type-Header-Clone)
    - [func (h Header) sortedKeyValues(exclude map[string]bool) (kvs []keyValues, hs *headerSorter)](#net-http-type-Header-sortedKeyValues)
    - [func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error](#net-http-type-Header-WriteSubset)
    - [func (h Header) writeSubset(w io.Writer, exclude map[string]bool, trace *httptrace.ClientTrace) error](#net-http-type-Header-writeSubset)
  - [type stringWriter struct](#net-http-type-stringWriter)
    - [func (w stringWriter) WriteString(s string) (n int, err error)](#net-http-type-stringWriter-WriteString)
  - [type keyValues struct](#net-http-type-keyValues)
  - [type headerSorter struct](#net-http-type-headerSorter)
    - [func (s *headerSorter) Len() int](#net-http-type-headerSorter-Len)
    - [func (s *headerSorter) Swap(i, j int)](#net-http-type-headerSorter-Swap)
    - [func (s *headerSorter) Less(i, j int) bool](#net-http-type-headerSorter-Less)
  - [type incomparable [0]func()](#net-http-type-incomparable)
  - [type contextKey struct](#net-http-type-contextKey)
    - [func (k *contextKey) String() string](#net-http-type-contextKey-String)
  - [type noBody struct{}](#net-http-type-noBody)
    - [func (noBody) Read([]byte) (int, error)](#net-http-type-noBody-Read)
    - [func (noBody) Close() error](#net-http-type-noBody-Close)
    - [func (noBody) WriteTo(io.Writer) (int64, error)](#net-http-type-noBody-WriteTo)
  - [type PushOptions struct](#net-http-type-PushOptions)
  - [type Pusher interface](#net-http-type-Pusher)
  - [type CookieJar interface](#net-http-type-CookieJar)
  - [type ProtocolError struct](#net-http-type-ProtocolError)
    - [func (pe *ProtocolError) Error() string](#net-http-type-ProtocolError-Error)
  - [type Request struct](#net-http-type-Request)
    - [func http2shouldRetryRequest(req *Request, err error, afterBodyWrite bool) (*Request, error)](#net-http-type-Request-http2shouldRetryRequest)
    - [func NewRequest(method, url string, body io.Reader) (*Request, error)](#net-http-type-Request-NewRequest)
    - [func NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*Request, error)](#net-http-type-Request-NewRequestWithContext)
    - [func ReadRequest(b *bufio.Reader) (*Request, error)](#net-http-type-Request-ReadRequest)
    - [func readRequest(b *bufio.Reader, deleteHostHeader bool) (req *Request, err error)](#net-http-type-Request-readRequest)
    - [func setupRewindBody(req *Request) *Request](#net-http-type-Request-setupRewindBody)
    - [func rewindBody(req *Request) (rewound *Request, err error)](#net-http-type-Request-rewindBody)
    - [func dummyReq(method string) *Request](#net-http-type-Request-dummyReq)
    - [func dummyReq11(method string) *Request](#net-http-type-Request-dummyReq11)
    - [func dummyRequest(method string) *Request](#net-http-type-Request-dummyRequest)
    - [func dummyRequestWithBody(method string) *Request](#net-http-type-Request-dummyRequestWithBody)
    - [func dummyRequestWithBodyNoGetBody(method string) *Request](#net-http-type-Request-dummyRequestWithBodyNoGetBody)
    - [func (r *Request) Context() context.Context](#net-http-type-Request-Context)
    - [func (r *Request) WithContext(ctx context.Context) *Request](#net-http-type-Request-WithContext)
    - [func (r *Request) Clone(ctx context.Context) *Request](#net-http-type-Request-Clone)
    - [func (r *Request) ProtoAtLeast(major, minor int) bool](#net-http-type-Request-ProtoAtLeast)
    - [func (r *Request) UserAgent() string](#net-http-type-Request-UserAgent)
    - [func (r *Request) Cookies() []*Cookie](#net-http-type-Request-Cookies)
    - [func (r *Request) Cookie(name string) (*Cookie, error)](#net-http-type-Request-Cookie)
    - [func (r *Request) AddCookie(c *Cookie)](#net-http-type-Request-AddCookie)
    - [func (r *Request) Referer() string](#net-http-type-Request-Referer)
    - [func (r *Request) MultipartReader() (*multipart.Reader, error)](#net-http-type-Request-MultipartReader)
    - [func (r *Request) multipartReader(allowMixed bool) (*multipart.Reader, error)](#net-http-type-Request-multipartReader)
    - [func (r *Request) isH2Upgrade() bool](#net-http-type-Request-isH2Upgrade)
    - [func (r *Request) Write(w io.Writer) error](#net-http-type-Request-Write)
    - [func (r *Request) WriteProxy(w io.Writer) error](#net-http-type-Request-WriteProxy)
    - [func (r *Request) write(w io.Writer, usingProxy bool, extraHeaders Header, waitForContinue func() bool) (err error)](#net-http-type-Request-write)
    - [func (r *Request) BasicAuth() (username, password string, ok bool)](#net-http-type-Request-BasicAuth)
    - [func (r *Request) SetBasicAuth(username, password string)](#net-http-type-Request-SetBasicAuth)
    - [func (r *Request) ParseForm() error](#net-http-type-Request-ParseForm)
    - [func (r *Request) ParseMultipartForm(maxMemory int64) error](#net-http-type-Request-ParseMultipartForm)
    - [func (r *Request) FormValue(key string) string](#net-http-type-Request-FormValue)
    - [func (r *Request) PostFormValue(key string) string](#net-http-type-Request-PostFormValue)
    - [func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)](#net-http-type-Request-FormFile)
    - [func (r *Request) expectsContinue() bool](#net-http-type-Request-expectsContinue)
    - [func (r *Request) wantsHttp10KeepAlive() bool](#net-http-type-Request-wantsHttp10KeepAlive)
    - [func (r *Request) wantsClose() bool](#net-http-type-Request-wantsClose)
    - [func (r *Request) closeBody() error](#net-http-type-Request-closeBody)
    - [func (r *Request) isReplayable() bool](#net-http-type-Request-isReplayable)
    - [func (r *Request) outgoingLength() int64](#net-http-type-Request-outgoingLength)
    - [func (r *Request) requiresHTTP1() bool](#net-http-type-Request-requiresHTTP1)
    - [func (r *Request) WithT(t *testing.T) *Request](#net-http-type-Request-WithT)
    - [func (r *Request) ExportIsReplayable() bool](#net-http-type-Request-ExportIsReplayable)
  - [type requestBodyReadError struct](#net-http-type-requestBodyReadError)
  - [type maxBytesReader struct](#net-http-type-maxBytesReader)
    - [func (l *maxBytesReader) Read(p []byte) (n int, err error)](#net-http-type-maxBytesReader-Read)
    - [func (l *maxBytesReader) Close() error](#net-http-type-maxBytesReader-Close)
  - [type requestTooLarger interface](#net-http-type-requestTooLarger)
  - [type Response struct](#net-http-type-Response)
    - [func send(ireq *Request, rt RoundTripper, deadline time.Time) (resp *Response, didTimeout func() bool, err error)](#net-http-type-Response-send)
    - [func Get(url string) (resp *Response, err error)](#net-http-type-Response-Get)
    - [func Post(url, contentType string, body io.Reader) (resp *Response, err error)](#net-http-type-Response-Post)
    - [func PostForm(url string, data url.Values) (resp *Response, err error)](#net-http-type-Response-PostForm)
    - [func Head(url string) (resp *Response, err error)](#net-http-type-Response-Head)
    - [func ReadResponse(r *bufio.Reader, req *Request) (*Response, error)](#net-http-type-Response-ReadResponse)
    - [func (r *Response) Cookies() []*Cookie](#net-http-type-Response-Cookies)
    - [func (r *Response) Location() (*url.URL, error)](#net-http-type-Response-Location)
    - [func (r *Response) ProtoAtLeast(major, minor int) bool](#net-http-type-Response-ProtoAtLeast)
    - [func (r *Response) Write(w io.Writer) error](#net-http-type-Response-Write)
    - [func (r *Response) closeBody()](#net-http-type-Response-closeBody)
    - [func (r *Response) bodyIsWritable() bool](#net-http-type-Response-bodyIsWritable)
    - [func (r *Response) isProtocolSwitch() bool](#net-http-type-Response-isProtocolSwitch)
  - [type Handler interface](#net-http-type-Handler)
    - [func FileServer(root FileSystem) Handler](#net-http-type-Handler-FileServer)
    - [func NotFoundHandler() Handler](#net-http-type-Handler-NotFoundHandler)
    - [func StripPrefix(prefix string, h Handler) Handler](#net-http-type-Handler-StripPrefix)
    - [func RedirectHandler(url string, code int) Handler](#net-http-type-Handler-RedirectHandler)
    - [func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler](#net-http-type-Handler-TimeoutHandler)
    - [func NewTestTimeoutHandler(handler Handler, ch <-chan time.Time) Handler](#net-http-type-Handler-NewTestTimeoutHandler)
  - [type ResponseWriter interface](#net-http-type-ResponseWriter)
  - [type Flusher interface](#net-http-type-Flusher)
  - [type Hijacker interface](#net-http-type-Hijacker)
  - [type CloseNotifier interface](#net-http-type-CloseNotifier)
  - [type conn struct](#net-http-type-conn)
    - [func (c *conn) hijacked() bool](#net-http-type-conn-hijacked)
    - [func (c *conn) hijackLocked() (rwc net.Conn, buf *bufio.ReadWriter, err error)](#net-http-type-conn-hijackLocked)
    - [func (c *conn) readRequest(ctx context.Context) (w *response, err error)](#net-http-type-conn-readRequest)
    - [func (c *conn) finalFlush()](#net-http-type-conn-finalFlush)
    - [func (c *conn) close()](#net-http-type-conn-close)
    - [func (c *conn) closeWriteAndWait()](#net-http-type-conn-closeWriteAndWait)
    - [func (c *conn) setState(nc net.Conn, state ConnState, runHook bool)](#net-http-type-conn-setState)
    - [func (c *conn) getState() (state ConnState, unixSec int64)](#net-http-type-conn-getState)
    - [func (c *conn) serve(ctx context.Context)](#net-http-type-conn-serve)
  - [type chunkWriter struct](#net-http-type-chunkWriter)
    - [func (cw *chunkWriter) Write(p []byte) (n int, err error)](#net-http-type-chunkWriter-Write)
    - [func (cw *chunkWriter) flush()](#net-http-type-chunkWriter-flush)
    - [func (cw *chunkWriter) close()](#net-http-type-chunkWriter-close)
    - [func (cw *chunkWriter) writeHeader(p []byte)](#net-http-type-chunkWriter-writeHeader)
  - [type response struct](#net-http-type-response)
    - [func (w *response) finalTrailers() Header](#net-http-type-response-finalTrailers)
    - [func (w *response) declareTrailer(k string)](#net-http-type-response-declareTrailer)
    - [func (w *response) requestTooLarge()](#net-http-type-response-requestTooLarge)
    - [func (w *response) needsSniff() bool](#net-http-type-response-needsSniff)
    - [func (w *response) ReadFrom(src io.Reader) (n int64, err error)](#net-http-type-response-ReadFrom)
    - [func (w *response) Header() Header](#net-http-type-response-Header)
    - [func (w *response) WriteHeader(code int)](#net-http-type-response-WriteHeader)
    - [func (w *response) bodyAllowed() bool](#net-http-type-response-bodyAllowed)
    - [func (w *response) Write(data []byte) (n int, err error)](#net-http-type-response-Write)
    - [func (w *response) WriteString(data string) (n int, err error)](#net-http-type-response-WriteString)
    - [func (w *response) write(lenData int, dataB []byte, dataS string) (n int, err error)](#net-http-type-response-write)
    - [func (w *response) finishRequest()](#net-http-type-response-finishRequest)
    - [func (w *response) shouldReuseConnection() bool](#net-http-type-response-shouldReuseConnection)
    - [func (w *response) closedRequestBodyEarly() bool](#net-http-type-response-closedRequestBodyEarly)
    - [func (w *response) Flush()](#net-http-type-response-Flush)
    - [func (w *response) sendExpectationFailed()](#net-http-type-response-sendExpectationFailed)
    - [func (w *response) Hijack() (rwc net.Conn, buf *bufio.ReadWriter, err error)](#net-http-type-response-Hijack)
    - [func (w *response) CloseNotify() <-chan bool](#net-http-type-response-CloseNotify)
  - [type atomicBool int32](#net-http-type-atomicBool)
    - [func (b *atomicBool) isSet() bool](#net-http-type-atomicBool-isSet)
    - [func (b *atomicBool) setTrue()](#net-http-type-atomicBool-setTrue)
    - [func (b *atomicBool) setFalse()](#net-http-type-atomicBool-setFalse)
  - [type writerOnly struct](#net-http-type-writerOnly)
  - [type readResult struct](#net-http-type-readResult)
  - [type connReader struct](#net-http-type-connReader)
    - [func (cr *connReader) lock()](#net-http-type-connReader-lock)
    - [func (cr *connReader) unlock()](#net-http-type-connReader-unlock)
    - [func (cr *connReader) startBackgroundRead()](#net-http-type-connReader-startBackgroundRead)
    - [func (cr *connReader) backgroundRead()](#net-http-type-connReader-backgroundRead)
    - [func (cr *connReader) abortPendingRead()](#net-http-type-connReader-abortPendingRead)
    - [func (cr *connReader) setReadLimit(remain int64)](#net-http-type-connReader-setReadLimit)
    - [func (cr *connReader) setInfiniteReadLimit()](#net-http-type-connReader-setInfiniteReadLimit)
    - [func (cr *connReader) hitReadLimit() bool](#net-http-type-connReader-hitReadLimit)
    - [func (cr *connReader) handleReadError(_ error)](#net-http-type-connReader-handleReadError)
    - [func (cr *connReader) closeNotify()](#net-http-type-connReader-closeNotify)
    - [func (cr *connReader) Read(p []byte) (n int, err error)](#net-http-type-connReader-Read)
  - [type expectContinueReader struct](#net-http-type-expectContinueReader)
    - [func (ecr *expectContinueReader) Read(p []byte) (n int, err error)](#net-http-type-expectContinueReader-Read)
    - [func (ecr *expectContinueReader) Close() error](#net-http-type-expectContinueReader-Close)
  - [type extraHeader struct](#net-http-type-extraHeader)
    - [func (h extraHeader) Write(w *bufio.Writer)](#net-http-type-extraHeader-Write)
  - [type closeWriter interface](#net-http-type-closeWriter)
  - [type statusError struct](#net-http-type-statusError)
    - [func (e statusError) Error() string](#net-http-type-statusError-Error)
  - [type HandlerFunc func(net/http.ResponseWriter, *net/http.Request)](#net-http-type-HandlerFunc)
    - [func http2new400Handler(err error) HandlerFunc](#net-http-type-HandlerFunc-http2new400Handler)
    - [func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-HandlerFunc-ServeHTTP)
  - [type redirectHandler struct](#net-http-type-redirectHandler)
    - [func (rh *redirectHandler) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-redirectHandler-ServeHTTP)
  - [type ServeMux struct](#net-http-type-ServeMux)
    - [func NewServeMux() *ServeMux](#net-http-type-ServeMux-NewServeMux)
    - [func (mux *ServeMux) match(path string) (h Handler, pattern string)](#net-http-type-ServeMux-match)
    - [func (mux *ServeMux) redirectToPathSlash(host, path string, u *url.URL) (*url.URL, bool)](#net-http-type-ServeMux-redirectToPathSlash)
    - [func (mux *ServeMux) shouldRedirectRLocked(host, path string) bool](#net-http-type-ServeMux-shouldRedirectRLocked)
    - [func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)](#net-http-type-ServeMux-Handler)
    - [func (mux *ServeMux) handler(host, path string) (h Handler, pattern string)](#net-http-type-ServeMux-handler)
    - [func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-ServeMux-ServeHTTP)
    - [func (mux *ServeMux) Handle(pattern string, handler Handler)](#net-http-type-ServeMux-Handle)
    - [func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))](#net-http-type-ServeMux-HandleFunc)
  - [type muxEntry struct](#net-http-type-muxEntry)
  - [type Server struct](#net-http-type-Server)
    - [func (srv *Server) newConn(rwc net.Conn) *conn](#net-http-type-Server-newConn)
    - [func (srv *Server) maxHeaderBytes() int](#net-http-type-Server-maxHeaderBytes)
    - [func (srv *Server) initialReadLimitSize() int64](#net-http-type-Server-initialReadLimitSize)
    - [func (s *Server) getDoneChan() <-chan struct{}](#net-http-type-Server-getDoneChan)
    - [func (s *Server) getDoneChanLocked() chan struct{}](#net-http-type-Server-getDoneChanLocked)
    - [func (s *Server) closeDoneChanLocked()](#net-http-type-Server-closeDoneChanLocked)
    - [func (srv *Server) Close() error](#net-http-type-Server-Close)
    - [func (srv *Server) Shutdown(ctx context.Context) error](#net-http-type-Server-Shutdown)
    - [func (srv *Server) RegisterOnShutdown(f func())](#net-http-type-Server-RegisterOnShutdown)
    - [func (s *Server) numListeners() int](#net-http-type-Server-numListeners)
    - [func (s *Server) closeIdleConns() bool](#net-http-type-Server-closeIdleConns)
    - [func (s *Server) closeListenersLocked() error](#net-http-type-Server-closeListenersLocked)
    - [func (srv *Server) ListenAndServe() error](#net-http-type-Server-ListenAndServe)
    - [func (srv *Server) shouldConfigureHTTP2ForServe() bool](#net-http-type-Server-shouldConfigureHTTP2ForServe)
    - [func (srv *Server) Serve(l net.Listener) error](#net-http-type-Server-Serve)
    - [func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error](#net-http-type-Server-ServeTLS)
    - [func (s *Server) trackListener(ln *net.Listener, add bool) bool](#net-http-type-Server-trackListener)
    - [func (s *Server) trackConn(c *conn, add bool)](#net-http-type-Server-trackConn)
    - [func (s *Server) idleTimeout() time.Duration](#net-http-type-Server-idleTimeout)
    - [func (s *Server) readHeaderTimeout() time.Duration](#net-http-type-Server-readHeaderTimeout)
    - [func (s *Server) doKeepAlives() bool](#net-http-type-Server-doKeepAlives)
    - [func (s *Server) shuttingDown() bool](#net-http-type-Server-shuttingDown)
    - [func (srv *Server) SetKeepAlivesEnabled(v bool)](#net-http-type-Server-SetKeepAlivesEnabled)
    - [func (s *Server) logf(format string, args ...interface{})](#net-http-type-Server-logf)
    - [func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error](#net-http-type-Server-ListenAndServeTLS)
    - [func (srv *Server) setupHTTP2_ServeTLS() error](#net-http-type-Server-setupHTTP2_ServeTLS)
    - [func (srv *Server) setupHTTP2_Serve() error](#net-http-type-Server-setupHTTP2_Serve)
    - [func (srv *Server) onceSetNextProtoDefaults_Serve()](#net-http-type-Server-onceSetNextProtoDefaults_Serve)
    - [func (srv *Server) onceSetNextProtoDefaults()](#net-http-type-Server-onceSetNextProtoDefaults)
    - [func (s *Server) ExportAllConnsIdle() bool](#net-http-type-Server-ExportAllConnsIdle)
    - [func (s *Server) ExportAllConnsByState() map[ConnState]int](#net-http-type-Server-ExportAllConnsByState)
  - [type ConnState int](#net-http-type-ConnState)
    - [func (c ConnState) String() string](#net-http-type-ConnState-String)
  - [type serverHandler struct](#net-http-type-serverHandler)
    - [func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)](#net-http-type-serverHandler-ServeHTTP)
  - [type timeoutHandler struct](#net-http-type-timeoutHandler)
    - [func (h *timeoutHandler) errorBody() string](#net-http-type-timeoutHandler-errorBody)
    - [func (h *timeoutHandler) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-timeoutHandler-ServeHTTP)
  - [type timeoutWriter struct](#net-http-type-timeoutWriter)
    - [func (tw *timeoutWriter) Push(target string, opts *PushOptions) error](#net-http-type-timeoutWriter-Push)
    - [func (tw *timeoutWriter) Header() Header](#net-http-type-timeoutWriter-Header)
    - [func (tw *timeoutWriter) Write(p []byte) (int, error)](#net-http-type-timeoutWriter-Write)
    - [func (tw *timeoutWriter) writeHeaderLocked(code int)](#net-http-type-timeoutWriter-writeHeaderLocked)
    - [func (tw *timeoutWriter) WriteHeader(code int)](#net-http-type-timeoutWriter-WriteHeader)
  - [type onceCloseListener struct](#net-http-type-onceCloseListener)
    - [func (oc *onceCloseListener) Close() error](#net-http-type-onceCloseListener-Close)
    - [func (oc *onceCloseListener) close()](#net-http-type-onceCloseListener-close)
  - [type globalOptionsHandler struct{}](#net-http-type-globalOptionsHandler)
    - [func (globalOptionsHandler) ServeHTTP(w ResponseWriter, r *Request)](#net-http-type-globalOptionsHandler-ServeHTTP)
  - [type initALPNRequest struct](#net-http-type-initALPNRequest)
    - [func (h initALPNRequest) BaseContext() context.Context](#net-http-type-initALPNRequest-BaseContext)
    - [func (h initALPNRequest) ServeHTTP(rw ResponseWriter, req *Request)](#net-http-type-initALPNRequest-ServeHTTP)
  - [type loggingConn struct](#net-http-type-loggingConn)
    - [func (c *loggingConn) Write(p []byte) (n int, err error)](#net-http-type-loggingConn-Write)
    - [func (c *loggingConn) Read(p []byte) (n int, err error)](#net-http-type-loggingConn-Read)
    - [func (c *loggingConn) Close() (err error)](#net-http-type-loggingConn-Close)
  - [type checkConnErrorWriter struct](#net-http-type-checkConnErrorWriter)
    - [func (w checkConnErrorWriter) Write(p []byte) (n int, err error)](#net-http-type-checkConnErrorWriter-Write)
  - [type sniffSig interface](#net-http-type-sniffSig)
  - [type exactSig struct](#net-http-type-exactSig)
    - [func (e *exactSig) match(data []byte, firstNonWS int) string](#net-http-type-exactSig-match)
  - [type maskedSig struct](#net-http-type-maskedSig)
    - [func (m *maskedSig) match(data []byte, firstNonWS int) string](#net-http-type-maskedSig-match)
  - [type htmlSig []byte](#net-http-type-htmlSig)
    - [func (h htmlSig) match(data []byte, firstNonWS int) string](#net-http-type-htmlSig-match)
  - [type mp4Sig struct{}](#net-http-type-mp4Sig)
    - [func (mp4Sig) match(data []byte, firstNonWS int) string](#net-http-type-mp4Sig-match)
  - [type textSig struct{}](#net-http-type-textSig)
    - [func (textSig) match(data []byte, firstNonWS int) string](#net-http-type-textSig-match)
  - [type socksCommand int](#net-http-type-socksCommand)
    - [func (cmd socksCommand) String() string](#net-http-type-socksCommand-String)
  - [type socksAuthMethod int](#net-http-type-socksAuthMethod)
  - [type socksReply int](#net-http-type-socksReply)
    - [func (code socksReply) String() string](#net-http-type-socksReply-String)
  - [type socksAddr struct](#net-http-type-socksAddr)
    - [func (a *socksAddr) Network() string](#net-http-type-socksAddr-Network)
    - [func (a *socksAddr) String() string](#net-http-type-socksAddr-String)
  - [type socksConn struct](#net-http-type-socksConn)
    - [func (c *socksConn) BoundAddr() net.Addr](#net-http-type-socksConn-BoundAddr)
  - [type socksDialer struct](#net-http-type-socksDialer)
    - [func socksNewDialer(network, address string) *socksDialer](#net-http-type-socksDialer-socksNewDialer)
    - [func (d *socksDialer) connect(ctx context.Context, c net.Conn, address string) (_ net.Addr, ctxErr error)](#net-http-type-socksDialer-connect)
    - [func (d *socksDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)](#net-http-type-socksDialer-DialContext)
    - [func (d *socksDialer) DialWithConn(ctx context.Context, c net.Conn, network, address string) (net.Addr, error)](#net-http-type-socksDialer-DialWithConn)
    - [func (d *socksDialer) Dial(network, address string) (net.Conn, error)](#net-http-type-socksDialer-Dial)
    - [func (d *socksDialer) validateTarget(network, address string) error](#net-http-type-socksDialer-validateTarget)
    - [func (d *socksDialer) pathAddrs(address string) (proxy, dst net.Addr, err error)](#net-http-type-socksDialer-pathAddrs)
  - [type socksUsernamePassword struct](#net-http-type-socksUsernamePassword)
    - [func (up *socksUsernamePassword) Authenticate(ctx context.Context, rw io.ReadWriter, auth socksAuthMethod) error](#net-http-type-socksUsernamePassword-Authenticate)
  - [type errorReader struct](#net-http-type-errorReader)
    - [func (r errorReader) Read(p []byte) (n int, err error)](#net-http-type-errorReader-Read)
  - [type byteReader struct](#net-http-type-byteReader)
    - [func (br *byteReader) Read(p []byte) (n int, err error)](#net-http-type-byteReader-Read)
  - [type transferWriter struct](#net-http-type-transferWriter)
    - [func newTransferWriter(r interface{}) (t *transferWriter, err error)](#net-http-type-transferWriter-newTransferWriter)
    - [func (t *transferWriter) shouldSendChunkedRequestBody() bool](#net-http-type-transferWriter-shouldSendChunkedRequestBody)
    - [func (t *transferWriter) probeRequestBody()](#net-http-type-transferWriter-probeRequestBody)
    - [func (t *transferWriter) shouldSendContentLength() bool](#net-http-type-transferWriter-shouldSendContentLength)
    - [func (t *transferWriter) writeHeader(w io.Writer, trace *httptrace.ClientTrace) error](#net-http-type-transferWriter-writeHeader)
    - [func (t *transferWriter) writeBody(w io.Writer) (err error)](#net-http-type-transferWriter-writeBody)
    - [func (t *transferWriter) doBodyCopy(dst io.Writer, src io.Reader) (n int64, err error)](#net-http-type-transferWriter-doBodyCopy)
    - [func (t *transferWriter) unwrapBody() io.Reader](#net-http-type-transferWriter-unwrapBody)
  - [type transferReader struct](#net-http-type-transferReader)
    - [func (t *transferReader) protoAtLeast(m, n int) bool](#net-http-type-transferReader-protoAtLeast)
    - [func (t *transferReader) parseTransferEncoding() error](#net-http-type-transferReader-parseTransferEncoding)
  - [type unsupportedTEError struct](#net-http-type-unsupportedTEError)
    - [func (uste *unsupportedTEError) Error() string](#net-http-type-unsupportedTEError-Error)
  - [type body struct](#net-http-type-body)
    - [func (b *body) Read(p []byte) (n int, err error)](#net-http-type-body-Read)
    - [func (b *body) readLocked(p []byte) (n int, err error)](#net-http-type-body-readLocked)
    - [func (b *body) readTrailer() error](#net-http-type-body-readTrailer)
    - [func (b *body) unreadDataSizeLocked() int64](#net-http-type-body-unreadDataSizeLocked)
    - [func (b *body) Close() error](#net-http-type-body-Close)
    - [func (b *body) didEarlyClose() bool](#net-http-type-body-didEarlyClose)
    - [func (b *body) bodyRemains() bool](#net-http-type-body-bodyRemains)
    - [func (b *body) registerOnHitEOF(fn func())](#net-http-type-body-registerOnHitEOF)
  - [type bodyLocked struct](#net-http-type-bodyLocked)
    - [func (bl bodyLocked) Read(p []byte) (n int, err error)](#net-http-type-bodyLocked-Read)
  - [type finishAsyncByteRead struct](#net-http-type-finishAsyncByteRead)
    - [func (fr finishAsyncByteRead) Read(p []byte) (n int, err error)](#net-http-type-finishAsyncByteRead-Read)
  - [type bufioFlushWriter struct](#net-http-type-bufioFlushWriter)
    - [func (fw bufioFlushWriter) Write(p []byte) (n int, err error)](#net-http-type-bufioFlushWriter-Write)
  - [type Transport struct](#net-http-type-Transport)
    - [func (t *Transport) RoundTrip(req *Request) (*Response, error)](#net-http-type-Transport-RoundTrip)
    - [func (t *Transport) writeBufferSize() int](#net-http-type-Transport-writeBufferSize)
    - [func (t *Transport) readBufferSize() int](#net-http-type-Transport-readBufferSize)
    - [func (t *Transport) Clone() *Transport](#net-http-type-Transport-Clone)
    - [func (t *Transport) hasCustomTLSDialer() bool](#net-http-type-Transport-hasCustomTLSDialer)
    - [func (t *Transport) onceSetNextProtoDefaults()](#net-http-type-Transport-onceSetNextProtoDefaults)
    - [func (t *Transport) useRegisteredProtocol(req *Request) bool](#net-http-type-Transport-useRegisteredProtocol)
    - [func (t *Transport) alternateRoundTripper(req *Request) RoundTripper](#net-http-type-Transport-alternateRoundTripper)
    - [func (t *Transport) roundTrip(req *Request) (*Response, error)](#net-http-type-Transport-roundTrip)
    - [func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)](#net-http-type-Transport-RegisterProtocol)
    - [func (t *Transport) CloseIdleConnections()](#net-http-type-Transport-CloseIdleConnections)
    - [func (t *Transport) CancelRequest(req *Request)](#net-http-type-Transport-CancelRequest)
    - [func (t *Transport) cancelRequest(key cancelKey, err error) bool](#net-http-type-Transport-cancelRequest)
    - [func (t *Transport) connectMethodForRequest(treq *transportRequest) (cm connectMethod, err error)](#net-http-type-Transport-connectMethodForRequest)
    - [func (t *Transport) putOrCloseIdleConn(pconn *persistConn)](#net-http-type-Transport-putOrCloseIdleConn)
    - [func (t *Transport) maxIdleConnsPerHost() int](#net-http-type-Transport-maxIdleConnsPerHost)
    - [func (t *Transport) tryPutIdleConn(pconn *persistConn) error](#net-http-type-Transport-tryPutIdleConn)
    - [func (t *Transport) queueForIdleConn(w *wantConn) (delivered bool)](#net-http-type-Transport-queueForIdleConn)
    - [func (t *Transport) removeIdleConn(pconn *persistConn) bool](#net-http-type-Transport-removeIdleConn)
    - [func (t *Transport) removeIdleConnLocked(pconn *persistConn) bool](#net-http-type-Transport-removeIdleConnLocked)
    - [func (t *Transport) setReqCanceler(key cancelKey, fn func(error))](#net-http-type-Transport-setReqCanceler)
    - [func (t *Transport) replaceReqCanceler(key cancelKey, fn func(error)) bool](#net-http-type-Transport-replaceReqCanceler)
    - [func (t *Transport) dial(ctx context.Context, network, addr string) (net.Conn, error)](#net-http-type-Transport-dial)
    - [func (t *Transport) customDialTLS(ctx context.Context, network, addr string) (conn net.Conn, err error)](#net-http-type-Transport-customDialTLS)
    - [func (t *Transport) getConn(treq *transportRequest, cm connectMethod) (pc *persistConn, err error)](#net-http-type-Transport-getConn)
    - [func (t *Transport) queueForDial(w *wantConn)](#net-http-type-Transport-queueForDial)
    - [func (t *Transport) dialConnFor(w *wantConn)](#net-http-type-Transport-dialConnFor)
    - [func (t *Transport) decConnsPerHost(key connectMethodKey)](#net-http-type-Transport-decConnsPerHost)
    - [func (t *Transport) dialConn(ctx context.Context, cm connectMethod) (pconn *persistConn, err error)](#net-http-type-Transport-dialConn)
    - [func (t *Transport) NumPendingRequestsForTesting() int](#net-http-type-Transport-NumPendingRequestsForTesting)
    - [func (t *Transport) IdleConnKeysForTesting() (keys []string)](#net-http-type-Transport-IdleConnKeysForTesting)
    - [func (t *Transport) IdleConnKeyCountForTesting() int](#net-http-type-Transport-IdleConnKeyCountForTesting)
    - [func (t *Transport) IdleConnStrsForTesting() []string](#net-http-type-Transport-IdleConnStrsForTesting)
    - [func (t *Transport) IdleConnStrsForTesting_h2() []string](#net-http-type-Transport-IdleConnStrsForTesting_h2)
    - [func (t *Transport) IdleConnCountForTesting(scheme, addr string) int](#net-http-type-Transport-IdleConnCountForTesting)
    - [func (t *Transport) IdleConnWaitMapSizeForTesting() int](#net-http-type-Transport-IdleConnWaitMapSizeForTesting)
    - [func (t *Transport) IsIdleForTesting() bool](#net-http-type-Transport-IsIdleForTesting)
    - [func (t *Transport) QueueForIdleConnForTesting()](#net-http-type-Transport-QueueForIdleConnForTesting)
    - [func (t *Transport) PutIdleTestConn(scheme, addr string) bool](#net-http-type-Transport-PutIdleTestConn)
    - [func (t *Transport) PutIdleTestConnH2(scheme, addr string, alt RoundTripper) bool](#net-http-type-Transport-PutIdleTestConnH2)
  - [type cancelKey struct](#net-http-type-cancelKey)
  - [type h2Transport interface](#net-http-type-h2Transport)
  - [type transportRequest struct](#net-http-type-transportRequest)
    - [func (tr *transportRequest) extraHeaders() Header](#net-http-type-transportRequest-extraHeaders)
    - [func (tr *transportRequest) setError(err error)](#net-http-type-transportRequest-setError)
    - [func (tr *transportRequest) logf(format string, args ...interface{})](#net-http-type-transportRequest-logf)
  - [type readTrackingBody struct](#net-http-type-readTrackingBody)
    - [func (r *readTrackingBody) Read(data []byte) (int, error)](#net-http-type-readTrackingBody-Read)
    - [func (r *readTrackingBody) Close() error](#net-http-type-readTrackingBody-Close)
  - [type transportReadFromServerError struct](#net-http-type-transportReadFromServerError)
    - [func (e transportReadFromServerError) Unwrap() error](#net-http-type-transportReadFromServerError-Unwrap)
    - [func (e transportReadFromServerError) Error() string](#net-http-type-transportReadFromServerError-Error)
  - [type wantConn struct](#net-http-type-wantConn)
    - [func (w *wantConn) waiting() bool](#net-http-type-wantConn-waiting)
    - [func (w *wantConn) tryDeliver(pc *persistConn, err error) bool](#net-http-type-wantConn-tryDeliver)
    - [func (w *wantConn) cancel(t *Transport, err error)](#net-http-type-wantConn-cancel)
  - [type wantConnQueue struct](#net-http-type-wantConnQueue)
    - [func (q *wantConnQueue) len() int](#net-http-type-wantConnQueue-len)
    - [func (q *wantConnQueue) pushBack(w *wantConn)](#net-http-type-wantConnQueue-pushBack)
    - [func (q *wantConnQueue) popFront() *wantConn](#net-http-type-wantConnQueue-popFront)
    - [func (q *wantConnQueue) peekFront() *wantConn](#net-http-type-wantConnQueue-peekFront)
    - [func (q *wantConnQueue) cleanFront() (cleaned bool)](#net-http-type-wantConnQueue-cleanFront)
  - [type erringRoundTripper interface](#net-http-type-erringRoundTripper)
  - [type persistConnWriter struct](#net-http-type-persistConnWriter)
    - [func (w persistConnWriter) Write(p []byte) (n int, err error)](#net-http-type-persistConnWriter-Write)
    - [func (w persistConnWriter) ReadFrom(r io.Reader) (n int64, err error)](#net-http-type-persistConnWriter-ReadFrom)
  - [type connectMethod struct](#net-http-type-connectMethod)
    - [func (cm *connectMethod) proxyAuth() string](#net-http-type-connectMethod-proxyAuth)
    - [func (cm *connectMethod) key() connectMethodKey](#net-http-type-connectMethod-key)
    - [func (cm *connectMethod) scheme() string](#net-http-type-connectMethod-scheme)
    - [func (cm *connectMethod) addr() string](#net-http-type-connectMethod-addr)
    - [func (cm *connectMethod) tlsHost() string](#net-http-type-connectMethod-tlsHost)
  - [type connectMethodKey struct](#net-http-type-connectMethodKey)
    - [func (k connectMethodKey) String() string](#net-http-type-connectMethodKey-String)
  - [type persistConn struct](#net-http-type-persistConn)
    - [func (pc *persistConn) shouldRetryRequest(req *Request, err error) bool](#net-http-type-persistConn-shouldRetryRequest)
    - [func (pconn *persistConn) addTLS(name string, trace *httptrace.ClientTrace) error](#net-http-type-persistConn-addTLS)
    - [func (pc *persistConn) maxHeaderResponseSize() int64](#net-http-type-persistConn-maxHeaderResponseSize)
    - [func (pc *persistConn) Read(p []byte) (n int, err error)](#net-http-type-persistConn-Read)
    - [func (pc *persistConn) isBroken() bool](#net-http-type-persistConn-isBroken)
    - [func (pc *persistConn) canceled() error](#net-http-type-persistConn-canceled)
    - [func (pc *persistConn) isReused() bool](#net-http-type-persistConn-isReused)
    - [func (pc *persistConn) gotIdleConnTrace(idleAt time.Time) (t httptrace.GotConnInfo)](#net-http-type-persistConn-gotIdleConnTrace)
    - [func (pc *persistConn) cancelRequest(err error)](#net-http-type-persistConn-cancelRequest)
    - [func (pc *persistConn) closeConnIfStillIdle()](#net-http-type-persistConn-closeConnIfStillIdle)
    - [func (pc *persistConn) mapRoundTripError(req *transportRequest, startBytesWritten int64, err error) error](#net-http-type-persistConn-mapRoundTripError)
    - [func (pc *persistConn) readLoop()](#net-http-type-persistConn-readLoop)
    - [func (pc *persistConn) readLoopPeekFailLocked(peekErr error)](#net-http-type-persistConn-readLoopPeekFailLocked)
    - [func (pc *persistConn) readResponse(rc requestAndChan, trace *httptrace.ClientTrace) (resp *Response, err error)](#net-http-type-persistConn-readResponse)
    - [func (pc *persistConn) waitForContinue(continueCh <-chan struct{}) func() bool](#net-http-type-persistConn-waitForContinue)
    - [func (pc *persistConn) writeLoop()](#net-http-type-persistConn-writeLoop)
    - [func (pc *persistConn) wroteRequest() bool](#net-http-type-persistConn-wroteRequest)
    - [func (pc *persistConn) roundTrip(req *transportRequest) (resp *Response, err error)](#net-http-type-persistConn-roundTrip)
    - [func (pc *persistConn) markReused()](#net-http-type-persistConn-markReused)
    - [func (pc *persistConn) close(err error)](#net-http-type-persistConn-close)
    - [func (pc *persistConn) closeLocked(err error)](#net-http-type-persistConn-closeLocked)
  - [type readWriteCloserBody struct](#net-http-type-readWriteCloserBody)
    - [func (b *readWriteCloserBody) Read(p []byte) (n int, err error)](#net-http-type-readWriteCloserBody-Read)
  - [type nothingWrittenError struct](#net-http-type-nothingWrittenError)
  - [type responseAndError struct](#net-http-type-responseAndError)
  - [type requestAndChan struct](#net-http-type-requestAndChan)
  - [type writeRequest struct](#net-http-type-writeRequest)
  - [type httpError struct](#net-http-type-httpError)
    - [func (e *httpError) Error() string](#net-http-type-httpError-Error)
    - [func (e *httpError) Timeout() bool](#net-http-type-httpError-Timeout)
    - [func (e *httpError) Temporary() bool](#net-http-type-httpError-Temporary)
  - [type tLogKey struct{}](#net-http-type-tLogKey)
  - [type bodyEOFSignal struct](#net-http-type-bodyEOFSignal)
    - [func (es *bodyEOFSignal) Read(p []byte) (n int, err error)](#net-http-type-bodyEOFSignal-Read)
    - [func (es *bodyEOFSignal) Close() error](#net-http-type-bodyEOFSignal-Close)
    - [func (es *bodyEOFSignal) condfn(err error) error](#net-http-type-bodyEOFSignal-condfn)
  - [type gzipReader struct](#net-http-type-gzipReader)
    - [func (gz *gzipReader) Read(p []byte) (n int, err error)](#net-http-type-gzipReader-Read)
    - [func (gz *gzipReader) Close() error](#net-http-type-gzipReader-Close)
  - [type tlsHandshakeTimeoutError struct{}](#net-http-type-tlsHandshakeTimeoutError)
    - [func (tlsHandshakeTimeoutError) Timeout() bool](#net-http-type-tlsHandshakeTimeoutError-Timeout)
    - [func (tlsHandshakeTimeoutError) Temporary() bool](#net-http-type-tlsHandshakeTimeoutError-Temporary)
    - [func (tlsHandshakeTimeoutError) Error() string](#net-http-type-tlsHandshakeTimeoutError-Error)
  - [type fakeLocker struct{}](#net-http-type-fakeLocker)
    - [func (fakeLocker) Lock()](#net-http-type-fakeLocker-Lock)
    - [func (fakeLocker) Unlock()](#net-http-type-fakeLocker-Unlock)
  - [type connLRU struct](#net-http-type-connLRU)
    - [func (cl *connLRU) add(pc *persistConn)](#net-http-type-connLRU-add)
    - [func (cl *connLRU) removeOldest() *persistConn](#net-http-type-connLRU-removeOldest)
    - [func (cl *connLRU) remove(pc *persistConn)](#net-http-type-connLRU-remove)
    - [func (cl *connLRU) len() int](#net-http-type-connLRU-len)
  - [type headerOnlyResponseWriter http.Header](#net-http-type-headerOnlyResponseWriter)
    - [func (ho headerOnlyResponseWriter) Header() Header](#net-http-type-headerOnlyResponseWriter-Header)
    - [func (ho headerOnlyResponseWriter) Write([]byte) (int, error)](#net-http-type-headerOnlyResponseWriter-Write)
    - [func (ho headerOnlyResponseWriter) WriteHeader(int)](#net-http-type-headerOnlyResponseWriter-WriteHeader)
  - [type hasTokenTest struct](#net-http-type-hasTokenTest)
  - [type reqTest struct](#net-http-type-reqTest)
  - [type reqWriteTest struct](#net-http-type-reqWriteTest)
  - [type testCase struct](#net-http-type-testCase)
  - [type closeChecker struct](#net-http-type-closeChecker)
    - [func (rc *closeChecker) Close() error](#net-http-type-closeChecker-Close)
  - [type writerFunc func([]byte) (int, error)](#net-http-type-writerFunc)
    - [func (f writerFunc) Write(p []byte) (int, error)](#net-http-type-writerFunc-Write)
  - [type delegateReader struct](#net-http-type-delegateReader)
    - [func (r *delegateReader) Read(p []byte) (int, error)](#net-http-type-delegateReader-Read)
  - [type dumpConn struct](#net-http-type-dumpConn)
    - [func (c *dumpConn) Close() error](#net-http-type-dumpConn-Close)
    - [func (c *dumpConn) LocalAddr() net.Addr](#net-http-type-dumpConn-LocalAddr)
    - [func (c *dumpConn) RemoteAddr() net.Addr](#net-http-type-dumpConn-RemoteAddr)
    - [func (c *dumpConn) SetDeadline(t time.Time) error](#net-http-type-dumpConn-SetDeadline)
    - [func (c *dumpConn) SetReadDeadline(t time.Time) error](#net-http-type-dumpConn-SetReadDeadline)
    - [func (c *dumpConn) SetWriteDeadline(t time.Time) error](#net-http-type-dumpConn-SetWriteDeadline)
  - [type respTest struct](#net-http-type-respTest)
  - [type readerAndCloser struct](#net-http-type-readerAndCloser)
  - [type responseLocationTest struct](#net-http-type-responseLocationTest)
  - [type testCase struct](#net-http-type-testCase)
  - [type respWriteTest struct](#net-http-type-respWriteTest)
  - [type mockTransferWriter struct](#net-http-type-mockTransferWriter)
    - [func (w *mockTransferWriter) ReadFrom(r io.Reader) (int64, error)](#net-http-type-mockTransferWriter-ReadFrom)
    - [func (w *mockTransferWriter) Write(p []byte) (int, error)](#net-http-type-mockTransferWriter-Write)
  - [type issue22091Error struct{}](#net-http-type-issue22091Error)
    - [func (issue22091Error) IsHTTP2NoCachedConnError()](#net-http-type-issue22091Error-IsHTTP2NoCachedConnError)
    - [func (issue22091Error) Error() string](#net-http-type-issue22091Error-Error)
  - [type roundTripFunc func(r *net/http.Request) (*net/http.Response, error)](#net-http-type-roundTripFunc)
    - [func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)](#net-http-type-roundTripFunc-RoundTrip)
- [Functions](#net-http-func)
  - [func refererForURL(lastReq, newReq *url.URL) string](#net-http-func-refererForURL)
  - [func timeBeforeContextDeadline(t time.Time, ctx context.Context) bool](#net-http-func-timeBeforeContextDeadline)
  - [func knownRoundTripperImpl(rt RoundTripper, req *Request) bool](#net-http-func-knownRoundTripperImpl)
  - [func setRequestCancel(req *Request, rt RoundTripper, deadline time.Time) (stopTimer func(), didTimeout func() bool)](#net-http-func-setRequestCancel)
  - [func basicAuth(username, password string) string](#net-http-func-basicAuth)
  - [func alwaysFalse() bool](#net-http-func-alwaysFalse)
  - [func redirectBehavior(reqMethod string, resp *Response, ireq *Request) (redirectMethod string, shouldRedirect, includeBody bool)](#net-http-func-redirectBehavior)
  - [func urlErrorOp(method string) string](#net-http-func-urlErrorOp)
  - [func defaultCheckRedirect(req *Request, via []*Request) error](#net-http-func-defaultCheckRedirect)
  - [func shouldCopyHeaderOnRedirect(headerKey string, initial, dest *url.URL) bool](#net-http-func-shouldCopyHeaderOnRedirect)
  - [func isDomainOrSubdomain(sub, parent string) bool](#net-http-func-isDomainOrSubdomain)
  - [func stripPassword(u *url.URL) string](#net-http-func-stripPassword)
  - [func cloneURLValues(v url.Values) url.Values](#net-http-func-cloneURLValues)
  - [func cloneURL(u *url.URL) *url.URL](#net-http-func-cloneURL)
  - [func cloneMultipartForm(f *multipart.Form) *multipart.Form](#net-http-func-cloneMultipartForm)
  - [func cloneMultipartFileHeader(fh *multipart.FileHeader) *multipart.FileHeader](#net-http-func-cloneMultipartFileHeader)
  - [func readSetCookies(h Header) []*Cookie](#net-http-func-readSetCookies)
  - [func SetCookie(w ResponseWriter, cookie *Cookie)](#net-http-func-SetCookie)
  - [func readCookies(h Header, filter string) []*Cookie](#net-http-func-readCookies)
  - [func validCookieDomain(v string) bool](#net-http-func-validCookieDomain)
  - [func validCookieExpires(t time.Time) bool](#net-http-func-validCookieExpires)
  - [func isCookieDomainName(s string) bool](#net-http-func-isCookieDomainName)
  - [func sanitizeCookieName(n string) string](#net-http-func-sanitizeCookieName)
  - [func sanitizeCookieValue(v string) string](#net-http-func-sanitizeCookieValue)
  - [func validCookieValueByte(b byte) bool](#net-http-func-validCookieValueByte)
  - [func sanitizeCookiePath(v string) string](#net-http-func-sanitizeCookiePath)
  - [func validCookiePathByte(b byte) bool](#net-http-func-validCookiePathByte)
  - [func sanitizeOrWarn(fieldName string, valid func(byte) bool, v string) string](#net-http-func-sanitizeOrWarn)
  - [func parseCookieValue(raw string, allowDoubleQuote bool) (string, bool)](#net-http-func-parseCookieValue)
  - [func isCookieNameValid(raw string) bool](#net-http-func-isCookieNameValid)
  - [func mapDirOpenError(originalErr error, name string) error](#net-http-func-mapDirOpenError)
  - [func dirList(w ResponseWriter, r *Request, f File)](#net-http-func-dirList)
  - [func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)](#net-http-func-ServeContent)
  - [func serveContent(w ResponseWriter, r *Request, name string, modtime time.Time, sizeFunc func() (int64, error), content io.ReadSeeker)](#net-http-func-serveContent)
  - [func scanETag(s string) (etag string, remain string)](#net-http-func-scanETag)
  - [func etagStrongMatch(a, b string) bool](#net-http-func-etagStrongMatch)
  - [func etagWeakMatch(a, b string) bool](#net-http-func-etagWeakMatch)
  - [func isZeroTime(t time.Time) bool](#net-http-func-isZeroTime)
  - [func setLastModified(w ResponseWriter, modtime time.Time)](#net-http-func-setLastModified)
  - [func writeNotModified(w ResponseWriter)](#net-http-func-writeNotModified)
  - [func checkPreconditions(w ResponseWriter, r *Request, modtime time.Time) (done bool, rangeHeader string)](#net-http-func-checkPreconditions)
  - [func serveFile(w ResponseWriter, r *Request, fs FileSystem, name string, redirect bool)](#net-http-func-serveFile)
  - [func toHTTPError(err error) (msg string, httpStatus int)](#net-http-func-toHTTPError)
  - [func localRedirect(w ResponseWriter, r *Request, newPath string)](#net-http-func-localRedirect)
  - [func ServeFile(w ResponseWriter, r *Request, name string)](#net-http-func-ServeFile)
  - [func containsDotDot(v string) bool](#net-http-func-containsDotDot)
  - [func isSlashRune(r rune) bool](#net-http-func-isSlashRune)
  - [func parseRange(s string, size int64) ([]httpRange, error)](#net-http-func-parseRange)
  - [func rangesMIMESize(ranges []httpRange, contentType string, contentSize int64) (encSize int64)](#net-http-func-rangesMIMESize)
  - [func sumRangesSize(ranges []httpRange) (size int64)](#net-http-func-sumRangesSize)
  - [func http2isBadCipher(cipher uint16) bool](#net-http-func-http2isBadCipher)
  - [func http2filterOutClientConn(in []*http2ClientConn, exclude *http2ClientConn) []*http2ClientConn](#net-http-func-http2filterOutClientConn)
  - [func http2getDataBufferChunk(size int64) []byte](#net-http-func-http2getDataBufferChunk)
  - [func http2putDataBufferChunk(p []byte)](#net-http-func-http2putDataBufferChunk)
  - [func http2terminalReadFrameError(err error) bool](#net-http-func-http2terminalReadFrameError)
  - [func http2validStreamIDOrZero(streamID uint32) bool](#net-http-func-http2validStreamIDOrZero)
  - [func http2validStreamID(streamID uint32) bool](#net-http-func-http2validStreamID)
  - [func http2readByte(p []byte) (remain []byte, b byte, err error)](#net-http-func-http2readByte)
  - [func http2readUint32(p []byte) (remain []byte, v uint32, err error)](#net-http-func-http2readUint32)
  - [func http2summarizeFrame(f http2Frame) string](#net-http-func-http2summarizeFrame)
  - [func http2traceHasWroteHeaderField(trace *httptrace.ClientTrace) bool](#net-http-func-http2traceHasWroteHeaderField)
  - [func http2traceWroteHeaderField(trace *httptrace.ClientTrace, k, v string)](#net-http-func-http2traceWroteHeaderField)
  - [func http2traceGot1xxResponseFunc(trace *httptrace.ClientTrace) func(int, textproto.MIMEHeader) error](#net-http-func-http2traceGot1xxResponseFunc)
  - [func http2curGoroutineID() uint64](#net-http-func-http2curGoroutineID)
  - [func http2parseUintBytes(s []byte, base int, bitSize int) (n uint64, err error)](#net-http-func-http2parseUintBytes)
  - [func http2cutoff64(base int) uint64](#net-http-func-http2cutoff64)
  - [func http2buildCommonHeaderMapsOnce()](#net-http-func-http2buildCommonHeaderMapsOnce)
  - [func http2buildCommonHeaderMaps()](#net-http-func-http2buildCommonHeaderMaps)
  - [func http2lowerHeader(v string) string](#net-http-func-http2lowerHeader)
  - [func init()](#net-http-func-init)
  - [func http2validWireHeaderFieldName(v string) bool](#net-http-func-http2validWireHeaderFieldName)
  - [func http2httpCodeString(code int) string](#net-http-func-http2httpCodeString)
  - [func http2mustUint31(v int32) uint32](#net-http-func-http2mustUint31)
  - [func http2bodyAllowedForStatus(status int) bool](#net-http-func-http2bodyAllowedForStatus)
  - [func http2validPseudoPath(v string) bool](#net-http-func-http2validPseudoPath)
  - [func http2ConfigureServer(s *Server, conf *http2Server) error](#net-http-func-http2ConfigureServer)
  - [func http2serverConnBaseContext(c net.Conn, opts *http2ServeConnOpts) (ctx context.Context, cancel func())](#net-http-func-http2serverConnBaseContext)
  - [func http2errno(v error) uintptr](#net-http-func-http2errno)
  - [func http2isClosedConnError(err error) bool](#net-http-func-http2isClosedConnError)
  - [func http2checkPriority(streamID uint32, p http2PriorityParam) error](#net-http-func-http2checkPriority)
  - [func http2handleHeaderListTooLong(w ResponseWriter, r *Request)](#net-http-func-http2handleHeaderListTooLong)
  - [func http2checkWriteHeaderCode(code int)](#net-http-func-http2checkWriteHeaderCode)
  - [func http2foreachHeaderElement(v string, fn func(string))](#net-http-func-http2foreachHeaderElement)
  - [func http2checkValidHTTP2RequestHeaders(h Header) error](#net-http-func-http2checkValidHTTP2RequestHeaders)
  - [func http2h1ServerKeepAlivesDisabled(hs *Server) bool](#net-http-func-http2h1ServerKeepAlivesDisabled)
  - [func http2ConfigureTransport(t1 *Transport) error](#net-http-func-http2ConfigureTransport)
  - [func http2awaitRequestCancel(req *Request, done <-chan struct{}) error](#net-http-func-http2awaitRequestCancel)
  - [func http2isNoCachedConnError(err error) bool](#net-http-func-http2isNoCachedConnError)
  - [func http2authorityAddr(scheme string, authority string) (addr string)](#net-http-func-http2authorityAddr)
  - [func http2canRetryError(err error) bool](#net-http-func-http2canRetryError)
  - [func http2commaSeparatedTrailers(req *Request) (string, error)](#net-http-func-http2commaSeparatedTrailers)
  - [func http2checkConnHeaders(req *Request) error](#net-http-func-http2checkConnHeaders)
  - [func http2actualContentLength(req *Request) int64](#net-http-func-http2actualContentLength)
  - [func http2shouldSendReqContentLength(method string, contentLength int64) bool](#net-http-func-http2shouldSendReqContentLength)
  - [func http2isEOFOrNetReadError(err error) bool](#net-http-func-http2isEOFOrNetReadError)
  - [func http2strSliceContains(ss []string, s string) bool](#net-http-func-http2strSliceContains)
  - [func http2isConnectionCloseRequest(req *Request) bool](#net-http-func-http2isConnectionCloseRequest)
  - [func http2registerHTTPSProtocol(t *Transport, rt http2noDialH2RoundTripper) (err error)](#net-http-func-http2registerHTTPSProtocol)
  - [func http2traceGetConn(req *Request, hostPort string)](#net-http-func-http2traceGetConn)
  - [func http2traceGotConn(req *Request, cc *http2ClientConn, reused bool)](#net-http-func-http2traceGotConn)
  - [func http2traceWroteHeaders(trace *httptrace.ClientTrace)](#net-http-func-http2traceWroteHeaders)
  - [func http2traceGot100Continue(trace *httptrace.ClientTrace)](#net-http-func-http2traceGot100Continue)
  - [func http2traceWait100Continue(trace *httptrace.ClientTrace)](#net-http-func-http2traceWait100Continue)
  - [func http2traceWroteRequest(trace *httptrace.ClientTrace, err error)](#net-http-func-http2traceWroteRequest)
  - [func http2traceFirstResponseByte(trace *httptrace.ClientTrace)](#net-http-func-http2traceFirstResponseByte)
  - [func http2writeEndsStream(w http2writeFramer) bool](#net-http-func-http2writeEndsStream)
  - [func http2splitHeaderBlock(ctx http2writeContext, headerBlock []byte, fn func(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error) error](#net-http-func-http2splitHeaderBlock)
  - [func http2encKV(enc *hpack.Encoder, k, v string)](#net-http-func-http2encKV)
  - [func http2encodeHeaders(enc *hpack.Encoder, h Header, keys []string)](#net-http-func-http2encodeHeaders)
  - [func ParseTime(text string) (t time.Time, err error)](#net-http-func-ParseTime)
  - [func CanonicalHeaderKey(s string) string](#net-http-func-CanonicalHeaderKey)
  - [func hasToken(v, token string) bool](#net-http-func-hasToken)
  - [func isTokenBoundary(b byte) bool](#net-http-func-isTokenBoundary)
  - [func hasPort(s string) bool](#net-http-func-hasPort)
  - [func removeEmptyPort(host string) string](#net-http-func-removeEmptyPort)
  - [func isNotToken(r rune) bool](#net-http-func-isNotToken)
  - [func isASCII(s string) bool](#net-http-func-isASCII)
  - [func stringContainsCTLByte(s string) bool](#net-http-func-stringContainsCTLByte)
  - [func hexEscapeNonASCII(s string) string](#net-http-func-hexEscapeNonASCII)
  - [func badStringError(what, val string) error](#net-http-func-badStringError)
  - [func valueOrDefault(value, def string) string](#net-http-func-valueOrDefault)
  - [func idnaASCII(v string) (string, error)](#net-http-func-idnaASCII)
  - [func cleanHost(in string) string](#net-http-func-cleanHost)
  - [func removeZone(host string) string](#net-http-func-removeZone)
  - [func ParseHTTPVersion(vers string) (major, minor int, ok bool)](#net-http-func-ParseHTTPVersion)
  - [func validMethod(method string) bool](#net-http-func-validMethod)
  - [func parseBasicAuth(auth string) (username, password string, ok bool)](#net-http-func-parseBasicAuth)
  - [func parseRequestLine(line string) (method, requestURI, proto string, ok bool)](#net-http-func-parseRequestLine)
  - [func newTextprotoReader(br *bufio.Reader) *textproto.Reader](#net-http-func-newTextprotoReader)
  - [func putTextprotoReader(r *textproto.Reader)](#net-http-func-putTextprotoReader)
  - [func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser](#net-http-func-MaxBytesReader)
  - [func copyValues(dst, src url.Values)](#net-http-func-copyValues)
  - [func parsePostForm(r *Request) (vs url.Values, err error)](#net-http-func-parsePostForm)
  - [func requestMethodUsuallyLacksBody(method string) bool](#net-http-func-requestMethodUsuallyLacksBody)
  - [func fixPragmaCacheControl(header Header)](#net-http-func-fixPragmaCacheControl)
  - [func isProtocolSwitchResponse(code int, h Header) bool](#net-http-func-isProtocolSwitchResponse)
  - [func isProtocolSwitchHeader(h Header) bool](#net-http-func-isProtocolSwitchHeader)
  - [func bufioWriterPool(size int) *sync.Pool](#net-http-func-bufioWriterPool)
  - [func newBufioReader(r io.Reader) *bufio.Reader](#net-http-func-newBufioReader)
  - [func putBufioReader(br *bufio.Reader)](#net-http-func-putBufioReader)
  - [func newBufioWriterSize(w io.Writer, size int) *bufio.Writer](#net-http-func-newBufioWriterSize)
  - [func putBufioWriter(bw *bufio.Writer)](#net-http-func-putBufioWriter)
  - [func appendTime(b []byte, t time.Time) []byte](#net-http-func-appendTime)
  - [func http1ServerSupportsRequest(req *Request) bool](#net-http-func-http1ServerSupportsRequest)
  - [func checkWriteHeaderCode(code int)](#net-http-func-checkWriteHeaderCode)
  - [func relevantCaller() runtime.Frame](#net-http-func-relevantCaller)
  - [func foreachHeaderElement(v string, fn func(string))](#net-http-func-foreachHeaderElement)
  - [func writeStatusLine(bw *bufio.Writer, is11 bool, code int, scratch []byte)](#net-http-func-writeStatusLine)
  - [func validNextProto(proto string) bool](#net-http-func-validNextProto)
  - [func badRequestError(e string) error](#net-http-func-badRequestError)
  - [func isCommonNetReadError(err error) bool](#net-http-func-isCommonNetReadError)
  - [func registerOnHitEOF(rc io.ReadCloser, fn func())](#net-http-func-registerOnHitEOF)
  - [func requestBodyRemains(rc io.ReadCloser) bool](#net-http-func-requestBodyRemains)
  - [func Error(w ResponseWriter, error string, code int)](#net-http-func-Error)
  - [func NotFound(w ResponseWriter, r *Request)](#net-http-func-NotFound)
  - [func Redirect(w ResponseWriter, r *Request, url string, code int)](#net-http-func-Redirect)
  - [func htmlEscape(s string) string](#net-http-func-htmlEscape)
  - [func cleanPath(p string) string](#net-http-func-cleanPath)
  - [func stripHostPort(h string) string](#net-http-func-stripHostPort)
  - [func appendSorted(es []muxEntry, e muxEntry) []muxEntry](#net-http-func-appendSorted)
  - [func Handle(pattern string, handler Handler)](#net-http-func-Handle)
  - [func HandleFunc(pattern string, handler func(ResponseWriter, *Request))](#net-http-func-HandleFunc)
  - [func Serve(l net.Listener, handler Handler) error](#net-http-func-Serve)
  - [func ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error](#net-http-func-ServeTLS)
  - [func logf(r *Request, format string, args ...interface{})](#net-http-func-logf)
  - [func ListenAndServe(addr string, handler Handler) error](#net-http-func-ListenAndServe)
  - [func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error](#net-http-func-ListenAndServeTLS)
  - [func newLoggingConn(baseName string, c net.Conn) net.Conn](#net-http-func-newLoggingConn)
  - [func numLeadingCRorLF(v []byte) (n int)](#net-http-func-numLeadingCRorLF)
  - [func strSliceContains(ss []string, s string) bool](#net-http-func-strSliceContains)
  - [func tlsRecordHeaderLooksLikeHTTP(hdr [5]byte) bool](#net-http-func-tlsRecordHeaderLooksLikeHTTP)
  - [func DetectContentType(data []byte) string](#net-http-func-DetectContentType)
  - [func isWS(b byte) bool](#net-http-func-isWS)
  - [func isTT(b byte) bool](#net-http-func-isTT)
  - [func sockssplitHostPort(address string) (string, int, error)](#net-http-func-sockssplitHostPort)
  - [func StatusText(code int) string](#net-http-func-StatusText)
  - [func noResponseBodyExpected(requestMethod string) bool](#net-http-func-noResponseBodyExpected)
  - [func bodyAllowedForStatus(status int) bool](#net-http-func-bodyAllowedForStatus)
  - [func suppressedHeaders(status int) []string](#net-http-func-suppressedHeaders)
  - [func readTransfer(msg interface{}, r *bufio.Reader) (err error)](#net-http-func-readTransfer)
  - [func chunked(te []string) bool](#net-http-func-chunked)
  - [func isIdentity(te []string) bool](#net-http-func-isIdentity)
  - [func isUnsupportedTEError(err error) bool](#net-http-func-isUnsupportedTEError)
  - [func fixLength(isResponse bool, status int, requestMethod string, header Header, chunked bool) (int64, error)](#net-http-func-fixLength)
  - [func shouldClose(major, minor int, header Header, removeCloseHeader bool) bool](#net-http-func-shouldClose)
  - [func seeUpcomingDoubleCRLF(r *bufio.Reader) bool](#net-http-func-seeUpcomingDoubleCRLF)
  - [func mergeSetHeader(dst *Header, src Header)](#net-http-func-mergeSetHeader)
  - [func parseContentLength(cl string) (int64, error)](#net-http-func-parseContentLength)
  - [func isKnownInMemoryReader(r io.Reader) bool](#net-http-func-isKnownInMemoryReader)
  - [func ProxyFromEnvironment(req *Request) (*url.URL, error)](#net-http-func-ProxyFromEnvironment)
  - [func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)](#net-http-func-ProxyURL)
  - [func envProxyFunc() func(*url.URL) (*url.URL, error)](#net-http-func-envProxyFunc)
  - [func resetProxyConfig()](#net-http-func-resetProxyConfig)
  - [func is408Message(buf []byte) bool](#net-http-func-is408Message)
  - [func newReadWriteCloserBody(br *bufio.Reader, rwc io.ReadWriteCloser) io.ReadWriteCloser](#net-http-func-newReadWriteCloserBody)
  - [func nop()](#net-http-func-nop)
  - [func canonicalAddr(url *url.URL) string](#net-http-func-canonicalAddr)
  - [func cloneTLSConfig(cfg *tls.Config) *tls.Config](#net-http-func-cloneTLSConfig)
  - [func TestWriteSetCookies(t *testing.T)](#net-http-func-TestWriteSetCookies)
  - [func TestSetCookie(t *testing.T)](#net-http-func-TestSetCookie)
  - [func TestAddCookie(t *testing.T)](#net-http-func-TestAddCookie)
  - [func toJSON(v interface{}) string](#net-http-func-toJSON)
  - [func TestReadSetCookies(t *testing.T)](#net-http-func-TestReadSetCookies)
  - [func TestReadCookies(t *testing.T)](#net-http-func-TestReadCookies)
  - [func TestSetCookieDoubleQuotes(t *testing.T)](#net-http-func-TestSetCookieDoubleQuotes)
  - [func TestCookieSanitizeValue(t *testing.T)](#net-http-func-TestCookieSanitizeValue)
  - [func TestCookieSanitizePath(t *testing.T)](#net-http-func-TestCookieSanitizePath)
  - [func BenchmarkCookieString(b *testing.B)](#net-http-func-BenchmarkCookieString)
  - [func BenchmarkReadSetCookies(b *testing.B)](#net-http-func-BenchmarkReadSetCookies)
  - [func BenchmarkReadCookies(b *testing.B)](#net-http-func-BenchmarkReadCookies)
  - [func init()](#net-http-func-init)
  - [func CondSkipHTTP2(t *testing.T)](#net-http-func-CondSkipHTTP2)
  - [func SetReadLoopBeforeNextReadHook(f func())](#net-http-func-SetReadLoopBeforeNextReadHook)
  - [func SetPendingDialHooks(before, after func())](#net-http-func-SetPendingDialHooks)
  - [func SetTestHookServerServe(fn func(*Server, net.Listener))](#net-http-func-SetTestHookServerServe)
  - [func ResetCachedEnvironment()](#net-http-func-ResetCachedEnvironment)
  - [func unnilTestHook(f *func())](#net-http-func-unnilTestHook)
  - [func hookSetter(dst *func()) func(func())](#net-http-func-hookSetter)
  - [func ExportHttp2ConfigureTransport(t *Transport) error](#net-http-func-ExportHttp2ConfigureTransport)
  - [func ExportSetH2GoawayTimeout(d time.Duration) (restore func())](#net-http-func-ExportSetH2GoawayTimeout)
  - [func ExportCloseTransportConnsAbruptly(tr *Transport)](#net-http-func-ExportCloseTransportConnsAbruptly)
  - [func checker(t *testing.T) func(string, error)](#net-http-func-checker)
  - [func TestFileTransport(t *testing.T)](#net-http-func-TestFileTransport)
  - [func TestHeaderWrite(t *testing.T)](#net-http-func-TestHeaderWrite)
  - [func TestParseTime(t *testing.T)](#net-http-func-TestParseTime)
  - [func TestHasToken(t *testing.T)](#net-http-func-TestHasToken)
  - [func TestNilHeaderClone(t *testing.T)](#net-http-func-TestNilHeaderClone)
  - [func BenchmarkHeaderWriteSubset(b *testing.B)](#net-http-func-BenchmarkHeaderWriteSubset)
  - [func TestHeaderWriteSubsetAllocs(t *testing.T)](#net-http-func-TestHeaderWriteSubsetAllocs)
  - [func TestCloneOrMakeHeader(t *testing.T)](#net-http-func-TestCloneOrMakeHeader)
  - [func TestForeachHeaderElement(t *testing.T)](#net-http-func-TestForeachHeaderElement)
  - [func TestCleanHost(t *testing.T)](#net-http-func-TestCleanHost)
  - [func TestCmdGoNoHTTPServer(t *testing.T)](#net-http-func-TestCmdGoNoHTTPServer)
  - [func TestOmitHTTP2(t *testing.T)](#net-http-func-TestOmitHTTP2)
  - [func TestOmitHTTP2Vet(t *testing.T)](#net-http-func-TestOmitHTTP2Vet)
  - [func BenchmarkCopyValues(b *testing.B)](#net-http-func-BenchmarkCopyValues)
  - [func TestCacheKeys(t *testing.T)](#net-http-func-TestCacheKeys)
  - [func ResetProxyEnv()](#net-http-func-ResetProxyEnv)
  - [func TestParseRange(t *testing.T)](#net-http-func-TestParseRange)
  - [func TestReadRequest(t *testing.T)](#net-http-func-TestReadRequest)
  - [func reqBytes(req string) []byte](#net-http-func-reqBytes)
  - [func TestReadRequest_Bad(t *testing.T)](#net-http-func-TestReadRequest_Bad)
  - [func TestRequestWrite(t *testing.T)](#net-http-func-TestRequestWrite)
  - [func TestRequestWriteTransport(t *testing.T)](#net-http-func-TestRequestWriteTransport)
  - [func TestRequestWriteClosesBody(t *testing.T)](#net-http-func-TestRequestWriteClosesBody)
  - [func chunk(s string) string](#net-http-func-chunk)
  - [func mustParseURL(s string) *url.URL](#net-http-func-mustParseURL)
  - [func TestRequestWriteError(t *testing.T)](#net-http-func-TestRequestWriteError)
  - [func dumpRequestOut(req *Request, onReadHeaders func()) ([]byte, error)](#net-http-func-dumpRequestOut)
  - [func TestReadResponse(t *testing.T)](#net-http-func-TestReadResponse)
  - [func TestWriteResponse(t *testing.T)](#net-http-func-TestWriteResponse)
  - [func TestReadResponseCloseInMiddle(t *testing.T)](#net-http-func-TestReadResponseCloseInMiddle)
  - [func diff(t *testing.T, prefix string, have, want interface{})](#net-http-func-diff)
  - [func TestLocationResponse(t *testing.T)](#net-http-func-TestLocationResponse)
  - [func TestResponseStatusStutter(t *testing.T)](#net-http-func-TestResponseStatusStutter)
  - [func TestResponseContentLengthShortBody(t *testing.T)](#net-http-func-TestResponseContentLengthShortBody)
  - [func TestReadResponseErrors(t *testing.T)](#net-http-func-TestReadResponseErrors)
  - [func matchErr(err error, wantErr interface{}) error](#net-http-func-matchErr)
  - [func TestNeedsSniff(t *testing.T)](#net-http-func-TestNeedsSniff)
  - [func TestResponseWritesOnlySingleConnectionClose(t *testing.T)](#net-http-func-TestResponseWritesOnlySingleConnectionClose)
  - [func TestResponseWrite(t *testing.T)](#net-http-func-TestResponseWrite)
  - [func BenchmarkServerMatch(b *testing.B)](#net-http-func-BenchmarkServerMatch)
  - [func TestBodyReadBadTrailer(t *testing.T)](#net-http-func-TestBodyReadBadTrailer)
  - [func TestFinalChunkedBodyReadEOF(t *testing.T)](#net-http-func-TestFinalChunkedBodyReadEOF)
  - [func TestDetectInMemoryReaders(t *testing.T)](#net-http-func-TestDetectInMemoryReaders)
  - [func TestTransferWriterWriteBodyReaderTypes(t *testing.T)](#net-http-func-TestTransferWriterWriteBodyReaderTypes)
  - [func TestParseTransferEncoding(t *testing.T)](#net-http-func-TestParseTransferEncoding)
  - [func TestParseContentLength(t *testing.T)](#net-http-func-TestParseContentLength)
  - [func TestTransportPersistConnReadLoopEOF(t *testing.T)](#net-http-func-TestTransportPersistConnReadLoopEOF)
  - [func isTransportReadFromServerError(err error) bool](#net-http-func-isTransportReadFromServerError)
  - [func newLocalListener(t *testing.T) net.Listener](#net-http-func-newLocalListener)
  - [func TestTransportShouldRetryRequest(t *testing.T)](#net-http-func-TestTransportShouldRetryRequest)
  - [func TestTransportBodyAltRewind(t *testing.T)](#net-http-func-TestTransportBodyAltRewind)

### <a name="net-http-const">Constants <small>(exported)</small></a>

#### <a name="net-http-const-maxBodySlurpSize">const maxBodySlurpSize</a>

```Go
const maxBodySlurpSize = 2 << 10
```

Close the previous response's body. But read at least some of the body so if it's small the underlying TCP connection will be re-used. No need to check for errors: if it fails, the Transport won't reuse it anyway. 

#### <a name="net-http-const-SameSiteDefaultMode">const SameSiteDefaultMode <small>(exported)</small></a>

```Go
const SameSiteDefaultMode SameSite = iota + 1
```

#### <a name="net-http-const-SameSiteLaxMode">const SameSiteLaxMode <small>(exported)</small></a>

```Go
const SameSiteLaxMode
```

#### <a name="net-http-const-SameSiteStrictMode">const SameSiteStrictMode <small>(exported)</small></a>

```Go
const SameSiteStrictMode
```

#### <a name="net-http-const-SameSiteNoneMode">const SameSiteNoneMode <small>(exported)</small></a>

```Go
const SameSiteNoneMode
```

#### <a name="net-http-const-extraCookieLength">const extraCookieLength</a>

```Go
const extraCookieLength = 110
```

extraCookieLength derived from typical length of cookie attributes see RFC 6265 Sec 4.1. 

#### <a name="net-http-const-condNone">const condNone</a>

```Go
const condNone condResult = iota
```

#### <a name="net-http-const-condTrue">const condTrue</a>

```Go
const condTrue
```

#### <a name="net-http-const-condFalse">const condFalse</a>

```Go
const condFalse
```

#### <a name="net-http-const-indexPage">const indexPage</a>

```Go
const indexPage = "/index.html"
```

#### <a name="net-http-const-b">const b</a>

```Go
const b = "bytes="
```

#### <a name="net-http-const-http2cipher_TLS_NULL_WITH_NULL_NULL">const http2cipher_TLS_NULL_WITH_NULL_NULL</a>

```Go
const http2cipher_TLS_NULL_WITH_NULL_NULL uint16 = 0x0000
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_NULL_MD5">const http2cipher_TLS_RSA_WITH_NULL_MD5</a>

```Go
const http2cipher_TLS_RSA_WITH_NULL_MD5 uint16 = 0x0001
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_NULL_SHA">const http2cipher_TLS_RSA_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_NULL_SHA uint16 = 0x0002
```

#### <a name="net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5">const http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5</a>

```Go
const http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5 uint16 = 0x0003
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_RC4_128_MD5">const http2cipher_TLS_RSA_WITH_RC4_128_MD5</a>

```Go
const http2cipher_TLS_RSA_WITH_RC4_128_MD5 uint16 = 0x0004
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_RC4_128_SHA">const http2cipher_TLS_RSA_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_RC4_128_SHA uint16 = 0x0005
```

#### <a name="net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5">const http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5</a>

```Go
const http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 uint16 = 0x0006
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA">const http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA uint16 = 0x0007
```

#### <a name="net-http-const-http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0008
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_DES_CBC_SHA">const http2cipher_TLS_RSA_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_DES_CBC_SHA uint16 = 0x0009
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0x000A
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x000B
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA uint16 = 0x000C
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA uint16 = 0x000D
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x000E
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA uint16 = 0x000F
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0x0010
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0011
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA uint16 = 0x0012
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA uint16 = 0x0013
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0014
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA uint16 = 0x0015
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0x0016
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5">const http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5</a>

```Go
const http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 uint16 = 0x0017
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_RC4_128_MD5">const http2cipher_TLS_DH_anon_WITH_RC4_128_MD5</a>

```Go
const http2cipher_TLS_DH_anon_WITH_RC4_128_MD5 uint16 = 0x0018
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA">const http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA uint16 = 0x0019
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA uint16 = 0x001A
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA uint16 = 0x001B
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_DES_CBC_SHA">const http2cipher_TLS_KRB5_WITH_DES_CBC_SHA</a>

```Go
const http2cipher_TLS_KRB5_WITH_DES_CBC_SHA uint16 = 0x001E
```

Reserved uint16 =  0x001C-1D 

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA uint16 = 0x001F
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_RC4_128_SHA">const http2cipher_TLS_KRB5_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_KRB5_WITH_RC4_128_SHA uint16 = 0x0020
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA">const http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA</a>

```Go
const http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA uint16 = 0x0021
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_DES_CBC_MD5">const http2cipher_TLS_KRB5_WITH_DES_CBC_MD5</a>

```Go
const http2cipher_TLS_KRB5_WITH_DES_CBC_MD5 uint16 = 0x0022
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5">const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5</a>

```Go
const http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5 uint16 = 0x0023
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_RC4_128_MD5">const http2cipher_TLS_KRB5_WITH_RC4_128_MD5</a>

```Go
const http2cipher_TLS_KRB5_WITH_RC4_128_MD5 uint16 = 0x0024
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5">const http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5</a>

```Go
const http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5 uint16 = 0x0025
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA">const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA uint16 = 0x0026
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA">const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA uint16 = 0x0027
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA">const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA uint16 = 0x0028
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5">const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 uint16 = 0x0029
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5">const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 uint16 = 0x002A
```

#### <a name="net-http-const-http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5">const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5</a>

```Go
const http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5 uint16 = 0x002B
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA">const http2cipher_TLS_PSK_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_PSK_WITH_NULL_SHA uint16 = 0x002C
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA">const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA uint16 = 0x002D
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA">const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA uint16 = 0x002E
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA uint16 = 0x002F
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA uint16 = 0x0030
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA uint16 = 0x0031
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA uint16 = 0x0032
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA uint16 = 0x0033
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA uint16 = 0x0034
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA uint16 = 0x0035
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA uint16 = 0x0036
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA uint16 = 0x0037
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA uint16 = 0x0038
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA uint16 = 0x0039
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA uint16 = 0x003A
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_NULL_SHA256">const http2cipher_TLS_RSA_WITH_NULL_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_NULL_SHA256 uint16 = 0x003B
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0x003C
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256 uint16 = 0x003D
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256 uint16 = 0x003E
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0x003F
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 uint16 = 0x0040
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0041
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0042
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0043
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0044
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0045
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA uint16 = 0x0046
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0x0067
```

Reserved uint16 =  0x0047-4F Reserved uint16 =  0x0050-58 Reserved uint16 =  0x0059-5C Unassigned uint16 =  0x005D-5F Reserved uint16 =  0x0060-66 

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256 uint16 = 0x0068
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256 uint16 = 0x0069
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 uint16 = 0x006A
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 uint16 = 0x006B
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256 uint16 = 0x006C
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256">const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256 uint16 = 0x006D
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0084
```

Unassigned uint16 =  0x006E-83 

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0085
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0086
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0087
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0088
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA uint16 = 0x0089
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_RC4_128_SHA">const http2cipher_TLS_PSK_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_PSK_WITH_RC4_128_SHA uint16 = 0x008A
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA uint16 = 0x008B
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA">const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA uint16 = 0x008C
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA">const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA uint16 = 0x008D
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA">const http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA uint16 = 0x008E
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA uint16 = 0x008F
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA">const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA uint16 = 0x0090
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA">const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA uint16 = 0x0091
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA">const http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA uint16 = 0x0092
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA uint16 = 0x0093
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA">const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA uint16 = 0x0094
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA">const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA uint16 = 0x0095
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_SEED_CBC_SHA">const http2cipher_TLS_RSA_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_RSA_WITH_SEED_CBC_SHA uint16 = 0x0096
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA">const http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA uint16 = 0x0097
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA">const http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA uint16 = 0x0098
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA">const http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA uint16 = 0x0099
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA">const http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA uint16 = 0x009A
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA">const http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA</a>

```Go
const http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA uint16 = 0x009B
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256 uint16 = 0x009C
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384 uint16 = 0x009D
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 uint16 = 0x009E
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 uint16 = 0x009F
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256 uint16 = 0x00A0
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384 uint16 = 0x00A1
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 uint16 = 0x00A2
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 uint16 = 0x00A3
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256 uint16 = 0x00A4
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384 uint16 = 0x00A5
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256 uint16 = 0x00A6
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384 uint16 = 0x00A7
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256 uint16 = 0x00A8
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384 uint16 = 0x00A9
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 uint16 = 0x00AA
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 uint16 = 0x00AB
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 uint16 = 0x00AC
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 uint16 = 0x00AD
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256 uint16 = 0x00AE
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384 uint16 = 0x00AF
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA256">const http2cipher_TLS_PSK_WITH_NULL_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_NULL_SHA256 uint16 = 0x00B0
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_NULL_SHA384">const http2cipher_TLS_PSK_WITH_NULL_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_NULL_SHA384 uint16 = 0x00B1
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 uint16 = 0x00B2
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 uint16 = 0x00B3
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256">const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256 uint16 = 0x00B4
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384">const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384 uint16 = 0x00B5
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 uint16 = 0x00B6
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 uint16 = 0x00B7
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256">const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256 uint16 = 0x00B8
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384">const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384 uint16 = 0x00B9
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BA
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BB
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BC
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BD
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BE
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0x00BF
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C0
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C1
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C2
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C3
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C4
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 uint16 = 0x00C5
```

#### <a name="net-http-const-http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV">const http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV</a>

```Go
const http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV uint16 = 0x00FF
```

Unassigned uint16 =  0x00C6-FE 

#### <a name="net-http-const-http2cipher_TLS_FALLBACK_SCSV">const http2cipher_TLS_FALLBACK_SCSV</a>

```Go
const http2cipher_TLS_FALLBACK_SCSV uint16 = 0x5600
```

Unassigned uint16 =  0x01-55,* 

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA">const http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA uint16 = 0xC001
```

Unassigned                                   uint16 = 0x5601 - 0xC000 

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA">const http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA uint16 = 0xC002
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC003
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA uint16 = 0xC004
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA uint16 = 0xC005
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA">const http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA uint16 = 0xC006
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA">const http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA uint16 = 0xC007
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC008
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA uint16 = 0xC009
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA uint16 = 0xC00A
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA">const http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA uint16 = 0xC00B
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA">const http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA uint16 = 0xC00C
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC00D
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA uint16 = 0xC00E
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA uint16 = 0xC00F
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA">const http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA uint16 = 0xC010
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA">const http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA uint16 = 0xC011
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC012
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA uint16 = 0xC013
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA uint16 = 0xC014
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_anon_WITH_NULL_SHA">const http2cipher_TLS_ECDH_anon_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDH_anon_WITH_NULL_SHA uint16 = 0xC015
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA">const http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA uint16 = 0xC016
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA uint16 = 0xC017
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA uint16 = 0xC018
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA uint16 = 0xC019
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC01A
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA uint16 = 0xC01B
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA uint16 = 0xC01C
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA uint16 = 0xC01D
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA">const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA uint16 = 0xC01E
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA">const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA uint16 = 0xC01F
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA uint16 = 0xC020
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA">const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA uint16 = 0xC021
```

#### <a name="net-http-const-http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA">const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA uint16 = 0xC022
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 uint16 = 0xC023
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 uint16 = 0xC024
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 uint16 = 0xC025
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 uint16 = 0xC026
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0xC027
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 uint16 = 0xC028
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 uint16 = 0xC029
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 uint16 = 0xC02A
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 uint16 = 0xC02B
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 uint16 = 0xC02C
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 uint16 = 0xC02D
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 uint16 = 0xC02E
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 uint16 = 0xC02F
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 uint16 = 0xC030
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 uint16 = 0xC031
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 uint16 = 0xC032
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA">const http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA uint16 = 0xC033
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA">const http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA uint16 = 0xC034
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA">const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA uint16 = 0xC035
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA">const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA uint16 = 0xC036
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256">const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 uint16 = 0xC037
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384">const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 uint16 = 0xC038
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA">const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA uint16 = 0xC039
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256">const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256 uint16 = 0xC03A
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384">const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384 uint16 = 0xC03B
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC03C
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC03D
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC03E
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC03F
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC040
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC041
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC042
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC043
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC044
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC045
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC046
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC047
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC048
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC049
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC04A
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC04B
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC04C
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC04D
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC04E
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC04F
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC050
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC051
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC052
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC053
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC054
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC055
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC056
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC057
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC058
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC059
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC05A
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC05B
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC05C
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC05D
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC05E
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC05F
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC060
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC061
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC062
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC063
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC064
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC065
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC066
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC067
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC068
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC069
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC06A
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC06B
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC06C
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC06D
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256">const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 uint16 = 0xC06E
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384">const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 uint16 = 0xC06F
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 uint16 = 0xC070
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 uint16 = 0xC071
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC072
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC073
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC074
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC075
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC076
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC077
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC078
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC079
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC07A
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC07B
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC07C
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC07D
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC07E
```

#### <a name="net-http-const-http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC07F
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC080
```

#### <a name="net-http-const-http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC081
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC082
```

#### <a name="net-http-const-http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC083
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC084
```

#### <a name="net-http-const-http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC085
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC086
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC087
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC088
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC089
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC08A
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC08B
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC08C
```

#### <a name="net-http-const-http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC08D
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC08E
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC08F
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC090
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC091
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256">const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 uint16 = 0xC092
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384">const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 uint16 = 0xC093
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC094
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC095
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC096
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC097
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC098
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC099
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256">const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 uint16 = 0xC09A
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384">const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 uint16 = 0xC09B
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CCM">const http2cipher_TLS_RSA_WITH_AES_128_CCM</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_128_CCM uint16 = 0xC09C
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CCM">const http2cipher_TLS_RSA_WITH_AES_256_CCM</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_256_CCM uint16 = 0xC09D
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM">const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM uint16 = 0xC09E
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM">const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM uint16 = 0xC09F
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_128_CCM_8">const http2cipher_TLS_RSA_WITH_AES_128_CCM_8</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_128_CCM_8 uint16 = 0xC0A0
```

#### <a name="net-http-const-http2cipher_TLS_RSA_WITH_AES_256_CCM_8">const http2cipher_TLS_RSA_WITH_AES_256_CCM_8</a>

```Go
const http2cipher_TLS_RSA_WITH_AES_256_CCM_8 uint16 = 0xC0A1
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8">const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8 uint16 = 0xC0A2
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8">const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8 uint16 = 0xC0A3
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CCM">const http2cipher_TLS_PSK_WITH_AES_128_CCM</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_128_CCM uint16 = 0xC0A4
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CCM">const http2cipher_TLS_PSK_WITH_AES_256_CCM</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_256_CCM uint16 = 0xC0A5
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM">const http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM uint16 = 0xC0A6
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM">const http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM uint16 = 0xC0A7
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_128_CCM_8">const http2cipher_TLS_PSK_WITH_AES_128_CCM_8</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_128_CCM_8 uint16 = 0xC0A8
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_AES_256_CCM_8">const http2cipher_TLS_PSK_WITH_AES_256_CCM_8</a>

```Go
const http2cipher_TLS_PSK_WITH_AES_256_CCM_8 uint16 = 0xC0A9
```

#### <a name="net-http-const-http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8">const http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8</a>

```Go
const http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8 uint16 = 0xC0AA
```

#### <a name="net-http-const-http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8">const http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8</a>

```Go
const http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8 uint16 = 0xC0AB
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM uint16 = 0xC0AC
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM uint16 = 0xC0AD
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 uint16 = 0xC0AE
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8">const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 uint16 = 0xC0AF
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCA8
```

Unassigned uint16 =  0xC0B0-FF Unassigned uint16 =  0xC1-CB,* Unassigned uint16 =  0xCC00-A7 

#### <a name="net-http-const-http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCA9
```

#### <a name="net-http-const-http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCAA
```

#### <a name="net-http-const-http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCAB
```

#### <a name="net-http-const-http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCAC
```

#### <a name="net-http-const-http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCAD
```

#### <a name="net-http-const-http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256">const http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256</a>

```Go
const http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 uint16 = 0xCCAE
```

#### <a name="net-http-const-http2dialOnMiss">const http2dialOnMiss</a>

```Go
const http2dialOnMiss = true
```

#### <a name="net-http-const-http2noDialOnMiss">const http2noDialOnMiss</a>

```Go
const http2noDialOnMiss = false
```

#### <a name="net-http-const-singleUse">const singleUse</a>

```Go
const singleUse = true
```

#### <a name="net-http-const-singleUse">const singleUse</a>

```Go
const singleUse = false // shared conn

```

#### <a name="net-http-const-http2ErrCodeNo">const http2ErrCodeNo</a>

```Go
const http2ErrCodeNo http2ErrCode = 0x0
```

#### <a name="net-http-const-http2ErrCodeProtocol">const http2ErrCodeProtocol</a>

```Go
const http2ErrCodeProtocol http2ErrCode = 0x1
```

#### <a name="net-http-const-http2ErrCodeInternal">const http2ErrCodeInternal</a>

```Go
const http2ErrCodeInternal http2ErrCode = 0x2
```

#### <a name="net-http-const-http2ErrCodeFlowControl">const http2ErrCodeFlowControl</a>

```Go
const http2ErrCodeFlowControl http2ErrCode = 0x3
```

#### <a name="net-http-const-http2ErrCodeSettingsTimeout">const http2ErrCodeSettingsTimeout</a>

```Go
const http2ErrCodeSettingsTimeout http2ErrCode = 0x4
```

#### <a name="net-http-const-http2ErrCodeStreamClosed">const http2ErrCodeStreamClosed</a>

```Go
const http2ErrCodeStreamClosed http2ErrCode = 0x5
```

#### <a name="net-http-const-http2ErrCodeFrameSize">const http2ErrCodeFrameSize</a>

```Go
const http2ErrCodeFrameSize http2ErrCode = 0x6
```

#### <a name="net-http-const-http2ErrCodeRefusedStream">const http2ErrCodeRefusedStream</a>

```Go
const http2ErrCodeRefusedStream http2ErrCode = 0x7
```

#### <a name="net-http-const-http2ErrCodeCancel">const http2ErrCodeCancel</a>

```Go
const http2ErrCodeCancel http2ErrCode = 0x8
```

#### <a name="net-http-const-http2ErrCodeCompression">const http2ErrCodeCompression</a>

```Go
const http2ErrCodeCompression http2ErrCode = 0x9
```

#### <a name="net-http-const-http2ErrCodeConnect">const http2ErrCodeConnect</a>

```Go
const http2ErrCodeConnect http2ErrCode = 0xa
```

#### <a name="net-http-const-http2ErrCodeEnhanceYourCalm">const http2ErrCodeEnhanceYourCalm</a>

```Go
const http2ErrCodeEnhanceYourCalm http2ErrCode = 0xb
```

#### <a name="net-http-const-http2ErrCodeInadequateSecurity">const http2ErrCodeInadequateSecurity</a>

```Go
const http2ErrCodeInadequateSecurity http2ErrCode = 0xc
```

#### <a name="net-http-const-http2ErrCodeHTTP11Required">const http2ErrCodeHTTP11Required</a>

```Go
const http2ErrCodeHTTP11Required http2ErrCode = 0xd
```

#### <a name="net-http-const-http2frameHeaderLen">const http2frameHeaderLen</a>

```Go
const http2frameHeaderLen = 9
```

#### <a name="net-http-const-http2FrameData">const http2FrameData</a>

```Go
const http2FrameData http2FrameType = 0x0
```

#### <a name="net-http-const-http2FrameHeaders">const http2FrameHeaders</a>

```Go
const http2FrameHeaders http2FrameType = 0x1
```

#### <a name="net-http-const-http2FramePriority">const http2FramePriority</a>

```Go
const http2FramePriority http2FrameType = 0x2
```

#### <a name="net-http-const-http2FrameRSTStream">const http2FrameRSTStream</a>

```Go
const http2FrameRSTStream http2FrameType = 0x3
```

#### <a name="net-http-const-http2FrameSettings">const http2FrameSettings</a>

```Go
const http2FrameSettings http2FrameType = 0x4
```

#### <a name="net-http-const-http2FramePushPromise">const http2FramePushPromise</a>

```Go
const http2FramePushPromise http2FrameType = 0x5
```

#### <a name="net-http-const-http2FramePing">const http2FramePing</a>

```Go
const http2FramePing http2FrameType = 0x6
```

#### <a name="net-http-const-http2FrameGoAway">const http2FrameGoAway</a>

```Go
const http2FrameGoAway http2FrameType = 0x7
```

#### <a name="net-http-const-http2FrameWindowUpdate">const http2FrameWindowUpdate</a>

```Go
const http2FrameWindowUpdate http2FrameType = 0x8
```

#### <a name="net-http-const-http2FrameContinuation">const http2FrameContinuation</a>

```Go
const http2FrameContinuation http2FrameType = 0x9
```

#### <a name="net-http-const-http2FlagDataEndStream">const http2FlagDataEndStream</a>

```Go
const http2FlagDataEndStream http2Flags = 0x1
```

Frame-specific FrameHeader flag bits. 

Data Frame 

#### <a name="net-http-const-http2FlagDataPadded">const http2FlagDataPadded</a>

```Go
const http2FlagDataPadded http2Flags = 0x8
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2FlagHeadersEndStream">const http2FlagHeadersEndStream</a>

```Go
const http2FlagHeadersEndStream http2Flags = 0x1
```

Frame-specific FrameHeader flag bits. 

Headers Frame 

#### <a name="net-http-const-http2FlagHeadersEndHeaders">const http2FlagHeadersEndHeaders</a>

```Go
const http2FlagHeadersEndHeaders http2Flags = 0x4
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2FlagHeadersPadded">const http2FlagHeadersPadded</a>

```Go
const http2FlagHeadersPadded http2Flags = 0x8
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2FlagHeadersPriority">const http2FlagHeadersPriority</a>

```Go
const http2FlagHeadersPriority http2Flags = 0x20
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2FlagSettingsAck">const http2FlagSettingsAck</a>

```Go
const http2FlagSettingsAck http2Flags = 0x1
```

Frame-specific FrameHeader flag bits. 

Settings Frame 

#### <a name="net-http-const-http2FlagPingAck">const http2FlagPingAck</a>

```Go
const http2FlagPingAck http2Flags = 0x1
```

Frame-specific FrameHeader flag bits. 

Ping Frame 

#### <a name="net-http-const-http2FlagContinuationEndHeaders">const http2FlagContinuationEndHeaders</a>

```Go
const http2FlagContinuationEndHeaders http2Flags = 0x4
```

Frame-specific FrameHeader flag bits. 

Continuation Frame 

#### <a name="net-http-const-http2FlagPushPromiseEndHeaders">const http2FlagPushPromiseEndHeaders</a>

```Go
const http2FlagPushPromiseEndHeaders http2Flags = 0x4
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2FlagPushPromisePadded">const http2FlagPushPromisePadded</a>

```Go
const http2FlagPushPromisePadded http2Flags = 0x8
```

Frame-specific FrameHeader flag bits. 

#### <a name="net-http-const-http2minMaxFrameSize">const http2minMaxFrameSize</a>

```Go
const http2minMaxFrameSize = 1 << 14
```

#### <a name="net-http-const-http2maxFrameSize">const http2maxFrameSize</a>

```Go
const http2maxFrameSize = 1<<24 - 1
```

#### <a name="net-http-const-max">const max</a>

```Go
const max = 256
```

#### <a name="net-http-const-http2ClientPreface">const http2ClientPreface</a>

```Go
const http2ClientPreface = "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"
```

ClientPreface is the string that must be sent by new connections from clients. 

#### <a name="net-http-const-http2initialMaxFrameSize">const http2initialMaxFrameSize</a>

```Go
const http2initialMaxFrameSize = 16384
```

SETTINGS_MAX_FRAME_SIZE default [http://http2.github.io/http2-spec/#rfc.section.6.5.2](http://http2.github.io/http2-spec/#rfc.section.6.5.2) 

#### <a name="net-http-const-http2NextProtoTLS">const http2NextProtoTLS</a>

```Go
const http2NextProtoTLS = "h2"
```

NextProtoTLS is the NPN/ALPN protocol negotiated during HTTP/2's TLS setup. 

#### <a name="net-http-const-http2initialHeaderTableSize">const http2initialHeaderTableSize</a>

```Go
const http2initialHeaderTableSize = 4096
```

[http://http2.github.io/http2-spec/#SettingValues](http://http2.github.io/http2-spec/#SettingValues) 

#### <a name="net-http-const-http2initialWindowSize">const http2initialWindowSize</a>

```Go
const http2initialWindowSize = 65535 // 6.9.2 Initial Flow Control Window Size

```

#### <a name="net-http-const-http2defaultMaxReadFrameSize">const http2defaultMaxReadFrameSize</a>

```Go
const http2defaultMaxReadFrameSize = 1 << 20
```

#### <a name="net-http-const-http2stateIdle">const http2stateIdle</a>

```Go
const http2stateIdle http2streamState = iota
```

HTTP/2 stream states. 

See [http://tools.ietf.org/html/rfc7540#section-5.1](http://tools.ietf.org/html/rfc7540#section-5.1). 

For simplicity, the server code merges "reserved (local)" into "half-closed (remote)". This is one less state transition to track. The only downside is that we send PUSH_PROMISEs slightly less liberally than allowable. More discussion here: [https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html](https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html) 

"reserved (remote)" is omitted since the client code does not support server push. 

#### <a name="net-http-const-http2stateOpen">const http2stateOpen</a>

```Go
const http2stateOpen
```

HTTP/2 stream states. 

See [http://tools.ietf.org/html/rfc7540#section-5.1](http://tools.ietf.org/html/rfc7540#section-5.1). 

For simplicity, the server code merges "reserved (local)" into "half-closed (remote)". This is one less state transition to track. The only downside is that we send PUSH_PROMISEs slightly less liberally than allowable. More discussion here: [https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html](https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html) 

"reserved (remote)" is omitted since the client code does not support server push. 

#### <a name="net-http-const-http2stateHalfClosedLocal">const http2stateHalfClosedLocal</a>

```Go
const http2stateHalfClosedLocal
```

HTTP/2 stream states. 

See [http://tools.ietf.org/html/rfc7540#section-5.1](http://tools.ietf.org/html/rfc7540#section-5.1). 

For simplicity, the server code merges "reserved (local)" into "half-closed (remote)". This is one less state transition to track. The only downside is that we send PUSH_PROMISEs slightly less liberally than allowable. More discussion here: [https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html](https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html) 

"reserved (remote)" is omitted since the client code does not support server push. 

#### <a name="net-http-const-http2stateHalfClosedRemote">const http2stateHalfClosedRemote</a>

```Go
const http2stateHalfClosedRemote
```

HTTP/2 stream states. 

See [http://tools.ietf.org/html/rfc7540#section-5.1](http://tools.ietf.org/html/rfc7540#section-5.1). 

For simplicity, the server code merges "reserved (local)" into "half-closed (remote)". This is one less state transition to track. The only downside is that we send PUSH_PROMISEs slightly less liberally than allowable. More discussion here: [https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html](https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html) 

"reserved (remote)" is omitted since the client code does not support server push. 

#### <a name="net-http-const-http2stateClosed">const http2stateClosed</a>

```Go
const http2stateClosed
```

HTTP/2 stream states. 

See [http://tools.ietf.org/html/rfc7540#section-5.1](http://tools.ietf.org/html/rfc7540#section-5.1). 

For simplicity, the server code merges "reserved (local)" into "half-closed (remote)". This is one less state transition to track. The only downside is that we send PUSH_PROMISEs slightly less liberally than allowable. More discussion here: [https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html](https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html) 

"reserved (remote)" is omitted since the client code does not support server push. 

#### <a name="net-http-const-http2SettingHeaderTableSize">const http2SettingHeaderTableSize</a>

```Go
const http2SettingHeaderTableSize http2SettingID = 0x1
```

#### <a name="net-http-const-http2SettingEnablePush">const http2SettingEnablePush</a>

```Go
const http2SettingEnablePush http2SettingID = 0x2
```

#### <a name="net-http-const-http2SettingMaxConcurrentStreams">const http2SettingMaxConcurrentStreams</a>

```Go
const http2SettingMaxConcurrentStreams http2SettingID = 0x3
```

#### <a name="net-http-const-http2SettingInitialWindowSize">const http2SettingInitialWindowSize</a>

```Go
const http2SettingInitialWindowSize http2SettingID = 0x4
```

#### <a name="net-http-const-http2SettingMaxFrameSize">const http2SettingMaxFrameSize</a>

```Go
const http2SettingMaxFrameSize http2SettingID = 0x5
```

#### <a name="net-http-const-http2SettingMaxHeaderListSize">const http2SettingMaxHeaderListSize</a>

```Go
const http2SettingMaxHeaderListSize http2SettingID = 0x6
```

#### <a name="net-http-const-http2bufWriterPoolBufferSize">const http2bufWriterPoolBufferSize</a>

```Go
const http2bufWriterPoolBufferSize = 4 << 10
```

bufWriterPoolBufferSize is the size of bufio.Writer's buffers created using bufWriterPool. 

TODO: pick a less arbitrary value? this is a bit under (3 x typical 1500 byte MTU) at least. Other than that, not much thought went into it. 

#### <a name="net-http-const-http2prefaceTimeout">const http2prefaceTimeout</a>

```Go
const http2prefaceTimeout = 10 * time.Second
```

#### <a name="net-http-const-http2firstSettingsTimeout">const http2firstSettingsTimeout</a>

```Go
const http2firstSettingsTimeout = 2 * time.Second // should be in-flight with preface anyway

```

#### <a name="net-http-const-http2handlerChunkWriteSize">const http2handlerChunkWriteSize</a>

```Go
const http2handlerChunkWriteSize = 4 << 10
```

#### <a name="net-http-const-http2defaultMaxStreams">const http2defaultMaxStreams</a>

```Go
const http2defaultMaxStreams = 250 // TODO: make this 100 as the GFE seems to?

```

#### <a name="net-http-const-http2maxQueuedControlFrames">const http2maxQueuedControlFrames</a>

```Go
const http2maxQueuedControlFrames = 10000
```

#### <a name="net-http-const-perFieldOverhead">const perFieldOverhead</a>

```Go
const perFieldOverhead = 32 // per http2 spec

```

http2's count is in a slightly different unit and includes 32 bytes per pair. So, take the net/http.Server value and pad it up a bit, assuming 10 headers. 

#### <a name="net-http-const-typicalHeaders">const typicalHeaders</a>

```Go
const typicalHeaders = 10 // conservative

```

#### <a name="net-http-const-WSAECONNABORTED">const WSAECONNABORTED <small>(exported)</small></a>

```Go
const WSAECONNABORTED = 10053
```

#### <a name="net-http-const-WSAECONNRESET">const WSAECONNRESET <small>(exported)</small></a>

```Go
const WSAECONNRESET = 10054
```

#### <a name="net-http-const-size">const size</a>

```Go
const size = 64 << 10
```

#### <a name="net-http-const-statusRequestHeaderFieldsTooLarge">const statusRequestHeaderFieldsTooLarge</a>

```Go
const statusRequestHeaderFieldsTooLarge = 431 // only in Go 1.6+

```

10.5.1 Limits on Header Block Size: .. "A server that receives a larger header block than it is willing to handle can send an HTTP 431 (Request Header Fields Too Large) status code" 

#### <a name="net-http-const-maxUint31">const maxUint31</a>

```Go
const maxUint31 = 1<<31 - 1
```

"The legal range for the increment to the flow control window is 1 to 2^31-1 (2,147,483,647) octets." A Go Read call on 64-bit machines could in theory read a larger Read than this. Very unlikely, but we handle it here rather than elsewhere for now. 

#### <a name="net-http-const-http2TrailerPrefix">const http2TrailerPrefix</a>

```Go
const http2TrailerPrefix = "Trailer:"
```

TrailerPrefix is a magic prefix for ResponseWriter.Header map keys that, if present, signals that the map entry is actually for the response trailers, and not the response headers. The prefix is stripped after the ServeHTTP call finishes and the values are sent in the trailers. 

This mechanism is intended only for trailers that are not known prior to the headers being written. If the set of trailers is fixed or known before the header is written, the normal Go trailers mechanism is preferred: 

```
[https://golang.org/pkg/net/http/#ResponseWriter](https://golang.org/pkg/net/http/#ResponseWriter)
[https://golang.org/pkg/net/http/#example_ResponseWriter_trailers](https://golang.org/pkg/net/http/#example_ResponseWriter_trailers)

```
#### <a name="net-http-const-http2transportDefaultConnFlow">const http2transportDefaultConnFlow</a>

```Go
const http2transportDefaultConnFlow = 1 << 30
```

transportDefaultConnFlow is how many connection-level flow control tokens we give the server at start-up, past the default 64k. 

#### <a name="net-http-const-http2transportDefaultStreamFlow">const http2transportDefaultStreamFlow</a>

```Go
const http2transportDefaultStreamFlow = 4 << 20
```

transportDefaultStreamFlow is how many stream-level flow control tokens we announce to the peer, and how many bytes we buffer per stream. 

#### <a name="net-http-const-http2transportDefaultStreamMinRefresh">const http2transportDefaultStreamMinRefresh</a>

```Go
const http2transportDefaultStreamMinRefresh = 4 << 10
```

transportDefaultStreamMinRefresh is the minimum number of bytes we'll send a stream-level WINDOW_UPDATE for at a time. 

#### <a name="net-http-const-http2defaultUserAgent">const http2defaultUserAgent</a>

```Go
const http2defaultUserAgent = "Go-http-client/2.0"
```

#### <a name="net-http-const-http2maxAllocFrameSize">const http2maxAllocFrameSize</a>

```Go
const http2maxAllocFrameSize = 512 << 10
```

#### <a name="net-http-const-maxBufs">const maxBufs</a>

```Go
const maxBufs = 4 // arbitrary; 4 concurrent requests per conn? investigate.

```

#### <a name="net-http-const-max1xxResponses">const max1xxResponses</a>

```Go
const max1xxResponses = 5 // arbitrary bound on number of informational responses, same as net/http

```

#### <a name="net-http-const-hugeDuration">const hugeDuration</a>

```Go
const hugeDuration = 365 * 24 * time.Hour
```

Arm the timer with a very large duration, which we'll intentionally lower later. It has to be large now because we need a handle to it before writing the headers, but the s.delay value is defined to not start until after the request headers were written. 

#### <a name="net-http-const-settingSize">const settingSize</a>

```Go
const settingSize = 6 // uint16 + uint32

```

#### <a name="net-http-const-maxFrameSize">const maxFrameSize</a>

```Go
const maxFrameSize = 16384
```

For now we're lazy and just pick the minimum MAX_FRAME_SIZE that all peers must support (16KB). Later we could care more and send larger frames if the peer advertised it, but there's little point. Most headers are small anyway (so we generally won't have CONTINUATION frames), and extra frames only waste 9 bytes anyway. 

#### <a name="net-http-const-http2priorityDefaultWeight">const http2priorityDefaultWeight</a>

```Go
const http2priorityDefaultWeight = 15 // 16 = 15 + 1

```

RFC 7540, Section 5.3.5: the default weight is 16. 

#### <a name="net-http-const-http2priorityNodeOpen">const http2priorityNodeOpen</a>

```Go
const http2priorityNodeOpen http2priorityNodeState = iota
```

#### <a name="net-http-const-http2priorityNodeClosed">const http2priorityNodeClosed</a>

```Go
const http2priorityNodeClosed
```

#### <a name="net-http-const-http2priorityNodeIdle">const http2priorityNodeIdle</a>

```Go
const http2priorityNodeIdle
```

#### <a name="net-http-const-maxInt64">const maxInt64</a>

```Go
const maxInt64 = 1<<63 - 1
```

maxInt64 is the effective "infinite" value for the Server and Transport's byte-limiting readers. 

#### <a name="net-http-const-MethodGet">const MethodGet <small>(exported)</small></a>

```Go
const MethodGet = "GET"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodHead">const MethodHead <small>(exported)</small></a>

```Go
const MethodHead = "HEAD"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodPost">const MethodPost <small>(exported)</small></a>

```Go
const MethodPost = "POST"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodPut">const MethodPut <small>(exported)</small></a>

```Go
const MethodPut = "PUT"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodPatch">const MethodPatch <small>(exported)</small></a>

```Go
const MethodPatch = "PATCH" // RFC 5789

```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodDelete">const MethodDelete <small>(exported)</small></a>

```Go
const MethodDelete = "DELETE"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodConnect">const MethodConnect <small>(exported)</small></a>

```Go
const MethodConnect = "CONNECT"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodOptions">const MethodOptions <small>(exported)</small></a>

```Go
const MethodOptions = "OPTIONS"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-MethodTrace">const MethodTrace <small>(exported)</small></a>

```Go
const MethodTrace = "TRACE"
```

Common HTTP methods. 

Unless otherwise noted, these are defined in RFC 7231 section 4.3. 

#### <a name="net-http-const-defaultMaxMemory">const defaultMaxMemory</a>

```Go
const defaultMaxMemory = 32 << 20 // 32 MB

```

#### <a name="net-http-const-defaultUserAgent">const defaultUserAgent</a>

```Go
const defaultUserAgent = "Go-http-client/1.1"
```

NOTE: This is not intended to reflect the actual Go version being used. It was changed at the time of Go 1.1 release because the former User-Agent had ended up blocked by some intrusion detection systems. See [https://codereview.appspot.com/7532043](https://codereview.appspot.com/7532043). 

#### <a name="net-http-const-Big">const Big <small>(exported)</small></a>

```Go
const Big = 1000000 // arbitrary upper bound

```

#### <a name="net-http-const-prefix">const prefix</a>

```Go
const prefix = "Basic "
```

#### <a name="net-http-const-deleteHostHeader">const deleteHostHeader</a>

```Go
const deleteHostHeader = true
```

Constants for readRequest's deleteHostHeader parameter. 

#### <a name="net-http-const-keepHostHeader">const keepHostHeader</a>

```Go
const keepHostHeader = false
```

Constants for readRequest's deleteHostHeader parameter. 

#### <a name="net-http-const-bufferBeforeChunkingSize">const bufferBeforeChunkingSize</a>

```Go
const bufferBeforeChunkingSize = 2048
```

This should be >= 512 bytes for DetectContentType, but otherwise it's somewhat arbitrary. 

#### <a name="net-http-const-TrailerPrefix">const TrailerPrefix <small>(exported)</small></a>

```Go
const TrailerPrefix = "Trailer:"
```

TrailerPrefix is a magic prefix for ResponseWriter.Header map keys that, if present, signals that the map entry is actually for the response trailers, and not the response headers. The prefix is stripped after the ServeHTTP call finishes and the values are sent in the trailers. 

This mechanism is intended only for trailers that are not known prior to the headers being written. If the set of trailers is fixed or known before the header is written, the normal Go trailers mechanism is preferred: 

```
[https://golang.org/pkg/net/http/#ResponseWriter](https://golang.org/pkg/net/http/#ResponseWriter)
[https://golang.org/pkg/net/http/#example_ResponseWriter_trailers](https://golang.org/pkg/net/http/#example_ResponseWriter_trailers)

```
#### <a name="net-http-const-debugServerConnections">const debugServerConnections</a>

```Go
const debugServerConnections = false
```

debugServerConnections controls whether all server connections are wrapped with a verbose logging wrapper. 

#### <a name="net-http-const-DefaultMaxHeaderBytes">const DefaultMaxHeaderBytes <small>(exported)</small></a>

```Go
const DefaultMaxHeaderBytes = 1 << 20 // 1 MB

```

DefaultMaxHeaderBytes is the maximum permitted size of the headers in an HTTP request. This can be overridden by setting Server.MaxHeaderBytes. 

#### <a name="net-http-const-TimeFormat">const TimeFormat <small>(exported)</small></a>

```Go
const TimeFormat = "Mon, 02 Jan 2006 15:04:05 GMT"
```

TimeFormat is the time format to use when generating times in HTTP headers. It is like time.RFC1123 but hard-codes GMT as the time zone. The time being formatted must be in UTC for Format to generate the correct format. 

For parsing this time format, see ParseTime. 

#### <a name="net-http-const-days">const days</a>

```Go
const days = "SunMonTueWedThuFriSat"
```

#### <a name="net-http-const-months">const months</a>

```Go
const months = "JanFebMarAprMayJunJulAugSepOctNovDec"
```

#### <a name="net-http-const-maxPostHandlerReadBytes">const maxPostHandlerReadBytes</a>

```Go
const maxPostHandlerReadBytes = 256 << 10
```

maxPostHandlerReadBytes is the max number of Request.Body bytes not consumed by a handler that the server will read from the client in order to keep a connection alive. If there are more bytes than this then the server to be paranoid instead sends a "Connection: close" response. 

This number is approximately what a typical machine's TCP buffer size is anyway.  (if we have the bytes on the machine, we might as well read them) 

#### <a name="net-http-const-rstAvoidanceDelay">const rstAvoidanceDelay</a>

```Go
const rstAvoidanceDelay = 500 * time.Millisecond
```

rstAvoidanceDelay is the amount of time we sleep after closing the write side of a TCP connection before closing the entire socket. By sleeping, we increase the chances that the client sees our FIN and processes its final data before they process the subsequent RST from closing a connection with known unread data. This RST seems to occur mostly on BSD systems. (And Windows?) This timeout is somewhat arbitrary (~latency around the planet). 

#### <a name="net-http-const-runHooks">const runHooks</a>

```Go
const runHooks = true
```

#### <a name="net-http-const-skipHooks">const skipHooks</a>

```Go
const skipHooks = false
```

#### <a name="net-http-const-size">const size</a>

```Go
const size = 64 << 10
```

#### <a name="net-http-const-errorHeaders">const errorHeaders</a>

```Go
const errorHeaders = "\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n"
```

#### <a name="net-http-const-publicErr">const publicErr</a>

```Go
const publicErr = "431 Request Header Fields Too Large"
```

Their HTTP client may or may not be able to read this if we're responding to them and hanging up while they're still writing their request. Undefined behavior. 

#### <a name="net-http-const-shutdownPollIntervalMax">const shutdownPollIntervalMax</a>

```Go
const shutdownPollIntervalMax = 500 * time.Millisecond
```

shutdownPollIntervalMax is the max polling interval when checking quiescence during Server.Shutdown. Polling starts with a small interval and backs off to the max. Ideally we could find a solution that doesn't involve polling, but which also doesn't have a high runtime cost (and doesn't involve any contentious mutexes), but that is left as an exercise for the reader. 

#### <a name="net-http-const-StateNew">const StateNew <small>(exported)</small></a>

```Go
const StateNew ConnState = iota
```

StateNew represents a new connection that is expected to send a request immediately. Connections begin at this state and then transition to either StateActive or StateClosed. 

#### <a name="net-http-const-StateActive">const StateActive <small>(exported)</small></a>

```Go
const StateActive
```

StateActive represents a connection that has read 1 or more bytes of a request. The Server.ConnState hook for StateActive fires before the request has entered a handler and doesn't fire again until the request has been handled. After the request is handled, the state transitions to StateClosed, StateHijacked, or StateIdle. For HTTP/2, StateActive fires on the transition from zero to one active request, and only transitions away once all active requests are complete. That means that ConnState cannot be used to do per-request work; ConnState only notes the overall state of the connection. 

#### <a name="net-http-const-StateIdle">const StateIdle <small>(exported)</small></a>

```Go
const StateIdle
```

StateIdle represents a connection that has finished handling a request and is in the keep-alive state, waiting for a new request. Connections transition from StateIdle to either StateActive or StateClosed. 

#### <a name="net-http-const-StateHijacked">const StateHijacked <small>(exported)</small></a>

```Go
const StateHijacked
```

StateHijacked represents a hijacked connection. This is a terminal state. It does not transition to StateClosed. 

#### <a name="net-http-const-StateClosed">const StateClosed <small>(exported)</small></a>

```Go
const StateClosed
```

StateClosed represents a closed connection. This is a terminal state. Hijacked connections do not transition to StateClosed. 

#### <a name="net-http-const-sniffLen">const sniffLen</a>

```Go
const sniffLen = 512
```

The algorithm uses at most sniffLen bytes to make its decision. 

#### <a name="net-http-const-socksVersion5">const socksVersion5</a>

```Go
const socksVersion5 = 0x05
```

Wire protocol constants. 

#### <a name="net-http-const-socksAddrTypeIPv4">const socksAddrTypeIPv4</a>

```Go
const socksAddrTypeIPv4 = 0x01
```

Wire protocol constants. 

#### <a name="net-http-const-socksAddrTypeFQDN">const socksAddrTypeFQDN</a>

```Go
const socksAddrTypeFQDN = 0x03
```

Wire protocol constants. 

#### <a name="net-http-const-socksAddrTypeIPv6">const socksAddrTypeIPv6</a>

```Go
const socksAddrTypeIPv6 = 0x04
```

Wire protocol constants. 

#### <a name="net-http-const-socksCmdConnect">const socksCmdConnect</a>

```Go
const socksCmdConnect socksCommand = 0x01 // establishes an active-open forward proxy connection

```

Wire protocol constants. 

#### <a name="net-http-const-sockscmdBind">const sockscmdBind</a>

```Go
const sockscmdBind socksCommand = 0x02 // establishes a passive-open forward proxy connection

```

Wire protocol constants. 

#### <a name="net-http-const-socksAuthMethodNotRequired">const socksAuthMethodNotRequired</a>

```Go
const socksAuthMethodNotRequired socksAuthMethod = 0x00 // no authentication required

```

Wire protocol constants. 

#### <a name="net-http-const-socksAuthMethodUsernamePassword">const socksAuthMethodUsernamePassword</a>

```Go
const socksAuthMethodUsernamePassword socksAuthMethod = 0x02 // use username/password

```

Wire protocol constants. 

#### <a name="net-http-const-socksAuthMethodNoAcceptableMethods">const socksAuthMethodNoAcceptableMethods</a>

```Go
const socksAuthMethodNoAcceptableMethods socksAuthMethod = 0xff // no acceptable authentication methods

```

Wire protocol constants. 

#### <a name="net-http-const-socksStatusSucceeded">const socksStatusSucceeded</a>

```Go
const socksStatusSucceeded socksReply = 0x00
```

Wire protocol constants. 

#### <a name="net-http-const-socksauthUsernamePasswordVersion">const socksauthUsernamePasswordVersion</a>

```Go
const socksauthUsernamePasswordVersion = 0x01
```

#### <a name="net-http-const-socksauthStatusSucceeded">const socksauthStatusSucceeded</a>

```Go
const socksauthStatusSucceeded = 0x00
```

#### <a name="net-http-const-StatusContinue">const StatusContinue <small>(exported)</small></a>

```Go
const StatusContinue = 100 // RFC 7231, 6.2.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusSwitchingProtocols">const StatusSwitchingProtocols <small>(exported)</small></a>

```Go
const StatusSwitchingProtocols = 101 // RFC 7231, 6.2.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusProcessing">const StatusProcessing <small>(exported)</small></a>

```Go
const StatusProcessing = 102 // RFC 2518, 10.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusEarlyHints">const StatusEarlyHints <small>(exported)</small></a>

```Go
const StatusEarlyHints = 103 // RFC 8297

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusOK">const StatusOK <small>(exported)</small></a>

```Go
const StatusOK = 200 // RFC 7231, 6.3.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusCreated">const StatusCreated <small>(exported)</small></a>

```Go
const StatusCreated = 201 // RFC 7231, 6.3.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusAccepted">const StatusAccepted <small>(exported)</small></a>

```Go
const StatusAccepted = 202 // RFC 7231, 6.3.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNonAuthoritativeInfo">const StatusNonAuthoritativeInfo <small>(exported)</small></a>

```Go
const StatusNonAuthoritativeInfo = 203 // RFC 7231, 6.3.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNoContent">const StatusNoContent <small>(exported)</small></a>

```Go
const StatusNoContent = 204 // RFC 7231, 6.3.5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusResetContent">const StatusResetContent <small>(exported)</small></a>

```Go
const StatusResetContent = 205 // RFC 7231, 6.3.6

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusPartialContent">const StatusPartialContent <small>(exported)</small></a>

```Go
const StatusPartialContent = 206 // RFC 7233, 4.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusMultiStatus">const StatusMultiStatus <small>(exported)</small></a>

```Go
const StatusMultiStatus = 207 // RFC 4918, 11.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusAlreadyReported">const StatusAlreadyReported <small>(exported)</small></a>

```Go
const StatusAlreadyReported = 208 // RFC 5842, 7.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusIMUsed">const StatusIMUsed <small>(exported)</small></a>

```Go
const StatusIMUsed = 226 // RFC 3229, 10.4.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusMultipleChoices">const StatusMultipleChoices <small>(exported)</small></a>

```Go
const StatusMultipleChoices = 300 // RFC 7231, 6.4.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusMovedPermanently">const StatusMovedPermanently <small>(exported)</small></a>

```Go
const StatusMovedPermanently = 301 // RFC 7231, 6.4.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusFound">const StatusFound <small>(exported)</small></a>

```Go
const StatusFound = 302 // RFC 7231, 6.4.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusSeeOther">const StatusSeeOther <small>(exported)</small></a>

```Go
const StatusSeeOther = 303 // RFC 7231, 6.4.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNotModified">const StatusNotModified <small>(exported)</small></a>

```Go
const StatusNotModified = 304 // RFC 7232, 4.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUseProxy">const StatusUseProxy <small>(exported)</small></a>

```Go
const StatusUseProxy = 305 // RFC 7231, 6.4.5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-_">const _</a>

```Go
const _ = 306 // RFC 7231, 6.4.6 (Unused)

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusTemporaryRedirect">const StatusTemporaryRedirect <small>(exported)</small></a>

```Go
const StatusTemporaryRedirect = 307 // RFC 7231, 6.4.7

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusPermanentRedirect">const StatusPermanentRedirect <small>(exported)</small></a>

```Go
const StatusPermanentRedirect = 308 // RFC 7538, 3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusBadRequest">const StatusBadRequest <small>(exported)</small></a>

```Go
const StatusBadRequest = 400 // RFC 7231, 6.5.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUnauthorized">const StatusUnauthorized <small>(exported)</small></a>

```Go
const StatusUnauthorized = 401 // RFC 7235, 3.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusPaymentRequired">const StatusPaymentRequired <small>(exported)</small></a>

```Go
const StatusPaymentRequired = 402 // RFC 7231, 6.5.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusForbidden">const StatusForbidden <small>(exported)</small></a>

```Go
const StatusForbidden = 403 // RFC 7231, 6.5.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNotFound">const StatusNotFound <small>(exported)</small></a>

```Go
const StatusNotFound = 404 // RFC 7231, 6.5.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusMethodNotAllowed">const StatusMethodNotAllowed <small>(exported)</small></a>

```Go
const StatusMethodNotAllowed = 405 // RFC 7231, 6.5.5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNotAcceptable">const StatusNotAcceptable <small>(exported)</small></a>

```Go
const StatusNotAcceptable = 406 // RFC 7231, 6.5.6

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusProxyAuthRequired">const StatusProxyAuthRequired <small>(exported)</small></a>

```Go
const StatusProxyAuthRequired = 407 // RFC 7235, 3.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusRequestTimeout">const StatusRequestTimeout <small>(exported)</small></a>

```Go
const StatusRequestTimeout = 408 // RFC 7231, 6.5.7

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusConflict">const StatusConflict <small>(exported)</small></a>

```Go
const StatusConflict = 409 // RFC 7231, 6.5.8

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusGone">const StatusGone <small>(exported)</small></a>

```Go
const StatusGone = 410 // RFC 7231, 6.5.9

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusLengthRequired">const StatusLengthRequired <small>(exported)</small></a>

```Go
const StatusLengthRequired = 411 // RFC 7231, 6.5.10

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusPreconditionFailed">const StatusPreconditionFailed <small>(exported)</small></a>

```Go
const StatusPreconditionFailed = 412 // RFC 7232, 4.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusRequestEntityTooLarge">const StatusRequestEntityTooLarge <small>(exported)</small></a>

```Go
const StatusRequestEntityTooLarge = 413 // RFC 7231, 6.5.11

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusRequestURITooLong">const StatusRequestURITooLong <small>(exported)</small></a>

```Go
const StatusRequestURITooLong = 414 // RFC 7231, 6.5.12

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUnsupportedMediaType">const StatusUnsupportedMediaType <small>(exported)</small></a>

```Go
const StatusUnsupportedMediaType = 415 // RFC 7231, 6.5.13

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusRequestedRangeNotSatisfiable">const StatusRequestedRangeNotSatisfiable <small>(exported)</small></a>

```Go
const StatusRequestedRangeNotSatisfiable = 416 // RFC 7233, 4.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusExpectationFailed">const StatusExpectationFailed <small>(exported)</small></a>

```Go
const StatusExpectationFailed = 417 // RFC 7231, 6.5.14

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusTeapot">const StatusTeapot <small>(exported)</small></a>

```Go
const StatusTeapot = 418 // RFC 7168, 2.3.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusMisdirectedRequest">const StatusMisdirectedRequest <small>(exported)</small></a>

```Go
const StatusMisdirectedRequest = 421 // RFC 7540, 9.1.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUnprocessableEntity">const StatusUnprocessableEntity <small>(exported)</small></a>

```Go
const StatusUnprocessableEntity = 422 // RFC 4918, 11.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusLocked">const StatusLocked <small>(exported)</small></a>

```Go
const StatusLocked = 423 // RFC 4918, 11.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusFailedDependency">const StatusFailedDependency <small>(exported)</small></a>

```Go
const StatusFailedDependency = 424 // RFC 4918, 11.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusTooEarly">const StatusTooEarly <small>(exported)</small></a>

```Go
const StatusTooEarly = 425 // RFC 8470, 5.2.

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUpgradeRequired">const StatusUpgradeRequired <small>(exported)</small></a>

```Go
const StatusUpgradeRequired = 426 // RFC 7231, 6.5.15

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusPreconditionRequired">const StatusPreconditionRequired <small>(exported)</small></a>

```Go
const StatusPreconditionRequired = 428 // RFC 6585, 3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusTooManyRequests">const StatusTooManyRequests <small>(exported)</small></a>

```Go
const StatusTooManyRequests = 429 // RFC 6585, 4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusRequestHeaderFieldsTooLarge">const StatusRequestHeaderFieldsTooLarge <small>(exported)</small></a>

```Go
const StatusRequestHeaderFieldsTooLarge = 431 // RFC 6585, 5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusUnavailableForLegalReasons">const StatusUnavailableForLegalReasons <small>(exported)</small></a>

```Go
const StatusUnavailableForLegalReasons = 451 // RFC 7725, 3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusInternalServerError">const StatusInternalServerError <small>(exported)</small></a>

```Go
const StatusInternalServerError = 500 // RFC 7231, 6.6.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNotImplemented">const StatusNotImplemented <small>(exported)</small></a>

```Go
const StatusNotImplemented = 501 // RFC 7231, 6.6.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusBadGateway">const StatusBadGateway <small>(exported)</small></a>

```Go
const StatusBadGateway = 502 // RFC 7231, 6.6.3

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusServiceUnavailable">const StatusServiceUnavailable <small>(exported)</small></a>

```Go
const StatusServiceUnavailable = 503 // RFC 7231, 6.6.4

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusGatewayTimeout">const StatusGatewayTimeout <small>(exported)</small></a>

```Go
const StatusGatewayTimeout = 504 // RFC 7231, 6.6.5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusHTTPVersionNotSupported">const StatusHTTPVersionNotSupported <small>(exported)</small></a>

```Go
const StatusHTTPVersionNotSupported = 505 // RFC 7231, 6.6.6

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusVariantAlsoNegotiates">const StatusVariantAlsoNegotiates <small>(exported)</small></a>

```Go
const StatusVariantAlsoNegotiates = 506 // RFC 2295, 8.1

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusInsufficientStorage">const StatusInsufficientStorage <small>(exported)</small></a>

```Go
const StatusInsufficientStorage = 507 // RFC 4918, 11.5

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusLoopDetected">const StatusLoopDetected <small>(exported)</small></a>

```Go
const StatusLoopDetected = 508 // RFC 5842, 7.2

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNotExtended">const StatusNotExtended <small>(exported)</small></a>

```Go
const StatusNotExtended = 510 // RFC 2774, 7

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-StatusNetworkAuthenticationRequired">const StatusNetworkAuthenticationRequired <small>(exported)</small></a>

```Go
const StatusNetworkAuthenticationRequired = 511 // RFC 6585, 6

```

HTTP status codes as registered with IANA. See: [https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml](https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 

#### <a name="net-http-const-DefaultMaxIdleConnsPerHost">const DefaultMaxIdleConnsPerHost <small>(exported)</small></a>

```Go
const DefaultMaxIdleConnsPerHost = 2
```

DefaultMaxIdleConnsPerHost is the default value of Transport's MaxIdleConnsPerHost. 

#### <a name="net-http-const-h2max">const h2max</a>

```Go
const h2max = 1<<32 - 1
```

#### <a name="net-http-const-max1xxResponses">const max1xxResponses</a>

```Go
const max1xxResponses = 5 // arbitrary bound on number of informational responses

```

#### <a name="net-http-const-maxWriteWaitBeforeConnReuse">const maxWriteWaitBeforeConnReuse</a>

```Go
const maxWriteWaitBeforeConnReuse = 50 * time.Millisecond
```

maxWriteWaitBeforeConnReuse is how long the a Transport RoundTrip will wait to see the Request's Body.Write result after getting a response from the server. See comments in (*persistConn).wroteRequest. 

#### <a name="net-http-const-debugRoundTrip">const debugRoundTrip</a>

```Go
const debugRoundTrip = false
```

#### <a name="net-http-const-wantCookieString">const wantCookieString</a>

```Go
const wantCookieString = `cookie-9=i3e01nf61b6t23bvfmplnanol3; Path=/restricted/; Domain=example.com; Expires=Tue, 10 Nov 2009 23:00:00 GMT; Max-Age=3600`
```

#### <a name="net-http-const-MaxWriteWaitBeforeConnReuse">const MaxWriteWaitBeforeConnReuse</a>

```Go
const MaxWriteWaitBeforeConnReuse = maxWriteWaitBeforeConnReuse
```

#### <a name="net-http-const-badURL">const badURL</a>

```Go
const badURL = "file://../no-exist.txt"
```

#### <a name="net-http-const-writeCalls">const writeCalls</a>

```Go
const writeCalls = 4 // number of Write calls in current implementation

```

#### <a name="net-http-const-shortBody">const shortBody</a>

```Go
const shortBody = "Short body, not 123 bytes."
```

#### <a name="net-http-const-connectionCloseHeader">const connectionCloseHeader</a>

```Go
const connectionCloseHeader = "Connection: close"
```

### <a name="net-http-var">Variables <small>(exported)</small></a>

#### <a name="net-http-var-DefaultClient">var DefaultClient <small>(exported)</small></a>

```Go
var DefaultClient = ...
```

DefaultClient is the default Client and is used by Get, Head, and Post. 

#### <a name="net-http-var-cancelCtx">var cancelCtx</a>

```Go
var cancelCtx func()
```

#### <a name="net-http-var-cancelCtx">var cancelCtx</a>

```Go
var cancelCtx func()
```

#### <a name="net-http-var-once">var once</a>

```Go
var once sync.Once
```

#### <a name="net-http-var-timedOut">var timedOut</a>

```Go
var timedOut atomicBool
```

#### <a name="net-http-var-ErrUseLastResponse">var ErrUseLastResponse <small>(exported)</small></a>

```Go
var ErrUseLastResponse = errors.New("net/http: use last response")
```

ErrUseLastResponse can be returned by Client.CheckRedirect hooks to control how redirects are processed. If returned, the next request is not sent and the most recent response is returned with its body unclosed. 

#### <a name="net-http-var-testHookClientDoResult">var testHookClientDoResult</a>

```Go
var testHookClientDoResult func(retres *Response, reterr error)
```

#### <a name="net-http-var-deadline">var deadline</a>

```Go
var deadline = c.deadline()
```

#### <a name="net-http-var-reqs">var reqs</a>

```Go
var reqs []*Request
```

#### <a name="net-http-var-resp">var resp</a>

```Go
var resp *Response
```

#### <a name="net-http-var-copyHeaders">var copyHeaders</a>

```Go
var copyHeaders = c.makeHeadersCopier(req)
```

#### <a name="net-http-var-reqBodyClosed">var reqBodyClosed</a>

```Go
var reqBodyClosed = false // have we closed the current req.Body?

```

#### <a name="net-http-var-redirectMethod">var redirectMethod</a>

```Go
var redirectMethod string
```

Redirect behavior: 

#### <a name="net-http-var-includeBody">var includeBody</a>

```Go
var includeBody bool
```

#### <a name="net-http-var-urlStr">var urlStr</a>

```Go
var urlStr string
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-didTimeout">var didTimeout</a>

```Go
var didTimeout func() bool
```

#### <a name="net-http-var-shouldRedirect">var shouldRedirect</a>

```Go
var shouldRedirect bool
```

#### <a name="net-http-var-ireqhdr">var ireqhdr</a>

```Go
var ireqhdr = cloneOrMakeHeader(ireq.Header)
```

The headers to copy are from the very initial request. We use a closured callback to keep a reference to these original headers. 

#### <a name="net-http-var-icookies">var icookies</a>

```Go
var icookies map[string][]*Cookie
```

The headers to copy are from the very initial request. We use a closured callback to keep a reference to these original headers. 

#### <a name="net-http-var-changed">var changed</a>

```Go
var changed bool
```

#### <a name="net-http-var-ss">var ss</a>

```Go
var ss []string
```

#### <a name="net-http-var-b">var b</a>

```Go
var b strings.Builder
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf [len(TimeFormat)]byte
```

#### <a name="net-http-var-part">var part</a>

```Go
var part string
```

#### <a name="net-http-var-cookieNameSanitizer">var cookieNameSanitizer</a>

```Go
var cookieNameSanitizer = strings.NewReplacer("\n", "-", "\r", "-")
```

#### <a name="net-http-var-dirs">var dirs</a>

```Go
var dirs anyDirs
```

Prefer to use ReadDir instead of Readdir, because the former doesn't require calling Stat on every entry of a directory on Unix. 

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-list">var list</a>

```Go
var list dirEntryDirs
```

#### <a name="net-http-var-list">var list</a>

```Go
var list fileInfoDirs
```

#### <a name="net-http-var-errSeeker">var errSeeker</a>

```Go
var errSeeker = errors.New("seeker can't seek")
```

errSeeker is returned by ServeContent's sizeFunc when the content doesn't seek properly. The underlying Seeker's error text isn't included in the sizeFunc reply so it's not sent over HTTP to end users. 

#### <a name="net-http-var-errNoOverlap">var errNoOverlap</a>

```Go
var errNoOverlap = errors.New("invalid range: failed to overlap")
```

errNoOverlap is returned by serveContent's parseRange if first-byte-pos of all of the byte-range-spec values is greater than the content size. 

#### <a name="net-http-var-ctype">var ctype</a>

```Go
var ctype string
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf [sniffLen]byte
```

read a chunk to decide between utf-8 text and binary 

#### <a name="net-http-var-sendContent">var sendContent</a>

```Go
var sendContent io.Reader = content
```

#### <a name="net-http-var-unixEpochTime">var unixEpochTime</a>

```Go
var unixEpochTime = time.Unix(0, 0)
```

#### <a name="net-http-var-errMissingSeek">var errMissingSeek</a>

```Go
var errMissingSeek = errors.New("io.File missing Seek method")
```

#### <a name="net-http-var-errMissingReadDir">var errMissingReadDir</a>

```Go
var errMissingReadDir = errors.New("io.File directory missing ReadDir method")
```

#### <a name="net-http-var-list">var list</a>

```Go
var list []fs.FileInfo
```

#### <a name="net-http-var-ranges">var ranges</a>

```Go
var ranges []httpRange
```

#### <a name="net-http-var-r">var r</a>

```Go
var r httpRange
```

#### <a name="net-http-var-w">var w</a>

```Go
var w countingWriter
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ http2clientConnPoolIdleCloser = (*http2clientConnPool)(nil)
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ http2clientConnPoolIdleCloser = ...
```

#### <a name="net-http-var-http2dataChunkSizeClasses">var http2dataChunkSizeClasses</a>

```Go
var http2dataChunkSizeClasses = ...
```

Buffer chunks are allocated from a pool to reduce pressure on GC. The maximum wasted space per dataBuffer is 2x the largest size class, which happens when the dataBuffer has multiple chunks and there is one unread byte in both the first and last chunks. We use a few size classes to minimize overheads for servers that typically receive very small request bodies. 

TODO: Benchmark to determine if the pools are necessary. The GC may have improved enough that we can instead allocate chunks like this: make([]byte, max(16<<10, expectedBytesRemaining)) 

#### <a name="net-http-var-http2dataChunkPools">var http2dataChunkPools</a>

```Go
var http2dataChunkPools = ...
```

Buffer chunks are allocated from a pool to reduce pressure on GC. The maximum wasted space per dataBuffer is 2x the largest size class, which happens when the dataBuffer has multiple chunks and there is one unread byte in both the first and last chunks. We use a few size classes to minimize overheads for servers that typically receive very small request bodies. 

TODO: Benchmark to determine if the pools are necessary. The GC may have improved enough that we can instead allocate chunks like this: make([]byte, max(16<<10, expectedBytesRemaining)) 

#### <a name="net-http-var-http2errReadEmpty">var http2errReadEmpty</a>

```Go
var http2errReadEmpty = errors.New("read from empty dataBuffer")
```

#### <a name="net-http-var-ntotal">var ntotal</a>

```Go
var ntotal int
```

#### <a name="net-http-var-http2errCodeName">var http2errCodeName</a>

```Go
var http2errCodeName = ...
```

#### <a name="net-http-var-http2errMixPseudoHeaderTypes">var http2errMixPseudoHeaderTypes</a>

```Go
var http2errMixPseudoHeaderTypes = errors.New("mix of request and response pseudo headers")
```

#### <a name="net-http-var-http2errPseudoAfterRegular">var http2errPseudoAfterRegular</a>

```Go
var http2errPseudoAfterRegular = errors.New("pseudo header field after regular")
```

#### <a name="net-http-var-http2padZeros">var http2padZeros</a>

```Go
var http2padZeros = make([]byte, 255) // zeros for padding

```

#### <a name="net-http-var-http2frameName">var http2frameName</a>

```Go
var http2frameName = ...
```

#### <a name="net-http-var-http2flagName">var http2flagName</a>

```Go
var http2flagName = ...
```

#### <a name="net-http-var-http2frameParsers">var http2frameParsers</a>

```Go
var http2frameParsers = ...
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-http2fhBytes">var http2fhBytes</a>

```Go
var http2fhBytes = ...
```

frame header bytes. Used only by ReadFrameHeader. 

#### <a name="net-http-var-http2ErrFrameTooLarge">var http2ErrFrameTooLarge</a>

```Go
var http2ErrFrameTooLarge = errors.New("http2: frame too large")
```

ErrFrameTooLarge is returned from Framer.ReadFrame when the peer sends a frame that is larger than declared with SetMaxReadFrameSize. 

#### <a name="net-http-var-padSize">var padSize</a>

```Go
var padSize byte
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-http2errStreamID">var http2errStreamID</a>

```Go
var http2errStreamID = errors.New("invalid stream ID")
```

#### <a name="net-http-var-http2errDepStreamID">var http2errDepStreamID</a>

```Go
var http2errDepStreamID = errors.New("invalid dependent stream ID")
```

#### <a name="net-http-var-http2errPadLength">var http2errPadLength</a>

```Go
var http2errPadLength = errors.New("pad length too large")
```

#### <a name="net-http-var-http2errPadBytes">var http2errPadBytes</a>

```Go
var http2errPadBytes = errors.New("padding bytes must all be zeros unless AllowIllegalWrites is enabled")
```

#### <a name="net-http-var-flags">var flags</a>

```Go
var flags http2Flags
```

#### <a name="net-http-var-flags">var flags</a>

```Go
var flags http2Flags
```

#### <a name="net-http-var-padLength">var padLength</a>

```Go
var padLength uint8
```

#### <a name="net-http-var-v">var v</a>

```Go
var v uint32
```

#### <a name="net-http-var-flags">var flags</a>

```Go
var flags http2Flags
```

#### <a name="net-http-var-flags">var flags</a>

```Go
var flags http2Flags
```

#### <a name="net-http-var-padLength">var padLength</a>

```Go
var padLength uint8
```

The PUSH_PROMISE frame includes optional padding. Padding fields and flags are identical to those defined for DATA frames 

#### <a name="net-http-var-flags">var flags</a>

```Go
var flags http2Flags
```

#### <a name="net-http-var-isRequest">var isRequest</a>

```Go
var isRequest, isResponse bool
```

#### <a name="net-http-var-isResponse">var isResponse</a>

```Go
var isRequest, isResponse bool
```

#### <a name="net-http-var-remainSize">var remainSize</a>

```Go
var remainSize = fr.maxHeaderListSize()
```

#### <a name="net-http-var-sawRegular">var sawRegular</a>

```Go
var sawRegular bool
```

#### <a name="net-http-var-invalid">var invalid</a>

```Go
var invalid error // pseudo header field errors

```

#### <a name="net-http-var-hc">var hc</a>

```Go
var hc http2headersOrContinuation = hf
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-http2DebugGoroutines">var http2DebugGoroutines</a>

```Go
var http2DebugGoroutines = os.Getenv("DEBUG_HTTP2_GOROUTINES") == "1"
```

#### <a name="net-http-var-http2goroutineSpace">var http2goroutineSpace</a>

```Go
var http2goroutineSpace = []byte("goroutine ")
```

#### <a name="net-http-var-http2littleBuf">var http2littleBuf</a>

```Go
var http2littleBuf = ...
```

#### <a name="net-http-var-cutoff">var cutoff</a>

```Go
var cutoff, maxVal uint64
```

#### <a name="net-http-var-maxVal">var maxVal</a>

```Go
var cutoff, maxVal uint64
```

#### <a name="net-http-var-v">var v</a>

```Go
var v byte
```

#### <a name="net-http-var-http2commonBuildOnce">var http2commonBuildOnce</a>

```Go
var http2commonBuildOnce sync.Once
```

#### <a name="net-http-var-http2commonLowerHeader">var http2commonLowerHeader</a>

```Go
var http2commonLowerHeader map[string]string // Go-Canonical-Case -> lower-case

```

#### <a name="net-http-var-http2commonCanonHeader">var http2commonCanonHeader</a>

```Go
var http2commonCanonHeader map[string]string // lower-case -> Go-Canonical-Case

```

#### <a name="net-http-var-http2VerboseLogs">var http2VerboseLogs</a>

```Go
var http2VerboseLogs bool
```

#### <a name="net-http-var-http2logFrameWrites">var http2logFrameWrites</a>

```Go
var http2logFrameWrites bool
```

#### <a name="net-http-var-http2logFrameReads">var http2logFrameReads</a>

```Go
var http2logFrameReads bool
```

#### <a name="net-http-var-http2inTests">var http2inTests</a>

```Go
var http2inTests bool
```

#### <a name="net-http-var-http2clientPreface">var http2clientPreface</a>

```Go
var http2clientPreface = []byte(http2ClientPreface)
```

#### <a name="net-http-var-http2stateName">var http2stateName</a>

```Go
var http2stateName = ...
```

#### <a name="net-http-var-http2settingName">var http2settingName</a>

```Go
var http2settingName = ...
```

#### <a name="net-http-var-http2bufWriterPool">var http2bufWriterPool</a>

```Go
var http2bufWriterPool = ...
```

#### <a name="net-http-var-http2errTimeout">var http2errTimeout</a>

```Go
var http2errTimeout error = ...
```

#### <a name="net-http-var-http2sorterPool">var http2sorterPool</a>

```Go
var http2sorterPool = ...
```

#### <a name="net-http-var-http2errClosedPipeWrite">var http2errClosedPipeWrite</a>

```Go
var http2errClosedPipeWrite = errors.New("write on closed buffer")
```

#### <a name="net-http-var-http2errClientDisconnected">var http2errClientDisconnected</a>

```Go
var http2errClientDisconnected = errors.New("client disconnected")
```

#### <a name="net-http-var-http2errClosedBody">var http2errClosedBody</a>

```Go
var http2errClosedBody = errors.New("body closed by handler")
```

#### <a name="net-http-var-http2errHandlerComplete">var http2errHandlerComplete</a>

```Go
var http2errHandlerComplete = errors.New("http2: request body closed due to handler exiting")
```

#### <a name="net-http-var-http2errStreamClosed">var http2errStreamClosed</a>

```Go
var http2errStreamClosed = errors.New("http2: stream closed")
```

#### <a name="net-http-var-http2responseWriterStatePool">var http2responseWriterStatePool</a>

```Go
var http2responseWriterStatePool = ...
```

#### <a name="net-http-var-http2testHookOnConn">var http2testHookOnConn</a>

```Go
var http2testHookOnConn func()
```

Test hooks. 

#### <a name="net-http-var-http2testHookGetServerConn">var http2testHookGetServerConn</a>

```Go
var http2testHookGetServerConn func(*http2serverConn)
```

Test hooks. 

#### <a name="net-http-var-http2testHookOnPanicMu">var http2testHookOnPanicMu</a>

```Go
var http2testHookOnPanicMu *sync.Mutex // nil except in tests

```

Test hooks. 

#### <a name="net-http-var-http2testHookOnPanic">var http2testHookOnPanic</a>

```Go
var http2testHookOnPanic func(sc *http2serverConn, panicVal interface{}) (rePanic bool)
```

Test hooks. 

#### <a name="net-http-var-ctx">var ctx</a>

```Go
var ctx context.Context
```

The TLSNextProto interface predates contexts, so the net/http package passes down its per-connection base context via an exported but unadvertised method on the Handler. This is for internal net/http<=>http2 use only. 

#### <a name="net-http-var-http2settingsTimerMsg">var http2settingsTimerMsg</a>

```Go
var http2settingsTimerMsg = new(http2serverMessage)
```

Message values sent to serveMsgCh. 

#### <a name="net-http-var-http2idleTimerMsg">var http2idleTimerMsg</a>

```Go
var http2idleTimerMsg = new(http2serverMessage)
```

Message values sent to serveMsgCh. 

#### <a name="net-http-var-http2shutdownTimerMsg">var http2shutdownTimerMsg</a>

```Go
var http2shutdownTimerMsg = new(http2serverMessage)
```

Message values sent to serveMsgCh. 

#### <a name="net-http-var-http2gracefulShutdownMsg">var http2gracefulShutdownMsg</a>

```Go
var http2gracefulShutdownMsg = new(http2serverMessage)
```

Message values sent to serveMsgCh. 

#### <a name="net-http-var-http2errPrefaceTimeout">var http2errPrefaceTimeout</a>

```Go
var http2errPrefaceTimeout = errors.New("timeout waiting for client preface")
```

#### <a name="net-http-var-http2errChanPool">var http2errChanPool</a>

```Go
var http2errChanPool = ...
```

#### <a name="net-http-var-http2writeDataPool">var http2writeDataPool</a>

```Go
var http2writeDataPool = ...
```

#### <a name="net-http-var-frameWriteDone">var frameWriteDone</a>

```Go
var frameWriteDone bool // the frame write is done (successfully or not)

```

#### <a name="net-http-var-ignoreWrite">var ignoreWrite</a>

```Go
var ignoreWrite bool
```

If true, wr will not be written and wr.done will not be signaled. 

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-http2errHandlerPanicked">var http2errHandlerPanicked</a>

```Go
var http2errHandlerPanicked = errors.New("http2: handler panicked")
```

errHandlerPanicked is the error given to any callers blocked in a read from Request.Body when the main goroutine panics. Since most handlers read in the main ServeHTTP goroutine, this will show up rarely. 

#### <a name="net-http-var-http2goAwayTimeout">var http2goAwayTimeout</a>

```Go
var http2goAwayTimeout = 1 * time.Second
```

After sending GOAWAY, the connection will close after goAwayTimeout. If we close the connection immediately after sending GOAWAY, there may be unsent data in our kernel receive buffer, which will cause the kernel to send a TCP RST on close() instead of a FIN. This RST will abort the connection immediately, whether or not the client had received the GOAWAY. 

Ideally we should delay for at least 1 RTT + epsilon so the client has a chance to read the GOAWAY and stop sending messages. Measuring RTT is hard, so we approximate with 1 second. See golang.org/issue/18701. 

This is a var so it can be shorter in tests, where all requests uses the loopback interface making the expected RTT very small. 

TODO: configurable? 

#### <a name="net-http-var-tlsState">var tlsState</a>

```Go
var tlsState *tls.ConnectionState // nil if not scheme https

```

#### <a name="net-http-var-trailer">var trailer</a>

```Go
var trailer Header
```

Setup Trailers 

#### <a name="net-http-var-url_">var url_</a>

```Go
var url_ *url.URL
```

#### <a name="net-http-var-requestURI">var requestURI</a>

```Go
var requestURI string
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-errc">var errc</a>

```Go
var errc chan error
```

#### <a name="net-http-var-streamID">var streamID</a>

```Go
var streamID uint32
```

#### <a name="net-http-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ CloseNotifier = (*http2responseWriter)(nil)
```

Optional http.ResponseWriter interfaces implemented. 

#### <a name="net-http-var-_">var _</a>

```Go
var _ Flusher = (*http2responseWriter)(nil)
```

Optional http.ResponseWriter interfaces implemented. 

#### <a name="net-http-var-_">var _</a>

```Go
var _ http2stringWriter = (*http2responseWriter)(nil)
```

Optional http.ResponseWriter interfaces implemented. 

#### <a name="net-http-var-ctype">var ctype</a>

```Go
var ctype, clen string
```

#### <a name="net-http-var-clen">var clen</a>

```Go
var ctype, clen string
```

#### <a name="net-http-var-date">var date</a>

```Go
var date string
```

#### <a name="net-http-var-http2ErrRecursivePush">var http2ErrRecursivePush</a>

```Go
var http2ErrRecursivePush = errors.New("http2: recursive push not allowed")
```

Push errors. 

#### <a name="net-http-var-http2ErrPushLimitReached">var http2ErrPushLimitReached</a>

```Go
var http2ErrPushLimitReached = errors.New("http2: push would exceed peer's SETTINGS_MAX_CONCURRENT_STREAMS")
```

Push errors. 

#### <a name="net-http-var-_">var _</a>

```Go
var _ Pusher = (*http2responseWriter)(nil)
```

#### <a name="net-http-var-http2connHeaders">var http2connHeaders</a>

```Go
var http2connHeaders = ...
```

From [http://httpwg.org/specs/rfc7540.html#rfc.section.8.1.2.2](http://httpwg.org/specs/rfc7540.html#rfc.section.8.1.2.2) 

#### <a name="net-http-var-x">var x</a>

```Go
var x interface{} = hs
```

#### <a name="net-http-var-http2got1xxFuncForTests">var http2got1xxFuncForTests</a>

```Go
var http2got1xxFuncForTests func(int, textproto.MIMEHeader) error
```

#### <a name="net-http-var-http2ErrNoCachedConn">var http2ErrNoCachedConn</a>

```Go
var http2ErrNoCachedConn error = ...
```

#### <a name="net-http-var-http2errClientConnClosed">var http2errClientConnClosed</a>

```Go
var http2errClientConnClosed = errors.New("http2: client conn is closed")
```

#### <a name="net-http-var-http2errClientConnUnusable">var http2errClientConnUnusable</a>

```Go
var http2errClientConnUnusable = errors.New("http2: client conn not usable")
```

#### <a name="net-http-var-http2errClientConnGotGoAway">var http2errClientConnGotGoAway</a>

```Go
var http2errClientConnGotGoAway = errors.New("http2: Transport received Server's graceful shutdown GOAWAY")
```

#### <a name="net-http-var-maxConcurrentOkay">var maxConcurrentOkay</a>

```Go
var maxConcurrentOkay bool
```

#### <a name="net-http-var-http2shutdownEnterWaitStateHook">var http2shutdownEnterWaitStateHook</a>

```Go
var http2shutdownEnterWaitStateHook = ...
```

#### <a name="net-http-var-http2errRequestCanceled">var http2errRequestCanceled</a>

```Go
var http2errRequestCanceled = errors.New("net/http: request canceled")
```

errRequestCanceled is a copy of net/http's errRequestCanceled because it's not exported. At least they'll be DeepEqual for h1-vs-h2 comparisons tests. 

#### <a name="net-http-var-requestedGzip">var requestedGzip</a>

```Go
var requestedGzip bool
```

TODO(bradfitz): this is a copy of the logic in net/http. Unify somewhere? 

#### <a name="net-http-var-respHeaderTimer">var respHeaderTimer</a>

```Go
var respHeaderTimer <-chan time.Time
```

#### <a name="net-http-var-waitingForConn">var waitingForConn</a>

```Go
var waitingForConn chan struct{} = ...
```

#### <a name="net-http-var-waitingForConnErr">var waitingForConnErr</a>

```Go
var waitingForConnErr error // guarded by cc.mu

```

#### <a name="net-http-var-http2errStopReqBodyWrite">var http2errStopReqBodyWrite</a>

```Go
var http2errStopReqBodyWrite = errors.New("http2: aborting request body write")
```

internal error values; they don't escape to callers 

abort request body write; don't send cancel 

#### <a name="net-http-var-http2errStopReqBodyWriteAndCancel">var http2errStopReqBodyWriteAndCancel</a>

```Go
var http2errStopReqBodyWriteAndCancel = errors.New("http2: canceling request")
```

internal error values; they don't escape to callers 

abort request body write, but send stream reset of cancel. 

#### <a name="net-http-var-http2errReqBodyTooLong">var http2errReqBodyTooLong</a>

```Go
var http2errReqBodyTooLong = errors.New("http2: request body larger than specified content length")
```

internal error values; they don't escape to callers 

#### <a name="net-http-var-sawEOF">var sawEOF</a>

```Go
var sawEOF bool
```

#### <a name="net-http-var-n1">var n1</a>

```Go
var n1 int
```

The request body's Content-Length was predeclared and we just finished reading it all, but the underlying io.Reader returned the final chunk with a nil error (which is one of the two valid things a Reader can do at EOF). Because we'd prefer to send the END_STREAM bit early, double-check that we're actually at EOF. Subsequent reads should return (0, EOF) at this point. If either value is different, we return an error in one of two ways below. 

#### <a name="net-http-var-allowed">var allowed</a>

```Go
var allowed int32
```

#### <a name="net-http-var-trls">var trls</a>

```Go
var trls []byte
```

#### <a name="net-http-var-path">var path</a>

```Go
var path string
```

#### <a name="net-http-var-didUA">var didUA</a>

```Go
var didUA bool
```

#### <a name="net-http-var-t">var t</a>

```Go
var t *time.Timer
```

#### <a name="net-http-var-connAdd">var connAdd</a>

```Go
var connAdd, streamAdd int32
```

#### <a name="net-http-var-streamAdd">var streamAdd</a>

```Go
var connAdd, streamAdd int32
```

#### <a name="net-http-var-http2errClosedResponseBody">var http2errClosedResponseBody</a>

```Go
var http2errClosedResponseBody = errors.New("http2: response body closed")
```

#### <a name="net-http-var-refund">var refund</a>

```Go
var refund int
```

Return any padded flow control now, since we won't refund it later on body reads. 

#### <a name="net-http-var-code">var code</a>

```Go
var code func()
```

#### <a name="net-http-var-p">var p</a>

```Go
var p [8]byte
```

Generate a random payload 

#### <a name="net-http-var-http2errResponseHeaderListSize">var http2errResponseHeaderListSize</a>

```Go
var http2errResponseHeaderListSize = errors.New("http2: response header list larger than advertised limit")
```

#### <a name="net-http-var-http2errRequestHeaderListSize">var http2errRequestHeaderListSize</a>

```Go
var http2errRequestHeaderListSize = errors.New("http2: request header list larger than peer's advertised limit")
```

#### <a name="net-http-var-http2noBody">var http2noBody</a>

```Go
var http2noBody io.ReadCloser = ioutil.NopCloser(bytes.NewReader(nil))
```

#### <a name="net-http-var-empty">var empty</a>

```Go
var empty http2FrameWriteRequest
```

#### <a name="net-http-var-des">var des</a>

```Go
var des string
```

#### <a name="net-http-var-n">var n</a>

```Go
var n *http2priorityNode
```

#### <a name="net-http-var-timeFormats">var timeFormats</a>

```Go
var timeFormats = ...
```

#### <a name="net-http-var-headerNewlineToSpace">var headerNewlineToSpace</a>

```Go
var headerNewlineToSpace = strings.NewReplacer("\n", " ", "\r", " ")
```

#### <a name="net-http-var-headerSorterPool">var headerSorterPool</a>

```Go
var headerSorterPool = ...
```

#### <a name="net-http-var-formattedVals">var formattedVals</a>

```Go
var formattedVals []string
```

#### <a name="net-http-var-aLongTimeAgo">var aLongTimeAgo</a>

```Go
var aLongTimeAgo = time.Unix(1, 0)
```

aLongTimeAgo is a non-zero time, far in the past, used for immediate cancellation of network operations. 

#### <a name="net-http-var-omitBundledHTTP2">var omitBundledHTTP2</a>

```Go
var omitBundledHTTP2 bool
```

omitBundledHTTP2 is set by omithttp2.go when the nethttpomithttp2 build tag is set. That means h2_bundle.go isn't compiled in and we shouldn't try to use it. 

#### <a name="net-http-var-NoBody">var NoBody <small>(exported)</small></a>

```Go
var NoBody = ...
```

NoBody is an io.ReadCloser with no bytes. Read always returns EOF and Close always returns nil. It can be used in an outgoing client request to explicitly signal that a request has zero bytes. An alternative, however, is to simply set Request.Body to nil. 

#### <a name="net-http-var-_">var _</a>

```Go
var _ io.WriterTo = NoBody
```

verify that an io.Copy from NoBody won't require a buffer: 

#### <a name="net-http-var-_">var _</a>

```Go
var _ io.ReadCloser = NoBody
```

#### <a name="net-http-var-ErrMissingFile">var ErrMissingFile <small>(exported)</small></a>

```Go
var ErrMissingFile = errors.New("http: no such file")
```

ErrMissingFile is returned by FormFile when the provided file field name is either not present in the request or not a file field. 

#### <a name="net-http-var-ErrNotSupported">var ErrNotSupported <small>(exported)</small></a>

```Go
var ErrNotSupported = ...
```

ErrNotSupported is returned by the Push method of Pusher implementations to indicate that HTTP/2 Push support is not available. 

#### <a name="net-http-var-ErrUnexpectedTrailer">var ErrUnexpectedTrailer <small>(exported,deprecated)</small></a>

```Go
var ErrUnexpectedTrailer = ...
```

Deprecated: ErrUnexpectedTrailer is no longer returned by anything in the net/http package. Callers should not compare errors against this variable. 

#### <a name="net-http-var-ErrMissingBoundary">var ErrMissingBoundary <small>(exported)</small></a>

```Go
var ErrMissingBoundary = ...
```

ErrMissingBoundary is returned by Request.MultipartReader when the request's Content-Type does not include a "boundary" parameter. 

#### <a name="net-http-var-ErrNotMultipart">var ErrNotMultipart <small>(exported)</small></a>

```Go
var ErrNotMultipart = ...
```

ErrNotMultipart is returned by Request.MultipartReader when the request's Content-Type is not multipart/form-data. 

#### <a name="net-http-var-ErrHeaderTooLong">var ErrHeaderTooLong <small>(exported,deprecated)</small></a>

```Go
var ErrHeaderTooLong = ...
```

Deprecated: ErrHeaderTooLong is no longer returned by anything in the net/http package. Callers should not compare errors against this variable. 

#### <a name="net-http-var-ErrShortBody">var ErrShortBody <small>(exported,deprecated)</small></a>

```Go
var ErrShortBody = ...
```

Deprecated: ErrShortBody is no longer returned by anything in the net/http package. Callers should not compare errors against this variable. 

#### <a name="net-http-var-ErrMissingContentLength">var ErrMissingContentLength <small>(exported,deprecated)</small></a>

```Go
var ErrMissingContentLength = ...
```

Deprecated: ErrMissingContentLength is no longer returned by anything in the net/http package. Callers should not compare errors against this variable. 

#### <a name="net-http-var-reqWriteExcludeHeader">var reqWriteExcludeHeader</a>

```Go
var reqWriteExcludeHeader = ...
```

Headers that Request.Write handles itself and should be skipped. 

#### <a name="net-http-var-ErrNoCookie">var ErrNoCookie <small>(exported)</small></a>

```Go
var ErrNoCookie = errors.New("http: named cookie not present")
```

ErrNoCookie is returned by Request's Cookie method when a cookie is not found. 

#### <a name="net-http-var-multipartByReader">var multipartByReader</a>

```Go
var multipartByReader = ...
```

multipartByReader is a sentinel value. Its presence in Request.MultipartForm indicates that parsing of the request body has been handed off to a MultipartReader instead of ParseMultipartForm. 

#### <a name="net-http-var-errMissingHost">var errMissingHost</a>

```Go
var errMissingHost = errors.New("http: Request.Write on Request with no Host or URL set")
```

errMissingHost is returned by Write when there is no Host or URL present in the Request. 

#### <a name="net-http-var-bw">var bw</a>

```Go
var bw *bufio.Writer
```

Wrap the writer in a bufio Writer if it's not already buffered. Don't always call NewWriter, as that forces a bytes.Buffer and other small bufio Writers to have a minimum 4k buffer size. 

#### <a name="net-http-var-textprotoReaderPool">var textprotoReaderPool</a>

```Go
var textprotoReaderPool sync.Pool
```

#### <a name="net-http-var-s">var s</a>

```Go
var s string
```

First line: GET /index.html HTTP/1.0 

#### <a name="net-http-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http-var-reader">var reader</a>

```Go
var reader io.Reader = r.Body
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-newValues">var newValues</a>

```Go
var newValues url.Values
```

#### <a name="net-http-var-e">var e</a>

```Go
var e error
```

#### <a name="net-http-var-respExcludeHeader">var respExcludeHeader</a>

```Go
var respExcludeHeader = ...
```

#### <a name="net-http-var-ErrNoLocation">var ErrNoLocation <small>(exported)</small></a>

```Go
var ErrNoLocation = errors.New("http: no Location header in response")
```

ErrNoLocation is returned by Response's Location method when no Location header is present. 

#### <a name="net-http-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf [1]byte
```

Is it actually 0 length? Or just unknown? 

#### <a name="net-http-var-ErrBodyNotAllowed">var ErrBodyNotAllowed <small>(exported)</small></a>

```Go
var ErrBodyNotAllowed = errors.New("http: request method or response status code does not allow body")
```

Errors used by the HTTP server. 

ErrBodyNotAllowed is returned by ResponseWriter.Write calls when the HTTP method or response code does not permit a body. 

#### <a name="net-http-var-ErrHijacked">var ErrHijacked <small>(exported)</small></a>

```Go
var ErrHijacked = errors.New("http: connection has been hijacked")
```

Errors used by the HTTP server. 

ErrHijacked is returned by ResponseWriter.Write calls when the underlying connection has been hijacked using the Hijacker interface. A zero-byte write on a hijacked connection will return ErrHijacked without any other side effects. 

#### <a name="net-http-var-ErrContentLength">var ErrContentLength <small>(exported)</small></a>

```Go
var ErrContentLength = errors.New("http: wrote more than the declared Content-Length")
```

Errors used by the HTTP server. 

ErrContentLength is returned by ResponseWriter.Write calls when a Handler set a Content-Length response header with a declared size and then attempted to write more bytes than declared. 

#### <a name="net-http-var-ErrWriteAfterFlush">var ErrWriteAfterFlush <small>(exported,deprecated)</small></a>

```Go
var ErrWriteAfterFlush = errors.New("unused")
```

Errors used by the HTTP server. 

Deprecated: ErrWriteAfterFlush is no longer returned by anything in the net/http package. Callers should not compare errors against this variable. 

#### <a name="net-http-var-ServerContextKey">var ServerContextKey <small>(exported)</small></a>

```Go
var ServerContextKey = ...
```

ServerContextKey is a context key. It can be used in HTTP handlers with Context.Value to access the server that started the handler. The associated value will be of type *Server. 

#### <a name="net-http-var-LocalAddrContextKey">var LocalAddrContextKey <small>(exported)</small></a>

```Go
var LocalAddrContextKey = ...
```

LocalAddrContextKey is a context key. It can be used in HTTP handlers with Context.Value to access the local address the connection arrived on. The associated value will be of type net.Addr. 

#### <a name="net-http-var-crlf">var crlf</a>

```Go
var crlf = []byte("\r\n")
```

#### <a name="net-http-var-colonSpace">var colonSpace</a>

```Go
var colonSpace = []byte(": ")
```

#### <a name="net-http-var-t">var t</a>

```Go
var t Header
```

#### <a name="net-http-var-bufioReaderPool">var bufioReaderPool</a>

```Go
var bufioReaderPool sync.Pool
```

#### <a name="net-http-var-bufioWriter2kPool">var bufioWriter2kPool</a>

```Go
var bufioWriter2kPool sync.Pool
```

#### <a name="net-http-var-bufioWriter4kPool">var bufioWriter4kPool</a>

```Go
var bufioWriter4kPool sync.Pool
```

#### <a name="net-http-var-copyBufPool">var copyBufPool</a>

```Go
var copyBufPool = ...
```

#### <a name="net-http-var-errTooLarge">var errTooLarge</a>

```Go
var errTooLarge = errors.New("http: request too large")
```

#### <a name="net-http-var-wholeReqDeadline">var wholeReqDeadline</a>

```Go
var wholeReqDeadline time.Time // or zero if none

```

#### <a name="net-http-var-hdrDeadline">var hdrDeadline</a>

```Go
var hdrDeadline time.Time // or zero if none

```

#### <a name="net-http-var-frame">var frame</a>

```Go
var frame runtime.Frame
```

#### <a name="net-http-var-extraHeaderKeys">var extraHeaderKeys</a>

```Go
var extraHeaderKeys = ...
```

Sorted the same as extraHeader.Write's loop. 

#### <a name="net-http-var-headerContentLength">var headerContentLength</a>

```Go
var headerContentLength = []byte("Content-Length: ")
```

#### <a name="net-http-var-headerDate">var headerDate</a>

```Go
var headerDate = []byte("Date: ")
```

#### <a name="net-http-var-excludeHeader">var excludeHeader</a>

```Go
var excludeHeader map[string]bool
```

#### <a name="net-http-var-setHeader">var setHeader</a>

```Go
var setHeader extraHeader
```

#### <a name="net-http-var-discard">var discard</a>

```Go
var discard, tooBig bool
```

#### <a name="net-http-var-tooBig">var tooBig</a>

```Go
var discard, tooBig bool
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ closeWriter = (*net.TCPConn)(nil)
```

#### <a name="net-http-var-ErrAbortHandler">var ErrAbortHandler <small>(exported)</small></a>

```Go
var ErrAbortHandler = errors.New("net/http: abort Handler")
```

ErrAbortHandler is a sentinel panic value to abort a handler. While any panic from ServeHTTP aborts the response to the client, panicking with ErrAbortHandler also suppresses logging of a stack trace to the server's error log. 

#### <a name="net-http-var-query">var query</a>

```Go
var query string
```

#### <a name="net-http-var-htmlReplacer">var htmlReplacer</a>

```Go
var htmlReplacer = strings.NewReplacer(
	"&", "&amp;",
	"<", "&lt;",
	">", "&gt;",

	`"`, "&#34;",

	"'", "&#39;",
)
```

#### <a name="net-http-var-DefaultServeMux">var DefaultServeMux <small>(exported)</small></a>

```Go
var DefaultServeMux = &defaultServeMux
```

DefaultServeMux is the default ServeMux used by Serve. 

#### <a name="net-http-var-defaultServeMux">var defaultServeMux</a>

```Go
var defaultServeMux ServeMux
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-stateName">var stateName</a>

```Go
var stateName = ...
```

#### <a name="net-http-var-testHookServerServe">var testHookServerServe</a>

```Go
var testHookServerServe func(*Server, net.Listener) // used if non-nil

```

#### <a name="net-http-var-ErrServerClosed">var ErrServerClosed <small>(exported)</small></a>

```Go
var ErrServerClosed = errors.New("http: Server closed")
```

ErrServerClosed is returned by the Server's Serve, ServeTLS, ListenAndServe, and ListenAndServeTLS methods after a call to Shutdown or Close. 

#### <a name="net-http-var-tempDelay">var tempDelay</a>

```Go
var tempDelay time.Duration // how long to sleep on accept failure

```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-ErrHandlerTimeout">var ErrHandlerTimeout <small>(exported)</small></a>

```Go
var ErrHandlerTimeout = errors.New("http: Handler timeout")
```

ErrHandlerTimeout is returned on ResponseWriter Write calls in handlers which have timed out. 

#### <a name="net-http-var-cancelCtx">var cancelCtx</a>

```Go
var cancelCtx context.CancelFunc
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ Pusher = (*timeoutWriter)(nil)
```

#### <a name="net-http-var-uniqNameMu">var uniqNameMu</a>

```Go
var uniqNameMu sync.Mutex
```

#### <a name="net-http-var-uniqNameNext">var uniqNameNext</a>

```Go
var uniqNameNext = make(map[string]int)
```

#### <a name="net-http-var-sniffSignatures">var sniffSignatures</a>

```Go
var sniffSignatures = ...
```

Data matching the table in section 6. 

#### <a name="net-http-var-mp4ftype">var mp4ftype</a>

```Go
var mp4ftype = []byte("ftyp")
```

#### <a name="net-http-var-mp4">var mp4</a>

```Go
var mp4 = []byte("mp4")
```

#### <a name="net-http-var-socksnoDeadline">var socksnoDeadline</a>

```Go
var socksnoDeadline = ...
```

#### <a name="net-http-var-socksaLongTimeAgo">var socksaLongTimeAgo</a>

```Go
var socksaLongTimeAgo = time.Unix(1, 0)
```

#### <a name="net-http-var-a">var a</a>

```Go
var a socksAddr
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-c">var c</a>

```Go
var c net.Conn
```

#### <a name="net-http-var-dd">var dd</a>

```Go
var dd net.Dialer
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-c">var c</a>

```Go
var c net.Conn
```

#### <a name="net-http-var-statusText">var statusText</a>

```Go
var statusText = ...
```

#### <a name="net-http-var-ErrLineTooLong">var ErrLineTooLong <small>(exported)</small></a>

```Go
var ErrLineTooLong = internal.ErrLineTooLong
```

ErrLineTooLong is returned when reading request or response bodies with malformed chunked encoding. 

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf [1]byte
```

#### <a name="net-http-var-rres">var rres</a>

```Go
var rres readResult
```

#### <a name="net-http-var-ncopy">var ncopy</a>

```Go
var ncopy int64
```

#### <a name="net-http-var-body">var body</a>

```Go
var body = t.unwrapBody()
```

#### <a name="net-http-var-nextra">var nextra</a>

```Go
var nextra int64
```

#### <a name="net-http-var-suppressedHeaders304">var suppressedHeaders304</a>

```Go
var suppressedHeaders304 = ...
```

#### <a name="net-http-var-suppressedHeadersNoBody">var suppressedHeadersNoBody</a>

```Go
var suppressedHeadersNoBody = ...
```

#### <a name="net-http-var-cl">var cl</a>

```Go
var cl string
```

Logic based on Content-Length 

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-ErrBodyReadAfterClose">var ErrBodyReadAfterClose <small>(exported)</small></a>

```Go
var ErrBodyReadAfterClose = errors.New("http: invalid Read on closed Body")
```

ErrBodyReadAfterClose is returned when reading a Request or Response Body after the body has been closed. This typically happens when the body is read after an HTTP Handler calls WriteHeader or Write on its ResponseWriter. 

#### <a name="net-http-var-singleCRLF">var singleCRLF</a>

```Go
var singleCRLF = []byte("\r\n")
```

#### <a name="net-http-var-doubleCRLF">var doubleCRLF</a>

```Go
var doubleCRLF = []byte("\r\n\r\n")
```

#### <a name="net-http-var-errTrailerEOF">var errTrailerEOF</a>

```Go
var errTrailerEOF = errors.New("http: unexpected EOF reading trailer")
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-n">var n</a>

```Go
var n int64
```

#### <a name="net-http-var-nopCloserType">var nopCloserType</a>

```Go
var nopCloserType = reflect.TypeOf(io.NopCloser(nil))
```

#### <a name="net-http-var-DefaultTransport">var DefaultTransport <small>(exported)</small></a>

```Go
var DefaultTransport RoundTripper = ...
```

DefaultTransport is the default implementation of Transport and is used by DefaultClient. It establishes network connections as needed and caches them for reuse by subsequent calls. It uses HTTP proxies as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and $no_proxy) environment variables. 

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-resp">var resp</a>

```Go
var resp *Response
```

#### <a name="net-http-var-errCannotRewind">var errCannotRewind</a>

```Go
var errCannotRewind = errors.New("net/http: cannot rewind body after connection loss")
```

#### <a name="net-http-var-ErrSkipAltProtocol">var ErrSkipAltProtocol <small>(exported)</small></a>

```Go
var ErrSkipAltProtocol = errors.New("net/http: skip alternate protocol")
```

ErrSkipAltProtocol is a sentinel error value defined by Transport.RegisterProtocol. 

#### <a name="net-http-var-envProxyOnce">var envProxyOnce</a>

```Go
var envProxyOnce sync.Once
```

proxyConfigOnce guards proxyConfig 

#### <a name="net-http-var-envProxyFuncValue">var envProxyFuncValue</a>

```Go
var envProxyFuncValue func(*url.URL) (*url.URL, error)
```

#### <a name="net-http-var-errKeepAlivesDisabled">var errKeepAlivesDisabled</a>

```Go
var errKeepAlivesDisabled = errors.New("http: putIdleConn: keep alives disabled")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errConnBroken">var errConnBroken</a>

```Go
var errConnBroken = errors.New("http: putIdleConn: connection is in bad state")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errCloseIdle">var errCloseIdle</a>

```Go
var errCloseIdle = errors.New("http: putIdleConn: CloseIdleConnections was called")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errTooManyIdle">var errTooManyIdle</a>

```Go
var errTooManyIdle = errors.New("http: putIdleConn: too many idle connections")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errTooManyIdleHost">var errTooManyIdleHost</a>

```Go
var errTooManyIdleHost = errors.New("http: putIdleConn: too many idle connections for host")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errCloseIdleConns">var errCloseIdleConns</a>

```Go
var errCloseIdleConns = errors.New("http: CloseIdleConnections called")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errReadLoopExiting">var errReadLoopExiting</a>

```Go
var errReadLoopExiting = errors.New("http: persistConn.readLoop exiting")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errIdleConnTimeout">var errIdleConnTimeout</a>

```Go
var errIdleConnTimeout = errors.New("http: idle connection timeout")
```

error values for debugging and testing, not seen by users. 

#### <a name="net-http-var-errServerClosedIdle">var errServerClosedIdle</a>

```Go
var errServerClosedIdle = errors.New("http: server closed idle connection")
```

error values for debugging and testing, not seen by users. 

errServerClosedIdle is not seen by users for idempotent requests, but may be seen by a user if the server shuts down an idle connection and sends its FIN in flight with already-written POST body bytes from the client. See [https://github.com/golang/go/issues/19943#issuecomment-355607646](https://github.com/golang/go/issues/19943#issuecomment-355607646) 

#### <a name="net-http-var-oldTime">var oldTime</a>

```Go
var oldTime time.Time
```

If IdleConnTimeout is set, calculate the oldest persistConn.idleAt time we're willing to use a cached idle conn. 

#### <a name="net-http-var-removed">var removed</a>

```Go
var removed bool
```

#### <a name="net-http-var-zeroDialer">var zeroDialer</a>

```Go
var zeroDialer net.Dialer
```

#### <a name="net-http-var-timer">var timer</a>

```Go
var timer *time.Timer // for canceling TLS handshake

```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-firstTLSHost">var firstTLSHost</a>

```Go
var firstTLSHost string
```

#### <a name="net-http-var-hdr">var hdr</a>

```Go
var hdr Header
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-resp">var resp</a>

```Go
var resp *Response
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error // write or read error

```

#### <a name="net-http-var-_">var _</a>

```Go
var _ io.ReaderFrom = (*persistConnWriter)(nil)
```

#### <a name="net-http-var-h1">var h1</a>

```Go
var h1 string
```

Only used by tests. 

#### <a name="net-http-var-errCallerOwnsConn">var errCallerOwnsConn</a>

```Go
var errCallerOwnsConn = errors.New("read loop ending; caller owns writable underlying conn")
```

errCallerOwnsConn is an internal sentinel error used when we hand off a writable response.Body to the caller. We use this to prevent closing a net.Conn that is now owned by the caller. 

#### <a name="net-http-var-resp">var resp</a>

```Go
var resp *Response
```

#### <a name="net-http-var-errTimeout">var errTimeout</a>

```Go
var errTimeout error = ...
```

#### <a name="net-http-var-errRequestCanceled">var errRequestCanceled</a>

```Go
var errRequestCanceled = http2errRequestCanceled
```

errRequestCanceled is set to be identical to the one from h2 to facilitate testing. 

#### <a name="net-http-var-errRequestCanceledConn">var errRequestCanceledConn</a>

```Go
var errRequestCanceledConn = errors.New("net/http: request canceled while waiting for connection") // TODO: unify?

```

#### <a name="net-http-var-testHookEnterRoundTrip">var testHookEnterRoundTrip</a>

```Go
var testHookEnterRoundTrip = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookWaitResLoop">var testHookWaitResLoop</a>

```Go
var testHookWaitResLoop = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookRoundTripRetried">var testHookRoundTripRetried</a>

```Go
var testHookRoundTripRetried = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookPrePendingDial">var testHookPrePendingDial</a>

```Go
var testHookPrePendingDial = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookPostPendingDial">var testHookPostPendingDial</a>

```Go
var testHookPostPendingDial = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookMu">var testHookMu</a>

```Go
var testHookMu sync.Locker = fakeLocker{} // guards following

```

testHooks. Always non-nil. 

#### <a name="net-http-var-testHookReadLoopBeforeNextRead">var testHookReadLoopBeforeNextRead</a>

```Go
var testHookReadLoopBeforeNextRead = nop
```

testHooks. Always non-nil. 

#### <a name="net-http-var-continueCh">var continueCh</a>

```Go
var continueCh chan struct{} = ...
```

#### <a name="net-http-var-respHeaderTimer">var respHeaderTimer</a>

```Go
var respHeaderTimer <-chan time.Time
```

#### <a name="net-http-var-portMap">var portMap</a>

```Go
var portMap = ...
```

#### <a name="net-http-var-errReadOnClosedResBody">var errReadOnClosedResBody</a>

```Go
var errReadOnClosedResBody = errors.New("http: read on closed response body")
```

#### <a name="net-http-var-writeSetCookiesTests">var writeSetCookiesTests</a>

```Go
var writeSetCookiesTests = ...
```

#### <a name="net-http-var-logbuf">var logbuf</a>

```Go
var logbuf bytes.Buffer
```

#### <a name="net-http-var-addCookieTests">var addCookieTests</a>

```Go
var addCookieTests = ...
```

#### <a name="net-http-var-readSetCookiesTests">var readSetCookiesTests</a>

```Go
var readSetCookiesTests = ...
```

#### <a name="net-http-var-readCookiesTests">var readCookiesTests</a>

```Go
var readCookiesTests = ...
```

#### <a name="net-http-var-logbuf">var logbuf</a>

```Go
var logbuf bytes.Buffer
```

#### <a name="net-http-var-logbuf">var logbuf</a>

```Go
var logbuf bytes.Buffer
```

#### <a name="net-http-var-benchmarkCookieString">var benchmarkCookieString</a>

```Go
var benchmarkCookieString string
```

#### <a name="net-http-var-c">var c</a>

```Go
var c []*Cookie
```

#### <a name="net-http-var-c">var c</a>

```Go
var c []*Cookie
```

#### <a name="net-http-var-DefaultUserAgent">var DefaultUserAgent</a>

```Go
var DefaultUserAgent = defaultUserAgent
```

#### <a name="net-http-var-NewLoggingConn">var NewLoggingConn</a>

```Go
var NewLoggingConn = newLoggingConn
```

#### <a name="net-http-var-ExportAppendTime">var ExportAppendTime</a>

```Go
var ExportAppendTime = appendTime
```

#### <a name="net-http-var-ExportRefererForURL">var ExportRefererForURL</a>

```Go
var ExportRefererForURL = refererForURL
```

#### <a name="net-http-var-ExportServerNewConn">var ExportServerNewConn</a>

```Go
var ExportServerNewConn = (*Server).newConn
```

#### <a name="net-http-var-ExportCloseWriteAndWait">var ExportCloseWriteAndWait</a>

```Go
var ExportCloseWriteAndWait = (*conn).closeWriteAndWait
```

#### <a name="net-http-var-ExportErrRequestCanceled">var ExportErrRequestCanceled</a>

```Go
var ExportErrRequestCanceled = errRequestCanceled
```

#### <a name="net-http-var-ExportErrRequestCanceledConn">var ExportErrRequestCanceledConn</a>

```Go
var ExportErrRequestCanceledConn = errRequestCanceledConn
```

#### <a name="net-http-var-ExportErrServerClosedIdle">var ExportErrServerClosedIdle</a>

```Go
var ExportErrServerClosedIdle = errServerClosedIdle
```

#### <a name="net-http-var-ExportServeFile">var ExportServeFile</a>

```Go
var ExportServeFile = serveFile
```

#### <a name="net-http-var-ExportScanETag">var ExportScanETag</a>

```Go
var ExportScanETag = scanETag
```

#### <a name="net-http-var-ExportHttp2ConfigureServer">var ExportHttp2ConfigureServer</a>

```Go
var ExportHttp2ConfigureServer = http2ConfigureServer
```

#### <a name="net-http-var-Export_shouldCopyHeaderOnRedirect">var Export_shouldCopyHeaderOnRedirect</a>

```Go
var Export_shouldCopyHeaderOnRedirect = shouldCopyHeaderOnRedirect
```

#### <a name="net-http-var-Export_writeStatusLine">var Export_writeStatusLine</a>

```Go
var Export_writeStatusLine = writeStatusLine
```

#### <a name="net-http-var-Export_is408Message">var Export_is408Message</a>

```Go
var Export_is408Message = is408Message
```

#### <a name="net-http-var-SetEnterRoundTripHook">var SetEnterRoundTripHook</a>

```Go
var SetEnterRoundTripHook = hookSetter(&testHookEnterRoundTrip)
```

#### <a name="net-http-var-SetRoundTripRetried">var SetRoundTripRetried</a>

```Go
var SetRoundTripRetried = hookSetter(&testHookRoundTripRetried)
```

#### <a name="net-http-var-ret">var ret</a>

```Go
var ret []string
```

#### <a name="net-http-var-ret">var ret</a>

```Go
var ret []string
```

#### <a name="net-http-var-headerWriteTests">var headerWriteTests</a>

```Go
var headerWriteTests = ...
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-parseTimeTests">var parseTimeTests</a>

```Go
var parseTimeTests = ...
```

#### <a name="net-http-var-hasTokenTests">var hasTokenTests</a>

```Go
var hasTokenTests = ...
```

#### <a name="net-http-var-testHeader">var testHeader</a>

```Go
var testHeader = ...
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-got">var got</a>

```Go
var got []string
```

#### <a name="net-http-var-valuesCount">var valuesCount</a>

```Go
var valuesCount int
```

#### <a name="net-http-var-cacheKeysTests">var cacheKeysTests</a>

```Go
var cacheKeysTests = ...
```

#### <a name="net-http-var-proxy">var proxy</a>

```Go
var proxy *url.URL
```

#### <a name="net-http-var-ParseRangeTests">var ParseRangeTests</a>

```Go
var ParseRangeTests = ...
```

#### <a name="net-http-var-noError">var noError</a>

```Go
var noError = ""
```

#### <a name="net-http-var-noBodyStr">var noBodyStr</a>

```Go
var noBodyStr = ""
```

#### <a name="net-http-var-noTrailer">var noTrailer</a>

```Go
var noTrailer Header = nil
```

#### <a name="net-http-var-reqTests">var reqTests</a>

```Go
var reqTests = ...
```

#### <a name="net-http-var-bout">var bout</a>

```Go
var bout bytes.Buffer
```

#### <a name="net-http-var-badRequestTests">var badRequestTests</a>

```Go
var badRequestTests = ...
```

#### <a name="net-http-var-reqWriteTests">var reqWriteTests</a>

```Go
var reqWriteTests = ...
```

#### <a name="net-http-var-braw">var braw</a>

```Go
var braw bytes.Buffer
```

#### <a name="net-http-var-praw">var praw</a>

```Go
var praw bytes.Buffer
```

#### <a name="net-http-var-wantErr">var wantErr</a>

```Go
var wantErr error
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer // records the output

```

Use the actual Transport code to record what we would send on the wire, but not using TCP.  Use a Transport with a custom dialer that returns a fake net.Conn that waits for the full input (and recording it), and then responds with a dummy response. 

#### <a name="net-http-var-respTests">var respTests</a>

```Go
var respTests = ...
```

#### <a name="net-http-var-bout">var bout</a>

```Go
var bout bytes.Buffer
```

#### <a name="net-http-var-readResponseCloseInMiddleTests">var readResponseCloseInMiddleTests</a>

```Go
var readResponseCloseInMiddleTests = ...
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-wr">var wr</a>

```Go
var wr io.Writer = &buf
```

#### <a name="net-http-var-responseLocationTests">var responseLocationTests</a>

```Go
var responseLocationTests = ...
```

#### <a name="net-http-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http-var-buf1">var buf1</a>

```Go
var buf1 bytes.Buffer
```

#### <a name="net-http-var-buf2">var buf2</a>

```Go
var buf2 bytes.Buffer
```

#### <a name="net-http-var-braw">var braw</a>

```Go
var braw bytes.Buffer
```

#### <a name="net-http-var-_">var _</a>

```Go
var _ io.ReaderFrom = (*mockTransferWriter)(nil)
```

#### <a name="net-http-var-actualReader">var actualReader</a>

```Go
var actualReader reflect.Type
```

### <a name="net-http-type">Types <small>(exported)</small></a>

#### <a name="net-http-type-Client">type Client struct <small>(exported)</small></a>

```Go
type Client struct {
	// Transport specifies the mechanism by which individual
	// HTTP requests are made.
	// If nil, DefaultTransport is used.
	Transport RoundTripper

	// CheckRedirect specifies the policy for handling redirects.
	// If CheckRedirect is not nil, the client calls it before
	// following an HTTP redirect. The arguments req and via are
	// the upcoming request and the requests made already, oldest
	// first. If CheckRedirect returns an error, the Client's Get
	// method returns both the previous Response (with its Body
	// closed) and CheckRedirect's error (wrapped in a url.Error)
	// instead of issuing the Request req.
	// As a special case, if CheckRedirect returns ErrUseLastResponse,
	// then the most recent response is returned with its body
	// unclosed, along with a nil error.
	//
	// If CheckRedirect is nil, the Client uses its default policy,
	// which is to stop after 10 consecutive requests.
	CheckRedirect func(req *Request, via []*Request) error

	// Jar specifies the cookie jar.
	//
	// The Jar is used to insert relevant cookies into every
	// outbound Request and is updated with the cookie values
	// of every inbound Response. The Jar is consulted for every
	// redirect that the Client follows.
	//
	// If Jar is nil, cookies are only sent if they are explicitly
	// set on the Request.
	Jar CookieJar

	// Timeout specifies a time limit for requests made by this
	// Client. The timeout includes connection time, any
	// redirects, and reading the response body. The timer remains
	// running after Get, Head, Post, or Do return and will
	// interrupt reading of the Response.Body.
	//
	// A Timeout of zero means no timeout.
	//
	// The Client cancels requests to the underlying Transport
	// as if the Request's Context ended.
	//
	// For compatibility, the Client will also use the deprecated
	// CancelRequest method on Transport if found. New
	// RoundTripper implementations should use the Request's Context
	// for cancellation instead of implementing CancelRequest.
	Timeout time.Duration
}
```

A Client is an HTTP client. Its zero value (DefaultClient) is a usable client that uses DefaultTransport. 

The Client's Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines. 

A Client is higher-level than a RoundTripper (such as Transport) and additionally handles HTTP details such as cookies and redirects. 

When following redirects, the Client will forward all headers set on the initial Request except: 

• when forwarding sensitive headers like "Authorization", "WWW-Authenticate", and "Cookie" to untrusted targets. These headers will be ignored when following a redirect to a domain that is not a subdomain match or exact match of the initial domain. For example, a redirect from "foo.com" to either "foo.com" or "sub.foo.com" will forward the sensitive headers, but a redirect to "bar.com" will not. 

• when forwarding the "Cookie" header with a non-nil cookie Jar. Since each redirect may mutate the state of the cookie jar, a redirect may possibly alter a cookie set in the initial request. When forwarding the "Cookie" header, any mutated cookies will be omitted, with the expectation that the Jar will insert those mutated cookies with the updated values (assuming the origin matches). If Jar is nil, the initial cookies are forwarded without change. 

##### <a name="net-http-type-Client-send">func (c *Client) send(req *Request, deadline time.Time) (resp *Response, didTimeout func() bool, err error)</a>

```Go
func (c *Client) send(req *Request, deadline time.Time) (resp *Response, didTimeout func() bool, err error)
```

didTimeout is non-nil only if err != nil. 

##### <a name="net-http-type-Client-deadline">func (c *Client) deadline() time.Time</a>

```Go
func (c *Client) deadline() time.Time
```

##### <a name="net-http-type-Client-transport">func (c *Client) transport() RoundTripper</a>

```Go
func (c *Client) transport() RoundTripper
```

##### <a name="net-http-type-Client-Get">func (c *Client) Get(url string) (resp *Response, err error) <small>(exported)</small></a>

```Go
func (c *Client) Get(url string) (resp *Response, err error)
```

Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect after calling the Client's CheckRedirect function: 

```
301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
308 (Permanent Redirect)

```
An error is returned if the Client's CheckRedirect function fails or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if the request timed out. 

When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it. 

To make a request with custom headers, use NewRequest and Client.Do. 

##### <a name="net-http-type-Client-checkRedirect">func (c *Client) checkRedirect(req *Request, via []*Request) error</a>

```Go
func (c *Client) checkRedirect(req *Request, via []*Request) error
```

checkRedirect calls either the user's configured CheckRedirect function, or the default. 

##### <a name="net-http-type-Client-Do">func (c *Client) Do(req *Request) (*Response, error) <small>(exported)</small></a>

```Go
func (c *Client) Do(req *Request) (*Response, error)
```

Do sends an HTTP request and returns an HTTP response, following policy (such as redirects, cookies, auth) as configured on the client. 

An error is returned if caused by client policy (such as CheckRedirect), or failure to speak HTTP (such as a network connectivity problem). A non-2xx status code doesn't cause an error. 

If the returned error is nil, the Response will contain a non-nil Body which the user is expected to close. If the Body is not both read to EOF and closed, the Client's underlying RoundTripper (typically Transport) may not be able to re-use a persistent TCP connection to the server for a subsequent "keep-alive" request. 

The request Body, if non-nil, will be closed by the underlying Transport, even on errors. 

On error, any Response can be ignored. A non-nil Response with a non-nil error only occurs when CheckRedirect fails, and even then the returned Response.Body is already closed. 

Generally Get, Post, or PostForm will be used instead of Do. 

If the server replies with a redirect, the Client first uses the CheckRedirect function to determine whether the redirect should be followed. If permitted, a 301, 302, or 303 redirect causes subsequent requests to use HTTP method GET (or HEAD if the original request was HEAD), with no body. A 307 or 308 redirect preserves the original HTTP method and body, provided that the Request.GetBody function is defined. The NewRequest function automatically sets GetBody for common standard library body types. 

Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled. 

##### <a name="net-http-type-Client-do">func (c *Client) do(req *Request) (retres *Response, reterr error)</a>

```Go
func (c *Client) do(req *Request) (retres *Response, reterr error)
```

##### <a name="net-http-type-Client-makeHeadersCopier">func (c *Client) makeHeadersCopier(ireq *Request) func(*Request)</a>

```Go
func (c *Client) makeHeadersCopier(ireq *Request) func(*Request)
```

makeHeadersCopier makes a function that copies headers from the initial Request, ireq. For every redirect, this function must be called so that it can copy headers into the upcoming Request. 

##### <a name="net-http-type-Client-Post">func (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error) <small>(exported)</small></a>

```Go
func (c *Client) Post(url, contentType string, body io.Reader) (resp *Response, err error)
```

Post issues a POST to the specified URL. 

Caller should close resp.Body when done reading from it. 

If the provided body is an io.Closer, it is closed after the request. 

To set custom headers, use NewRequest and Client.Do. 

See the Client.Do method documentation for details on how redirects are handled. 

##### <a name="net-http-type-Client-PostForm">func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error) <small>(exported)</small></a>

```Go
func (c *Client) PostForm(url string, data url.Values) (resp *Response, err error)
```

PostForm issues a POST to the specified URL, with data's keys and values URL-encoded as the request body. 

The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and Client.Do. 

When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it. 

See the Client.Do method documentation for details on how redirects are handled. 

##### <a name="net-http-type-Client-Head">func (c *Client) Head(url string) (resp *Response, err error) <small>(exported)</small></a>

```Go
func (c *Client) Head(url string) (resp *Response, err error)
```

Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect after calling the Client's CheckRedirect function: 

```
301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
308 (Permanent Redirect)

```
##### <a name="net-http-type-Client-CloseIdleConnections">func (c *Client) CloseIdleConnections() <small>(exported)</small></a>

```Go
func (c *Client) CloseIdleConnections()
```

CloseIdleConnections closes any connections on its Transport which were previously connected from previous requests but are now sitting idle in a "keep-alive" state. It does not interrupt any connections currently in use. 

If the Client's Transport does not have a CloseIdleConnections method then this method does nothing. 

#### <a name="net-http-type-RoundTripper">type RoundTripper interface <small>(exported)</small></a>

```Go
type RoundTripper interface {
	// RoundTrip executes a single HTTP transaction, returning
	// a Response for the provided Request.
	//
	// RoundTrip should not attempt to interpret the response. In
	// particular, RoundTrip must return err == nil if it obtained
	// a response, regardless of the response's HTTP status code.
	// A non-nil err should be reserved for failure to obtain a
	// response. Similarly, RoundTrip should not attempt to
	// handle higher-level protocol details such as redirects,
	// authentication, or cookies.
	//
	// RoundTrip should not modify the request, except for
	// consuming and closing the Request's Body. RoundTrip may
	// read fields of the request in a separate goroutine. Callers
	// should not mutate or reuse the request until the Response's
	// Body has been closed.
	//
	// RoundTrip must always close the body, including on errors,
	// but depending on the implementation may do so in a separate
	// goroutine even after RoundTrip returns. This means that
	// callers wanting to reuse the body for subsequent requests
	// must arrange to wait for the Close call before doing so.
	//
	// The Request's URL and Header fields must be initialized.
	RoundTrip(*Request) (*Response, error)
}
```

RoundTripper is an interface representing the ability to execute a single HTTP transaction, obtaining the Response for a given Request. 

A RoundTripper must be safe for concurrent use by multiple goroutines. 

##### <a name="net-http-type-RoundTripper-NewFileTransport">func NewFileTransport(fs FileSystem) RoundTripper <small>(exported)</small></a>

```Go
func NewFileTransport(fs FileSystem) RoundTripper
```

NewFileTransport returns a new RoundTripper, serving the provided FileSystem. The returned RoundTripper ignores the URL host in its incoming requests, as well as most other properties of the request. 

The typical use case for NewFileTransport is to register the "file" protocol with a Transport, as in: 

```
t := &http.Transport{}
t.RegisterProtocol("file", http.NewFileTransport(http.Dir("/")))
c := &http.Client{Transport: t}
res, err := c.Get("file:///etc/passwd")
...

```
#### <a name="net-http-type-canceler">type canceler interface</a>

```Go
type canceler interface{ CancelRequest(*Request) }
```

The first way, used only for RoundTripper implementations written before Go 1.5 or Go 1.6. 

#### <a name="net-http-type-closeIdler">type closeIdler interface</a>

```Go
type closeIdler interface {
	CloseIdleConnections()
}
```

#### <a name="net-http-type-cancelTimerBody">type cancelTimerBody struct</a>

```Go
type cancelTimerBody struct {
	stop          func() // stops the time.Timer waiting to cancel the request
	rc            io.ReadCloser
	reqDidTimeout func() bool
}
```

cancelTimerBody is an io.ReadCloser that wraps rc with two features: 1) on Read error or close, the stop func is called. 2) On Read failure, if reqDidTimeout is true, the error is wrapped and 

```
marked as net.Error that hit its timeout.

```
##### <a name="net-http-type-cancelTimerBody-Read">func (b *cancelTimerBody) Read(p []byte) (n int, err error)</a>

```Go
func (b *cancelTimerBody) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-cancelTimerBody-Close">func (b *cancelTimerBody) Close() error</a>

```Go
func (b *cancelTimerBody) Close() error
```

#### <a name="net-http-type-Cookie">type Cookie struct <small>(exported)</small></a>

```Go
type Cookie struct {
	Name  string
	Value string

	Path       string    // optional
	Domain     string    // optional
	Expires    time.Time // optional
	RawExpires string    // for reading cookies only

	// MaxAge=0 means no 'Max-Age' attribute specified.
	// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'
	// MaxAge>0 means Max-Age attribute present and given in seconds
	MaxAge   int
	Secure   bool
	HttpOnly bool
	SameSite SameSite
	Raw      string
	Unparsed []string // Raw text of unparsed attribute-value pairs
}
```

A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an HTTP response or the Cookie header of an HTTP request. 

See [https://tools.ietf.org/html/rfc6265](https://tools.ietf.org/html/rfc6265) for details. 

##### <a name="net-http-type-Cookie-String">func (c *Cookie) String() string <small>(exported)</small></a>

```Go
func (c *Cookie) String() string
```

String returns the serialization of the cookie for use in a Cookie header (if only Name and Value are set) or a Set-Cookie response header (if other fields are set). If c is nil or c.Name is invalid, the empty string is returned. 

#### <a name="net-http-type-SameSite">type SameSite int <small>(exported)</small></a>

```Go
type SameSite int
```

SameSite allows a server to define a cookie attribute making it impossible for the browser to send this cookie along with cross-site requests. The main goal is to mitigate the risk of cross-origin information leakage, and provide some protection against cross-site request forgery attacks. 

See [https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00](https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00) for details. 

#### <a name="net-http-type-fileTransport">type fileTransport struct</a>

```Go
type fileTransport struct {
	fh fileHandler
}
```

fileTransport implements RoundTripper for the 'file' protocol. 

##### <a name="net-http-type-fileTransport-RoundTrip">func (t fileTransport) RoundTrip(req *Request) (resp *Response, err error)</a>

```Go
func (t fileTransport) RoundTrip(req *Request) (resp *Response, err error)
```

#### <a name="net-http-type-populateResponse">type populateResponse struct</a>

```Go
type populateResponse struct {
	res          *Response
	ch           chan *Response
	wroteHeader  bool
	hasContent   bool
	sentResponse bool
	pw           *io.PipeWriter
}
```

populateResponse is a ResponseWriter that populates the *Response in res, and writes its body to a pipe connected to the response body. Once writes begin or finish() is called, the response is sent on ch. 

##### <a name="net-http-type-populateResponse-newPopulateResponseWriter">func newPopulateResponseWriter() (*populateResponse, <-chan *Response)</a>

```Go
func newPopulateResponseWriter() (*populateResponse, <-chan *Response)
```

##### <a name="net-http-type-populateResponse-finish">func (pr *populateResponse) finish()</a>

```Go
func (pr *populateResponse) finish()
```

##### <a name="net-http-type-populateResponse-sendResponse">func (pr *populateResponse) sendResponse()</a>

```Go
func (pr *populateResponse) sendResponse()
```

##### <a name="net-http-type-populateResponse-Header">func (pr *populateResponse) Header() Header</a>

```Go
func (pr *populateResponse) Header() Header
```

##### <a name="net-http-type-populateResponse-WriteHeader">func (pr *populateResponse) WriteHeader(code int)</a>

```Go
func (pr *populateResponse) WriteHeader(code int)
```

##### <a name="net-http-type-populateResponse-Write">func (pr *populateResponse) Write(p []byte) (n int, err error)</a>

```Go
func (pr *populateResponse) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-Dir">type Dir string <small>(exported)</small></a>

```Go
type Dir string
```

A Dir implements FileSystem using the native file system restricted to a specific directory tree. 

While the FileSystem.Open method takes '/'-separated paths, a Dir's string value is a filename on the native file system, not a URL, so it is separated by filepath.Separator, which isn't necessarily '/'. 

Note that Dir could expose sensitive files and directories. Dir will follow symlinks pointing out of the directory tree, which can be especially dangerous if serving from a directory in which users are able to create arbitrary symlinks. Dir will also allow access to files and directories starting with a period, which could expose sensitive directories like .git or sensitive files like .htpasswd. To exclude files with a leading period, remove the files/directories from the server or create a custom FileSystem implementation. 

An empty Dir is treated as ".". 

##### <a name="net-http-type-Dir-Open">func (d Dir) Open(name string) (File, error) <small>(exported)</small></a>

```Go
func (d Dir) Open(name string) (File, error)
```

Open implements FileSystem using os.Open, opening files for reading rooted and relative to the directory d. 

#### <a name="net-http-type-FileSystem">type FileSystem interface <small>(exported)</small></a>

```Go
type FileSystem interface {
	Open(name string) (File, error)
}
```

A FileSystem implements access to a collection of named files. The elements in a file path are separated by slash ('/', U+002F) characters, regardless of host operating system convention. See the FileServer function to convert a FileSystem to a Handler. 

This interface predates the fs.FS interface, which can be used instead: the FS adapter function converts an fs.FS to a FileSystem. 

##### <a name="net-http-type-FileSystem-FS">func FS(fsys fs.FS) FileSystem <small>(exported)</small></a>

```Go
func FS(fsys fs.FS) FileSystem
```

FS converts fsys to a FileSystem implementation, for use with FileServer and NewFileTransport. 

#### <a name="net-http-type-File">type File interface <small>(exported)</small></a>

```Go
type File interface {
	io.Closer
	io.Reader
	io.Seeker
	Readdir(count int) ([]fs.FileInfo, error)
	Stat() (fs.FileInfo, error)
}
```

A File is returned by a FileSystem's Open method and can be served by the FileServer implementation. 

The methods should behave the same as those on an *os.File. 

#### <a name="net-http-type-anyDirs">type anyDirs interface</a>

```Go
type anyDirs interface {
	len() int
	name(i int) string
	isDir(i int) bool
}
```

#### <a name="net-http-type-fileInfoDirs">type fileInfoDirs []fs.FileInfo</a>

```Go
type fileInfoDirs []fs.FileInfo
```

##### <a name="net-http-type-fileInfoDirs-len">func (d fileInfoDirs) len() int</a>

```Go
func (d fileInfoDirs) len() int
```

##### <a name="net-http-type-fileInfoDirs-isDir">func (d fileInfoDirs) isDir(i int) bool</a>

```Go
func (d fileInfoDirs) isDir(i int) bool
```

##### <a name="net-http-type-fileInfoDirs-name">func (d fileInfoDirs) name(i int) string</a>

```Go
func (d fileInfoDirs) name(i int) string
```

#### <a name="net-http-type-dirEntryDirs">type dirEntryDirs []fs.DirEntry</a>

```Go
type dirEntryDirs []fs.DirEntry
```

##### <a name="net-http-type-dirEntryDirs-len">func (d dirEntryDirs) len() int</a>

```Go
func (d dirEntryDirs) len() int
```

##### <a name="net-http-type-dirEntryDirs-isDir">func (d dirEntryDirs) isDir(i int) bool</a>

```Go
func (d dirEntryDirs) isDir(i int) bool
```

##### <a name="net-http-type-dirEntryDirs-name">func (d dirEntryDirs) name(i int) string</a>

```Go
func (d dirEntryDirs) name(i int) string
```

#### <a name="net-http-type-condResult">type condResult int</a>

```Go
type condResult int
```

condResult is the result of an HTTP request precondition check. See [https://tools.ietf.org/html/rfc7232](https://tools.ietf.org/html/rfc7232) section 3. 

##### <a name="net-http-type-condResult-checkIfMatch">func checkIfMatch(w ResponseWriter, r *Request) condResult</a>

```Go
func checkIfMatch(w ResponseWriter, r *Request) condResult
```

##### <a name="net-http-type-condResult-checkIfUnmodifiedSince">func checkIfUnmodifiedSince(r *Request, modtime time.Time) condResult</a>

```Go
func checkIfUnmodifiedSince(r *Request, modtime time.Time) condResult
```

##### <a name="net-http-type-condResult-checkIfNoneMatch">func checkIfNoneMatch(w ResponseWriter, r *Request) condResult</a>

```Go
func checkIfNoneMatch(w ResponseWriter, r *Request) condResult
```

##### <a name="net-http-type-condResult-checkIfModifiedSince">func checkIfModifiedSince(r *Request, modtime time.Time) condResult</a>

```Go
func checkIfModifiedSince(r *Request, modtime time.Time) condResult
```

##### <a name="net-http-type-condResult-checkIfRange">func checkIfRange(w ResponseWriter, r *Request, modtime time.Time) condResult</a>

```Go
func checkIfRange(w ResponseWriter, r *Request, modtime time.Time) condResult
```

#### <a name="net-http-type-fileHandler">type fileHandler struct</a>

```Go
type fileHandler struct {
	root FileSystem
}
```

##### <a name="net-http-type-fileHandler-ServeHTTP">func (f *fileHandler) ServeHTTP(w ResponseWriter, r *Request)</a>

```Go
func (f *fileHandler) ServeHTTP(w ResponseWriter, r *Request)
```

#### <a name="net-http-type-ioFS">type ioFS struct</a>

```Go
type ioFS struct {
	fsys fs.FS
}
```

##### <a name="net-http-type-ioFS-Open">func (f ioFS) Open(name string) (File, error)</a>

```Go
func (f ioFS) Open(name string) (File, error)
```

#### <a name="net-http-type-ioFile">type ioFile struct</a>

```Go
type ioFile struct {
	file fs.File
}
```

##### <a name="net-http-type-ioFile-Close">func (f ioFile) Close() error</a>

```Go
func (f ioFile) Close() error
```

##### <a name="net-http-type-ioFile-Read">func (f ioFile) Read(b []byte) (int, error)</a>

```Go
func (f ioFile) Read(b []byte) (int, error)
```

##### <a name="net-http-type-ioFile-Stat">func (f ioFile) Stat() (fs.FileInfo, error)</a>

```Go
func (f ioFile) Stat() (fs.FileInfo, error)
```

##### <a name="net-http-type-ioFile-Seek">func (f ioFile) Seek(offset int64, whence int) (int64, error)</a>

```Go
func (f ioFile) Seek(offset int64, whence int) (int64, error)
```

##### <a name="net-http-type-ioFile-ReadDir">func (f ioFile) ReadDir(count int) ([]fs.DirEntry, error)</a>

```Go
func (f ioFile) ReadDir(count int) ([]fs.DirEntry, error)
```

##### <a name="net-http-type-ioFile-Readdir">func (f ioFile) Readdir(count int) ([]fs.FileInfo, error)</a>

```Go
func (f ioFile) Readdir(count int) ([]fs.FileInfo, error)
```

#### <a name="net-http-type-httpRange">type httpRange struct</a>

```Go
type httpRange struct {
	start, length int64
}
```

httpRange specifies the byte range to be sent to the client. 

##### <a name="net-http-type-httpRange-contentRange">func (r httpRange) contentRange(size int64) string</a>

```Go
func (r httpRange) contentRange(size int64) string
```

##### <a name="net-http-type-httpRange-mimeHeader">func (r httpRange) mimeHeader(contentType string, size int64) textproto.MIMEHeader</a>

```Go
func (r httpRange) mimeHeader(contentType string, size int64) textproto.MIMEHeader
```

#### <a name="net-http-type-countingWriter">type countingWriter int64</a>

```Go
type countingWriter int64
```

countingWriter counts how many bytes have been written to it. 

##### <a name="net-http-type-countingWriter-Write">func (w *countingWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w *countingWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-http2ClientConnPool">type http2ClientConnPool interface</a>

```Go
type http2ClientConnPool interface {
	GetClientConn(req *Request, addr string) (*http2ClientConn, error)
	MarkDead(*http2ClientConn)
}
```

ClientConnPool manages a pool of HTTP/2 client connections. 

#### <a name="net-http-type-http2clientConnPoolIdleCloser">type http2clientConnPoolIdleCloser interface</a>

```Go
type http2clientConnPoolIdleCloser interface {
	http2ClientConnPool
	closeIdleConnections()
}
```

clientConnPoolIdleCloser is the interface implemented by ClientConnPool implementations which can close their idle connections. 

#### <a name="net-http-type-http2clientConnPool">type http2clientConnPool struct</a>

```Go
type http2clientConnPool struct {
	t *http2Transport

	mu sync.Mutex // TODO: maybe switch to RWMutex
	// TODO: add support for sharing conns based on cert names
	// (e.g. share conn for googleapis.com and appspot.com)
	conns        map[string][]*http2ClientConn // key is host:port
	dialing      map[string]*http2dialCall     // currently in-flight dials
	keys         map[*http2ClientConn][]string
	addConnCalls map[string]*http2addConnCall // in-flight addConnIfNeede calls
}
```

TODO: use singleflight for dialing and addConnCalls? 

##### <a name="net-http-type-http2clientConnPool-GetClientConn">func (p *http2clientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)</a>

```Go
func (p *http2clientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)
```

##### <a name="net-http-type-http2clientConnPool-shouldTraceGetConn">func (p *http2clientConnPool) shouldTraceGetConn(st http2clientConnIdleState) bool</a>

```Go
func (p *http2clientConnPool) shouldTraceGetConn(st http2clientConnIdleState) bool
```

shouldTraceGetConn reports whether getClientConn should call any ClientTrace.GetConn hook associated with the http.Request. 

This complexity is needed to avoid double calls of the GetConn hook during the back-and-forth between net/http and x/net/http2 (when the net/http.Transport is upgraded to also speak http2), as well as support the case where x/net/http2 is being used directly. 

##### <a name="net-http-type-http2clientConnPool-getClientConn">func (p *http2clientConnPool) getClientConn(req *Request, addr string, dialOnMiss bool) (*http2ClientConn, error)</a>

```Go
func (p *http2clientConnPool) getClientConn(req *Request, addr string, dialOnMiss bool) (*http2ClientConn, error)
```

##### <a name="net-http-type-http2clientConnPool-getStartDialLocked">func (p *http2clientConnPool) getStartDialLocked(addr string) *http2dialCall</a>

```Go
func (p *http2clientConnPool) getStartDialLocked(addr string) *http2dialCall
```

requires p.mu is held. 

##### <a name="net-http-type-http2clientConnPool-addConnIfNeeded">func (p *http2clientConnPool) addConnIfNeeded(key string, t *http2Transport, c *tls.Conn) (used bool, err error)</a>

```Go
func (p *http2clientConnPool) addConnIfNeeded(key string, t *http2Transport, c *tls.Conn) (used bool, err error)
```

addConnIfNeeded makes a NewClientConn out of c if a connection for key doesn't already exist. It coalesces concurrent calls with the same key. This is used by the http1 Transport code when it creates a new connection. Because the http1 Transport doesn't de-dup TCP dials to outbound hosts (because it doesn't know the protocol), it can get into a situation where it has multiple TLS connections. This code decides which ones live or die. The return value used is whether c was used. c is never closed. 

##### <a name="net-http-type-http2clientConnPool-addConnLocked">func (p *http2clientConnPool) addConnLocked(key string, cc *http2ClientConn)</a>

```Go
func (p *http2clientConnPool) addConnLocked(key string, cc *http2ClientConn)
```

p.mu must be held 

##### <a name="net-http-type-http2clientConnPool-MarkDead">func (p *http2clientConnPool) MarkDead(cc *http2ClientConn)</a>

```Go
func (p *http2clientConnPool) MarkDead(cc *http2ClientConn)
```

##### <a name="net-http-type-http2clientConnPool-closeIdleConnections">func (p *http2clientConnPool) closeIdleConnections()</a>

```Go
func (p *http2clientConnPool) closeIdleConnections()
```

#### <a name="net-http-type-http2dialCall">type http2dialCall struct</a>

```Go
type http2dialCall struct {
	_    http2incomparable
	p    *http2clientConnPool
	done chan struct{}    // closed when done
	res  *http2ClientConn // valid after done is closed
	err  error            // valid after done is closed
}
```

dialCall is an in-flight Transport dial call to a host. 

##### <a name="net-http-type-http2dialCall-dial">func (c *http2dialCall) dial(addr string)</a>

```Go
func (c *http2dialCall) dial(addr string)
```

run in its own goroutine. 

#### <a name="net-http-type-http2addConnCall">type http2addConnCall struct</a>

```Go
type http2addConnCall struct {
	_    http2incomparable
	p    *http2clientConnPool
	done chan struct{} // closed when done
	err  error
}
```

##### <a name="net-http-type-http2addConnCall-run">func (c *http2addConnCall) run(t *http2Transport, key string, tc *tls.Conn)</a>

```Go
func (c *http2addConnCall) run(t *http2Transport, key string, tc *tls.Conn)
```

#### <a name="net-http-type-http2noDialClientConnPool">type http2noDialClientConnPool struct</a>

```Go
type http2noDialClientConnPool struct{ *http2clientConnPool }
```

noDialClientConnPool is an implementation of http2.ClientConnPool which never dials. We let the HTTP/1.1 client dial and use its TLS connection instead. 

##### <a name="net-http-type-http2noDialClientConnPool-GetClientConn">func (p http2noDialClientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)</a>

```Go
func (p http2noDialClientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error)
```

#### <a name="net-http-type-http2dataBuffer">type http2dataBuffer struct</a>

```Go
type http2dataBuffer struct {
	chunks   [][]byte
	r        int   // next byte to read is chunks[0][r]
	w        int   // next byte to write is chunks[len(chunks)-1][w]
	size     int   // total buffered bytes
	expected int64 // we expect at least this many bytes in future Write calls (ignored if <= 0)
}
```

dataBuffer is an io.ReadWriter backed by a list of data chunks. Each dataBuffer is used to read DATA frames on a single stream. The buffer is divided into chunks so the server can limit the total memory used by a single connection without limiting the request body size on any single stream. 

##### <a name="net-http-type-http2dataBuffer-Read">func (b *http2dataBuffer) Read(p []byte) (int, error)</a>

```Go
func (b *http2dataBuffer) Read(p []byte) (int, error)
```

Read copies bytes from the buffer into p. It is an error to read when no data is available. 

##### <a name="net-http-type-http2dataBuffer-bytesFromFirstChunk">func (b *http2dataBuffer) bytesFromFirstChunk() []byte</a>

```Go
func (b *http2dataBuffer) bytesFromFirstChunk() []byte
```

##### <a name="net-http-type-http2dataBuffer-Len">func (b *http2dataBuffer) Len() int</a>

```Go
func (b *http2dataBuffer) Len() int
```

Len returns the number of bytes of the unread portion of the buffer. 

##### <a name="net-http-type-http2dataBuffer-Write">func (b *http2dataBuffer) Write(p []byte) (int, error)</a>

```Go
func (b *http2dataBuffer) Write(p []byte) (int, error)
```

Write appends p to the buffer. 

##### <a name="net-http-type-http2dataBuffer-lastChunkOrAlloc">func (b *http2dataBuffer) lastChunkOrAlloc(want int64) []byte</a>

```Go
func (b *http2dataBuffer) lastChunkOrAlloc(want int64) []byte
```

#### <a name="net-http-type-http2ErrCode">type http2ErrCode uint32</a>

```Go
type http2ErrCode uint32
```

An ErrCode is an unsigned 32-bit error code as defined in the HTTP/2 spec. 

##### <a name="net-http-type-http2ErrCode-String">func (e http2ErrCode) String() string</a>

```Go
func (e http2ErrCode) String() string
```

#### <a name="net-http-type-http2ConnectionError">type http2ConnectionError http.http2ErrCode</a>

```Go
type http2ConnectionError http2ErrCode
```

ConnectionError is an error that results in the termination of the entire connection. 

##### <a name="net-http-type-http2ConnectionError-Error">func (e http2ConnectionError) Error() string</a>

```Go
func (e http2ConnectionError) Error() string
```

#### <a name="net-http-type-http2StreamError">type http2StreamError struct</a>

```Go
type http2StreamError struct {
	StreamID uint32
	Code     http2ErrCode
	Cause    error // optional additional detail
}
```

StreamError is an error that only affects one stream within an HTTP/2 connection. 

##### <a name="net-http-type-http2StreamError-http2streamError">func http2streamError(id uint32, code http2ErrCode) http2StreamError</a>

```Go
func http2streamError(id uint32, code http2ErrCode) http2StreamError
```

##### <a name="net-http-type-http2StreamError-Error">func (e http2StreamError) Error() string</a>

```Go
func (e http2StreamError) Error() string
```

##### <a name="net-http-type-http2StreamError-writeFrame">func (se http2StreamError) writeFrame(ctx http2writeContext) error</a>

```Go
func (se http2StreamError) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2StreamError-staysWithinBuffer">func (se http2StreamError) staysWithinBuffer(max int) bool</a>

```Go
func (se http2StreamError) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2goAwayFlowError">type http2goAwayFlowError struct{}</a>

```Go
type http2goAwayFlowError struct{}
```

6.9.1 The Flow Control Window "If a sender receives a WINDOW_UPDATE that causes a flow control window to exceed this maximum it MUST terminate either the stream or the connection, as appropriate. For streams, [...]; for the connection, a GOAWAY frame with a FLOW_CONTROL_ERROR code." 

##### <a name="net-http-type-http2goAwayFlowError-Error">func (http2goAwayFlowError) Error() string</a>

```Go
func (http2goAwayFlowError) Error() string
```

#### <a name="net-http-type-http2connError">type http2connError struct</a>

```Go
type http2connError struct {
	Code   http2ErrCode // the ConnectionError error code
	Reason string       // additional reason
}
```

connError represents an HTTP/2 ConnectionError error code, along with a string (for debugging) explaining why. 

Errors of this type are only returned by the frame parser functions and converted into ConnectionError(Code), after stashing away the Reason into the Framer's errDetail field, accessible via the (*Framer).ErrorDetail method. 

##### <a name="net-http-type-http2connError-Error">func (e http2connError) Error() string</a>

```Go
func (e http2connError) Error() string
```

#### <a name="net-http-type-http2pseudoHeaderError">type http2pseudoHeaderError string</a>

```Go
type http2pseudoHeaderError string
```

##### <a name="net-http-type-http2pseudoHeaderError-Error">func (e http2pseudoHeaderError) Error() string</a>

```Go
func (e http2pseudoHeaderError) Error() string
```

#### <a name="net-http-type-http2duplicatePseudoHeaderError">type http2duplicatePseudoHeaderError string</a>

```Go
type http2duplicatePseudoHeaderError string
```

##### <a name="net-http-type-http2duplicatePseudoHeaderError-Error">func (e http2duplicatePseudoHeaderError) Error() string</a>

```Go
func (e http2duplicatePseudoHeaderError) Error() string
```

#### <a name="net-http-type-http2headerFieldNameError">type http2headerFieldNameError string</a>

```Go
type http2headerFieldNameError string
```

##### <a name="net-http-type-http2headerFieldNameError-Error">func (e http2headerFieldNameError) Error() string</a>

```Go
func (e http2headerFieldNameError) Error() string
```

#### <a name="net-http-type-http2headerFieldValueError">type http2headerFieldValueError string</a>

```Go
type http2headerFieldValueError string
```

##### <a name="net-http-type-http2headerFieldValueError-Error">func (e http2headerFieldValueError) Error() string</a>

```Go
func (e http2headerFieldValueError) Error() string
```

#### <a name="net-http-type-http2flow">type http2flow struct</a>

```Go
type http2flow struct {
	_ http2incomparable

	// n is the number of DATA bytes we're allowed to send.
	// A flow is kept both on a conn and a per-stream.
	n int32

	// conn points to the shared connection-level flow that is
	// shared by all streams on that conn. It is nil for the flow
	// that's on the conn directly.
	conn *http2flow
}
```

flow is the flow control window's size. 

##### <a name="net-http-type-http2flow-setConnFlow">func (f *http2flow) setConnFlow(cf *http2flow)</a>

```Go
func (f *http2flow) setConnFlow(cf *http2flow)
```

##### <a name="net-http-type-http2flow-available">func (f *http2flow) available() int32</a>

```Go
func (f *http2flow) available() int32
```

##### <a name="net-http-type-http2flow-take">func (f *http2flow) take(n int32)</a>

```Go
func (f *http2flow) take(n int32)
```

##### <a name="net-http-type-http2flow-add">func (f *http2flow) add(n int32) bool</a>

```Go
func (f *http2flow) add(n int32) bool
```

add adds n bytes (positive or negative) to the flow control window. It returns false if the sum would exceed 2^31-1. 

#### <a name="net-http-type-http2FrameType">type http2FrameType uint8</a>

```Go
type http2FrameType uint8
```

A FrameType is a registered frame type as defined in [http://http2.github.io/http2-spec/#rfc.section.11.2](http://http2.github.io/http2-spec/#rfc.section.11.2) 

##### <a name="net-http-type-http2FrameType-String">func (t http2FrameType) String() string</a>

```Go
func (t http2FrameType) String() string
```

#### <a name="net-http-type-http2Flags">type http2Flags uint8</a>

```Go
type http2Flags uint8
```

Flags is a bitmask of HTTP/2 flags. The meaning of flags varies depending on the frame type. 

##### <a name="net-http-type-http2Flags-Has">func (f http2Flags) Has(v http2Flags) bool</a>

```Go
func (f http2Flags) Has(v http2Flags) bool
```

Has reports whether f contains all (0 or more) flags in v. 

#### <a name="net-http-type-http2frameParser">type http2frameParser func(fc *net/http.http2frameCache, fh net/http.http2FrameHeader, payload []byte) (net/http.http2Frame, error)</a>

```Go
type http2frameParser func(fc *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)
```

a frameParser parses a frame given its FrameHeader and payload bytes. The length of payload will always equal fh.Length (which might be 0). 

##### <a name="net-http-type-http2frameParser-http2typeFrameParser">func http2typeFrameParser(t http2FrameType) http2frameParser</a>

```Go
func http2typeFrameParser(t http2FrameType) http2frameParser
```

#### <a name="net-http-type-http2FrameHeader">type http2FrameHeader struct</a>

```Go
type http2FrameHeader struct {
	valid bool // caller can access []byte fields in the Frame

	// Type is the 1 byte frame type. There are ten standard frame
	// types, but extension frame types may be written by WriteRawFrame
	// and will be returned by ReadFrame (as UnknownFrame).
	Type http2FrameType

	// Flags are the 1 byte of 8 potential bit flags per frame.
	// They are specific to the frame type.
	Flags http2Flags

	// Length is the length of the frame, not including the 9 byte header.
	// The maximum size is one byte less than 16MB (uint24), but only
	// frames up to 16KB are allowed without peer agreement.
	Length uint32

	// StreamID is which stream this frame is for. Certain frames
	// are not stream-specific, in which case this field is 0.
	StreamID uint32
}
```

A FrameHeader is the 9 byte header of all HTTP/2 frames. 

See [http://http2.github.io/http2-spec/#FrameHeader](http://http2.github.io/http2-spec/#FrameHeader) 

##### <a name="net-http-type-http2FrameHeader-http2ReadFrameHeader">func http2ReadFrameHeader(r io.Reader) (http2FrameHeader, error)</a>

```Go
func http2ReadFrameHeader(r io.Reader) (http2FrameHeader, error)
```

ReadFrameHeader reads 9 bytes from r and returns a FrameHeader. Most users should use Framer.ReadFrame instead. 

##### <a name="net-http-type-http2FrameHeader-http2readFrameHeader">func http2readFrameHeader(buf []byte, r io.Reader) (http2FrameHeader, error)</a>

```Go
func http2readFrameHeader(buf []byte, r io.Reader) (http2FrameHeader, error)
```

##### <a name="net-http-type-http2FrameHeader-Header">func (h http2FrameHeader) Header() http2FrameHeader</a>

```Go
func (h http2FrameHeader) Header() http2FrameHeader
```

Header returns h. It exists so FrameHeaders can be embedded in other specific frame types and implement the Frame interface. 

##### <a name="net-http-type-http2FrameHeader-String">func (h http2FrameHeader) String() string</a>

```Go
func (h http2FrameHeader) String() string
```

##### <a name="net-http-type-http2FrameHeader-writeDebug">func (h http2FrameHeader) writeDebug(buf *bytes.Buffer)</a>

```Go
func (h http2FrameHeader) writeDebug(buf *bytes.Buffer)
```

##### <a name="net-http-type-http2FrameHeader-checkValid">func (h *http2FrameHeader) checkValid()</a>

```Go
func (h *http2FrameHeader) checkValid()
```

##### <a name="net-http-type-http2FrameHeader-invalidate">func (h *http2FrameHeader) invalidate()</a>

```Go
func (h *http2FrameHeader) invalidate()
```

#### <a name="net-http-type-http2Frame">type http2Frame interface</a>

```Go
type http2Frame interface {
	Header() http2FrameHeader

	// invalidate is called by Framer.ReadFrame to make this
	// frame's buffers as being invalid, since the subsequent
	// frame will reuse them.
	invalidate()
}
```

A Frame is the base interface implemented by all frame types. Callers will generally type-assert the specific frame type: *HeadersFrame, *SettingsFrame, *WindowUpdateFrame, etc. 

Frames are only valid until the next call to Framer.ReadFrame. 

##### <a name="net-http-type-http2Frame-http2parseDataFrame">func http2parseDataFrame(fc *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)</a>

```Go
func http2parseDataFrame(fc *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseSettingsFrame">func http2parseSettingsFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseSettingsFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parsePingFrame">func http2parsePingFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)</a>

```Go
func http2parsePingFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseGoAwayFrame">func http2parseGoAwayFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseGoAwayFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseUnknownFrame">func http2parseUnknownFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseUnknownFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseWindowUpdateFrame">func http2parseWindowUpdateFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseWindowUpdateFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseHeadersFrame">func http2parseHeadersFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)</a>

```Go
func http2parseHeadersFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)
```

##### <a name="net-http-type-http2Frame-http2parsePriorityFrame">func http2parsePriorityFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)</a>

```Go
func http2parsePriorityFrame(_ *http2frameCache, fh http2FrameHeader, payload []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseRSTStreamFrame">func http2parseRSTStreamFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseRSTStreamFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parseContinuationFrame">func http2parseContinuationFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)</a>

```Go
func http2parseContinuationFrame(_ *http2frameCache, fh http2FrameHeader, p []byte) (http2Frame, error)
```

##### <a name="net-http-type-http2Frame-http2parsePushPromise">func http2parsePushPromise(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)</a>

```Go
func http2parsePushPromise(_ *http2frameCache, fh http2FrameHeader, p []byte) (_ http2Frame, err error)
```

#### <a name="net-http-type-http2Framer">type http2Framer struct</a>

```Go
type http2Framer struct {
	r         io.Reader
	lastFrame http2Frame
	errDetail error

	// lastHeaderStream is non-zero if the last frame was an
	// unfinished HEADERS/CONTINUATION.
	lastHeaderStream uint32

	maxReadSize uint32
	headerBuf   [http2frameHeaderLen]byte

	// TODO: let getReadBuf be configurable, and use a less memory-pinning
	// allocator in server.go to minimize memory pinned for many idle conns.
	// Will probably also need to make frame invalidation have a hook too.
	getReadBuf func(size uint32) []byte
	readBuf    []byte // cache for default getReadBuf

	maxWriteSize uint32 // zero means unlimited; TODO: implement

	w    io.Writer
	wbuf []byte

	// AllowIllegalWrites permits the Framer's Write methods to
	// write frames that do not conform to the HTTP/2 spec. This
	// permits using the Framer to test other HTTP/2
	// implementations' conformance to the spec.
	// If false, the Write methods will prefer to return an error
	// rather than comply.
	AllowIllegalWrites bool

	// AllowIllegalReads permits the Framer's ReadFrame method
	// to return non-compliant frames or frame orders.
	// This is for testing and permits using the Framer to test
	// other HTTP/2 implementations' conformance to the spec.
	// It is not compatible with ReadMetaHeaders.
	AllowIllegalReads bool

	// ReadMetaHeaders if non-nil causes ReadFrame to merge
	// HEADERS and CONTINUATION frames together and return
	// MetaHeadersFrame instead.
	ReadMetaHeaders *hpack.Decoder

	// MaxHeaderListSize is the http2 MAX_HEADER_LIST_SIZE.
	// It's used only if ReadMetaHeaders is set; 0 means a sane default
	// (currently 16MB)
	// If the limit is hit, MetaHeadersFrame.Truncated is set true.
	MaxHeaderListSize uint32

	logReads, logWrites bool

	debugFramer       *http2Framer // only use for logging written writes
	debugFramerBuf    *bytes.Buffer
	debugReadLoggerf  func(string, ...interface{})
	debugWriteLoggerf func(string, ...interface{})

	frameCache *http2frameCache // nil if frames aren't reused (default)
}
```

A Framer reads and writes Frames. 

##### <a name="net-http-type-http2Framer-http2NewFramer">func http2NewFramer(w io.Writer, r io.Reader) *http2Framer</a>

```Go
func http2NewFramer(w io.Writer, r io.Reader) *http2Framer
```

NewFramer returns a Framer that writes frames to w and reads them from r. 

##### <a name="net-http-type-http2Framer-maxHeaderListSize">func (fr *http2Framer) maxHeaderListSize() uint32</a>

```Go
func (fr *http2Framer) maxHeaderListSize() uint32
```

##### <a name="net-http-type-http2Framer-startWrite">func (f *http2Framer) startWrite(ftype http2FrameType, flags http2Flags, streamID uint32)</a>

```Go
func (f *http2Framer) startWrite(ftype http2FrameType, flags http2Flags, streamID uint32)
```

##### <a name="net-http-type-http2Framer-endWrite">func (f *http2Framer) endWrite() error</a>

```Go
func (f *http2Framer) endWrite() error
```

##### <a name="net-http-type-http2Framer-logWrite">func (f *http2Framer) logWrite()</a>

```Go
func (f *http2Framer) logWrite()
```

##### <a name="net-http-type-http2Framer-writeByte">func (f *http2Framer) writeByte(v byte)</a>

```Go
func (f *http2Framer) writeByte(v byte)
```

##### <a name="net-http-type-http2Framer-writeBytes">func (f *http2Framer) writeBytes(v []byte)</a>

```Go
func (f *http2Framer) writeBytes(v []byte)
```

##### <a name="net-http-type-http2Framer-writeUint16">func (f *http2Framer) writeUint16(v uint16)</a>

```Go
func (f *http2Framer) writeUint16(v uint16)
```

##### <a name="net-http-type-http2Framer-writeUint32">func (f *http2Framer) writeUint32(v uint32)</a>

```Go
func (f *http2Framer) writeUint32(v uint32)
```

##### <a name="net-http-type-http2Framer-SetReuseFrames">func (fr *http2Framer) SetReuseFrames()</a>

```Go
func (fr *http2Framer) SetReuseFrames()
```

SetReuseFrames allows the Framer to reuse Frames. If called on a Framer, Frames returned by calls to ReadFrame are only valid until the next call to ReadFrame. 

##### <a name="net-http-type-http2Framer-SetMaxReadFrameSize">func (fr *http2Framer) SetMaxReadFrameSize(v uint32)</a>

```Go
func (fr *http2Framer) SetMaxReadFrameSize(v uint32)
```

SetMaxReadFrameSize sets the maximum size of a frame that will be read by a subsequent call to ReadFrame. It is the caller's responsibility to advertise this limit with a SETTINGS frame. 

##### <a name="net-http-type-http2Framer-ErrorDetail">func (fr *http2Framer) ErrorDetail() error</a>

```Go
func (fr *http2Framer) ErrorDetail() error
```

ErrorDetail returns a more detailed error of the last error returned by Framer.ReadFrame. For instance, if ReadFrame returns a StreamError with code PROTOCOL_ERROR, ErrorDetail will say exactly what was invalid. ErrorDetail is not guaranteed to return a non-nil value and like the rest of the http2 package, its return value is not protected by an API compatibility promise. ErrorDetail is reset after the next call to ReadFrame. 

##### <a name="net-http-type-http2Framer-ReadFrame">func (fr *http2Framer) ReadFrame() (http2Frame, error)</a>

```Go
func (fr *http2Framer) ReadFrame() (http2Frame, error)
```

ReadFrame reads a single frame. The returned Frame is only valid until the next call to ReadFrame. 

If the frame is larger than previously set with SetMaxReadFrameSize, the returned error is ErrFrameTooLarge. Other errors may be of type ConnectionError, StreamError, or anything else from the underlying reader. 

##### <a name="net-http-type-http2Framer-connError">func (fr *http2Framer) connError(code http2ErrCode, reason string) error</a>

```Go
func (fr *http2Framer) connError(code http2ErrCode, reason string) error
```

connError returns ConnectionError(code) but first stashes away a public reason to the caller can optionally relay it to the peer before hanging up on them. This might help others debug their implementations. 

##### <a name="net-http-type-http2Framer-checkFrameOrder">func (fr *http2Framer) checkFrameOrder(f http2Frame) error</a>

```Go
func (fr *http2Framer) checkFrameOrder(f http2Frame) error
```

checkFrameOrder reports an error if f is an invalid frame to return next from ReadFrame. Mostly it checks whether HEADERS and CONTINUATION frames are contiguous. 

##### <a name="net-http-type-http2Framer-WriteData">func (f *http2Framer) WriteData(streamID uint32, endStream bool, data []byte) error</a>

```Go
func (f *http2Framer) WriteData(streamID uint32, endStream bool, data []byte) error
```

WriteData writes a DATA frame. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility not to violate the maximum frame size and to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteDataPadded">func (f *http2Framer) WriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error</a>

```Go
func (f *http2Framer) WriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error
```

WriteDataPadded writes a DATA frame with optional padding. 

If pad is nil, the padding bit is not sent. The length of pad must not exceed 255 bytes. The bytes of pad must all be zero, unless f.AllowIllegalWrites is set. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility not to violate the maximum frame size and to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteSettings">func (f *http2Framer) WriteSettings(settings ...http2Setting) error</a>

```Go
func (f *http2Framer) WriteSettings(settings ...http2Setting) error
```

WriteSettings writes a SETTINGS frame with zero or more settings specified and the ACK bit not set. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteSettingsAck">func (f *http2Framer) WriteSettingsAck() error</a>

```Go
func (f *http2Framer) WriteSettingsAck() error
```

WriteSettingsAck writes an empty SETTINGS frame with the ACK bit set. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WritePing">func (f *http2Framer) WritePing(ack bool, data [8]byte) error</a>

```Go
func (f *http2Framer) WritePing(ack bool, data [8]byte) error
```

##### <a name="net-http-type-http2Framer-WriteGoAway">func (f *http2Framer) WriteGoAway(maxStreamID uint32, code http2ErrCode, debugData []byte) error</a>

```Go
func (f *http2Framer) WriteGoAway(maxStreamID uint32, code http2ErrCode, debugData []byte) error
```

##### <a name="net-http-type-http2Framer-WriteWindowUpdate">func (f *http2Framer) WriteWindowUpdate(streamID, incr uint32) error</a>

```Go
func (f *http2Framer) WriteWindowUpdate(streamID, incr uint32) error
```

WriteWindowUpdate writes a WINDOW_UPDATE frame. The increment value must be between 1 and 2,147,483,647, inclusive. If the Stream ID is zero, the window update applies to the connection as a whole. 

##### <a name="net-http-type-http2Framer-WriteHeaders">func (f *http2Framer) WriteHeaders(p http2HeadersFrameParam) error</a>

```Go
func (f *http2Framer) WriteHeaders(p http2HeadersFrameParam) error
```

WriteHeaders writes a single HEADERS frame. 

This is a low-level header writing method. Encoding headers and splitting them into any necessary CONTINUATION frames is handled elsewhere. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WritePriority">func (f *http2Framer) WritePriority(streamID uint32, p http2PriorityParam) error</a>

```Go
func (f *http2Framer) WritePriority(streamID uint32, p http2PriorityParam) error
```

WritePriority writes a PRIORITY frame. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteRSTStream">func (f *http2Framer) WriteRSTStream(streamID uint32, code http2ErrCode) error</a>

```Go
func (f *http2Framer) WriteRSTStream(streamID uint32, code http2ErrCode) error
```

WriteRSTStream writes a RST_STREAM frame. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteContinuation">func (f *http2Framer) WriteContinuation(streamID uint32, endHeaders bool, headerBlockFragment []byte) error</a>

```Go
func (f *http2Framer) WriteContinuation(streamID uint32, endHeaders bool, headerBlockFragment []byte) error
```

WriteContinuation writes a CONTINUATION frame. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WritePushPromise">func (f *http2Framer) WritePushPromise(p http2PushPromiseParam) error</a>

```Go
func (f *http2Framer) WritePushPromise(p http2PushPromiseParam) error
```

WritePushPromise writes a single PushPromise Frame. 

As with Header Frames, This is the low level call for writing individual frames. Continuation frames are handled elsewhere. 

It will perform exactly one Write to the underlying Writer. It is the caller's responsibility to not call other Write methods concurrently. 

##### <a name="net-http-type-http2Framer-WriteRawFrame">func (f *http2Framer) WriteRawFrame(t http2FrameType, flags http2Flags, streamID uint32, payload []byte) error</a>

```Go
func (f *http2Framer) WriteRawFrame(t http2FrameType, flags http2Flags, streamID uint32, payload []byte) error
```

WriteRawFrame writes a raw frame. This can be used to write extension frames unknown to this package. 

##### <a name="net-http-type-http2Framer-maxHeaderStringLen">func (fr *http2Framer) maxHeaderStringLen() int</a>

```Go
func (fr *http2Framer) maxHeaderStringLen() int
```

##### <a name="net-http-type-http2Framer-readMetaFrame">func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFrame, error)</a>

```Go
func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFrame, error)
```

readMetaFrame returns 0 or more CONTINUATION frames from fr and merge them into the provided hf and returns a MetaHeadersFrame with the decoded hpack values. 

#### <a name="net-http-type-http2frameCache">type http2frameCache struct</a>

```Go
type http2frameCache struct {
	dataFrame http2DataFrame
}
```

##### <a name="net-http-type-http2frameCache-getDataFrame">func (fc *http2frameCache) getDataFrame() *http2DataFrame</a>

```Go
func (fc *http2frameCache) getDataFrame() *http2DataFrame
```

#### <a name="net-http-type-http2DataFrame">type http2DataFrame struct</a>

```Go
type http2DataFrame struct {
	http2FrameHeader
	data []byte
}
```

A DataFrame conveys arbitrary, variable-length sequences of octets associated with a stream. See [http://http2.github.io/http2-spec/#rfc.section.6.1](http://http2.github.io/http2-spec/#rfc.section.6.1) 

##### <a name="net-http-type-http2DataFrame-StreamEnded">func (f *http2DataFrame) StreamEnded() bool</a>

```Go
func (f *http2DataFrame) StreamEnded() bool
```

##### <a name="net-http-type-http2DataFrame-Data">func (f *http2DataFrame) Data() []byte</a>

```Go
func (f *http2DataFrame) Data() []byte
```

Data returns the frame's data octets, not including any padding size byte or padding suffix bytes. The caller must not retain the returned memory past the next call to ReadFrame. 

#### <a name="net-http-type-http2SettingsFrame">type http2SettingsFrame struct</a>

```Go
type http2SettingsFrame struct {
	http2FrameHeader
	p []byte
}
```

A SettingsFrame conveys configuration parameters that affect how endpoints communicate, such as preferences and constraints on peer behavior. 

See [http://http2.github.io/http2-spec/#SETTINGS](http://http2.github.io/http2-spec/#SETTINGS) 

##### <a name="net-http-type-http2SettingsFrame-IsAck">func (f *http2SettingsFrame) IsAck() bool</a>

```Go
func (f *http2SettingsFrame) IsAck() bool
```

##### <a name="net-http-type-http2SettingsFrame-Value">func (f *http2SettingsFrame) Value(id http2SettingID) (v uint32, ok bool)</a>

```Go
func (f *http2SettingsFrame) Value(id http2SettingID) (v uint32, ok bool)
```

##### <a name="net-http-type-http2SettingsFrame-Setting">func (f *http2SettingsFrame) Setting(i int) http2Setting</a>

```Go
func (f *http2SettingsFrame) Setting(i int) http2Setting
```

Setting returns the setting from the frame at the given 0-based index. The index must be >= 0 and less than f.NumSettings(). 

##### <a name="net-http-type-http2SettingsFrame-NumSettings">func (f *http2SettingsFrame) NumSettings() int</a>

```Go
func (f *http2SettingsFrame) NumSettings() int
```

##### <a name="net-http-type-http2SettingsFrame-HasDuplicates">func (f *http2SettingsFrame) HasDuplicates() bool</a>

```Go
func (f *http2SettingsFrame) HasDuplicates() bool
```

HasDuplicates reports whether f contains any duplicate setting IDs. 

##### <a name="net-http-type-http2SettingsFrame-ForeachSetting">func (f *http2SettingsFrame) ForeachSetting(fn func(http2Setting) error) error</a>

```Go
func (f *http2SettingsFrame) ForeachSetting(fn func(http2Setting) error) error
```

ForeachSetting runs fn for each setting. It stops and returns the first error. 

#### <a name="net-http-type-http2PingFrame">type http2PingFrame struct</a>

```Go
type http2PingFrame struct {
	http2FrameHeader
	Data [8]byte
}
```

A PingFrame is a mechanism for measuring a minimal round trip time from the sender, as well as determining whether an idle connection is still functional. See [http://http2.github.io/http2-spec/#rfc.section.6.7](http://http2.github.io/http2-spec/#rfc.section.6.7) 

##### <a name="net-http-type-http2PingFrame-IsAck">func (f *http2PingFrame) IsAck() bool</a>

```Go
func (f *http2PingFrame) IsAck() bool
```

#### <a name="net-http-type-http2GoAwayFrame">type http2GoAwayFrame struct</a>

```Go
type http2GoAwayFrame struct {
	http2FrameHeader
	LastStreamID uint32
	ErrCode      http2ErrCode
	debugData    []byte
}
```

A GoAwayFrame informs the remote peer to stop creating streams on this connection. See [http://http2.github.io/http2-spec/#rfc.section.6.8](http://http2.github.io/http2-spec/#rfc.section.6.8) 

##### <a name="net-http-type-http2GoAwayFrame-DebugData">func (f *http2GoAwayFrame) DebugData() []byte</a>

```Go
func (f *http2GoAwayFrame) DebugData() []byte
```

DebugData returns any debug data in the GOAWAY frame. Its contents are not defined. The caller must not retain the returned memory past the next call to ReadFrame. 

#### <a name="net-http-type-http2UnknownFrame">type http2UnknownFrame struct</a>

```Go
type http2UnknownFrame struct {
	http2FrameHeader
	p []byte
}
```

An UnknownFrame is the frame type returned when the frame type is unknown or no specific frame type parser exists. 

##### <a name="net-http-type-http2UnknownFrame-Payload">func (f *http2UnknownFrame) Payload() []byte</a>

```Go
func (f *http2UnknownFrame) Payload() []byte
```

Payload returns the frame's payload (after the header).  It is not valid to call this method after a subsequent call to Framer.ReadFrame, nor is it valid to retain the returned slice. The memory is owned by the Framer and is invalidated when the next frame is read. 

#### <a name="net-http-type-http2WindowUpdateFrame">type http2WindowUpdateFrame struct</a>

```Go
type http2WindowUpdateFrame struct {
	http2FrameHeader
	Increment uint32 // never read with high bit set
}
```

A WindowUpdateFrame is used to implement flow control. See [http://http2.github.io/http2-spec/#rfc.section.6.9](http://http2.github.io/http2-spec/#rfc.section.6.9) 

#### <a name="net-http-type-http2HeadersFrame">type http2HeadersFrame struct</a>

```Go
type http2HeadersFrame struct {
	http2FrameHeader

	// Priority is set if FlagHeadersPriority is set in the FrameHeader.
	Priority http2PriorityParam

	headerFragBuf []byte // not owned
}
```

A HeadersFrame is used to open a stream and additionally carries a header block fragment. 

##### <a name="net-http-type-http2HeadersFrame-HeaderBlockFragment">func (f *http2HeadersFrame) HeaderBlockFragment() []byte</a>

```Go
func (f *http2HeadersFrame) HeaderBlockFragment() []byte
```

##### <a name="net-http-type-http2HeadersFrame-HeadersEnded">func (f *http2HeadersFrame) HeadersEnded() bool</a>

```Go
func (f *http2HeadersFrame) HeadersEnded() bool
```

##### <a name="net-http-type-http2HeadersFrame-StreamEnded">func (f *http2HeadersFrame) StreamEnded() bool</a>

```Go
func (f *http2HeadersFrame) StreamEnded() bool
```

##### <a name="net-http-type-http2HeadersFrame-HasPriority">func (f *http2HeadersFrame) HasPriority() bool</a>

```Go
func (f *http2HeadersFrame) HasPriority() bool
```

#### <a name="net-http-type-http2HeadersFrameParam">type http2HeadersFrameParam struct</a>

```Go
type http2HeadersFrameParam struct {
	// StreamID is the required Stream ID to initiate.
	StreamID uint32
	// BlockFragment is part (or all) of a Header Block.
	BlockFragment []byte

	// EndStream indicates that the header block is the last that
	// the endpoint will send for the identified stream. Setting
	// this flag causes the stream to enter one of "half closed"
	// states.
	EndStream bool

	// EndHeaders indicates that this frame contains an entire
	// header block and is not followed by any
	// CONTINUATION frames.
	EndHeaders bool

	// PadLength is the optional number of bytes of zeros to add
	// to this frame.
	PadLength uint8

	// Priority, if non-zero, includes stream priority information
	// in the HEADER frame.
	Priority http2PriorityParam
}
```

HeadersFrameParam are the parameters for writing a HEADERS frame. 

#### <a name="net-http-type-http2PriorityFrame">type http2PriorityFrame struct</a>

```Go
type http2PriorityFrame struct {
	http2FrameHeader
	http2PriorityParam
}
```

A PriorityFrame specifies the sender-advised priority of a stream. See [http://http2.github.io/http2-spec/#rfc.section.6.3](http://http2.github.io/http2-spec/#rfc.section.6.3) 

#### <a name="net-http-type-http2PriorityParam">type http2PriorityParam struct</a>

```Go
type http2PriorityParam struct {
	// StreamDep is a 31-bit stream identifier for the
	// stream that this stream depends on. Zero means no
	// dependency.
	StreamDep uint32

	// Exclusive is whether the dependency is exclusive.
	Exclusive bool

	// Weight is the stream's zero-indexed weight. It should be
	// set together with StreamDep, or neither should be set. Per
	// the spec, "Add one to the value to obtain a weight between
	// 1 and 256."
	Weight uint8
}
```

PriorityParam are the stream prioritzation parameters. 

##### <a name="net-http-type-http2PriorityParam-IsZero">func (p http2PriorityParam) IsZero() bool</a>

```Go
func (p http2PriorityParam) IsZero() bool
```

#### <a name="net-http-type-http2RSTStreamFrame">type http2RSTStreamFrame struct</a>

```Go
type http2RSTStreamFrame struct {
	http2FrameHeader
	ErrCode http2ErrCode
}
```

A RSTStreamFrame allows for abnormal termination of a stream. See [http://http2.github.io/http2-spec/#rfc.section.6.4](http://http2.github.io/http2-spec/#rfc.section.6.4) 

#### <a name="net-http-type-http2ContinuationFrame">type http2ContinuationFrame struct</a>

```Go
type http2ContinuationFrame struct {
	http2FrameHeader
	headerFragBuf []byte
}
```

A ContinuationFrame is used to continue a sequence of header block fragments. See [http://http2.github.io/http2-spec/#rfc.section.6.10](http://http2.github.io/http2-spec/#rfc.section.6.10) 

##### <a name="net-http-type-http2ContinuationFrame-HeaderBlockFragment">func (f *http2ContinuationFrame) HeaderBlockFragment() []byte</a>

```Go
func (f *http2ContinuationFrame) HeaderBlockFragment() []byte
```

##### <a name="net-http-type-http2ContinuationFrame-HeadersEnded">func (f *http2ContinuationFrame) HeadersEnded() bool</a>

```Go
func (f *http2ContinuationFrame) HeadersEnded() bool
```

#### <a name="net-http-type-http2PushPromiseFrame">type http2PushPromiseFrame struct</a>

```Go
type http2PushPromiseFrame struct {
	http2FrameHeader
	PromiseID     uint32
	headerFragBuf []byte // not owned
}
```

A PushPromiseFrame is used to initiate a server stream. See [http://http2.github.io/http2-spec/#rfc.section.6.6](http://http2.github.io/http2-spec/#rfc.section.6.6) 

##### <a name="net-http-type-http2PushPromiseFrame-HeaderBlockFragment">func (f *http2PushPromiseFrame) HeaderBlockFragment() []byte</a>

```Go
func (f *http2PushPromiseFrame) HeaderBlockFragment() []byte
```

##### <a name="net-http-type-http2PushPromiseFrame-HeadersEnded">func (f *http2PushPromiseFrame) HeadersEnded() bool</a>

```Go
func (f *http2PushPromiseFrame) HeadersEnded() bool
```

#### <a name="net-http-type-http2PushPromiseParam">type http2PushPromiseParam struct</a>

```Go
type http2PushPromiseParam struct {
	// StreamID is the required Stream ID to initiate.
	StreamID uint32

	// PromiseID is the required Stream ID which this
	// Push Promises
	PromiseID uint32

	// BlockFragment is part (or all) of a Header Block.
	BlockFragment []byte

	// EndHeaders indicates that this frame contains an entire
	// header block and is not followed by any
	// CONTINUATION frames.
	EndHeaders bool

	// PadLength is the optional number of bytes of zeros to add
	// to this frame.
	PadLength uint8
}
```

PushPromiseParam are the parameters for writing a PUSH_PROMISE frame. 

#### <a name="net-http-type-http2streamEnder">type http2streamEnder interface</a>

```Go
type http2streamEnder interface {
	StreamEnded() bool
}
```

#### <a name="net-http-type-http2headersEnder">type http2headersEnder interface</a>

```Go
type http2headersEnder interface {
	HeadersEnded() bool
}
```

#### <a name="net-http-type-http2headersOrContinuation">type http2headersOrContinuation interface</a>

```Go
type http2headersOrContinuation interface {
	http2headersEnder
	HeaderBlockFragment() []byte
}
```

#### <a name="net-http-type-http2MetaHeadersFrame">type http2MetaHeadersFrame struct</a>

```Go
type http2MetaHeadersFrame struct {
	*http2HeadersFrame

	// Fields are the fields contained in the HEADERS and
	// CONTINUATION frames. The underlying slice is owned by the
	// Framer and must not be retained after the next call to
	// ReadFrame.
	//
	// Fields are guaranteed to be in the correct http2 order and
	// not have unknown pseudo header fields or invalid header
	// field names or values. Required pseudo header fields may be
	// missing, however. Use the MetaHeadersFrame.Pseudo accessor
	// method access pseudo headers.
	Fields []hpack.HeaderField

	// Truncated is whether the max header list size limit was hit
	// and Fields is incomplete. The hpack decoder state is still
	// valid, however.
	Truncated bool
}
```

A MetaHeadersFrame is the representation of one HEADERS frame and zero or more contiguous CONTINUATION frames and the decoding of their HPACK-encoded contents. 

This type of frame does not appear on the wire and is only returned by the Framer when Framer.ReadMetaHeaders is set. 

##### <a name="net-http-type-http2MetaHeadersFrame-PseudoValue">func (mh *http2MetaHeadersFrame) PseudoValue(pseudo string) string</a>

```Go
func (mh *http2MetaHeadersFrame) PseudoValue(pseudo string) string
```

PseudoValue returns the given pseudo header field's value. The provided pseudo field should not contain the leading colon. 

##### <a name="net-http-type-http2MetaHeadersFrame-RegularFields">func (mh *http2MetaHeadersFrame) RegularFields() []hpack.HeaderField</a>

```Go
func (mh *http2MetaHeadersFrame) RegularFields() []hpack.HeaderField
```

RegularFields returns the regular (non-pseudo) header fields of mh. The caller does not own the returned slice. 

##### <a name="net-http-type-http2MetaHeadersFrame-PseudoFields">func (mh *http2MetaHeadersFrame) PseudoFields() []hpack.HeaderField</a>

```Go
func (mh *http2MetaHeadersFrame) PseudoFields() []hpack.HeaderField
```

PseudoFields returns the pseudo header fields of mh. The caller does not own the returned slice. 

##### <a name="net-http-type-http2MetaHeadersFrame-checkPseudos">func (mh *http2MetaHeadersFrame) checkPseudos() error</a>

```Go
func (mh *http2MetaHeadersFrame) checkPseudos() error
```

#### <a name="net-http-type-http2goroutineLock">type http2goroutineLock uint64</a>

```Go
type http2goroutineLock uint64
```

##### <a name="net-http-type-http2goroutineLock-http2newGoroutineLock">func http2newGoroutineLock() http2goroutineLock</a>

```Go
func http2newGoroutineLock() http2goroutineLock
```

##### <a name="net-http-type-http2goroutineLock-check">func (g http2goroutineLock) check()</a>

```Go
func (g http2goroutineLock) check()
```

##### <a name="net-http-type-http2goroutineLock-checkNotOn">func (g http2goroutineLock) checkNotOn()</a>

```Go
func (g http2goroutineLock) checkNotOn()
```

#### <a name="net-http-type-http2streamState">type http2streamState int</a>

```Go
type http2streamState int
```

##### <a name="net-http-type-http2streamState-String">func (st http2streamState) String() string</a>

```Go
func (st http2streamState) String() string
```

#### <a name="net-http-type-http2Setting">type http2Setting struct</a>

```Go
type http2Setting struct {
	// ID is which setting is being set.
	// See http://http2.github.io/http2-spec/#SettingValues
	ID http2SettingID

	// Val is the value.
	Val uint32
}
```

Setting is a setting parameter: which setting it is, and its value. 

##### <a name="net-http-type-http2Setting-String">func (s http2Setting) String() string</a>

```Go
func (s http2Setting) String() string
```

##### <a name="net-http-type-http2Setting-Valid">func (s http2Setting) Valid() error</a>

```Go
func (s http2Setting) Valid() error
```

Valid reports whether the setting is valid. 

#### <a name="net-http-type-http2SettingID">type http2SettingID uint16</a>

```Go
type http2SettingID uint16
```

A SettingID is an HTTP/2 setting as defined in [http://http2.github.io/http2-spec/#iana-settings](http://http2.github.io/http2-spec/#iana-settings) 

##### <a name="net-http-type-http2SettingID-String">func (s http2SettingID) String() string</a>

```Go
func (s http2SettingID) String() string
```

#### <a name="net-http-type-http2stringWriter">type http2stringWriter interface</a>

```Go
type http2stringWriter interface {
	WriteString(s string) (n int, err error)
}
```

from pkg io 

#### <a name="net-http-type-http2gate">type http2gate chan struct{}</a>

```Go
type http2gate chan struct{}
```

A gate lets two goroutines coordinate their activities. 

##### <a name="net-http-type-http2gate-Done">func (g http2gate) Done()</a>

```Go
func (g http2gate) Done()
```

##### <a name="net-http-type-http2gate-Wait">func (g http2gate) Wait()</a>

```Go
func (g http2gate) Wait()
```

#### <a name="net-http-type-http2closeWaiter">type http2closeWaiter chan struct{}</a>

```Go
type http2closeWaiter chan struct{}
```

A closeWaiter is like a sync.WaitGroup but only goes 1 to 0 (open to closed). 

##### <a name="net-http-type-http2closeWaiter-Init">func (cw *http2closeWaiter) Init()</a>

```Go
func (cw *http2closeWaiter) Init()
```

Init makes a closeWaiter usable. It exists because so a closeWaiter value can be placed inside a larger struct and have the Mutex and Cond's memory in the same allocation. 

##### <a name="net-http-type-http2closeWaiter-Close">func (cw http2closeWaiter) Close()</a>

```Go
func (cw http2closeWaiter) Close()
```

Close marks the closeWaiter as closed and unblocks any waiters. 

##### <a name="net-http-type-http2closeWaiter-Wait">func (cw http2closeWaiter) Wait()</a>

```Go
func (cw http2closeWaiter) Wait()
```

Wait waits for the closeWaiter to become closed. 

#### <a name="net-http-type-http2bufferedWriter">type http2bufferedWriter struct</a>

```Go
type http2bufferedWriter struct {
	_  http2incomparable
	w  io.Writer     // immutable
	bw *bufio.Writer // non-nil when data is buffered
}
```

bufferedWriter is a buffered writer that writes to w. Its buffered writer is lazily allocated as needed, to minimize idle memory usage with many connections. 

##### <a name="net-http-type-http2bufferedWriter-http2newBufferedWriter">func http2newBufferedWriter(w io.Writer) *http2bufferedWriter</a>

```Go
func http2newBufferedWriter(w io.Writer) *http2bufferedWriter
```

##### <a name="net-http-type-http2bufferedWriter-Available">func (w *http2bufferedWriter) Available() int</a>

```Go
func (w *http2bufferedWriter) Available() int
```

##### <a name="net-http-type-http2bufferedWriter-Write">func (w *http2bufferedWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w *http2bufferedWriter) Write(p []byte) (n int, err error)
```

##### <a name="net-http-type-http2bufferedWriter-Flush">func (w *http2bufferedWriter) Flush() error</a>

```Go
func (w *http2bufferedWriter) Flush() error
```

#### <a name="net-http-type-http2httpError">type http2httpError struct</a>

```Go
type http2httpError struct {
	_       http2incomparable
	msg     string
	timeout bool
}
```

##### <a name="net-http-type-http2httpError-Error">func (e *http2httpError) Error() string</a>

```Go
func (e *http2httpError) Error() string
```

##### <a name="net-http-type-http2httpError-Timeout">func (e *http2httpError) Timeout() bool</a>

```Go
func (e *http2httpError) Timeout() bool
```

##### <a name="net-http-type-http2httpError-Temporary">func (e *http2httpError) Temporary() bool</a>

```Go
func (e *http2httpError) Temporary() bool
```

#### <a name="net-http-type-http2connectionStater">type http2connectionStater interface</a>

```Go
type http2connectionStater interface {
	ConnectionState() tls.ConnectionState
}
```

#### <a name="net-http-type-http2sorter">type http2sorter struct</a>

```Go
type http2sorter struct {
	v []string // owned by sorter
}
```

##### <a name="net-http-type-http2sorter-Len">func (s *http2sorter) Len() int</a>

```Go
func (s *http2sorter) Len() int
```

##### <a name="net-http-type-http2sorter-Swap">func (s *http2sorter) Swap(i, j int)</a>

```Go
func (s *http2sorter) Swap(i, j int)
```

##### <a name="net-http-type-http2sorter-Less">func (s *http2sorter) Less(i, j int) bool</a>

```Go
func (s *http2sorter) Less(i, j int) bool
```

##### <a name="net-http-type-http2sorter-Keys">func (s *http2sorter) Keys(h Header) []string</a>

```Go
func (s *http2sorter) Keys(h Header) []string
```

Keys returns the sorted keys of h. 

The returned slice is only valid until s used again or returned to its pool. 

##### <a name="net-http-type-http2sorter-SortStrings">func (s *http2sorter) SortStrings(ss []string)</a>

```Go
func (s *http2sorter) SortStrings(ss []string)
```

#### <a name="net-http-type-http2incomparable">type http2incomparable [0]func()</a>

```Go
type http2incomparable [0]func()
```

incomparable is a zero-width, non-comparable type. Adding it to a struct makes that struct also non-comparable, and generally doesn't add any size (as long as it's first). 

#### <a name="net-http-type-http2pipe">type http2pipe struct</a>

```Go
type http2pipe struct {
	mu       sync.Mutex
	c        sync.Cond       // c.L lazily initialized to &p.mu
	b        http2pipeBuffer // nil when done reading
	unread   int             // bytes unread when done
	err      error           // read error once empty. non-nil means closed.
	breakErr error           // immediate read error (caller doesn't see rest of b)
	donec    chan struct{}   // closed on error
	readFn   func()          // optional code to run in Read before error
}
```

pipe is a goroutine-safe io.Reader/io.Writer pair. It's like io.Pipe except there are no PipeReader/PipeWriter halves, and the underlying buffer is an interface. (io.Pipe is always unbuffered) 

##### <a name="net-http-type-http2pipe-Len">func (p *http2pipe) Len() int</a>

```Go
func (p *http2pipe) Len() int
```

##### <a name="net-http-type-http2pipe-Read">func (p *http2pipe) Read(d []byte) (n int, err error)</a>

```Go
func (p *http2pipe) Read(d []byte) (n int, err error)
```

Read waits until data is available and copies bytes from the buffer into p. 

##### <a name="net-http-type-http2pipe-Write">func (p *http2pipe) Write(d []byte) (n int, err error)</a>

```Go
func (p *http2pipe) Write(d []byte) (n int, err error)
```

Write copies bytes from p into the buffer and wakes a reader. It is an error to write more data than the buffer can hold. 

##### <a name="net-http-type-http2pipe-CloseWithError">func (p *http2pipe) CloseWithError(err error)</a>

```Go
func (p *http2pipe) CloseWithError(err error)
```

CloseWithError causes the next Read (waking up a current blocked Read if needed) to return the provided err after all data has been read. 

The error must be non-nil. 

##### <a name="net-http-type-http2pipe-BreakWithError">func (p *http2pipe) BreakWithError(err error)</a>

```Go
func (p *http2pipe) BreakWithError(err error)
```

BreakWithError causes the next Read (waking up a current blocked Read if needed) to return the provided err immediately, without waiting for unread data. 

##### <a name="net-http-type-http2pipe-closeWithErrorAndCode">func (p *http2pipe) closeWithErrorAndCode(err error, fn func())</a>

```Go
func (p *http2pipe) closeWithErrorAndCode(err error, fn func())
```

closeWithErrorAndCode is like CloseWithError but also sets some code to run in the caller's goroutine before returning the error. 

##### <a name="net-http-type-http2pipe-closeWithError">func (p *http2pipe) closeWithError(dst *error, err error, fn func())</a>

```Go
func (p *http2pipe) closeWithError(dst *error, err error, fn func())
```

##### <a name="net-http-type-http2pipe-closeDoneLocked">func (p *http2pipe) closeDoneLocked()</a>

```Go
func (p *http2pipe) closeDoneLocked()
```

requires p.mu be held. 

##### <a name="net-http-type-http2pipe-Err">func (p *http2pipe) Err() error</a>

```Go
func (p *http2pipe) Err() error
```

Err returns the error (if any) first set by BreakWithError or CloseWithError. 

##### <a name="net-http-type-http2pipe-Done">func (p *http2pipe) Done() <-chan struct{}</a>

```Go
func (p *http2pipe) Done() <-chan struct{}
```

Done returns a channel which is closed if and when this pipe is closed with CloseWithError. 

#### <a name="net-http-type-http2pipeBuffer">type http2pipeBuffer interface</a>

```Go
type http2pipeBuffer interface {
	Len() int
	io.Writer
	io.Reader
}
```

#### <a name="net-http-type-http2Server">type http2Server struct</a>

```Go
type http2Server struct {
	// MaxHandlers limits the number of http.Handler ServeHTTP goroutines
	// which may run at a time over all connections.
	// Negative or zero no limit.
	// TODO: implement
	MaxHandlers int

	// MaxConcurrentStreams optionally specifies the number of
	// concurrent streams that each client may have open at a
	// time. This is unrelated to the number of http.Handler goroutines
	// which may be active globally, which is MaxHandlers.
	// If zero, MaxConcurrentStreams defaults to at least 100, per
	// the HTTP/2 spec's recommendations.
	MaxConcurrentStreams uint32

	// MaxReadFrameSize optionally specifies the largest frame
	// this server is willing to read. A valid value is between
	// 16k and 16M, inclusive. If zero or otherwise invalid, a
	// default value is used.
	MaxReadFrameSize uint32

	// PermitProhibitedCipherSuites, if true, permits the use of
	// cipher suites prohibited by the HTTP/2 spec.
	PermitProhibitedCipherSuites bool

	// IdleTimeout specifies how long until idle clients should be
	// closed with a GOAWAY frame. PING frames are not considered
	// activity for the purposes of IdleTimeout.
	IdleTimeout time.Duration

	// MaxUploadBufferPerConnection is the size of the initial flow
	// control window for each connections. The HTTP/2 spec does not
	// allow this to be smaller than 65535 or larger than 2^32-1.
	// If the value is outside this range, a default value will be
	// used instead.
	MaxUploadBufferPerConnection int32

	// MaxUploadBufferPerStream is the size of the initial flow control
	// window for each stream. The HTTP/2 spec does not allow this to
	// be larger than 2^32-1. If the value is zero or larger than the
	// maximum, a default value will be used instead.
	MaxUploadBufferPerStream int32

	// NewWriteScheduler constructs a write scheduler for a connection.
	// If nil, a default scheduler is chosen.
	NewWriteScheduler func() http2WriteScheduler

	// Internal state. This is a pointer (rather than embedded directly)
	// so that we don't embed a Mutex in this struct, which will make the
	// struct non-copyable, which might break some callers.
	state *http2serverInternalState
}
```

Server is an HTTP/2 server. 

##### <a name="net-http-type-http2Server-initialConnRecvWindowSize">func (s *http2Server) initialConnRecvWindowSize() int32</a>

```Go
func (s *http2Server) initialConnRecvWindowSize() int32
```

##### <a name="net-http-type-http2Server-initialStreamRecvWindowSize">func (s *http2Server) initialStreamRecvWindowSize() int32</a>

```Go
func (s *http2Server) initialStreamRecvWindowSize() int32
```

##### <a name="net-http-type-http2Server-maxReadFrameSize">func (s *http2Server) maxReadFrameSize() uint32</a>

```Go
func (s *http2Server) maxReadFrameSize() uint32
```

##### <a name="net-http-type-http2Server-maxConcurrentStreams">func (s *http2Server) maxConcurrentStreams() uint32</a>

```Go
func (s *http2Server) maxConcurrentStreams() uint32
```

##### <a name="net-http-type-http2Server-maxQueuedControlFrames">func (s *http2Server) maxQueuedControlFrames() int</a>

```Go
func (s *http2Server) maxQueuedControlFrames() int
```

maxQueuedControlFrames is the maximum number of control frames like SETTINGS, PING and RST_STREAM that will be queued for writing before the connection is closed to prevent memory exhaustion attacks. 

##### <a name="net-http-type-http2Server-ServeConn">func (s *http2Server) ServeConn(c net.Conn, opts *http2ServeConnOpts)</a>

```Go
func (s *http2Server) ServeConn(c net.Conn, opts *http2ServeConnOpts)
```

ServeConn serves HTTP/2 requests on the provided connection and blocks until the connection is no longer readable. 

ServeConn starts speaking HTTP/2 assuming that c has not had any reads or writes. It writes its initial settings frame and expects to be able to read the preface and settings frame from the client. If c has a ConnectionState method like a *tls.Conn, the ConnectionState is used to verify the TLS ciphersuite and to set the Request.TLS field in Handlers. 

ServeConn does not support h2c by itself. Any h2c support must be implemented in terms of providing a suitably-behaving net.Conn. 

The opts parameter is optional. If nil, default values are used. 

#### <a name="net-http-type-http2serverInternalState">type http2serverInternalState struct</a>

```Go
type http2serverInternalState struct {
	mu          sync.Mutex
	activeConns map[*http2serverConn]struct{}
}
```

##### <a name="net-http-type-http2serverInternalState-registerConn">func (s *http2serverInternalState) registerConn(sc *http2serverConn)</a>

```Go
func (s *http2serverInternalState) registerConn(sc *http2serverConn)
```

##### <a name="net-http-type-http2serverInternalState-unregisterConn">func (s *http2serverInternalState) unregisterConn(sc *http2serverConn)</a>

```Go
func (s *http2serverInternalState) unregisterConn(sc *http2serverConn)
```

##### <a name="net-http-type-http2serverInternalState-startGracefulShutdown">func (s *http2serverInternalState) startGracefulShutdown()</a>

```Go
func (s *http2serverInternalState) startGracefulShutdown()
```

#### <a name="net-http-type-baseContexter">type baseContexter interface</a>

```Go
type baseContexter interface {
	BaseContext() context.Context
}
```

#### <a name="net-http-type-http2ServeConnOpts">type http2ServeConnOpts struct</a>

```Go
type http2ServeConnOpts struct {
	// Context is the base context to use.
	// If nil, context.Background is used.
	Context context.Context

	// BaseConfig optionally sets the base configuration
	// for values. If nil, defaults are used.
	BaseConfig *Server

	// Handler specifies which handler to use for processing
	// requests. If nil, BaseConfig.Handler is used. If BaseConfig
	// or BaseConfig.Handler is nil, http.DefaultServeMux is used.
	Handler Handler
}
```

ServeConnOpts are options for the Server.ServeConn method. 

##### <a name="net-http-type-http2ServeConnOpts-context">func (o *http2ServeConnOpts) context() context.Context</a>

```Go
func (o *http2ServeConnOpts) context() context.Context
```

##### <a name="net-http-type-http2ServeConnOpts-baseConfig">func (o *http2ServeConnOpts) baseConfig() *Server</a>

```Go
func (o *http2ServeConnOpts) baseConfig() *Server
```

##### <a name="net-http-type-http2ServeConnOpts-handler">func (o *http2ServeConnOpts) handler() Handler</a>

```Go
func (o *http2ServeConnOpts) handler() Handler
```

#### <a name="net-http-type-http2serverConn">type http2serverConn struct</a>

```Go
type http2serverConn struct {
	// Immutable:
	srv              *http2Server
	hs               *Server
	conn             net.Conn
	bw               *http2bufferedWriter // writing to conn
	handler          Handler
	baseCtx          context.Context
	framer           *http2Framer
	doneServing      chan struct{}               // closed when serverConn.serve ends
	readFrameCh      chan http2readFrameResult   // written by serverConn.readFrames
	wantWriteFrameCh chan http2FrameWriteRequest // from handlers -> serve
	wroteFrameCh     chan http2frameWriteResult  // from writeFrameAsync -> serve, tickles more frame writes
	bodyReadCh       chan http2bodyReadMsg       // from handlers -> serve
	serveMsgCh       chan interface{}            // misc messages & code to send to / run on the serve loop
	flow             http2flow                   // conn-wide (not stream-specific) outbound flow control
	inflow           http2flow                   // conn-wide inbound flow control
	tlsState         *tls.ConnectionState        // shared by all handlers, like net/http
	remoteAddrStr    string
	writeSched       http2WriteScheduler

	// Everything following is owned by the serve loop; use serveG.check():
	serveG                      http2goroutineLock // used to verify funcs are on serve()
	pushEnabled                 bool
	sawFirstSettings            bool // got the initial SETTINGS frame after the preface
	needToSendSettingsAck       bool
	unackedSettings             int    // how many SETTINGS have we sent without ACKs?
	queuedControlFrames         int    // control frames in the writeSched queue
	clientMaxStreams            uint32 // SETTINGS_MAX_CONCURRENT_STREAMS from client (our PUSH_PROMISE limit)
	advMaxStreams               uint32 // our SETTINGS_MAX_CONCURRENT_STREAMS advertised the client
	curClientStreams            uint32 // number of open streams initiated by the client
	curPushedStreams            uint32 // number of open streams initiated by server push
	maxClientStreamID           uint32 // max ever seen from client (odd), or 0 if there have been no client requests
	maxPushPromiseID            uint32 // ID of the last push promise (even), or 0 if there have been no pushes
	streams                     map[uint32]*http2stream
	initialStreamSendWindowSize int32
	maxFrameSize                int32
	headerTableSize             uint32
	peerMaxHeaderListSize       uint32            // zero means unknown (default)
	canonHeader                 map[string]string // http2-lower-case -> Go-Canonical-Case
	writingFrame                bool              // started writing a frame (on serve goroutine or separate)
	writingFrameAsync           bool              // started a frame on its own goroutine but haven't heard back on wroteFrameCh
	needsFrameFlush             bool              // last frame write wasn't a flush
	inGoAway                    bool              // we've started to or sent GOAWAY
	inFrameScheduleLoop         bool              // whether we're in the scheduleFrameWrite loop
	needToSendGoAway            bool              // we need to schedule a GOAWAY frame write
	goAwayCode                  http2ErrCode
	shutdownTimer               *time.Timer // nil until used
	idleTimer                   *time.Timer // nil if unused

	// Owned by the writeFrameAsync goroutine:
	headerWriteBuf bytes.Buffer
	hpackEncoder   *hpack.Encoder

	// Used by startGracefulShutdown.
	shutdownOnce sync.Once
}
```

##### <a name="net-http-type-http2serverConn-rejectConn">func (sc *http2serverConn) rejectConn(err http2ErrCode, debug string)</a>

```Go
func (sc *http2serverConn) rejectConn(err http2ErrCode, debug string)
```

##### <a name="net-http-type-http2serverConn-maxHeaderListSize">func (sc *http2serverConn) maxHeaderListSize() uint32</a>

```Go
func (sc *http2serverConn) maxHeaderListSize() uint32
```

##### <a name="net-http-type-http2serverConn-curOpenStreams">func (sc *http2serverConn) curOpenStreams() uint32</a>

```Go
func (sc *http2serverConn) curOpenStreams() uint32
```

##### <a name="net-http-type-http2serverConn-Framer">func (sc *http2serverConn) Framer() *http2Framer</a>

```Go
func (sc *http2serverConn) Framer() *http2Framer
```

##### <a name="net-http-type-http2serverConn-CloseConn">func (sc *http2serverConn) CloseConn() error</a>

```Go
func (sc *http2serverConn) CloseConn() error
```

##### <a name="net-http-type-http2serverConn-Flush">func (sc *http2serverConn) Flush() error</a>

```Go
func (sc *http2serverConn) Flush() error
```

##### <a name="net-http-type-http2serverConn-HeaderEncoder">func (sc *http2serverConn) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)</a>

```Go
func (sc *http2serverConn) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)
```

##### <a name="net-http-type-http2serverConn-state">func (sc *http2serverConn) state(streamID uint32) (http2streamState, *http2stream)</a>

```Go
func (sc *http2serverConn) state(streamID uint32) (http2streamState, *http2stream)
```

##### <a name="net-http-type-http2serverConn-setConnState">func (sc *http2serverConn) setConnState(state ConnState)</a>

```Go
func (sc *http2serverConn) setConnState(state ConnState)
```

setConnState calls the net/http ConnState hook for this connection, if configured. Note that the net/http package does StateNew and StateClosed for us. There is currently no plan for StateHijacked or hijacking HTTP/2 connections. 

##### <a name="net-http-type-http2serverConn-vlogf">func (sc *http2serverConn) vlogf(format string, args ...interface{})</a>

```Go
func (sc *http2serverConn) vlogf(format string, args ...interface{})
```

##### <a name="net-http-type-http2serverConn-logf">func (sc *http2serverConn) logf(format string, args ...interface{})</a>

```Go
func (sc *http2serverConn) logf(format string, args ...interface{})
```

##### <a name="net-http-type-http2serverConn-condlogf">func (sc *http2serverConn) condlogf(err error, format string, args ...interface{})</a>

```Go
func (sc *http2serverConn) condlogf(err error, format string, args ...interface{})
```

##### <a name="net-http-type-http2serverConn-canonicalHeader">func (sc *http2serverConn) canonicalHeader(v string) string</a>

```Go
func (sc *http2serverConn) canonicalHeader(v string) string
```

##### <a name="net-http-type-http2serverConn-readFrames">func (sc *http2serverConn) readFrames()</a>

```Go
func (sc *http2serverConn) readFrames()
```

readFrames is the loop that reads incoming frames. It takes care to only read one frame at a time, blocking until the consumer is done with the frame. It's run on its own goroutine. 

##### <a name="net-http-type-http2serverConn-writeFrameAsync">func (sc *http2serverConn) writeFrameAsync(wr http2FrameWriteRequest)</a>

```Go
func (sc *http2serverConn) writeFrameAsync(wr http2FrameWriteRequest)
```

writeFrameAsync runs in its own goroutine and writes a single frame and then reports when it's done. At most one goroutine can be running writeFrameAsync at a time per serverConn. 

##### <a name="net-http-type-http2serverConn-closeAllStreamsOnConnClose">func (sc *http2serverConn) closeAllStreamsOnConnClose()</a>

```Go
func (sc *http2serverConn) closeAllStreamsOnConnClose()
```

##### <a name="net-http-type-http2serverConn-stopShutdownTimer">func (sc *http2serverConn) stopShutdownTimer()</a>

```Go
func (sc *http2serverConn) stopShutdownTimer()
```

##### <a name="net-http-type-http2serverConn-notePanic">func (sc *http2serverConn) notePanic()</a>

```Go
func (sc *http2serverConn) notePanic()
```

##### <a name="net-http-type-http2serverConn-serve">func (sc *http2serverConn) serve()</a>

```Go
func (sc *http2serverConn) serve()
```

##### <a name="net-http-type-http2serverConn-awaitGracefulShutdown">func (sc *http2serverConn) awaitGracefulShutdown(sharedCh <-chan struct{}, privateCh chan struct{})</a>

```Go
func (sc *http2serverConn) awaitGracefulShutdown(sharedCh <-chan struct{}, privateCh chan struct{})
```

##### <a name="net-http-type-http2serverConn-onSettingsTimer">func (sc *http2serverConn) onSettingsTimer()</a>

```Go
func (sc *http2serverConn) onSettingsTimer()
```

##### <a name="net-http-type-http2serverConn-onIdleTimer">func (sc *http2serverConn) onIdleTimer()</a>

```Go
func (sc *http2serverConn) onIdleTimer()
```

##### <a name="net-http-type-http2serverConn-onShutdownTimer">func (sc *http2serverConn) onShutdownTimer()</a>

```Go
func (sc *http2serverConn) onShutdownTimer()
```

##### <a name="net-http-type-http2serverConn-sendServeMsg">func (sc *http2serverConn) sendServeMsg(msg interface{})</a>

```Go
func (sc *http2serverConn) sendServeMsg(msg interface{})
```

##### <a name="net-http-type-http2serverConn-readPreface">func (sc *http2serverConn) readPreface() error</a>

```Go
func (sc *http2serverConn) readPreface() error
```

readPreface reads the ClientPreface greeting from the peer or returns errPrefaceTimeout on timeout, or an error if the greeting is invalid. 

##### <a name="net-http-type-http2serverConn-writeDataFromHandler">func (sc *http2serverConn) writeDataFromHandler(stream *http2stream, data []byte, endStream bool) error</a>

```Go
func (sc *http2serverConn) writeDataFromHandler(stream *http2stream, data []byte, endStream bool) error
```

writeDataFromHandler writes DATA response frames from a handler on the given stream. 

##### <a name="net-http-type-http2serverConn-writeFrameFromHandler">func (sc *http2serverConn) writeFrameFromHandler(wr http2FrameWriteRequest) error</a>

```Go
func (sc *http2serverConn) writeFrameFromHandler(wr http2FrameWriteRequest) error
```

writeFrameFromHandler sends wr to sc.wantWriteFrameCh, but aborts if the connection has gone away. 

This must not be run from the serve goroutine itself, else it might deadlock writing to sc.wantWriteFrameCh (which is only mildly buffered and is read by serve itself). If you're on the serve goroutine, call writeFrame instead. 

##### <a name="net-http-type-http2serverConn-writeFrame">func (sc *http2serverConn) writeFrame(wr http2FrameWriteRequest)</a>

```Go
func (sc *http2serverConn) writeFrame(wr http2FrameWriteRequest)
```

writeFrame schedules a frame to write and sends it if there's nothing already being written. 

There is no pushback here (the serve goroutine never blocks). It's the http.Handlers that block, waiting for their previous frames to make it onto the wire 

If you're not on the serve goroutine, use writeFrameFromHandler instead. 

##### <a name="net-http-type-http2serverConn-startFrameWrite">func (sc *http2serverConn) startFrameWrite(wr http2FrameWriteRequest)</a>

```Go
func (sc *http2serverConn) startFrameWrite(wr http2FrameWriteRequest)
```

startFrameWrite starts a goroutine to write wr (in a separate goroutine since that might block on the network), and updates the serve goroutine's state about the world, updated from info in wr. 

##### <a name="net-http-type-http2serverConn-wroteFrame">func (sc *http2serverConn) wroteFrame(res http2frameWriteResult)</a>

```Go
func (sc *http2serverConn) wroteFrame(res http2frameWriteResult)
```

wroteFrame is called on the serve goroutine with the result of whatever happened on writeFrameAsync. 

##### <a name="net-http-type-http2serverConn-scheduleFrameWrite">func (sc *http2serverConn) scheduleFrameWrite()</a>

```Go
func (sc *http2serverConn) scheduleFrameWrite()
```

scheduleFrameWrite tickles the frame writing scheduler. 

If a frame is already being written, nothing happens. This will be called again when the frame is done being written. 

If a frame isn't being written and we need to send one, the best frame to send is selected by writeSched. 

If a frame isn't being written and there's nothing else to send, we flush the write buffer. 

##### <a name="net-http-type-http2serverConn-startGracefulShutdown">func (sc *http2serverConn) startGracefulShutdown()</a>

```Go
func (sc *http2serverConn) startGracefulShutdown()
```

startGracefulShutdown gracefully shuts down a connection. This sends GOAWAY with ErrCodeNo to tell the client we're gracefully shutting down. The connection isn't closed until all current streams are done. 

startGracefulShutdown returns immediately; it does not wait until the connection has shut down. 

##### <a name="net-http-type-http2serverConn-startGracefulShutdownInternal">func (sc *http2serverConn) startGracefulShutdownInternal()</a>

```Go
func (sc *http2serverConn) startGracefulShutdownInternal()
```

##### <a name="net-http-type-http2serverConn-goAway">func (sc *http2serverConn) goAway(code http2ErrCode)</a>

```Go
func (sc *http2serverConn) goAway(code http2ErrCode)
```

##### <a name="net-http-type-http2serverConn-shutDownIn">func (sc *http2serverConn) shutDownIn(d time.Duration)</a>

```Go
func (sc *http2serverConn) shutDownIn(d time.Duration)
```

##### <a name="net-http-type-http2serverConn-resetStream">func (sc *http2serverConn) resetStream(se http2StreamError)</a>

```Go
func (sc *http2serverConn) resetStream(se http2StreamError)
```

##### <a name="net-http-type-http2serverConn-processFrameFromReader">func (sc *http2serverConn) processFrameFromReader(res http2readFrameResult) bool</a>

```Go
func (sc *http2serverConn) processFrameFromReader(res http2readFrameResult) bool
```

processFrameFromReader processes the serve loop's read from readFrameCh from the frame-reading goroutine. processFrameFromReader returns whether the connection should be kept open. 

##### <a name="net-http-type-http2serverConn-processFrame">func (sc *http2serverConn) processFrame(f http2Frame) error</a>

```Go
func (sc *http2serverConn) processFrame(f http2Frame) error
```

##### <a name="net-http-type-http2serverConn-processPing">func (sc *http2serverConn) processPing(f *http2PingFrame) error</a>

```Go
func (sc *http2serverConn) processPing(f *http2PingFrame) error
```

##### <a name="net-http-type-http2serverConn-processWindowUpdate">func (sc *http2serverConn) processWindowUpdate(f *http2WindowUpdateFrame) error</a>

```Go
func (sc *http2serverConn) processWindowUpdate(f *http2WindowUpdateFrame) error
```

##### <a name="net-http-type-http2serverConn-processResetStream">func (sc *http2serverConn) processResetStream(f *http2RSTStreamFrame) error</a>

```Go
func (sc *http2serverConn) processResetStream(f *http2RSTStreamFrame) error
```

##### <a name="net-http-type-http2serverConn-closeStream">func (sc *http2serverConn) closeStream(st *http2stream, err error)</a>

```Go
func (sc *http2serverConn) closeStream(st *http2stream, err error)
```

##### <a name="net-http-type-http2serverConn-processSettings">func (sc *http2serverConn) processSettings(f *http2SettingsFrame) error</a>

```Go
func (sc *http2serverConn) processSettings(f *http2SettingsFrame) error
```

##### <a name="net-http-type-http2serverConn-processSetting">func (sc *http2serverConn) processSetting(s http2Setting) error</a>

```Go
func (sc *http2serverConn) processSetting(s http2Setting) error
```

##### <a name="net-http-type-http2serverConn-processSettingInitialWindowSize">func (sc *http2serverConn) processSettingInitialWindowSize(val uint32) error</a>

```Go
func (sc *http2serverConn) processSettingInitialWindowSize(val uint32) error
```

##### <a name="net-http-type-http2serverConn-processData">func (sc *http2serverConn) processData(f *http2DataFrame) error</a>

```Go
func (sc *http2serverConn) processData(f *http2DataFrame) error
```

##### <a name="net-http-type-http2serverConn-processGoAway">func (sc *http2serverConn) processGoAway(f *http2GoAwayFrame) error</a>

```Go
func (sc *http2serverConn) processGoAway(f *http2GoAwayFrame) error
```

##### <a name="net-http-type-http2serverConn-processHeaders">func (sc *http2serverConn) processHeaders(f *http2MetaHeadersFrame) error</a>

```Go
func (sc *http2serverConn) processHeaders(f *http2MetaHeadersFrame) error
```

##### <a name="net-http-type-http2serverConn-processPriority">func (sc *http2serverConn) processPriority(f *http2PriorityFrame) error</a>

```Go
func (sc *http2serverConn) processPriority(f *http2PriorityFrame) error
```

##### <a name="net-http-type-http2serverConn-newStream">func (sc *http2serverConn) newStream(id, pusherID uint32, state http2streamState) *http2stream</a>

```Go
func (sc *http2serverConn) newStream(id, pusherID uint32, state http2streamState) *http2stream
```

##### <a name="net-http-type-http2serverConn-newWriterAndRequest">func (sc *http2serverConn) newWriterAndRequest(st *http2stream, f *http2MetaHeadersFrame) (*http2responseWriter, *Request, error)</a>

```Go
func (sc *http2serverConn) newWriterAndRequest(st *http2stream, f *http2MetaHeadersFrame) (*http2responseWriter, *Request, error)
```

##### <a name="net-http-type-http2serverConn-newWriterAndRequestNoBody">func (sc *http2serverConn) newWriterAndRequestNoBody(st *http2stream, rp http2requestParam) (*http2responseWriter, *Request, error)</a>

```Go
func (sc *http2serverConn) newWriterAndRequestNoBody(st *http2stream, rp http2requestParam) (*http2responseWriter, *Request, error)
```

##### <a name="net-http-type-http2serverConn-runHandler">func (sc *http2serverConn) runHandler(rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request))</a>

```Go
func (sc *http2serverConn) runHandler(rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request))
```

Run on its own goroutine. 

##### <a name="net-http-type-http2serverConn-writeHeaders">func (sc *http2serverConn) writeHeaders(st *http2stream, headerData *http2writeResHeaders) error</a>

```Go
func (sc *http2serverConn) writeHeaders(st *http2stream, headerData *http2writeResHeaders) error
```

called from handler goroutines. h may be nil. 

##### <a name="net-http-type-http2serverConn-write100ContinueHeaders">func (sc *http2serverConn) write100ContinueHeaders(st *http2stream)</a>

```Go
func (sc *http2serverConn) write100ContinueHeaders(st *http2stream)
```

called from handler goroutines. 

##### <a name="net-http-type-http2serverConn-noteBodyReadFromHandler">func (sc *http2serverConn) noteBodyReadFromHandler(st *http2stream, n int, err error)</a>

```Go
func (sc *http2serverConn) noteBodyReadFromHandler(st *http2stream, n int, err error)
```

called from handler goroutines. Notes that the handler for the given stream ID read n bytes of its body and schedules flow control tokens to be sent. 

##### <a name="net-http-type-http2serverConn-noteBodyRead">func (sc *http2serverConn) noteBodyRead(st *http2stream, n int)</a>

```Go
func (sc *http2serverConn) noteBodyRead(st *http2stream, n int)
```

##### <a name="net-http-type-http2serverConn-sendWindowUpdate">func (sc *http2serverConn) sendWindowUpdate(st *http2stream, n int)</a>

```Go
func (sc *http2serverConn) sendWindowUpdate(st *http2stream, n int)
```

st may be nil for conn-level 

##### <a name="net-http-type-http2serverConn-sendWindowUpdate32">func (sc *http2serverConn) sendWindowUpdate32(st *http2stream, n int32)</a>

```Go
func (sc *http2serverConn) sendWindowUpdate32(st *http2stream, n int32)
```

st may be nil for conn-level 

##### <a name="net-http-type-http2serverConn-startPush">func (sc *http2serverConn) startPush(msg *http2startPushRequest)</a>

```Go
func (sc *http2serverConn) startPush(msg *http2startPushRequest)
```

#### <a name="net-http-type-http2stream">type http2stream struct</a>

```Go
type http2stream struct {
	// immutable:
	sc        *http2serverConn
	id        uint32
	body      *http2pipe       // non-nil if expecting DATA frames
	cw        http2closeWaiter // closed wait stream transitions to closed state
	ctx       context.Context
	cancelCtx func()

	// owned by serverConn's serve loop:
	bodyBytes        int64     // body bytes seen so far
	declBodyBytes    int64     // or -1 if undeclared
	flow             http2flow // limits writing from Handler to client
	inflow           http2flow // what the client is allowed to POST/etc to us
	state            http2streamState
	resetQueued      bool        // RST_STREAM queued for write; set by sc.resetStream
	gotTrailerHeader bool        // HEADER frame for trailers was seen
	wroteHeaders     bool        // whether we wrote headers (not status 100)
	writeDeadline    *time.Timer // nil if unused

	trailer    Header // accumulated trailers
	reqTrailer Header // handler's Request.Trailer
}
```

stream represents a stream. This is the minimal metadata needed by the serve goroutine. Most of the actual stream state is owned by the http.Handler's goroutine in the responseWriter. Because the responseWriter's responseWriterState is recycled at the end of a handler, this struct intentionally has no pointer to the *responseWriter{,State} itself, as the Handler ending nils out the responseWriter's state field. 

##### <a name="net-http-type-http2stream-isPushed">func (st *http2stream) isPushed() bool</a>

```Go
func (st *http2stream) isPushed() bool
```

isPushed reports whether the stream is server-initiated. 

##### <a name="net-http-type-http2stream-endStream">func (st *http2stream) endStream()</a>

```Go
func (st *http2stream) endStream()
```

endStream closes a Request.Body's pipe. It is called when a DATA frame says a request body is over (or after trailers). 

##### <a name="net-http-type-http2stream-copyTrailersToHandlerRequest">func (st *http2stream) copyTrailersToHandlerRequest()</a>

```Go
func (st *http2stream) copyTrailersToHandlerRequest()
```

copyTrailersToHandlerRequest is run in the Handler's goroutine in its Request.Body.Read just before it gets io.EOF. 

##### <a name="net-http-type-http2stream-onWriteTimeout">func (st *http2stream) onWriteTimeout()</a>

```Go
func (st *http2stream) onWriteTimeout()
```

onWriteTimeout is run on its own goroutine (from time.AfterFunc) when the stream's WriteTimeout has fired. 

##### <a name="net-http-type-http2stream-processTrailerHeaders">func (st *http2stream) processTrailerHeaders(f *http2MetaHeadersFrame) error</a>

```Go
func (st *http2stream) processTrailerHeaders(f *http2MetaHeadersFrame) error
```

#### <a name="net-http-type-http2readFrameResult">type http2readFrameResult struct</a>

```Go
type http2readFrameResult struct {
	f   http2Frame // valid until readMore is called
	err error

	// readMore should be called once the consumer no longer needs or
	// retains f. After readMore, f is invalid and more frames can be
	// read.
	readMore func()
}
```

#### <a name="net-http-type-http2frameWriteResult">type http2frameWriteResult struct</a>

```Go
type http2frameWriteResult struct {
	_   http2incomparable
	wr  http2FrameWriteRequest // what was written (or attempted)
	err error                  // result of the writeFrame call
}
```

frameWriteResult is the message passed from writeFrameAsync to the serve goroutine. 

#### <a name="net-http-type-http2serverMessage">type http2serverMessage int</a>

```Go
type http2serverMessage int
```

#### <a name="net-http-type-http2requestParam">type http2requestParam struct</a>

```Go
type http2requestParam struct {
	method                  string
	scheme, authority, path string
	header                  Header
}
```

#### <a name="net-http-type-http2bodyReadMsg">type http2bodyReadMsg struct</a>

```Go
type http2bodyReadMsg struct {
	st *http2stream
	n  int
}
```

A bodyReadMsg tells the server loop that the http.Handler read n bytes of the DATA from the client on the given stream. 

#### <a name="net-http-type-http2requestBody">type http2requestBody struct</a>

```Go
type http2requestBody struct {
	_             http2incomparable
	stream        *http2stream
	conn          *http2serverConn
	closed        bool       // for use by Close only
	sawEOF        bool       // for use by Read only
	pipe          *http2pipe // non-nil if we have a HTTP entity message body
	needsContinue bool       // need to send a 100-continue
}
```

requestBody is the Handler's Request.Body type. Read and Close may be called concurrently. 

##### <a name="net-http-type-http2requestBody-Close">func (b *http2requestBody) Close() error</a>

```Go
func (b *http2requestBody) Close() error
```

##### <a name="net-http-type-http2requestBody-Read">func (b *http2requestBody) Read(p []byte) (n int, err error)</a>

```Go
func (b *http2requestBody) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-http2responseWriter">type http2responseWriter struct</a>

```Go
type http2responseWriter struct {
	rws *http2responseWriterState
}
```

responseWriter is the http.ResponseWriter implementation. It's intentionally small (1 pointer wide) to minimize garbage. The responseWriterState pointer inside is zeroed at the end of a request (in handlerDone) and calls on the responseWriter thereafter simply crash (caller's mistake), but the much larger responseWriterState and buffers are reused between multiple requests. 

##### <a name="net-http-type-http2responseWriter-Flush">func (w *http2responseWriter) Flush()</a>

```Go
func (w *http2responseWriter) Flush()
```

##### <a name="net-http-type-http2responseWriter-CloseNotify">func (w *http2responseWriter) CloseNotify() <-chan bool</a>

```Go
func (w *http2responseWriter) CloseNotify() <-chan bool
```

##### <a name="net-http-type-http2responseWriter-Header">func (w *http2responseWriter) Header() Header</a>

```Go
func (w *http2responseWriter) Header() Header
```

##### <a name="net-http-type-http2responseWriter-WriteHeader">func (w *http2responseWriter) WriteHeader(code int)</a>

```Go
func (w *http2responseWriter) WriteHeader(code int)
```

##### <a name="net-http-type-http2responseWriter-Write">func (w *http2responseWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w *http2responseWriter) Write(p []byte) (n int, err error)
```

The Life Of A Write is like this: 

* Handler calls w.Write or w.WriteString -> * -> rws.bw (*bufio.Writer) -> * (Handler might call Flush) * -> chunkWriter{rws} * -> responseWriterState.writeChunk(p []byte) * -> responseWriterState.writeChunk (most of the magic; see comment there) 

##### <a name="net-http-type-http2responseWriter-WriteString">func (w *http2responseWriter) WriteString(s string) (n int, err error)</a>

```Go
func (w *http2responseWriter) WriteString(s string) (n int, err error)
```

##### <a name="net-http-type-http2responseWriter-write">func (w *http2responseWriter) write(lenData int, dataB []byte, dataS string) (n int, err error)</a>

```Go
func (w *http2responseWriter) write(lenData int, dataB []byte, dataS string) (n int, err error)
```

either dataB or dataS is non-zero. 

##### <a name="net-http-type-http2responseWriter-handlerDone">func (w *http2responseWriter) handlerDone()</a>

```Go
func (w *http2responseWriter) handlerDone()
```

##### <a name="net-http-type-http2responseWriter-Push">func (w *http2responseWriter) Push(target string, opts *PushOptions) error</a>

```Go
func (w *http2responseWriter) Push(target string, opts *PushOptions) error
```

#### <a name="net-http-type-http2responseWriterState">type http2responseWriterState struct</a>

```Go
type http2responseWriterState struct {
	// immutable within a request:
	stream *http2stream
	req    *Request
	body   *http2requestBody // to close at end of request, if DATA frames didn't
	conn   *http2serverConn

	// TODO: adjust buffer writing sizes based on server config, frame size updates from peer, etc
	bw *bufio.Writer // writing to a chunkWriter{this *responseWriterState}

	// mutated by http.Handler goroutine:
	handlerHeader Header   // nil until called
	snapHeader    Header   // snapshot of handlerHeader at WriteHeader time
	trailers      []string // set in writeChunk
	status        int      // status code passed to WriteHeader
	wroteHeader   bool     // WriteHeader called (explicitly or implicitly). Not necessarily sent to user yet.
	sentHeader    bool     // have we sent the header frame?
	handlerDone   bool     // handler has finished
	dirty         bool     // a Write failed; don't reuse this responseWriterState

	sentContentLen int64 // non-zero if handler set a Content-Length header
	wroteBytes     int64

	closeNotifierMu sync.Mutex // guards closeNotifierCh
	closeNotifierCh chan bool  // nil until first used
}
```

##### <a name="net-http-type-http2responseWriterState-hasTrailers">func (rws *http2responseWriterState) hasTrailers() bool</a>

```Go
func (rws *http2responseWriterState) hasTrailers() bool
```

##### <a name="net-http-type-http2responseWriterState-hasNonemptyTrailers">func (rws *http2responseWriterState) hasNonemptyTrailers() bool</a>

```Go
func (rws *http2responseWriterState) hasNonemptyTrailers() bool
```

##### <a name="net-http-type-http2responseWriterState-declareTrailer">func (rws *http2responseWriterState) declareTrailer(k string)</a>

```Go
func (rws *http2responseWriterState) declareTrailer(k string)
```

declareTrailer is called for each Trailer header when the response header is written. It notes that a header will need to be written in the trailers at the end of the response. 

##### <a name="net-http-type-http2responseWriterState-writeChunk">func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error)</a>

```Go
func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error)
```

writeChunk writes chunks from the bufio.Writer. But because bufio.Writer may bypass its chunking, sometimes p may be arbitrarily large. 

writeChunk is also responsible (on the first chunk) for sending the HEADER response. 

##### <a name="net-http-type-http2responseWriterState-promoteUndeclaredTrailers">func (rws *http2responseWriterState) promoteUndeclaredTrailers()</a>

```Go
func (rws *http2responseWriterState) promoteUndeclaredTrailers()
```

promoteUndeclaredTrailers permits http.Handlers to set trailers after the header has already been flushed. Because the Go ResponseWriter interface has no way to set Trailers (only the Header), and because we didn't want to expand the ResponseWriter interface, and because nobody used trailers, and because RFC 7230 says you SHOULD (but not must) predeclare any trailers in the header, the official ResponseWriter rules said trailers in Go must be predeclared, and then we reuse the same ResponseWriter.Header() map to mean both Headers and Trailers. When it's time to write the Trailers, we pick out the fields of Headers that were declared as trailers. That worked for a while, until we found the first major user of Trailers in the wild: gRPC (using them only over http2), and gRPC libraries permit setting trailers mid-stream without predeclaring them. So: change of plans. We still permit the old way, but we also permit this hack: if a Header() key begins with "Trailer:", the suffix of that key is a Trailer. Because ':' is an invalid token byte anyway, there is no ambiguity. (And it's already filtered out) It's mildly hacky, but not terrible. 

This method runs after the Handler is done and promotes any Header fields to be trailers. 

##### <a name="net-http-type-http2responseWriterState-writeHeader">func (rws *http2responseWriterState) writeHeader(code int)</a>

```Go
func (rws *http2responseWriterState) writeHeader(code int)
```

#### <a name="net-http-type-http2chunkWriter">type http2chunkWriter struct</a>

```Go
type http2chunkWriter struct{ rws *http2responseWriterState }
```

##### <a name="net-http-type-http2chunkWriter-Write">func (cw http2chunkWriter) Write(p []byte) (n int, err error)</a>

```Go
func (cw http2chunkWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-http2startPushRequest">type http2startPushRequest struct</a>

```Go
type http2startPushRequest struct {
	parent *http2stream
	method string
	url    *url.URL
	header Header
	done   chan error
}
```

#### <a name="net-http-type-I">type I interface <small>(exported)</small></a>

```Go
type I interface {
	doKeepAlives() bool
}
```

#### <a name="net-http-type-http2Transport">type http2Transport struct</a>

```Go
type http2Transport struct {
	// DialTLS specifies an optional dial function for creating
	// TLS connections for requests.
	//
	// If DialTLS is nil, tls.Dial is used.
	//
	// If the returned net.Conn has a ConnectionState method like tls.Conn,
	// it will be used to set http.Response.TLS.
	DialTLS func(network, addr string, cfg *tls.Config) (net.Conn, error)

	// TLSClientConfig specifies the TLS configuration to use with
	// tls.Client. If nil, the default configuration is used.
	TLSClientConfig *tls.Config

	// ConnPool optionally specifies an alternate connection pool to use.
	// If nil, the default is used.
	ConnPool http2ClientConnPool

	// DisableCompression, if true, prevents the Transport from
	// requesting compression with an "Accept-Encoding: gzip"
	// request header when the Request contains no existing
	// Accept-Encoding value. If the Transport requests gzip on
	// its own and gets a gzipped response, it's transparently
	// decoded in the Response.Body. However, if the user
	// explicitly requested gzip it is not automatically
	// uncompressed.
	DisableCompression bool

	// AllowHTTP, if true, permits HTTP/2 requests using the insecure,
	// plain-text "http" scheme. Note that this does not enable h2c support.
	AllowHTTP bool

	// MaxHeaderListSize is the http2 SETTINGS_MAX_HEADER_LIST_SIZE to
	// send in the initial settings frame. It is how many bytes
	// of response headers are allowed. Unlike the http2 spec, zero here
	// means to use a default limit (currently 10MB). If you actually
	// want to advertise an unlimited value to the peer, Transport
	// interprets the highest possible value here (0xffffffff or 1<<32-1)
	// to mean no limit.
	MaxHeaderListSize uint32

	// StrictMaxConcurrentStreams controls whether the server's
	// SETTINGS_MAX_CONCURRENT_STREAMS should be respected
	// globally. If false, new TCP connections are created to the
	// server as needed to keep each under the per-connection
	// SETTINGS_MAX_CONCURRENT_STREAMS limit. If true, the
	// server's SETTINGS_MAX_CONCURRENT_STREAMS is interpreted as
	// a global limit and callers of RoundTrip block when needed,
	// waiting for their turn.
	StrictMaxConcurrentStreams bool

	// ReadIdleTimeout is the timeout after which a health check using ping
	// frame will be carried out if no frame is received on the connection.
	// Note that a ping response will is considered a received frame, so if
	// there is no other traffic on the connection, the health check will
	// be performed every ReadIdleTimeout interval.
	// If zero, no health check is performed.
	ReadIdleTimeout time.Duration

	// PingTimeout is the timeout after which the connection will be closed
	// if a response to Ping is not received.
	// Defaults to 15s.
	PingTimeout time.Duration

	// t1, if non-nil, is the standard library Transport using
	// this transport. Its settings are used (but not its
	// RoundTrip method, etc).
	t1 *Transport

	connPoolOnce  sync.Once
	connPoolOrDef http2ClientConnPool // non-nil version of ConnPool
}
```

Transport is an HTTP/2 Transport. 

A Transport internally caches connections to servers. It is safe for concurrent use by multiple goroutines. 

##### <a name="net-http-type-http2Transport-http2ConfigureTransports">func http2ConfigureTransports(t1 *Transport) (*http2Transport, error)</a>

```Go
func http2ConfigureTransports(t1 *Transport) (*http2Transport, error)
```

ConfigureTransports configures a net/http HTTP/1 Transport to use HTTP/2. It returns a new HTTP/2 Transport for further configuration. It returns an error if t1 has already been HTTP/2-enabled. 

##### <a name="net-http-type-http2Transport-http2configureTransports">func http2configureTransports(t1 *Transport) (*http2Transport, error)</a>

```Go
func http2configureTransports(t1 *Transport) (*http2Transport, error)
```

##### <a name="net-http-type-http2Transport-maxHeaderListSize">func (t *http2Transport) maxHeaderListSize() uint32</a>

```Go
func (t *http2Transport) maxHeaderListSize() uint32
```

##### <a name="net-http-type-http2Transport-disableCompression">func (t *http2Transport) disableCompression() bool</a>

```Go
func (t *http2Transport) disableCompression() bool
```

##### <a name="net-http-type-http2Transport-pingTimeout">func (t *http2Transport) pingTimeout() time.Duration</a>

```Go
func (t *http2Transport) pingTimeout() time.Duration
```

##### <a name="net-http-type-http2Transport-connPool">func (t *http2Transport) connPool() http2ClientConnPool</a>

```Go
func (t *http2Transport) connPool() http2ClientConnPool
```

##### <a name="net-http-type-http2Transport-initConnPool">func (t *http2Transport) initConnPool()</a>

```Go
func (t *http2Transport) initConnPool()
```

##### <a name="net-http-type-http2Transport-RoundTrip">func (t *http2Transport) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (t *http2Transport) RoundTrip(req *Request) (*Response, error)
```

##### <a name="net-http-type-http2Transport-RoundTripOpt">func (t *http2Transport) RoundTripOpt(req *Request, opt http2RoundTripOpt) (*Response, error)</a>

```Go
func (t *http2Transport) RoundTripOpt(req *Request, opt http2RoundTripOpt) (*Response, error)
```

RoundTripOpt is like RoundTrip, but takes options. 

##### <a name="net-http-type-http2Transport-CloseIdleConnections">func (t *http2Transport) CloseIdleConnections()</a>

```Go
func (t *http2Transport) CloseIdleConnections()
```

CloseIdleConnections closes any connections which were previously connected from previous requests but are now sitting idle. It does not interrupt any connections currently in use. 

##### <a name="net-http-type-http2Transport-dialClientConn">func (t *http2Transport) dialClientConn(addr string, singleUse bool) (*http2ClientConn, error)</a>

```Go
func (t *http2Transport) dialClientConn(addr string, singleUse bool) (*http2ClientConn, error)
```

##### <a name="net-http-type-http2Transport-newTLSConfig">func (t *http2Transport) newTLSConfig(host string) *tls.Config</a>

```Go
func (t *http2Transport) newTLSConfig(host string) *tls.Config
```

##### <a name="net-http-type-http2Transport-dialTLS">func (t *http2Transport) dialTLS() func(string, string, *tls.Config) (net.Conn, error)</a>

```Go
func (t *http2Transport) dialTLS() func(string, string, *tls.Config) (net.Conn, error)
```

##### <a name="net-http-type-http2Transport-dialTLSDefault">func (t *http2Transport) dialTLSDefault(network, addr string, cfg *tls.Config) (net.Conn, error)</a>

```Go
func (t *http2Transport) dialTLSDefault(network, addr string, cfg *tls.Config) (net.Conn, error)
```

##### <a name="net-http-type-http2Transport-disableKeepAlives">func (t *http2Transport) disableKeepAlives() bool</a>

```Go
func (t *http2Transport) disableKeepAlives() bool
```

disableKeepAlives reports whether connections should be closed as soon as possible after handling the first request. 

##### <a name="net-http-type-http2Transport-expectContinueTimeout">func (t *http2Transport) expectContinueTimeout() time.Duration</a>

```Go
func (t *http2Transport) expectContinueTimeout() time.Duration
```

##### <a name="net-http-type-http2Transport-NewClientConn">func (t *http2Transport) NewClientConn(c net.Conn) (*http2ClientConn, error)</a>

```Go
func (t *http2Transport) NewClientConn(c net.Conn) (*http2ClientConn, error)
```

##### <a name="net-http-type-http2Transport-newClientConn">func (t *http2Transport) newClientConn(c net.Conn, singleUse bool) (*http2ClientConn, error)</a>

```Go
func (t *http2Transport) newClientConn(c net.Conn, singleUse bool) (*http2ClientConn, error)
```

##### <a name="net-http-type-http2Transport-vlogf">func (t *http2Transport) vlogf(format string, args ...interface{})</a>

```Go
func (t *http2Transport) vlogf(format string, args ...interface{})
```

##### <a name="net-http-type-http2Transport-logf">func (t *http2Transport) logf(format string, args ...interface{})</a>

```Go
func (t *http2Transport) logf(format string, args ...interface{})
```

##### <a name="net-http-type-http2Transport-getBodyWriterState">func (t *http2Transport) getBodyWriterState(cs *http2clientStream, body io.Reader) (s http2bodyWriterState)</a>

```Go
func (t *http2Transport) getBodyWriterState(cs *http2clientStream, body io.Reader) (s http2bodyWriterState)
```

##### <a name="net-http-type-http2Transport-idleConnTimeout">func (t *http2Transport) idleConnTimeout() time.Duration</a>

```Go
func (t *http2Transport) idleConnTimeout() time.Duration
```

#### <a name="net-http-type-http2ClientConn">type http2ClientConn struct</a>

```Go
type http2ClientConn struct {
	t         *http2Transport
	tconn     net.Conn             // usually *tls.Conn, except specialized impls
	tlsState  *tls.ConnectionState // nil only for specialized impls
	reused    uint32               // whether conn is being reused; atomic
	singleUse bool                 // whether being used for a single http.Request

	// readLoop goroutine fields:
	readerDone chan struct{} // closed on error
	readerErr  error         // set before readerDone is closed

	idleTimeout time.Duration // or 0 for never
	idleTimer   *time.Timer

	mu              sync.Mutex // guards following
	cond            *sync.Cond // hold mu; broadcast on flow/closed changes
	flow            http2flow  // our conn-level flow control quota (cs.flow is per stream)
	inflow          http2flow  // peer's conn-level flow control
	closing         bool
	closed          bool
	wantSettingsAck bool                          // we sent a SETTINGS frame and haven't heard back
	goAway          *http2GoAwayFrame             // if non-nil, the GoAwayFrame we received
	goAwayDebug     string                        // goAway frame's debug data, retained as a string
	streams         map[uint32]*http2clientStream // client-initiated
	nextStreamID    uint32
	pendingRequests int                       // requests blocked and waiting to be sent because len(streams) == maxConcurrentStreams
	pings           map[[8]byte]chan struct{} // in flight ping data to notification channel
	bw              *bufio.Writer
	br              *bufio.Reader
	fr              *http2Framer
	lastActive      time.Time
	lastIdle        time.Time // time last idle
	// Settings from peer: (also guarded by mu)
	maxFrameSize          uint32
	maxConcurrentStreams  uint32
	peerMaxHeaderListSize uint64
	initialWindowSize     uint32

	hbuf    bytes.Buffer // HPACK encoder writes into this
	henc    *hpack.Encoder
	freeBuf [][]byte

	wmu  sync.Mutex // held while writing; acquire AFTER mu if holding both
	werr error      // first write error that has occurred
}
```

ClientConn is the state of a single HTTP/2 client connection to an HTTP/2 server. 

##### <a name="net-http-type-http2ClientConn-healthCheck">func (cc *http2ClientConn) healthCheck()</a>

```Go
func (cc *http2ClientConn) healthCheck()
```

##### <a name="net-http-type-http2ClientConn-setGoAway">func (cc *http2ClientConn) setGoAway(f *http2GoAwayFrame)</a>

```Go
func (cc *http2ClientConn) setGoAway(f *http2GoAwayFrame)
```

##### <a name="net-http-type-http2ClientConn-CanTakeNewRequest">func (cc *http2ClientConn) CanTakeNewRequest() bool</a>

```Go
func (cc *http2ClientConn) CanTakeNewRequest() bool
```

CanTakeNewRequest reports whether the connection can take a new request, meaning it has not been closed or received or sent a GOAWAY. 

##### <a name="net-http-type-http2ClientConn-idleState">func (cc *http2ClientConn) idleState() http2clientConnIdleState</a>

```Go
func (cc *http2ClientConn) idleState() http2clientConnIdleState
```

##### <a name="net-http-type-http2ClientConn-idleStateLocked">func (cc *http2ClientConn) idleStateLocked() (st http2clientConnIdleState)</a>

```Go
func (cc *http2ClientConn) idleStateLocked() (st http2clientConnIdleState)
```

##### <a name="net-http-type-http2ClientConn-canTakeNewRequestLocked">func (cc *http2ClientConn) canTakeNewRequestLocked() bool</a>

```Go
func (cc *http2ClientConn) canTakeNewRequestLocked() bool
```

##### <a name="net-http-type-http2ClientConn-tooIdleLocked">func (cc *http2ClientConn) tooIdleLocked() bool</a>

```Go
func (cc *http2ClientConn) tooIdleLocked() bool
```

tooIdleLocked reports whether this connection has been been sitting idle for too much wall time. 

##### <a name="net-http-type-http2ClientConn-onIdleTimeout">func (cc *http2ClientConn) onIdleTimeout()</a>

```Go
func (cc *http2ClientConn) onIdleTimeout()
```

onIdleTimeout is called from a time.AfterFunc goroutine. It will only be called when we're idle, but because we're coming from a new goroutine, there could be a new request coming in at the same time, so this simply calls the synchronized closeIfIdle to shut down this connection. The timer could just call closeIfIdle, but this is more clear. 

##### <a name="net-http-type-http2ClientConn-closeIfIdle">func (cc *http2ClientConn) closeIfIdle()</a>

```Go
func (cc *http2ClientConn) closeIfIdle()
```

##### <a name="net-http-type-http2ClientConn-Shutdown">func (cc *http2ClientConn) Shutdown(ctx context.Context) error</a>

```Go
func (cc *http2ClientConn) Shutdown(ctx context.Context) error
```

Shutdown gracefully close the client connection, waiting for running streams to complete. 

##### <a name="net-http-type-http2ClientConn-sendGoAway">func (cc *http2ClientConn) sendGoAway() error</a>

```Go
func (cc *http2ClientConn) sendGoAway() error
```

##### <a name="net-http-type-http2ClientConn-closeForError">func (cc *http2ClientConn) closeForError(err error) error</a>

```Go
func (cc *http2ClientConn) closeForError(err error) error
```

closes the client connection immediately. In-flight requests are interrupted. err is sent to streams. 

##### <a name="net-http-type-http2ClientConn-Close">func (cc *http2ClientConn) Close() error</a>

```Go
func (cc *http2ClientConn) Close() error
```

Close closes the client connection immediately. 

In-flight requests are interrupted. For a graceful shutdown, use Shutdown instead. 

##### <a name="net-http-type-http2ClientConn-closeForLostPing">func (cc *http2ClientConn) closeForLostPing() error</a>

```Go
func (cc *http2ClientConn) closeForLostPing() error
```

closes the client connection immediately. In-flight requests are interrupted. 

##### <a name="net-http-type-http2ClientConn-frameScratchBuffer">func (cc *http2ClientConn) frameScratchBuffer() []byte</a>

```Go
func (cc *http2ClientConn) frameScratchBuffer() []byte
```

frameBuffer returns a scratch buffer suitable for writing DATA frames. They're capped at the min of the peer's max frame size or 512KB (kinda arbitrarily), but definitely capped so we don't allocate 4GB bufers. 

##### <a name="net-http-type-http2ClientConn-putFrameScratchBuffer">func (cc *http2ClientConn) putFrameScratchBuffer(buf []byte)</a>

```Go
func (cc *http2ClientConn) putFrameScratchBuffer(buf []byte)
```

##### <a name="net-http-type-http2ClientConn-responseHeaderTimeout">func (cc *http2ClientConn) responseHeaderTimeout() time.Duration</a>

```Go
func (cc *http2ClientConn) responseHeaderTimeout() time.Duration
```

##### <a name="net-http-type-http2ClientConn-RoundTrip">func (cc *http2ClientConn) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (cc *http2ClientConn) RoundTrip(req *Request) (*Response, error)
```

##### <a name="net-http-type-http2ClientConn-roundTrip">func (cc *http2ClientConn) roundTrip(req *Request) (res *Response, gotErrAfterReqBodyWrite bool, err error)</a>

```Go
func (cc *http2ClientConn) roundTrip(req *Request) (res *Response, gotErrAfterReqBodyWrite bool, err error)
```

##### <a name="net-http-type-http2ClientConn-awaitOpenSlotForRequest">func (cc *http2ClientConn) awaitOpenSlotForRequest(req *Request) error</a>

```Go
func (cc *http2ClientConn) awaitOpenSlotForRequest(req *Request) error
```

awaitOpenSlotForRequest waits until len(streams) < maxConcurrentStreams. Must hold cc.mu. 

##### <a name="net-http-type-http2ClientConn-writeHeaders">func (cc *http2ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize int, hdrs []byte) error</a>

```Go
func (cc *http2ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize int, hdrs []byte) error
```

requires cc.wmu be held 

##### <a name="net-http-type-http2ClientConn-encodeHeaders">func (cc *http2ClientConn) encodeHeaders(req *Request, addGzipHeader bool, trailers string, contentLength int64) ([]byte, error)</a>

```Go
func (cc *http2ClientConn) encodeHeaders(req *Request, addGzipHeader bool, trailers string, contentLength int64) ([]byte, error)
```

requires cc.mu be held. 

##### <a name="net-http-type-http2ClientConn-encodeTrailers">func (cc *http2ClientConn) encodeTrailers(req *Request) ([]byte, error)</a>

```Go
func (cc *http2ClientConn) encodeTrailers(req *Request) ([]byte, error)
```

requires cc.mu be held. 

##### <a name="net-http-type-http2ClientConn-writeHeader">func (cc *http2ClientConn) writeHeader(name, value string)</a>

```Go
func (cc *http2ClientConn) writeHeader(name, value string)
```

##### <a name="net-http-type-http2ClientConn-newStream">func (cc *http2ClientConn) newStream() *http2clientStream</a>

```Go
func (cc *http2ClientConn) newStream() *http2clientStream
```

requires cc.mu be held. 

##### <a name="net-http-type-http2ClientConn-forgetStreamID">func (cc *http2ClientConn) forgetStreamID(id uint32)</a>

```Go
func (cc *http2ClientConn) forgetStreamID(id uint32)
```

##### <a name="net-http-type-http2ClientConn-streamByID">func (cc *http2ClientConn) streamByID(id uint32, andRemove bool) *http2clientStream</a>

```Go
func (cc *http2ClientConn) streamByID(id uint32, andRemove bool) *http2clientStream
```

##### <a name="net-http-type-http2ClientConn-readLoop">func (cc *http2ClientConn) readLoop()</a>

```Go
func (cc *http2ClientConn) readLoop()
```

readLoop runs in its own goroutine and reads and dispatches frames. 

##### <a name="net-http-type-http2ClientConn-Ping">func (cc *http2ClientConn) Ping(ctx context.Context) error</a>

```Go
func (cc *http2ClientConn) Ping(ctx context.Context) error
```

Ping sends a PING frame to the server and waits for the ack. 

##### <a name="net-http-type-http2ClientConn-writeStreamReset">func (cc *http2ClientConn) writeStreamReset(streamID uint32, code http2ErrCode, err error)</a>

```Go
func (cc *http2ClientConn) writeStreamReset(streamID uint32, code http2ErrCode, err error)
```

##### <a name="net-http-type-http2ClientConn-logf">func (cc *http2ClientConn) logf(format string, args ...interface{})</a>

```Go
func (cc *http2ClientConn) logf(format string, args ...interface{})
```

##### <a name="net-http-type-http2ClientConn-vlogf">func (cc *http2ClientConn) vlogf(format string, args ...interface{})</a>

```Go
func (cc *http2ClientConn) vlogf(format string, args ...interface{})
```

#### <a name="net-http-type-http2clientStream">type http2clientStream struct</a>

```Go
type http2clientStream struct {
	cc            *http2ClientConn
	req           *Request
	trace         *httptrace.ClientTrace // or nil
	ID            uint32
	resc          chan http2resAndError
	bufPipe       http2pipe // buffered pipe with the flow-controlled response payload
	startedWrite  bool      // started request body write; guarded by cc.mu
	requestedGzip bool
	on100         func() // optional code to run if get a 100 continue response

	flow        http2flow // guarded by cc.mu
	inflow      http2flow // guarded by cc.mu
	bytesRemain int64     // -1 means unknown; owned by transportResponseBody.Read
	readErr     error     // sticky read error; owned by transportResponseBody.Read
	stopReqBody error     // if non-nil, stop writing req body; guarded by cc.mu
	didReset    bool      // whether we sent a RST_STREAM to the server; guarded by cc.mu

	peerReset chan struct{} // closed on peer reset
	resetErr  error         // populated before peerReset is closed

	done chan struct{} // closed when stream remove from cc.streams map; close calls guarded by cc.mu

	// owned by clientConnReadLoop:
	firstByte    bool  // got the first response byte
	pastHeaders  bool  // got first MetaHeadersFrame (actual headers)
	pastTrailers bool  // got optional second MetaHeadersFrame (trailers)
	num1xx       uint8 // number of 1xx responses seen

	trailer    Header  // accumulated trailers
	resTrailer *Header // client's Response.Trailer
}
```

clientStream is the state for a single HTTP/2 stream. One of these is created for each Transport.RoundTrip call. 

##### <a name="net-http-type-http2clientStream-get1xxTraceFunc">func (cs *http2clientStream) get1xxTraceFunc() func(int, textproto.MIMEHeader) error</a>

```Go
func (cs *http2clientStream) get1xxTraceFunc() func(int, textproto.MIMEHeader) error
```

get1xxTraceFunc returns the value of request's httptrace.ClientTrace.Got1xxResponse func, if any. It returns nil if not set or if the Go version is too old. 

##### <a name="net-http-type-http2clientStream-awaitRequestCancel">func (cs *http2clientStream) awaitRequestCancel(req *Request)</a>

```Go
func (cs *http2clientStream) awaitRequestCancel(req *Request)
```

awaitRequestCancel waits for the user to cancel a request, its context to expire, or for the request to be done (any way it might be removed from the cc.streams map: peer reset, successful completion, TCP connection breakage, etc). If the request is canceled, then cs will be canceled and closed. 

##### <a name="net-http-type-http2clientStream-cancelStream">func (cs *http2clientStream) cancelStream()</a>

```Go
func (cs *http2clientStream) cancelStream()
```

##### <a name="net-http-type-http2clientStream-checkResetOrDone">func (cs *http2clientStream) checkResetOrDone() error</a>

```Go
func (cs *http2clientStream) checkResetOrDone() error
```

checkResetOrDone reports any error sent in a RST_STREAM frame by the server, or errStreamClosed if the stream is complete. 

##### <a name="net-http-type-http2clientStream-getStartedWrite">func (cs *http2clientStream) getStartedWrite() bool</a>

```Go
func (cs *http2clientStream) getStartedWrite() bool
```

##### <a name="net-http-type-http2clientStream-abortRequestBodyWrite">func (cs *http2clientStream) abortRequestBodyWrite(err error)</a>

```Go
func (cs *http2clientStream) abortRequestBodyWrite(err error)
```

##### <a name="net-http-type-http2clientStream-writeRequestBody">func (cs *http2clientStream) writeRequestBody(body io.Reader, bodyCloser io.Closer) (err error)</a>

```Go
func (cs *http2clientStream) writeRequestBody(body io.Reader, bodyCloser io.Closer) (err error)
```

##### <a name="net-http-type-http2clientStream-awaitFlowControl">func (cs *http2clientStream) awaitFlowControl(maxBytes int) (taken int32, err error)</a>

```Go
func (cs *http2clientStream) awaitFlowControl(maxBytes int) (taken int32, err error)
```

awaitFlowControl waits for [1, min(maxBytes, cc.cs.maxFrameSize)] flow control tokens from the server. It returns either the non-zero number of tokens taken or an error if the stream is dead. 

##### <a name="net-http-type-http2clientStream-copyTrailers">func (cs *http2clientStream) copyTrailers()</a>

```Go
func (cs *http2clientStream) copyTrailers()
```

#### <a name="net-http-type-http2stickyErrWriter">type http2stickyErrWriter struct</a>

```Go
type http2stickyErrWriter struct {
	w   io.Writer
	err *error
}
```

##### <a name="net-http-type-http2stickyErrWriter-Write">func (sew http2stickyErrWriter) Write(p []byte) (n int, err error)</a>

```Go
func (sew http2stickyErrWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-http2noCachedConnError">type http2noCachedConnError struct{}</a>

```Go
type http2noCachedConnError struct{}
```

noCachedConnError is the concrete type of ErrNoCachedConn, which needs to be detected by net/http regardless of whether it's its bundled version (in h2_bundle.go with a rewritten type name) or from a user's x/net/http2. As such, as it has a unique method name (IsHTTP2NoCachedConnError) that net/http sniffs for via func isNoCachedConnError. 

##### <a name="net-http-type-http2noCachedConnError-IsHTTP2NoCachedConnError">func (http2noCachedConnError) IsHTTP2NoCachedConnError()</a>

```Go
func (http2noCachedConnError) IsHTTP2NoCachedConnError()
```

##### <a name="net-http-type-http2noCachedConnError-Error">func (http2noCachedConnError) Error() string</a>

```Go
func (http2noCachedConnError) Error() string
```

#### <a name="net-http-type-http2RoundTripOpt">type http2RoundTripOpt struct</a>

```Go
type http2RoundTripOpt struct {
	// OnlyCachedConn controls whether RoundTripOpt may
	// create a new TCP connection. If set true and
	// no cached connection is available, RoundTripOpt
	// will return ErrNoCachedConn.
	OnlyCachedConn bool
}
```

RoundTripOpt are options for the Transport.RoundTripOpt method. 

#### <a name="net-http-type-http2clientConnIdleState">type http2clientConnIdleState struct</a>

```Go
type http2clientConnIdleState struct {
	canTakeNewRequest bool
	freshConn         bool // whether it's unused by any previous request
}
```

clientConnIdleState describes the suitability of a client connection to initiate a new RoundTrip request. 

#### <a name="net-http-type-http2resAndError">type http2resAndError struct</a>

```Go
type http2resAndError struct {
	_   http2incomparable
	res *Response
	err error
}
```

#### <a name="net-http-type-http2clientConnReadLoop">type http2clientConnReadLoop struct</a>

```Go
type http2clientConnReadLoop struct {
	_             http2incomparable
	cc            *http2ClientConn
	closeWhenIdle bool
}
```

clientConnReadLoop is the state owned by the clientConn's frame-reading readLoop. 

##### <a name="net-http-type-http2clientConnReadLoop-cleanup">func (rl *http2clientConnReadLoop) cleanup()</a>

```Go
func (rl *http2clientConnReadLoop) cleanup()
```

##### <a name="net-http-type-http2clientConnReadLoop-run">func (rl *http2clientConnReadLoop) run() error</a>

```Go
func (rl *http2clientConnReadLoop) run() error
```

##### <a name="net-http-type-http2clientConnReadLoop-processHeaders">func (rl *http2clientConnReadLoop) processHeaders(f *http2MetaHeadersFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processHeaders(f *http2MetaHeadersFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-handleResponse">func (rl *http2clientConnReadLoop) handleResponse(cs *http2clientStream, f *http2MetaHeadersFrame) (*Response, error)</a>

```Go
func (rl *http2clientConnReadLoop) handleResponse(cs *http2clientStream, f *http2MetaHeadersFrame) (*Response, error)
```

may return error types nil, or ConnectionError. Any other error value is a StreamError of type ErrCodeProtocol. The returned error in that case is the detail. 

As a special case, handleResponse may return (nil, nil) to skip the frame (currently only used for 1xx responses). 

##### <a name="net-http-type-http2clientConnReadLoop-processTrailers">func (rl *http2clientConnReadLoop) processTrailers(cs *http2clientStream, f *http2MetaHeadersFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processTrailers(cs *http2clientStream, f *http2MetaHeadersFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processData">func (rl *http2clientConnReadLoop) processData(f *http2DataFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processData(f *http2DataFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-endStream">func (rl *http2clientConnReadLoop) endStream(cs *http2clientStream)</a>

```Go
func (rl *http2clientConnReadLoop) endStream(cs *http2clientStream)
```

##### <a name="net-http-type-http2clientConnReadLoop-endStreamError">func (rl *http2clientConnReadLoop) endStreamError(cs *http2clientStream, err error)</a>

```Go
func (rl *http2clientConnReadLoop) endStreamError(cs *http2clientStream, err error)
```

##### <a name="net-http-type-http2clientConnReadLoop-processGoAway">func (rl *http2clientConnReadLoop) processGoAway(f *http2GoAwayFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processGoAway(f *http2GoAwayFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processSettings">func (rl *http2clientConnReadLoop) processSettings(f *http2SettingsFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processSettings(f *http2SettingsFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processWindowUpdate">func (rl *http2clientConnReadLoop) processWindowUpdate(f *http2WindowUpdateFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processWindowUpdate(f *http2WindowUpdateFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processResetStream">func (rl *http2clientConnReadLoop) processResetStream(f *http2RSTStreamFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processResetStream(f *http2RSTStreamFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processPing">func (rl *http2clientConnReadLoop) processPing(f *http2PingFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processPing(f *http2PingFrame) error
```

##### <a name="net-http-type-http2clientConnReadLoop-processPushPromise">func (rl *http2clientConnReadLoop) processPushPromise(f *http2PushPromiseFrame) error</a>

```Go
func (rl *http2clientConnReadLoop) processPushPromise(f *http2PushPromiseFrame) error
```

#### <a name="net-http-type-http2GoAwayError">type http2GoAwayError struct</a>

```Go
type http2GoAwayError struct {
	LastStreamID uint32
	ErrCode      http2ErrCode
	DebugData    string
}
```

GoAwayError is returned by the Transport when the server closes the TCP connection after sending a GOAWAY frame. 

##### <a name="net-http-type-http2GoAwayError-Error">func (e http2GoAwayError) Error() string</a>

```Go
func (e http2GoAwayError) Error() string
```

#### <a name="net-http-type-http2transportResponseBody">type http2transportResponseBody struct</a>

```Go
type http2transportResponseBody struct {
	cs *http2clientStream
}
```

transportResponseBody is the concrete type of Transport.RoundTrip's Response.Body. It is an io.ReadCloser. On Read, it reads from cs.body. On Close it sends RST_STREAM if EOF wasn't already seen. 

##### <a name="net-http-type-http2transportResponseBody-Read">func (b http2transportResponseBody) Read(p []byte) (n int, err error)</a>

```Go
func (b http2transportResponseBody) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-http2transportResponseBody-Close">func (b http2transportResponseBody) Close() error</a>

```Go
func (b http2transportResponseBody) Close() error
```

#### <a name="net-http-type-http2erringRoundTripper">type http2erringRoundTripper struct</a>

```Go
type http2erringRoundTripper struct{ err error }
```

##### <a name="net-http-type-http2erringRoundTripper-RoundTripErr">func (rt http2erringRoundTripper) RoundTripErr() error</a>

```Go
func (rt http2erringRoundTripper) RoundTripErr() error
```

##### <a name="net-http-type-http2erringRoundTripper-RoundTrip">func (rt http2erringRoundTripper) RoundTrip(*Request) (*Response, error)</a>

```Go
func (rt http2erringRoundTripper) RoundTrip(*Request) (*Response, error)
```

#### <a name="net-http-type-http2gzipReader">type http2gzipReader struct</a>

```Go
type http2gzipReader struct {
	_    http2incomparable
	body io.ReadCloser // underlying Response.Body
	zr   *gzip.Reader  // lazily-initialized gzip reader
	zerr error         // sticky error
}
```

gzipReader wraps a response body so it can lazily call gzip.NewReader on the first call to Read 

##### <a name="net-http-type-http2gzipReader-Read">func (gz *http2gzipReader) Read(p []byte) (n int, err error)</a>

```Go
func (gz *http2gzipReader) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-http2gzipReader-Close">func (gz *http2gzipReader) Close() error</a>

```Go
func (gz *http2gzipReader) Close() error
```

#### <a name="net-http-type-http2errorReader">type http2errorReader struct</a>

```Go
type http2errorReader struct{ err error }
```

##### <a name="net-http-type-http2errorReader-Read">func (r http2errorReader) Read(p []byte) (int, error)</a>

```Go
func (r http2errorReader) Read(p []byte) (int, error)
```

#### <a name="net-http-type-http2bodyWriterState">type http2bodyWriterState struct</a>

```Go
type http2bodyWriterState struct {
	cs     *http2clientStream
	timer  *time.Timer   // if non-nil, we're doing a delayed write
	fnonce *sync.Once    // to call fn with
	fn     func()        // the code to run in the goroutine, writing the body
	resc   chan error    // result of fn's execution
	delay  time.Duration // how long we should delay a delayed write for
}
```

bodyWriterState encapsulates various state around the Transport's writing of the request body, particularly regarding doing delayed writes of the body when the request contains "Expect: 100-continue". 

##### <a name="net-http-type-http2bodyWriterState-cancel">func (s http2bodyWriterState) cancel()</a>

```Go
func (s http2bodyWriterState) cancel()
```

##### <a name="net-http-type-http2bodyWriterState-on100">func (s http2bodyWriterState) on100()</a>

```Go
func (s http2bodyWriterState) on100()
```

##### <a name="net-http-type-http2bodyWriterState-scheduleBodyWrite">func (s http2bodyWriterState) scheduleBodyWrite()</a>

```Go
func (s http2bodyWriterState) scheduleBodyWrite()
```

scheduleBodyWrite starts writing the body, either immediately (in the common case) or after the delay timeout. It should not be called until after the headers have been written. 

#### <a name="net-http-type-http2noDialH2RoundTripper">type http2noDialH2RoundTripper struct</a>

```Go
type http2noDialH2RoundTripper struct{ *http2Transport }
```

noDialH2RoundTripper is a RoundTripper which only tries to complete the request if there's already has a cached connection to the host. (The field is exported so it can be accessed via reflect from net/http; tested by TestNoDialH2RoundTripperType) 

##### <a name="net-http-type-http2noDialH2RoundTripper-RoundTrip">func (rt http2noDialH2RoundTripper) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (rt http2noDialH2RoundTripper) RoundTrip(req *Request) (*Response, error)
```

#### <a name="net-http-type-http2writeFramer">type http2writeFramer interface</a>

```Go
type http2writeFramer interface {
	writeFrame(http2writeContext) error

	// staysWithinBuffer reports whether this writer promises that
	// it will only write less than or equal to size bytes, and it
	// won't Flush the write context.
	staysWithinBuffer(size int) bool
}
```

writeFramer is implemented by any type that is used to write frames. 

#### <a name="net-http-type-http2writeContext">type http2writeContext interface</a>

```Go
type http2writeContext interface {
	Framer() *http2Framer
	Flush() error
	CloseConn() error
	// HeaderEncoder returns an HPACK encoder that writes to the
	// returned buffer.
	HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)
}
```

writeContext is the interface needed by the various frame writer types below. All the writeFrame methods below are scheduled via the frame writing scheduler (see writeScheduler in writesched.go). 

This interface is implemented by *serverConn. 

TODO: decide whether to a) use this in the client code (which didn't end up using this yet, because it has a simpler design, not currently implementing priorities), or b) delete this and make the server code a bit more concrete. 

#### <a name="net-http-type-http2flushFrameWriter">type http2flushFrameWriter struct{}</a>

```Go
type http2flushFrameWriter struct{}
```

##### <a name="net-http-type-http2flushFrameWriter-writeFrame">func (http2flushFrameWriter) writeFrame(ctx http2writeContext) error</a>

```Go
func (http2flushFrameWriter) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2flushFrameWriter-staysWithinBuffer">func (http2flushFrameWriter) staysWithinBuffer(max int) bool</a>

```Go
func (http2flushFrameWriter) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writeSettings">type http2writeSettings []http.http2Setting</a>

```Go
type http2writeSettings []http2Setting
```

##### <a name="net-http-type-http2writeSettings-staysWithinBuffer">func (s http2writeSettings) staysWithinBuffer(max int) bool</a>

```Go
func (s http2writeSettings) staysWithinBuffer(max int) bool
```

##### <a name="net-http-type-http2writeSettings-writeFrame">func (s http2writeSettings) writeFrame(ctx http2writeContext) error</a>

```Go
func (s http2writeSettings) writeFrame(ctx http2writeContext) error
```

#### <a name="net-http-type-http2writeGoAway">type http2writeGoAway struct</a>

```Go
type http2writeGoAway struct {
	maxStreamID uint32
	code        http2ErrCode
}
```

##### <a name="net-http-type-http2writeGoAway-writeFrame">func (p *http2writeGoAway) writeFrame(ctx http2writeContext) error</a>

```Go
func (p *http2writeGoAway) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writeGoAway-staysWithinBuffer">func (*http2writeGoAway) staysWithinBuffer(max int) bool</a>

```Go
func (*http2writeGoAway) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writeData">type http2writeData struct</a>

```Go
type http2writeData struct {
	streamID  uint32
	p         []byte
	endStream bool
}
```

##### <a name="net-http-type-http2writeData-String">func (w *http2writeData) String() string</a>

```Go
func (w *http2writeData) String() string
```

##### <a name="net-http-type-http2writeData-writeFrame">func (w *http2writeData) writeFrame(ctx http2writeContext) error</a>

```Go
func (w *http2writeData) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writeData-staysWithinBuffer">func (w *http2writeData) staysWithinBuffer(max int) bool</a>

```Go
func (w *http2writeData) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2handlerPanicRST">type http2handlerPanicRST struct</a>

```Go
type http2handlerPanicRST struct {
	StreamID uint32
}
```

handlerPanicRST is the message sent from handler goroutines when the handler panics. 

##### <a name="net-http-type-http2handlerPanicRST-writeFrame">func (hp http2handlerPanicRST) writeFrame(ctx http2writeContext) error</a>

```Go
func (hp http2handlerPanicRST) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2handlerPanicRST-staysWithinBuffer">func (hp http2handlerPanicRST) staysWithinBuffer(max int) bool</a>

```Go
func (hp http2handlerPanicRST) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writePingAck">type http2writePingAck struct</a>

```Go
type http2writePingAck struct{ pf *http2PingFrame }
```

##### <a name="net-http-type-http2writePingAck-writeFrame">func (w http2writePingAck) writeFrame(ctx http2writeContext) error</a>

```Go
func (w http2writePingAck) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writePingAck-staysWithinBuffer">func (w http2writePingAck) staysWithinBuffer(max int) bool</a>

```Go
func (w http2writePingAck) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writeSettingsAck">type http2writeSettingsAck struct{}</a>

```Go
type http2writeSettingsAck struct{}
```

##### <a name="net-http-type-http2writeSettingsAck-writeFrame">func (http2writeSettingsAck) writeFrame(ctx http2writeContext) error</a>

```Go
func (http2writeSettingsAck) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writeSettingsAck-staysWithinBuffer">func (http2writeSettingsAck) staysWithinBuffer(max int) bool</a>

```Go
func (http2writeSettingsAck) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writeResHeaders">type http2writeResHeaders struct</a>

```Go
type http2writeResHeaders struct {
	streamID    uint32
	httpResCode int      // 0 means no ":status" line
	h           Header   // may be nil
	trailers    []string // if non-nil, which keys of h to write. nil means all.
	endStream   bool

	date          string
	contentType   string
	contentLength string
}
```

writeResHeaders is a request to write a HEADERS and 0+ CONTINUATION frames for HTTP response headers or trailers from a server handler. 

##### <a name="net-http-type-http2writeResHeaders-staysWithinBuffer">func (w *http2writeResHeaders) staysWithinBuffer(max int) bool</a>

```Go
func (w *http2writeResHeaders) staysWithinBuffer(max int) bool
```

##### <a name="net-http-type-http2writeResHeaders-writeFrame">func (w *http2writeResHeaders) writeFrame(ctx http2writeContext) error</a>

```Go
func (w *http2writeResHeaders) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writeResHeaders-writeHeaderBlock">func (w *http2writeResHeaders) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error</a>

```Go
func (w *http2writeResHeaders) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error
```

#### <a name="net-http-type-http2writePushPromise">type http2writePushPromise struct</a>

```Go
type http2writePushPromise struct {
	streamID uint32   // pusher stream
	method   string   // for :method
	url      *url.URL // for :scheme, :authority, :path
	h        Header

	// Creates an ID for a pushed stream. This runs on serveG just before
	// the frame is written. The returned ID is copied to promisedID.
	allocatePromisedID func() (uint32, error)
	promisedID         uint32
}
```

writePushPromise is a request to write a PUSH_PROMISE and 0+ CONTINUATION frames. 

##### <a name="net-http-type-http2writePushPromise-staysWithinBuffer">func (w *http2writePushPromise) staysWithinBuffer(max int) bool</a>

```Go
func (w *http2writePushPromise) staysWithinBuffer(max int) bool
```

##### <a name="net-http-type-http2writePushPromise-writeFrame">func (w *http2writePushPromise) writeFrame(ctx http2writeContext) error</a>

```Go
func (w *http2writePushPromise) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2writePushPromise-writeHeaderBlock">func (w *http2writePushPromise) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error</a>

```Go
func (w *http2writePushPromise) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error
```

#### <a name="net-http-type-http2write100ContinueHeadersFrame">type http2write100ContinueHeadersFrame struct</a>

```Go
type http2write100ContinueHeadersFrame struct {
	streamID uint32
}
```

##### <a name="net-http-type-http2write100ContinueHeadersFrame-writeFrame">func (w http2write100ContinueHeadersFrame) writeFrame(ctx http2writeContext) error</a>

```Go
func (w http2write100ContinueHeadersFrame) writeFrame(ctx http2writeContext) error
```

##### <a name="net-http-type-http2write100ContinueHeadersFrame-staysWithinBuffer">func (w http2write100ContinueHeadersFrame) staysWithinBuffer(max int) bool</a>

```Go
func (w http2write100ContinueHeadersFrame) staysWithinBuffer(max int) bool
```

#### <a name="net-http-type-http2writeWindowUpdate">type http2writeWindowUpdate struct</a>

```Go
type http2writeWindowUpdate struct {
	streamID uint32 // or 0 for conn-level
	n        uint32
}
```

##### <a name="net-http-type-http2writeWindowUpdate-staysWithinBuffer">func (wu http2writeWindowUpdate) staysWithinBuffer(max int) bool</a>

```Go
func (wu http2writeWindowUpdate) staysWithinBuffer(max int) bool
```

##### <a name="net-http-type-http2writeWindowUpdate-writeFrame">func (wu http2writeWindowUpdate) writeFrame(ctx http2writeContext) error</a>

```Go
func (wu http2writeWindowUpdate) writeFrame(ctx http2writeContext) error
```

#### <a name="net-http-type-http2WriteScheduler">type http2WriteScheduler interface</a>

```Go
type http2WriteScheduler interface {
	// OpenStream opens a new stream in the write scheduler.
	// It is illegal to call this with streamID=0 or with a streamID that is
	// already open -- the call may panic.
	OpenStream(streamID uint32, options http2OpenStreamOptions)

	// CloseStream closes a stream in the write scheduler. Any frames queued on
	// this stream should be discarded. It is illegal to call this on a stream
	// that is not open -- the call may panic.
	CloseStream(streamID uint32)

	// AdjustStream adjusts the priority of the given stream. This may be called
	// on a stream that has not yet been opened or has been closed. Note that
	// RFC 7540 allows PRIORITY frames to be sent on streams in any state. See:
	// https://tools.ietf.org/html/rfc7540#section-5.1
	AdjustStream(streamID uint32, priority http2PriorityParam)

	// Push queues a frame in the scheduler. In most cases, this will not be
	// called with wr.StreamID()!=0 unless that stream is currently open. The one
	// exception is RST_STREAM frames, which may be sent on idle or closed streams.
	Push(wr http2FrameWriteRequest)

	// Pop dequeues the next frame to write. Returns false if no frames can
	// be written. Frames with a given wr.StreamID() are Pop'd in the same
	// order they are Push'd. No frames should be discarded except by CloseStream.
	Pop() (wr http2FrameWriteRequest, ok bool)
}
```

WriteScheduler is the interface implemented by HTTP/2 write schedulers. Methods are never called concurrently. 

##### <a name="net-http-type-http2WriteScheduler-http2NewPriorityWriteScheduler">func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler</a>

```Go
func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler
```

NewPriorityWriteScheduler constructs a WriteScheduler that schedules frames by following HTTP/2 priorities as described in RFC 7540 Section 5.3. If cfg is nil, default options are used. 

##### <a name="net-http-type-http2WriteScheduler-http2NewRandomWriteScheduler">func http2NewRandomWriteScheduler() http2WriteScheduler</a>

```Go
func http2NewRandomWriteScheduler() http2WriteScheduler
```

NewRandomWriteScheduler constructs a WriteScheduler that ignores HTTP/2 priorities. Control frames like SETTINGS and PING are written before DATA frames, but if no control frames are queued and multiple streams have queued HEADERS or DATA frames, Pop selects a ready stream arbitrarily. 

#### <a name="net-http-type-http2OpenStreamOptions">type http2OpenStreamOptions struct</a>

```Go
type http2OpenStreamOptions struct {
	// PusherID is zero if the stream was initiated by the client. Otherwise,
	// PusherID names the stream that pushed the newly opened stream.
	PusherID uint32
}
```

OpenStreamOptions specifies extra options for WriteScheduler.OpenStream. 

#### <a name="net-http-type-http2FrameWriteRequest">type http2FrameWriteRequest struct</a>

```Go
type http2FrameWriteRequest struct {
	// write is the interface value that does the writing, once the
	// WriteScheduler has selected this frame to write. The write
	// functions are all defined in write.go.
	write http2writeFramer

	// stream is the stream on which this frame will be written.
	// nil for non-stream frames like PING and SETTINGS.
	stream *http2stream

	// done, if non-nil, must be a buffered channel with space for
	// 1 message and is sent the return value from write (or an
	// earlier error) when the frame has been written.
	done chan error
}
```

FrameWriteRequest is a request to write a frame. 

##### <a name="net-http-type-http2FrameWriteRequest-StreamID">func (wr http2FrameWriteRequest) StreamID() uint32</a>

```Go
func (wr http2FrameWriteRequest) StreamID() uint32
```

StreamID returns the id of the stream this frame will be written to. 0 is used for non-stream frames such as PING and SETTINGS. 

##### <a name="net-http-type-http2FrameWriteRequest-isControl">func (wr http2FrameWriteRequest) isControl() bool</a>

```Go
func (wr http2FrameWriteRequest) isControl() bool
```

isControl reports whether wr is a control frame for MaxQueuedControlFrames purposes. That includes non-stream frames and RST_STREAM frames. 

##### <a name="net-http-type-http2FrameWriteRequest-DataSize">func (wr http2FrameWriteRequest) DataSize() int</a>

```Go
func (wr http2FrameWriteRequest) DataSize() int
```

DataSize returns the number of flow control bytes that must be consumed to write this entire frame. This is 0 for non-DATA frames. 

##### <a name="net-http-type-http2FrameWriteRequest-Consume">func (wr http2FrameWriteRequest) Consume(n int32) (http2FrameWriteRequest, http2FrameWriteRequest, int)</a>

```Go
func (wr http2FrameWriteRequest) Consume(n int32) (http2FrameWriteRequest, http2FrameWriteRequest, int)
```

Consume consumes min(n, available) bytes from this frame, where available is the number of flow control bytes available on the stream. Consume returns 0, 1, or 2 frames, where the integer return value gives the number of frames returned. 

If flow control prevents consuming any bytes, this returns (_, _, 0). If the entire frame was consumed, this returns (wr, _, 1). Otherwise, this returns (consumed, rest, 2), where 'consumed' contains the consumed bytes and 'rest' contains the remaining bytes. The consumed bytes are deducted from the underlying stream's flow control budget. 

##### <a name="net-http-type-http2FrameWriteRequest-String">func (wr http2FrameWriteRequest) String() string</a>

```Go
func (wr http2FrameWriteRequest) String() string
```

String is for debugging only. 

##### <a name="net-http-type-http2FrameWriteRequest-replyToWriter">func (wr *http2FrameWriteRequest) replyToWriter(err error)</a>

```Go
func (wr *http2FrameWriteRequest) replyToWriter(err error)
```

replyToWriter sends err to wr.done and panics if the send must block This does nothing if wr.done is nil. 

#### <a name="net-http-type-http2writeQueue">type http2writeQueue struct</a>

```Go
type http2writeQueue struct {
	s []http2FrameWriteRequest
}
```

writeQueue is used by implementations of WriteScheduler. 

##### <a name="net-http-type-http2writeQueue-empty">func (q *http2writeQueue) empty() bool</a>

```Go
func (q *http2writeQueue) empty() bool
```

##### <a name="net-http-type-http2writeQueue-push">func (q *http2writeQueue) push(wr http2FrameWriteRequest)</a>

```Go
func (q *http2writeQueue) push(wr http2FrameWriteRequest)
```

##### <a name="net-http-type-http2writeQueue-shift">func (q *http2writeQueue) shift() http2FrameWriteRequest</a>

```Go
func (q *http2writeQueue) shift() http2FrameWriteRequest
```

##### <a name="net-http-type-http2writeQueue-consume">func (q *http2writeQueue) consume(n int32) (http2FrameWriteRequest, bool)</a>

```Go
func (q *http2writeQueue) consume(n int32) (http2FrameWriteRequest, bool)
```

consume consumes up to n bytes from q.s[0]. If the frame is entirely consumed, it is removed from the queue. If the frame is partially consumed, the frame is kept with the consumed bytes removed. Returns true iff any bytes were consumed. 

#### <a name="net-http-type-http2writeQueuePool">type http2writeQueuePool []*http.http2writeQueue</a>

```Go
type http2writeQueuePool []*http2writeQueue
```

##### <a name="net-http-type-http2writeQueuePool-put">func (p *http2writeQueuePool) put(q *http2writeQueue)</a>

```Go
func (p *http2writeQueuePool) put(q *http2writeQueue)
```

put inserts an unused writeQueue into the pool. 

##### <a name="net-http-type-http2writeQueuePool-get">func (p *http2writeQueuePool) get() *http2writeQueue</a>

```Go
func (p *http2writeQueuePool) get() *http2writeQueue
```

get returns an empty writeQueue. 

#### <a name="net-http-type-http2PriorityWriteSchedulerConfig">type http2PriorityWriteSchedulerConfig struct</a>

```Go
type http2PriorityWriteSchedulerConfig struct {
	// MaxClosedNodesInTree controls the maximum number of closed streams to
	// retain in the priority tree. Setting this to zero saves a small amount
	// of memory at the cost of performance.
	//
	// See RFC 7540, Section 5.3.4:
	//   "It is possible for a stream to become closed while prioritization
	//   information ... is in transit. ... This potentially creates suboptimal
	//   prioritization, since the stream could be given a priority that is
	//   different from what is intended. To avoid these problems, an endpoint
	//   SHOULD retain stream prioritization state for a period after streams
	//   become closed. The longer state is retained, the lower the chance that
	//   streams are assigned incorrect or default priority values."
	MaxClosedNodesInTree int

	// MaxIdleNodesInTree controls the maximum number of idle streams to
	// retain in the priority tree. Setting this to zero saves a small amount
	// of memory at the cost of performance.
	//
	// See RFC 7540, Section 5.3.4:
	//   Similarly, streams that are in the "idle" state can be assigned
	//   priority or become a parent of other streams. This allows for the
	//   creation of a grouping node in the dependency tree, which enables
	//   more flexible expressions of priority. Idle streams begin with a
	//   default priority (Section 5.3.5).
	MaxIdleNodesInTree int

	// ThrottleOutOfOrderWrites enables write throttling to help ensure that
	// data is delivered in priority order. This works around a race where
	// stream B depends on stream A and both streams are about to call Write
	// to queue DATA frames. If B wins the race, a naive scheduler would eagerly
	// write as much data from B as possible, but this is suboptimal because A
	// is a higher-priority stream. With throttling enabled, we write a small
	// amount of data from B to minimize the amount of bandwidth that B can
	// steal from A.
	ThrottleOutOfOrderWrites bool
}
```

PriorityWriteSchedulerConfig configures a priorityWriteScheduler. 

#### <a name="net-http-type-http2priorityNodeState">type http2priorityNodeState int</a>

```Go
type http2priorityNodeState int
```

#### <a name="net-http-type-http2priorityNode">type http2priorityNode struct</a>

```Go
type http2priorityNode struct {
	q            http2writeQueue        // queue of pending frames to write
	id           uint32                 // id of the stream, or 0 for the root of the tree
	weight       uint8                  // the actual weight is weight+1, so the value is in [1,256]
	state        http2priorityNodeState // open | closed | idle
	bytes        int64                  // number of bytes written by this node, or 0 if closed
	subtreeBytes int64                  // sum(node.bytes) of all nodes in this subtree

	// These links form the priority tree.
	parent     *http2priorityNode
	kids       *http2priorityNode // start of the kids list
	prev, next *http2priorityNode // doubly-linked list of siblings
}
```

priorityNode is a node in an HTTP/2 priority tree. Each node is associated with a single stream ID. See RFC 7540, Section 5.3. 

##### <a name="net-http-type-http2priorityNode-setParent">func (n *http2priorityNode) setParent(parent *http2priorityNode)</a>

```Go
func (n *http2priorityNode) setParent(parent *http2priorityNode)
```

##### <a name="net-http-type-http2priorityNode-addBytes">func (n *http2priorityNode) addBytes(b int64)</a>

```Go
func (n *http2priorityNode) addBytes(b int64)
```

##### <a name="net-http-type-http2priorityNode-walkReadyInOrder">func (n *http2priorityNode) walkReadyInOrder(openParent bool, tmp *[]*http2priorityNode, f func(*http2priorityNode, bool) bool) bool</a>

```Go
func (n *http2priorityNode) walkReadyInOrder(openParent bool, tmp *[]*http2priorityNode, f func(*http2priorityNode, bool) bool) bool
```

walkReadyInOrder iterates over the tree in priority order, calling f for each node with a non-empty write queue. When f returns true, this function returns true and the walk halts. tmp is used as scratch space for sorting. 

f(n, openParent) takes two arguments: the node to visit, n, and a bool that is true if any ancestor p of n is still open (ignoring the root node). 

#### <a name="net-http-type-http2sortPriorityNodeSiblings">type http2sortPriorityNodeSiblings []*http.http2priorityNode</a>

```Go
type http2sortPriorityNodeSiblings []*http2priorityNode
```

##### <a name="net-http-type-http2sortPriorityNodeSiblings-Len">func (z http2sortPriorityNodeSiblings) Len() int</a>

```Go
func (z http2sortPriorityNodeSiblings) Len() int
```

##### <a name="net-http-type-http2sortPriorityNodeSiblings-Swap">func (z http2sortPriorityNodeSiblings) Swap(i, k int)</a>

```Go
func (z http2sortPriorityNodeSiblings) Swap(i, k int)
```

##### <a name="net-http-type-http2sortPriorityNodeSiblings-Less">func (z http2sortPriorityNodeSiblings) Less(i, k int) bool</a>

```Go
func (z http2sortPriorityNodeSiblings) Less(i, k int) bool
```

#### <a name="net-http-type-http2priorityWriteScheduler">type http2priorityWriteScheduler struct</a>

```Go
type http2priorityWriteScheduler struct {
	// root is the root of the priority tree, where root.id = 0.
	// The root queues control frames that are not associated with any stream.
	root http2priorityNode

	// nodes maps stream ids to priority tree nodes.
	nodes map[uint32]*http2priorityNode

	// maxID is the maximum stream id in nodes.
	maxID uint32

	// lists of nodes that have been closed or are idle, but are kept in
	// the tree for improved prioritization. When the lengths exceed either
	// maxClosedNodesInTree or maxIdleNodesInTree, old nodes are discarded.
	closedNodes, idleNodes []*http2priorityNode

	// From the config.
	maxClosedNodesInTree int
	maxIdleNodesInTree   int
	writeThrottleLimit   int32
	enableWriteThrottle  bool

	// tmp is scratch space for priorityNode.walkReadyInOrder to reduce allocations.
	tmp []*http2priorityNode

	// pool of empty queues for reuse.
	queuePool http2writeQueuePool
}
```

##### <a name="net-http-type-http2priorityWriteScheduler-OpenStream">func (ws *http2priorityWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)</a>

```Go
func (ws *http2priorityWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)
```

##### <a name="net-http-type-http2priorityWriteScheduler-CloseStream">func (ws *http2priorityWriteScheduler) CloseStream(streamID uint32)</a>

```Go
func (ws *http2priorityWriteScheduler) CloseStream(streamID uint32)
```

##### <a name="net-http-type-http2priorityWriteScheduler-AdjustStream">func (ws *http2priorityWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)</a>

```Go
func (ws *http2priorityWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)
```

##### <a name="net-http-type-http2priorityWriteScheduler-Push">func (ws *http2priorityWriteScheduler) Push(wr http2FrameWriteRequest)</a>

```Go
func (ws *http2priorityWriteScheduler) Push(wr http2FrameWriteRequest)
```

##### <a name="net-http-type-http2priorityWriteScheduler-Pop">func (ws *http2priorityWriteScheduler) Pop() (wr http2FrameWriteRequest, ok bool)</a>

```Go
func (ws *http2priorityWriteScheduler) Pop() (wr http2FrameWriteRequest, ok bool)
```

##### <a name="net-http-type-http2priorityWriteScheduler-addClosedOrIdleNode">func (ws *http2priorityWriteScheduler) addClosedOrIdleNode(list *[]*http2priorityNode, maxSize int, n *http2priorityNode)</a>

```Go
func (ws *http2priorityWriteScheduler) addClosedOrIdleNode(list *[]*http2priorityNode, maxSize int, n *http2priorityNode)
```

##### <a name="net-http-type-http2priorityWriteScheduler-removeNode">func (ws *http2priorityWriteScheduler) removeNode(n *http2priorityNode)</a>

```Go
func (ws *http2priorityWriteScheduler) removeNode(n *http2priorityNode)
```

#### <a name="net-http-type-http2randomWriteScheduler">type http2randomWriteScheduler struct</a>

```Go
type http2randomWriteScheduler struct {
	// zero are frames not associated with a specific stream.
	zero http2writeQueue

	// sq contains the stream-specific queues, keyed by stream ID.
	// When a stream is idle, closed, or emptied, it's deleted
	// from the map.
	sq map[uint32]*http2writeQueue

	// pool of empty queues for reuse.
	queuePool http2writeQueuePool
}
```

##### <a name="net-http-type-http2randomWriteScheduler-OpenStream">func (ws *http2randomWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)</a>

```Go
func (ws *http2randomWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions)
```

##### <a name="net-http-type-http2randomWriteScheduler-CloseStream">func (ws *http2randomWriteScheduler) CloseStream(streamID uint32)</a>

```Go
func (ws *http2randomWriteScheduler) CloseStream(streamID uint32)
```

##### <a name="net-http-type-http2randomWriteScheduler-AdjustStream">func (ws *http2randomWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)</a>

```Go
func (ws *http2randomWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam)
```

##### <a name="net-http-type-http2randomWriteScheduler-Push">func (ws *http2randomWriteScheduler) Push(wr http2FrameWriteRequest)</a>

```Go
func (ws *http2randomWriteScheduler) Push(wr http2FrameWriteRequest)
```

##### <a name="net-http-type-http2randomWriteScheduler-Pop">func (ws *http2randomWriteScheduler) Pop() (http2FrameWriteRequest, bool)</a>

```Go
func (ws *http2randomWriteScheduler) Pop() (http2FrameWriteRequest, bool)
```

#### <a name="net-http-type-Header">type Header map[string][]string <small>(exported)</small></a>

```Go
type Header map[string][]string
```

A Header represents the key-value pairs in an HTTP header. 

The keys should be in canonical form, as returned by CanonicalHeaderKey. 

##### <a name="net-http-type-Header-cloneOrMakeHeader">func cloneOrMakeHeader(hdr Header) Header</a>

```Go
func cloneOrMakeHeader(hdr Header) Header
```

cloneOrMakeHeader invokes Header.Clone but if the result is nil, it'll instead make and return a non-nil Header. 

##### <a name="net-http-type-Header-http2cloneHeader">func http2cloneHeader(h Header) Header</a>

```Go
func http2cloneHeader(h Header) Header
```

##### <a name="net-http-type-Header-fixTrailer">func fixTrailer(header Header, chunked bool) (Header, error)</a>

```Go
func fixTrailer(header Header, chunked bool) (Header, error)
```

Parse the trailer header 

##### <a name="net-http-type-Header-Add">func (h Header) Add(key, value string) <small>(exported)</small></a>

```Go
func (h Header) Add(key, value string)
```

Add adds the key, value pair to the header. It appends to any existing values associated with key. The key is case insensitive; it is canonicalized by CanonicalHeaderKey. 

##### <a name="net-http-type-Header-Set">func (h Header) Set(key, value string) <small>(exported)</small></a>

```Go
func (h Header) Set(key, value string)
```

Set sets the header entries associated with key to the single element value. It replaces any existing values associated with key. The key is case insensitive; it is canonicalized by textproto.CanonicalMIMEHeaderKey. To use non-canonical keys, assign to the map directly. 

##### <a name="net-http-type-Header-Get">func (h Header) Get(key string) string <small>(exported)</small></a>

```Go
func (h Header) Get(key string) string
```

Get gets the first value associated with the given key. If there are no values associated with the key, Get returns "". It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To use non-canonical keys, access the map directly. 

##### <a name="net-http-type-Header-Values">func (h Header) Values(key string) []string <small>(exported)</small></a>

```Go
func (h Header) Values(key string) []string
```

Values returns all values associated with the given key. It is case insensitive; textproto.CanonicalMIMEHeaderKey is used to canonicalize the provided key. To use non-canonical keys, access the map directly. The returned slice is not a copy. 

##### <a name="net-http-type-Header-get">func (h Header) get(key string) string</a>

```Go
func (h Header) get(key string) string
```

get is like Get, but key must already be in CanonicalHeaderKey form. 

##### <a name="net-http-type-Header-has">func (h Header) has(key string) bool</a>

```Go
func (h Header) has(key string) bool
```

has reports whether h has the provided key defined, even if it's set to 0-length slice. 

##### <a name="net-http-type-Header-Del">func (h Header) Del(key string) <small>(exported)</small></a>

```Go
func (h Header) Del(key string)
```

Del deletes the values associated with key. The key is case insensitive; it is canonicalized by CanonicalHeaderKey. 

##### <a name="net-http-type-Header-Write">func (h Header) Write(w io.Writer) error <small>(exported)</small></a>

```Go
func (h Header) Write(w io.Writer) error
```

Write writes a header in wire format. 

##### <a name="net-http-type-Header-write">func (h Header) write(w io.Writer, trace *httptrace.ClientTrace) error</a>

```Go
func (h Header) write(w io.Writer, trace *httptrace.ClientTrace) error
```

##### <a name="net-http-type-Header-Clone">func (h Header) Clone() Header <small>(exported)</small></a>

```Go
func (h Header) Clone() Header
```

Clone returns a copy of h or nil if h is nil. 

##### <a name="net-http-type-Header-sortedKeyValues">func (h Header) sortedKeyValues(exclude map[string]bool) (kvs []keyValues, hs *headerSorter)</a>

```Go
func (h Header) sortedKeyValues(exclude map[string]bool) (kvs []keyValues, hs *headerSorter)
```

sortedKeyValues returns h's keys sorted in the returned kvs slice. The headerSorter used to sort is also returned, for possible return to headerSorterCache. 

##### <a name="net-http-type-Header-WriteSubset">func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error <small>(exported)</small></a>

```Go
func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error
```

WriteSubset writes a header in wire format. If exclude is not nil, keys where exclude[key] == true are not written. Keys are not canonicalized before checking the exclude map. 

##### <a name="net-http-type-Header-writeSubset">func (h Header) writeSubset(w io.Writer, exclude map[string]bool, trace *httptrace.ClientTrace) error</a>

```Go
func (h Header) writeSubset(w io.Writer, exclude map[string]bool, trace *httptrace.ClientTrace) error
```

#### <a name="net-http-type-stringWriter">type stringWriter struct</a>

```Go
type stringWriter struct {
	w io.Writer
}
```

stringWriter implements WriteString on a Writer. 

##### <a name="net-http-type-stringWriter-WriteString">func (w stringWriter) WriteString(s string) (n int, err error)</a>

```Go
func (w stringWriter) WriteString(s string) (n int, err error)
```

#### <a name="net-http-type-keyValues">type keyValues struct</a>

```Go
type keyValues struct {
	key    string
	values []string
}
```

#### <a name="net-http-type-headerSorter">type headerSorter struct</a>

```Go
type headerSorter struct {
	kvs []keyValues
}
```

A headerSorter implements sort.Interface by sorting a []keyValues by key. It's used as a pointer, so it can fit in a sort.Interface interface value without allocation. 

##### <a name="net-http-type-headerSorter-Len">func (s *headerSorter) Len() int</a>

```Go
func (s *headerSorter) Len() int
```

##### <a name="net-http-type-headerSorter-Swap">func (s *headerSorter) Swap(i, j int)</a>

```Go
func (s *headerSorter) Swap(i, j int)
```

##### <a name="net-http-type-headerSorter-Less">func (s *headerSorter) Less(i, j int) bool</a>

```Go
func (s *headerSorter) Less(i, j int) bool
```

#### <a name="net-http-type-incomparable">type incomparable [0]func()</a>

```Go
type incomparable [0]func()
```

incomparable is a zero-width, non-comparable type. Adding it to a struct makes that struct also non-comparable, and generally doesn't add any size (as long as it's first). 

#### <a name="net-http-type-contextKey">type contextKey struct</a>

```Go
type contextKey struct {
	name string
}
```

contextKey is a value for use with context.WithValue. It's used as a pointer so it fits in an interface{} without allocation. 

##### <a name="net-http-type-contextKey-String">func (k *contextKey) String() string</a>

```Go
func (k *contextKey) String() string
```

#### <a name="net-http-type-noBody">type noBody struct{}</a>

```Go
type noBody struct{}
```

##### <a name="net-http-type-noBody-Read">func (noBody) Read([]byte) (int, error)</a>

```Go
func (noBody) Read([]byte) (int, error)
```

##### <a name="net-http-type-noBody-Close">func (noBody) Close() error</a>

```Go
func (noBody) Close() error
```

##### <a name="net-http-type-noBody-WriteTo">func (noBody) WriteTo(io.Writer) (int64, error)</a>

```Go
func (noBody) WriteTo(io.Writer) (int64, error)
```

#### <a name="net-http-type-PushOptions">type PushOptions struct <small>(exported)</small></a>

```Go
type PushOptions struct {
	// Method specifies the HTTP method for the promised request.
	// If set, it must be "GET" or "HEAD". Empty means "GET".
	Method string

	// Header specifies additional promised request headers. This cannot
	// include HTTP/2 pseudo header fields like ":path" and ":scheme",
	// which will be added automatically.
	Header Header
}
```

PushOptions describes options for Pusher.Push. 

#### <a name="net-http-type-Pusher">type Pusher interface <small>(exported)</small></a>

```Go
type Pusher interface {
	// Push initiates an HTTP/2 server push. This constructs a synthetic
	// request using the given target and options, serializes that request
	// into a PUSH_PROMISE frame, then dispatches that request using the
	// server's request handler. If opts is nil, default options are used.
	//
	// The target must either be an absolute path (like "/path") or an absolute
	// URL that contains a valid host and the same scheme as the parent request.
	// If the target is a path, it will inherit the scheme and host of the
	// parent request.
	//
	// The HTTP/2 spec disallows recursive pushes and cross-authority pushes.
	// Push may or may not detect these invalid pushes; however, invalid
	// pushes will be detected and canceled by conforming clients.
	//
	// Handlers that wish to push URL X should call Push before sending any
	// data that may trigger a request for URL X. This avoids a race where the
	// client issues requests for X before receiving the PUSH_PROMISE for X.
	//
	// Push will run in a separate goroutine making the order of arrival
	// non-deterministic. Any required synchronization needs to be implemented
	// by the caller.
	//
	// Push returns ErrNotSupported if the client has disabled push or if push
	// is not supported on the underlying connection.
	Push(target string, opts *PushOptions) error
}
```

Pusher is the interface implemented by ResponseWriters that support HTTP/2 server push. For more background, see [https://tools.ietf.org/html/rfc7540#section-8.2](https://tools.ietf.org/html/rfc7540#section-8.2). 

#### <a name="net-http-type-CookieJar">type CookieJar interface <small>(exported)</small></a>

```Go
type CookieJar interface {
	// SetCookies handles the receipt of the cookies in a reply for the
	// given URL.  It may or may not choose to save the cookies, depending
	// on the jar's policy and implementation.
	SetCookies(u *url.URL, cookies []*Cookie)

	// Cookies returns the cookies to send in a request for the given URL.
	// It is up to the implementation to honor the standard cookie use
	// restrictions such as in RFC 6265.
	Cookies(u *url.URL) []*Cookie
}
```

A CookieJar manages storage and use of cookies in HTTP requests. 

Implementations of CookieJar must be safe for concurrent use by multiple goroutines. 

The net/http/cookiejar package provides a CookieJar implementation. 

#### <a name="net-http-type-ProtocolError">type ProtocolError struct <small>(exported)</small></a>

```Go
type ProtocolError struct {
	ErrorString string
}
```

ProtocolError represents an HTTP protocol error. 

Deprecated: Not all errors in the http package related to protocol errors are of type ProtocolError. 

##### <a name="net-http-type-ProtocolError-Error">func (pe *ProtocolError) Error() string <small>(exported)</small></a>

```Go
func (pe *ProtocolError) Error() string
```

#### <a name="net-http-type-Request">type Request struct <small>(exported)</small></a>

```Go
type Request struct {
	// Method specifies the HTTP method (GET, POST, PUT, etc.).
	// For client requests, an empty string means GET.
	//
	// Go's HTTP client does not support sending a request with
	// the CONNECT method. See the documentation on Transport for
	// details.
	Method string

	// URL specifies either the URI being requested (for server
	// requests) or the URL to access (for client requests).
	//
	// For server requests, the URL is parsed from the URI
	// supplied on the Request-Line as stored in RequestURI.  For
	// most requests, fields other than Path and RawQuery will be
	// empty. (See RFC 7230, Section 5.3)
	//
	// For client requests, the URL's Host specifies the server to
	// connect to, while the Request's Host field optionally
	// specifies the Host header value to send in the HTTP
	// request.
	URL *url.URL

	// The protocol version for incoming server requests.
	//
	// For client requests, these fields are ignored. The HTTP
	// client code always uses either HTTP/1.1 or HTTP/2.
	// See the docs on Transport for details.
	Proto      string // "HTTP/1.0"
	ProtoMajor int    // 1
	ProtoMinor int    // 0

	// Header contains the request header fields either received
	// by the server or to be sent by the client.
	//
	// If a server received a request with header lines,
	//
	//	Host: example.com
	//	accept-encoding: gzip, deflate
	//	Accept-Language: en-us
	//	fOO: Bar
	//	foo: two
	//
	// then
	//
	//	Header = map[string][]string{
	//		"Accept-Encoding": {"gzip, deflate"},
	//		"Accept-Language": {"en-us"},
	//		"Foo": {"Bar", "two"},
	//	}
	//
	// For incoming requests, the Host header is promoted to the
	// Request.Host field and removed from the Header map.
	//
	// HTTP defines that header names are case-insensitive. The
	// request parser implements this by using CanonicalHeaderKey,
	// making the first character and any characters following a
	// hyphen uppercase and the rest lowercase.
	//
	// For client requests, certain headers such as Content-Length
	// and Connection are automatically written when needed and
	// values in Header may be ignored. See the documentation
	// for the Request.Write method.
	Header Header

	// Body is the request's body.
	//
	// For client requests, a nil body means the request has no
	// body, such as a GET request. The HTTP Client's Transport
	// is responsible for calling the Close method.
	//
	// For server requests, the Request Body is always non-nil
	// but will return EOF immediately when no body is present.
	// The Server will close the request body. The ServeHTTP
	// Handler does not need to.
	//
	// Body must allow Read to be called concurrently with Close.
	// In particular, calling Close should unblock a Read waiting
	// for input.
	Body io.ReadCloser

	// GetBody defines an optional func to return a new copy of
	// Body. It is used for client requests when a redirect requires
	// reading the body more than once. Use of GetBody still
	// requires setting Body.
	//
	// For server requests, it is unused.
	GetBody func() (io.ReadCloser, error)

	// ContentLength records the length of the associated content.
	// The value -1 indicates that the length is unknown.
	// Values >= 0 indicate that the given number of bytes may
	// be read from Body.
	//
	// For client requests, a value of 0 with a non-nil Body is
	// also treated as unknown.
	ContentLength int64

	// TransferEncoding lists the transfer encodings from outermost to
	// innermost. An empty list denotes the "identity" encoding.
	// TransferEncoding can usually be ignored; chunked encoding is
	// automatically added and removed as necessary when sending and
	// receiving requests.
	TransferEncoding []string

	// Close indicates whether to close the connection after
	// replying to this request (for servers) or after sending this
	// request and reading its response (for clients).
	//
	// For server requests, the HTTP server handles this automatically
	// and this field is not needed by Handlers.
	//
	// For client requests, setting this field prevents re-use of
	// TCP connections between requests to the same hosts, as if
	// Transport.DisableKeepAlives were set.
	Close bool

	// For server requests, Host specifies the host on which the
	// URL is sought. For HTTP/1 (per RFC 7230, section 5.4), this
	// is either the value of the "Host" header or the host name
	// given in the URL itself. For HTTP/2, it is the value of the
	// ":authority" pseudo-header field.
	// It may be of the form "host:port". For international domain
	// names, Host may be in Punycode or Unicode form. Use
	// golang.org/x/net/idna to convert it to either format if
	// needed.
	// To prevent DNS rebinding attacks, server Handlers should
	// validate that the Host header has a value for which the
	// Handler considers itself authoritative. The included
	// ServeMux supports patterns registered to particular host
	// names and thus protects its registered Handlers.
	//
	// For client requests, Host optionally overrides the Host
	// header to send. If empty, the Request.Write method uses
	// the value of URL.Host. Host may contain an international
	// domain name.
	Host string

	// Form contains the parsed form data, including both the URL
	// field's query parameters and the PATCH, POST, or PUT form data.
	// This field is only available after ParseForm is called.
	// The HTTP client ignores Form and uses Body instead.
	Form url.Values

	// PostForm contains the parsed form data from PATCH, POST
	// or PUT body parameters.
	//
	// This field is only available after ParseForm is called.
	// The HTTP client ignores PostForm and uses Body instead.
	PostForm url.Values

	// MultipartForm is the parsed multipart form, including file uploads.
	// This field is only available after ParseMultipartForm is called.
	// The HTTP client ignores MultipartForm and uses Body instead.
	MultipartForm *multipart.Form

	// Trailer specifies additional headers that are sent after the request
	// body.
	//
	// For server requests, the Trailer map initially contains only the
	// trailer keys, with nil values. (The client declares which trailers it
	// will later send.)  While the handler is reading from Body, it must
	// not reference Trailer. After reading from Body returns EOF, Trailer
	// can be read again and will contain non-nil values, if they were sent
	// by the client.
	//
	// For client requests, Trailer must be initialized to a map containing
	// the trailer keys to later send. The values may be nil or their final
	// values. The ContentLength must be 0 or -1, to send a chunked request.
	// After the HTTP request is sent the map values can be updated while
	// the request body is read. Once the body returns EOF, the caller must
	// not mutate Trailer.
	//
	// Few HTTP clients, servers, or proxies support HTTP trailers.
	Trailer Header

	// RemoteAddr allows HTTP servers and other software to record
	// the network address that sent the request, usually for
	// logging. This field is not filled in by ReadRequest and
	// has no defined format. The HTTP server in this package
	// sets RemoteAddr to an "IP:port" address before invoking a
	// handler.
	// This field is ignored by the HTTP client.
	RemoteAddr string

	// RequestURI is the unmodified request-target of the
	// Request-Line (RFC 7230, Section 3.1.1) as sent by the client
	// to a server. Usually the URL field should be used instead.
	// It is an error to set this field in an HTTP client request.
	RequestURI string

	// TLS allows HTTP servers and other software to record
	// information about the TLS connection on which the request
	// was received. This field is not filled in by ReadRequest.
	// The HTTP server in this package sets the field for
	// TLS-enabled connections before invoking a handler;
	// otherwise it leaves the field nil.
	// This field is ignored by the HTTP client.
	TLS *tls.ConnectionState

	// Cancel is an optional channel whose closure indicates that the client
	// request should be regarded as canceled. Not all implementations of
	// RoundTripper may support Cancel.
	//
	// For server requests, this field is not applicable.
	//
	// Deprecated: Set the Request's context with NewRequestWithContext
	// instead. If a Request's Cancel field and context are both
	// set, it is undefined whether Cancel is respected.
	Cancel <-chan struct{}

	// Response is the redirect response which caused this request
	// to be created. This field is only populated during client
	// redirects.
	Response *Response

	// ctx is either the client or server context. It should only
	// be modified via copying the whole Request using WithContext.
	// It is unexported to prevent people from using Context wrong
	// and mutating the contexts held by callers of the same request.
	ctx context.Context
}
```

A Request represents an HTTP request received by a server or to be sent by a client. 

The field semantics differ slightly between client and server usage. In addition to the notes on the fields below, see the documentation for Request.Write and RoundTripper. 

##### <a name="net-http-type-Request-http2shouldRetryRequest">func http2shouldRetryRequest(req *Request, err error, afterBodyWrite bool) (*Request, error)</a>

```Go
func http2shouldRetryRequest(req *Request, err error, afterBodyWrite bool) (*Request, error)
```

shouldRetryRequest is called by RoundTrip when a request fails to get response headers. It is always called with a non-nil error. It returns either a request to retry (either the same request, or a modified clone), or an error if the request can't be replayed. 

##### <a name="net-http-type-Request-NewRequest">func NewRequest(method, url string, body io.Reader) (*Request, error) <small>(exported)</small></a>

```Go
func NewRequest(method, url string, body io.Reader) (*Request, error)
```

NewRequest wraps NewRequestWithContext using the background context. 

##### <a name="net-http-type-Request-NewRequestWithContext">func NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*Request, error) <small>(exported)</small></a>

```Go
func NewRequestWithContext(ctx context.Context, method, url string, body io.Reader) (*Request, error)
```

NewRequestWithContext returns a new Request given a method, URL, and optional body. 

If the provided body is also an io.Closer, the returned Request.Body is set to body and will be closed by the Client methods Do, Post, and PostForm, and Transport.RoundTrip. 

NewRequestWithContext returns a Request suitable for use with Client.Do or Transport.RoundTrip. To create a request for use with testing a Server Handler, either use the NewRequest function in the net/http/httptest package, use ReadRequest, or manually update the Request fields. For an outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body. See the Request type's documentation for the difference between inbound and outbound request fields. 

If body is of type *bytes.Buffer, *bytes.Reader, or *strings.Reader, the returned request's ContentLength is set to its exact value (instead of -1), GetBody is populated (so 307 and 308 redirects can replay the body), and Body is set to NoBody if the ContentLength is 0. 

##### <a name="net-http-type-Request-ReadRequest">func ReadRequest(b *bufio.Reader) (*Request, error) <small>(exported)</small></a>

```Go
func ReadRequest(b *bufio.Reader) (*Request, error)
```

ReadRequest reads and parses an incoming request from b. 

ReadRequest is a low-level function and should only be used for specialized applications; most code should use the Server to read requests and handle them via the Handler interface. ReadRequest only supports HTTP/1.x requests. For HTTP/2, use golang.org/x/net/http2. 

##### <a name="net-http-type-Request-readRequest">func readRequest(b *bufio.Reader, deleteHostHeader bool) (req *Request, err error)</a>

```Go
func readRequest(b *bufio.Reader, deleteHostHeader bool) (req *Request, err error)
```

##### <a name="net-http-type-Request-setupRewindBody">func setupRewindBody(req *Request) *Request</a>

```Go
func setupRewindBody(req *Request) *Request
```

setupRewindBody returns a new request with a custom body wrapper that can report whether the body needs rewinding. This lets rewindBody avoid an error result when the request does not have GetBody but the body hasn't been read at all yet. 

##### <a name="net-http-type-Request-rewindBody">func rewindBody(req *Request) (rewound *Request, err error)</a>

```Go
func rewindBody(req *Request) (rewound *Request, err error)
```

rewindBody returns a new request with the body rewound. It returns req unmodified if the body does not need rewinding. rewindBody takes care of closing req.Body when appropriate (in all cases except when rewindBody returns req unmodified). 

##### <a name="net-http-type-Request-dummyReq">func dummyReq(method string) *Request</a>

```Go
func dummyReq(method string) *Request
```

##### <a name="net-http-type-Request-dummyReq11">func dummyReq11(method string) *Request</a>

```Go
func dummyReq11(method string) *Request
```

##### <a name="net-http-type-Request-dummyRequest">func dummyRequest(method string) *Request</a>

```Go
func dummyRequest(method string) *Request
```

##### <a name="net-http-type-Request-dummyRequestWithBody">func dummyRequestWithBody(method string) *Request</a>

```Go
func dummyRequestWithBody(method string) *Request
```

##### <a name="net-http-type-Request-dummyRequestWithBodyNoGetBody">func dummyRequestWithBodyNoGetBody(method string) *Request</a>

```Go
func dummyRequestWithBodyNoGetBody(method string) *Request
```

##### <a name="net-http-type-Request-Context">func (r *Request) Context() context.Context <small>(exported)</small></a>

```Go
func (r *Request) Context() context.Context
```

Context returns the request's context. To change the context, use WithContext. 

The returned context is always non-nil; it defaults to the background context. 

For outgoing client requests, the context controls cancellation. 

For incoming server requests, the context is canceled when the client's connection closes, the request is canceled (with HTTP/2), or when the ServeHTTP method returns. 

##### <a name="net-http-type-Request-WithContext">func (r *Request) WithContext(ctx context.Context) *Request <small>(exported)</small></a>

```Go
func (r *Request) WithContext(ctx context.Context) *Request
```

WithContext returns a shallow copy of r with its context changed to ctx. The provided ctx must be non-nil. 

For outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body. 

To create a new request with a context, use NewRequestWithContext. To change the context of a request, such as an incoming request you want to modify before sending back out, use Request.Clone. Between those two uses, it's rare to need WithContext. 

##### <a name="net-http-type-Request-Clone">func (r *Request) Clone(ctx context.Context) *Request <small>(exported)</small></a>

```Go
func (r *Request) Clone(ctx context.Context) *Request
```

Clone returns a deep copy of r with its context changed to ctx. The provided ctx must be non-nil. 

For an outgoing client request, the context controls the entire lifetime of a request and its response: obtaining a connection, sending the request, and reading the response headers and body. 

##### <a name="net-http-type-Request-ProtoAtLeast">func (r *Request) ProtoAtLeast(major, minor int) bool <small>(exported)</small></a>

```Go
func (r *Request) ProtoAtLeast(major, minor int) bool
```

ProtoAtLeast reports whether the HTTP protocol used in the request is at least major.minor. 

##### <a name="net-http-type-Request-UserAgent">func (r *Request) UserAgent() string <small>(exported)</small></a>

```Go
func (r *Request) UserAgent() string
```

UserAgent returns the client's User-Agent, if sent in the request. 

##### <a name="net-http-type-Request-Cookies">func (r *Request) Cookies() []*Cookie <small>(exported)</small></a>

```Go
func (r *Request) Cookies() []*Cookie
```

Cookies parses and returns the HTTP cookies sent with the request. 

##### <a name="net-http-type-Request-Cookie">func (r *Request) Cookie(name string) (*Cookie, error) <small>(exported)</small></a>

```Go
func (r *Request) Cookie(name string) (*Cookie, error)
```

Cookie returns the named cookie provided in the request or ErrNoCookie if not found. If multiple cookies match the given name, only one cookie will be returned. 

##### <a name="net-http-type-Request-AddCookie">func (r *Request) AddCookie(c *Cookie) <small>(exported)</small></a>

```Go
func (r *Request) AddCookie(c *Cookie)
```

AddCookie adds a cookie to the request. Per RFC 6265 section 5.4, AddCookie does not attach more than one Cookie header field. That means all cookies, if any, are written into the same line, separated by semicolon. AddCookie only sanitizes c's name and value, and does not sanitize a Cookie header already present in the request. 

##### <a name="net-http-type-Request-Referer">func (r *Request) Referer() string <small>(exported)</small></a>

```Go
func (r *Request) Referer() string
```

Referer returns the referring URL, if sent in the request. 

Referer is misspelled as in the request itself, a mistake from the earliest days of HTTP.  This value can also be fetched from the Header map as Header["Referer"]; the benefit of making it available as a method is that the compiler can diagnose programs that use the alternate (correct English) spelling req.Referrer() but cannot diagnose programs that use Header["Referrer"]. 

##### <a name="net-http-type-Request-MultipartReader">func (r *Request) MultipartReader() (*multipart.Reader, error) <small>(exported)</small></a>

```Go
func (r *Request) MultipartReader() (*multipart.Reader, error)
```

MultipartReader returns a MIME multipart reader if this is a multipart/form-data or a multipart/mixed POST request, else returns nil and an error. Use this function instead of ParseMultipartForm to process the request body as a stream. 

##### <a name="net-http-type-Request-multipartReader">func (r *Request) multipartReader(allowMixed bool) (*multipart.Reader, error)</a>

```Go
func (r *Request) multipartReader(allowMixed bool) (*multipart.Reader, error)
```

##### <a name="net-http-type-Request-isH2Upgrade">func (r *Request) isH2Upgrade() bool</a>

```Go
func (r *Request) isH2Upgrade() bool
```

isH2Upgrade reports whether r represents the http2 "client preface" magic string. 

##### <a name="net-http-type-Request-Write">func (r *Request) Write(w io.Writer) error <small>(exported)</small></a>

```Go
func (r *Request) Write(w io.Writer) error
```

Write writes an HTTP/1.1 request, which is the header and body, in wire format. This method consults the following fields of the request: 

```
Host
URL
Method (defaults to "GET")
Header
ContentLength
TransferEncoding
Body

```
If Body is present, Content-Length is <= 0 and TransferEncoding hasn't been set to "identity", Write adds "Transfer-Encoding: chunked" to the header. Body is closed after it is sent. 

##### <a name="net-http-type-Request-WriteProxy">func (r *Request) WriteProxy(w io.Writer) error <small>(exported)</small></a>

```Go
func (r *Request) WriteProxy(w io.Writer) error
```

WriteProxy is like Write but writes the request in the form expected by an HTTP proxy. In particular, WriteProxy writes the initial Request-URI line of the request with an absolute URI, per section 5.3 of RFC 7230, including the scheme and host. In either case, WriteProxy also writes a Host header, using either r.Host or r.URL.Host. 

##### <a name="net-http-type-Request-write">func (r *Request) write(w io.Writer, usingProxy bool, extraHeaders Header, waitForContinue func() bool) (err error)</a>

```Go
func (r *Request) write(w io.Writer, usingProxy bool, extraHeaders Header, waitForContinue func() bool) (err error)
```

extraHeaders may be nil waitForContinue may be nil always closes body 

##### <a name="net-http-type-Request-BasicAuth">func (r *Request) BasicAuth() (username, password string, ok bool) <small>(exported)</small></a>

```Go
func (r *Request) BasicAuth() (username, password string, ok bool)
```

BasicAuth returns the username and password provided in the request's Authorization header, if the request uses HTTP Basic Authentication. See RFC 2617, Section 2. 

##### <a name="net-http-type-Request-SetBasicAuth">func (r *Request) SetBasicAuth(username, password string) <small>(exported)</small></a>

```Go
func (r *Request) SetBasicAuth(username, password string)
```

SetBasicAuth sets the request's Authorization header to use HTTP Basic Authentication with the provided username and password. 

With HTTP Basic Authentication the provided username and password are not encrypted. 

Some protocols may impose additional requirements on pre-escaping the username and password. For instance, when used with OAuth2, both arguments must be URL encoded first with url.QueryEscape. 

##### <a name="net-http-type-Request-ParseForm">func (r *Request) ParseForm() error <small>(exported)</small></a>

```Go
func (r *Request) ParseForm() error
```

ParseForm populates r.Form and r.PostForm. 

For all requests, ParseForm parses the raw query from the URL and updates r.Form. 

For POST, PUT, and PATCH requests, it also reads the request body, parses it as a form and puts the results into both r.PostForm and r.Form. Request body parameters take precedence over URL query string values in r.Form. 

If the request Body's size has not already been limited by MaxBytesReader, the size is capped at 10MB. 

For other HTTP methods, or when the Content-Type is not application/x-www-form-urlencoded, the request Body is not read, and r.PostForm is initialized to a non-nil, empty value. 

ParseMultipartForm calls ParseForm automatically. ParseForm is idempotent. 

##### <a name="net-http-type-Request-ParseMultipartForm">func (r *Request) ParseMultipartForm(maxMemory int64) error <small>(exported)</small></a>

```Go
func (r *Request) ParseMultipartForm(maxMemory int64) error
```

ParseMultipartForm parses a request body as multipart/form-data. The whole request body is parsed and up to a total of maxMemory bytes of its file parts are stored in memory, with the remainder stored on disk in temporary files. ParseMultipartForm calls ParseForm if necessary. After one call to ParseMultipartForm, subsequent calls have no effect. 

##### <a name="net-http-type-Request-FormValue">func (r *Request) FormValue(key string) string <small>(exported)</small></a>

```Go
func (r *Request) FormValue(key string) string
```

FormValue returns the first value for the named component of the query. POST and PUT body parameters take precedence over URL query string values. FormValue calls ParseMultipartForm and ParseForm if necessary and ignores any errors returned by these functions. If key is not present, FormValue returns the empty string. To access multiple values of the same key, call ParseForm and then inspect Request.Form directly. 

##### <a name="net-http-type-Request-PostFormValue">func (r *Request) PostFormValue(key string) string <small>(exported)</small></a>

```Go
func (r *Request) PostFormValue(key string) string
```

PostFormValue returns the first value for the named component of the POST, PATCH, or PUT request body. URL query parameters are ignored. PostFormValue calls ParseMultipartForm and ParseForm if necessary and ignores any errors returned by these functions. If key is not present, PostFormValue returns the empty string. 

##### <a name="net-http-type-Request-FormFile">func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error) <small>(exported)</small></a>

```Go
func (r *Request) FormFile(key string) (multipart.File, *multipart.FileHeader, error)
```

FormFile returns the first file for the provided form key. FormFile calls ParseMultipartForm and ParseForm if necessary. 

##### <a name="net-http-type-Request-expectsContinue">func (r *Request) expectsContinue() bool</a>

```Go
func (r *Request) expectsContinue() bool
```

##### <a name="net-http-type-Request-wantsHttp10KeepAlive">func (r *Request) wantsHttp10KeepAlive() bool</a>

```Go
func (r *Request) wantsHttp10KeepAlive() bool
```

##### <a name="net-http-type-Request-wantsClose">func (r *Request) wantsClose() bool</a>

```Go
func (r *Request) wantsClose() bool
```

##### <a name="net-http-type-Request-closeBody">func (r *Request) closeBody() error</a>

```Go
func (r *Request) closeBody() error
```

##### <a name="net-http-type-Request-isReplayable">func (r *Request) isReplayable() bool</a>

```Go
func (r *Request) isReplayable() bool
```

##### <a name="net-http-type-Request-outgoingLength">func (r *Request) outgoingLength() int64</a>

```Go
func (r *Request) outgoingLength() int64
```

outgoingLength reports the Content-Length of this outgoing (Client) request. It maps 0 into -1 (unknown) when the Body is non-nil. 

##### <a name="net-http-type-Request-requiresHTTP1">func (r *Request) requiresHTTP1() bool</a>

```Go
func (r *Request) requiresHTTP1() bool
```

requiresHTTP1 reports whether this request requires being sent on an HTTP/1 connection. 

##### <a name="net-http-type-Request-WithT">func (r *Request) WithT(t *testing.T) *Request</a>

```Go
func (r *Request) WithT(t *testing.T) *Request
```

##### <a name="net-http-type-Request-ExportIsReplayable">func (r *Request) ExportIsReplayable() bool</a>

```Go
func (r *Request) ExportIsReplayable() bool
```

#### <a name="net-http-type-requestBodyReadError">type requestBodyReadError struct</a>

```Go
type requestBodyReadError struct{ error }
```

requestBodyReadError wraps an error from (*Request).write to indicate that the error came from a Read call on the Request.Body. This error type should not escape the net/http package to users. 

#### <a name="net-http-type-maxBytesReader">type maxBytesReader struct</a>

```Go
type maxBytesReader struct {
	w   ResponseWriter
	r   io.ReadCloser // underlying reader
	n   int64         // max bytes remaining
	err error         // sticky error
}
```

##### <a name="net-http-type-maxBytesReader-Read">func (l *maxBytesReader) Read(p []byte) (n int, err error)</a>

```Go
func (l *maxBytesReader) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-maxBytesReader-Close">func (l *maxBytesReader) Close() error</a>

```Go
func (l *maxBytesReader) Close() error
```

#### <a name="net-http-type-requestTooLarger">type requestTooLarger interface</a>

```Go
type requestTooLarger interface {
	requestTooLarge()
}
```

The server code and client code both use maxBytesReader. This "requestTooLarge" check is only used by the server code. To prevent binaries which only using the HTTP Client code (such as cmd/go) from also linking in the HTTP server, don't use a static type assertion to the server "*response" type. Check this interface instead: 

#### <a name="net-http-type-Response">type Response struct <small>(exported)</small></a>

```Go
type Response struct {
	Status     string // e.g. "200 OK"
	StatusCode int    // e.g. 200
	Proto      string // e.g. "HTTP/1.0"
	ProtoMajor int    // e.g. 1
	ProtoMinor int    // e.g. 0

	// Header maps header keys to values. If the response had multiple
	// headers with the same key, they may be concatenated, with comma
	// delimiters.  (RFC 7230, section 3.2.2 requires that multiple headers
	// be semantically equivalent to a comma-delimited sequence.) When
	// Header values are duplicated by other fields in this struct (e.g.,
	// ContentLength, TransferEncoding, Trailer), the field values are
	// authoritative.
	//
	// Keys in the map are canonicalized (see CanonicalHeaderKey).
	Header Header

	// Body represents the response body.
	//
	// The response body is streamed on demand as the Body field
	// is read. If the network connection fails or the server
	// terminates the response, Body.Read calls return an error.
	//
	// The http Client and Transport guarantee that Body is always
	// non-nil, even on responses without a body or responses with
	// a zero-length body. It is the caller's responsibility to
	// close Body. The default HTTP client's Transport may not
	// reuse HTTP/1.x "keep-alive" TCP connections if the Body is
	// not read to completion and closed.
	//
	// The Body is automatically dechunked if the server replied
	// with a "chunked" Transfer-Encoding.
	//
	// As of Go 1.12, the Body will also implement io.Writer
	// on a successful "101 Switching Protocols" response,
	// as used by WebSockets and HTTP/2's "h2c" mode.
	Body io.ReadCloser

	// ContentLength records the length of the associated content. The
	// value -1 indicates that the length is unknown. Unless Request.Method
	// is "HEAD", values >= 0 indicate that the given number of bytes may
	// be read from Body.
	ContentLength int64

	// Contains transfer encodings from outer-most to inner-most. Value is
	// nil, means that "identity" encoding is used.
	TransferEncoding []string

	// Close records whether the header directed that the connection be
	// closed after reading Body. The value is advice for clients: neither
	// ReadResponse nor Response.Write ever closes a connection.
	Close bool

	// Uncompressed reports whether the response was sent compressed but
	// was decompressed by the http package. When true, reading from
	// Body yields the uncompressed content instead of the compressed
	// content actually set from the server, ContentLength is set to -1,
	// and the "Content-Length" and "Content-Encoding" fields are deleted
	// from the responseHeader. To get the original response from
	// the server, set Transport.DisableCompression to true.
	Uncompressed bool

	// Trailer maps trailer keys to values in the same
	// format as Header.
	//
	// The Trailer initially contains only nil values, one for
	// each key specified in the server's "Trailer" header
	// value. Those values are not added to Header.
	//
	// Trailer must not be accessed concurrently with Read calls
	// on the Body.
	//
	// After Body.Read has returned io.EOF, Trailer will contain
	// any trailer values sent by the server.
	Trailer Header

	// Request is the request that was sent to obtain this Response.
	// Request's Body is nil (having already been consumed).
	// This is only populated for Client requests.
	Request *Request

	// TLS contains information about the TLS connection on which the
	// response was received. It is nil for unencrypted responses.
	// The pointer is shared between responses and should not be
	// modified.
	TLS *tls.ConnectionState
}
```

Response represents the response from an HTTP request. 

The Client and Transport return Responses from servers once the response headers have been received. The response body is streamed on demand as the Body field is read. 

##### <a name="net-http-type-Response-send">func send(ireq *Request, rt RoundTripper, deadline time.Time) (resp *Response, didTimeout func() bool, err error)</a>

```Go
func send(ireq *Request, rt RoundTripper, deadline time.Time) (resp *Response, didTimeout func() bool, err error)
```

send issues an HTTP request. Caller should close resp.Body when done reading from it. 

##### <a name="net-http-type-Response-Get">func Get(url string) (resp *Response, err error) <small>(exported)</small></a>

```Go
func Get(url string) (resp *Response, err error)
```

Get issues a GET to the specified URL. If the response is one of the following redirect codes, Get follows the redirect, up to a maximum of 10 redirects: 

```
301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
308 (Permanent Redirect)

```
An error is returned if there were too many redirects or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled. 

When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it. 

Get is a wrapper around DefaultClient.Get. 

To make a request with custom headers, use NewRequest and DefaultClient.Do. 

##### <a name="net-http-type-Response-Post">func Post(url, contentType string, body io.Reader) (resp *Response, err error) <small>(exported)</small></a>

```Go
func Post(url, contentType string, body io.Reader) (resp *Response, err error)
```

Post issues a POST to the specified URL. 

Caller should close resp.Body when done reading from it. 

If the provided body is an io.Closer, it is closed after the request. 

Post is a wrapper around DefaultClient.Post. 

To set custom headers, use NewRequest and DefaultClient.Do. 

See the Client.Do method documentation for details on how redirects are handled. 

##### <a name="net-http-type-Response-PostForm">func PostForm(url string, data url.Values) (resp *Response, err error) <small>(exported)</small></a>

```Go
func PostForm(url string, data url.Values) (resp *Response, err error)
```

PostForm issues a POST to the specified URL, with data's keys and values URL-encoded as the request body. 

The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and DefaultClient.Do. 

When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it. 

PostForm is a wrapper around DefaultClient.PostForm. 

See the Client.Do method documentation for details on how redirects are handled. 

##### <a name="net-http-type-Response-Head">func Head(url string) (resp *Response, err error) <small>(exported)</small></a>

```Go
func Head(url string) (resp *Response, err error)
```

Head issues a HEAD to the specified URL. If the response is one of the following redirect codes, Head follows the redirect, up to a maximum of 10 redirects: 

```
301 (Moved Permanently)
302 (Found)
303 (See Other)
307 (Temporary Redirect)
308 (Permanent Redirect)

```
Head is a wrapper around DefaultClient.Head 

##### <a name="net-http-type-Response-ReadResponse">func ReadResponse(r *bufio.Reader, req *Request) (*Response, error) <small>(exported)</small></a>

```Go
func ReadResponse(r *bufio.Reader, req *Request) (*Response, error)
```

ReadResponse reads and returns an HTTP response from r. The req parameter optionally specifies the Request that corresponds to this Response. If nil, a GET request is assumed. Clients must call resp.Body.Close when finished reading resp.Body. After that call, clients can inspect resp.Trailer to find key/value pairs included in the response trailer. 

##### <a name="net-http-type-Response-Cookies">func (r *Response) Cookies() []*Cookie <small>(exported)</small></a>

```Go
func (r *Response) Cookies() []*Cookie
```

Cookies parses and returns the cookies set in the Set-Cookie headers. 

##### <a name="net-http-type-Response-Location">func (r *Response) Location() (*url.URL, error) <small>(exported)</small></a>

```Go
func (r *Response) Location() (*url.URL, error)
```

Location returns the URL of the response's "Location" header, if present. Relative redirects are resolved relative to the Response's Request. ErrNoLocation is returned if no Location header is present. 

##### <a name="net-http-type-Response-ProtoAtLeast">func (r *Response) ProtoAtLeast(major, minor int) bool <small>(exported)</small></a>

```Go
func (r *Response) ProtoAtLeast(major, minor int) bool
```

ProtoAtLeast reports whether the HTTP protocol used in the response is at least major.minor. 

##### <a name="net-http-type-Response-Write">func (r *Response) Write(w io.Writer) error <small>(exported)</small></a>

```Go
func (r *Response) Write(w io.Writer) error
```

Write writes r to w in the HTTP/1.x server response format, including the status line, headers, body, and optional trailer. 

This method consults the following fields of the response r: 

```
StatusCode
ProtoMajor
ProtoMinor
Request.Method
TransferEncoding
Trailer
Body
ContentLength
Header, values for non-canonical keys will have unpredictable behavior

```
The Response Body is closed after it is sent. 

##### <a name="net-http-type-Response-closeBody">func (r *Response) closeBody()</a>

```Go
func (r *Response) closeBody()
```

##### <a name="net-http-type-Response-bodyIsWritable">func (r *Response) bodyIsWritable() bool</a>

```Go
func (r *Response) bodyIsWritable() bool
```

bodyIsWritable reports whether the Body supports writing. The Transport returns Writable bodies for 101 Switching Protocols responses. The Transport uses this method to determine whether a persistent connection is done being managed from its perspective. Once we return a writable response body to a user, the net/http package is done managing that connection. 

##### <a name="net-http-type-Response-isProtocolSwitch">func (r *Response) isProtocolSwitch() bool</a>

```Go
func (r *Response) isProtocolSwitch() bool
```

isProtocolSwitch reports whether the response code and header indicate a successful protocol upgrade response. 

#### <a name="net-http-type-Handler">type Handler interface <small>(exported)</small></a>

```Go
type Handler interface {
	ServeHTTP(ResponseWriter, *Request)
}
```

A Handler responds to an HTTP request. 

ServeHTTP should write reply headers and data to the ResponseWriter and then return. Returning signals that the request is finished; it is not valid to use the ResponseWriter or read from the Request.Body after or concurrently with the completion of the ServeHTTP call. 

Depending on the HTTP client software, HTTP protocol version, and any intermediaries between the client and the Go server, it may not be possible to read from the Request.Body after writing to the ResponseWriter. Cautious handlers should read the Request.Body first, and then reply. 

Except for reading the body, handlers should not modify the provided Request. 

If ServeHTTP panics, the server (the caller of ServeHTTP) assumes that the effect of the panic was isolated to the active request. It recovers the panic, logs a stack trace to the server error log, and either closes the network connection or sends an HTTP/2 RST_STREAM, depending on the HTTP protocol. To abort a handler so the client sees an interrupted response but the server doesn't log an error, panic with the value ErrAbortHandler. 

##### <a name="net-http-type-Handler-FileServer">func FileServer(root FileSystem) Handler <small>(exported)</small></a>

```Go
func FileServer(root FileSystem) Handler
```

FileServer returns a handler that serves HTTP requests with the contents of the file system rooted at root. 

As a special case, the returned file server redirects any request ending in "/index.html" to the same path, without the final "index.html". 

To use the operating system's file system implementation, use http.Dir: 

```
http.Handle("/", http.FileServer(http.Dir("/tmp")))

```
To use an fs.FS implementation, use http.FS to convert it: 

```
http.Handle("/", http.FileServer(http.FS(fsys)))

```
##### <a name="net-http-type-Handler-NotFoundHandler">func NotFoundHandler() Handler <small>(exported)</small></a>

```Go
func NotFoundHandler() Handler
```

NotFoundHandler returns a simple request handler that replies to each request with a `404 page not found' reply. 

##### <a name="net-http-type-Handler-StripPrefix">func StripPrefix(prefix string, h Handler) Handler <small>(exported)</small></a>

```Go
func StripPrefix(prefix string, h Handler) Handler
```

StripPrefix returns a handler that serves HTTP requests by removing the given prefix from the request URL's Path (and RawPath if set) and invoking the handler h. StripPrefix handles a request for a path that doesn't begin with prefix by replying with an HTTP 404 not found error. The prefix must match exactly: if the prefix in the request contains escaped characters the reply is also an HTTP 404 not found error. 

##### <a name="net-http-type-Handler-RedirectHandler">func RedirectHandler(url string, code int) Handler <small>(exported)</small></a>

```Go
func RedirectHandler(url string, code int) Handler
```

RedirectHandler returns a request handler that redirects each request it receives to the given url using the given status code. 

The provided code should be in the 3xx range and is usually StatusMovedPermanently, StatusFound or StatusSeeOther. 

##### <a name="net-http-type-Handler-TimeoutHandler">func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler <small>(exported)</small></a>

```Go
func TimeoutHandler(h Handler, dt time.Duration, msg string) Handler
```

TimeoutHandler returns a Handler that runs h with the given time limit. 

The new Handler calls h.ServeHTTP to handle each request, but if a call runs for longer than its time limit, the handler responds with a 503 Service Unavailable error and the given message in its body. (If msg is empty, a suitable default message will be sent.) After such a timeout, writes by h to its ResponseWriter will return ErrHandlerTimeout. 

TimeoutHandler supports the Pusher interface but does not support the Hijacker or Flusher interfaces. 

##### <a name="net-http-type-Handler-NewTestTimeoutHandler">func NewTestTimeoutHandler(handler Handler, ch <-chan time.Time) Handler</a>

```Go
func NewTestTimeoutHandler(handler Handler, ch <-chan time.Time) Handler
```

#### <a name="net-http-type-ResponseWriter">type ResponseWriter interface <small>(exported)</small></a>

```Go
type ResponseWriter interface {
	// Header returns the header map that will be sent by
	// WriteHeader. The Header map also is the mechanism with which
	// Handlers can set HTTP trailers.
	//
	// Changing the header map after a call to WriteHeader (or
	// Write) has no effect unless the modified headers are
	// trailers.
	//
	// There are two ways to set Trailers. The preferred way is to
	// predeclare in the headers which trailers you will later
	// send by setting the "Trailer" header to the names of the
	// trailer keys which will come later. In this case, those
	// keys of the Header map are treated as if they were
	// trailers. See the example. The second way, for trailer
	// keys not known to the Handler until after the first Write,
	// is to prefix the Header map keys with the TrailerPrefix
	// constant value. See TrailerPrefix.
	//
	// To suppress automatic response headers (such as "Date"), set
	// their value to nil.
	Header() Header

	// Write writes the data to the connection as part of an HTTP reply.
	//
	// If WriteHeader has not yet been called, Write calls
	// WriteHeader(http.StatusOK) before writing the data. If the Header
	// does not contain a Content-Type line, Write adds a Content-Type set
	// to the result of passing the initial 512 bytes of written data to
	// DetectContentType. Additionally, if the total size of all written
	// data is under a few KB and there are no Flush calls, the
	// Content-Length header is added automatically.
	//
	// Depending on the HTTP protocol version and the client, calling
	// Write or WriteHeader may prevent future reads on the
	// Request.Body. For HTTP/1.x requests, handlers should read any
	// needed request body data before writing the response. Once the
	// headers have been flushed (due to either an explicit Flusher.Flush
	// call or writing enough data to trigger a flush), the request body
	// may be unavailable. For HTTP/2 requests, the Go HTTP server permits
	// handlers to continue to read the request body while concurrently
	// writing the response. However, such behavior may not be supported
	// by all HTTP/2 clients. Handlers should read before writing if
	// possible to maximize compatibility.
	Write([]byte) (int, error)

	// WriteHeader sends an HTTP response header with the provided
	// status code.
	//
	// If WriteHeader is not called explicitly, the first call to Write
	// will trigger an implicit WriteHeader(http.StatusOK).
	// Thus explicit calls to WriteHeader are mainly used to
	// send error codes.
	//
	// The provided code must be a valid HTTP 1xx-5xx status code.
	// Only one header may be written. Go does not currently
	// support sending user-defined 1xx informational headers,
	// with the exception of 100-continue response header that the
	// Server sends automatically when the Request.Body is read.
	WriteHeader(statusCode int)
}
```

A ResponseWriter interface is used by an HTTP handler to construct an HTTP response. 

A ResponseWriter may not be used after the Handler.ServeHTTP method has returned. 

#### <a name="net-http-type-Flusher">type Flusher interface <small>(exported)</small></a>

```Go
type Flusher interface {
	// Flush sends any buffered data to the client.
	Flush()
}
```

The Flusher interface is implemented by ResponseWriters that allow an HTTP handler to flush buffered data to the client. 

The default HTTP/1.x and HTTP/2 ResponseWriter implementations support Flusher, but ResponseWriter wrappers may not. Handlers should always test for this ability at runtime. 

Note that even for ResponseWriters that support Flush, if the client is connected through an HTTP proxy, the buffered data may not reach the client until the response completes. 

#### <a name="net-http-type-Hijacker">type Hijacker interface <small>(exported)</small></a>

```Go
type Hijacker interface {
	// Hijack lets the caller take over the connection.
	// After a call to Hijack the HTTP server library
	// will not do anything else with the connection.
	//
	// It becomes the caller's responsibility to manage
	// and close the connection.
	//
	// The returned net.Conn may have read or write deadlines
	// already set, depending on the configuration of the
	// Server. It is the caller's responsibility to set
	// or clear those deadlines as needed.
	//
	// The returned bufio.Reader may contain unprocessed buffered
	// data from the client.
	//
	// After a call to Hijack, the original Request.Body must not
	// be used. The original Request's Context remains valid and
	// is not canceled until the Request's ServeHTTP method
	// returns.
	Hijack() (net.Conn, *bufio.ReadWriter, error)
}
```

The Hijacker interface is implemented by ResponseWriters that allow an HTTP handler to take over the connection. 

The default ResponseWriter for HTTP/1.x connections supports Hijacker, but HTTP/2 connections intentionally do not. ResponseWriter wrappers may also not support Hijacker. Handlers should always test for this ability at runtime. 

#### <a name="net-http-type-CloseNotifier">type CloseNotifier interface <small>(exported)</small></a>

```Go
type CloseNotifier interface {
	// CloseNotify returns a channel that receives at most a
	// single value (true) when the client connection has gone
	// away.
	//
	// CloseNotify may wait to notify until Request.Body has been
	// fully read.
	//
	// After the Handler has returned, there is no guarantee
	// that the channel receives a value.
	//
	// If the protocol is HTTP/1.1 and CloseNotify is called while
	// processing an idempotent request (such a GET) while
	// HTTP/1.1 pipelining is in use, the arrival of a subsequent
	// pipelined request may cause a value to be sent on the
	// returned channel. In practice HTTP/1.1 pipelining is not
	// enabled in browsers and not seen often in the wild. If this
	// is a problem, use HTTP/2 or only use CloseNotify on methods
	// such as POST.
	CloseNotify() <-chan bool
}
```

The CloseNotifier interface is implemented by ResponseWriters which allow detecting when the underlying connection has gone away. 

This mechanism can be used to cancel long operations on the server if the client has disconnected before the response is ready. 

Deprecated: the CloseNotifier interface predates Go's context package. New code should use Request.Context instead. 

#### <a name="net-http-type-conn">type conn struct</a>

```Go
type conn struct {
	// server is the server on which the connection arrived.
	// Immutable; never nil.
	server *Server

	// cancelCtx cancels the connection-level context.
	cancelCtx context.CancelFunc

	// rwc is the underlying network connection.
	// This is never wrapped by other types and is the value given out
	// to CloseNotifier callers. It is usually of type *net.TCPConn or
	// *tls.Conn.
	rwc net.Conn

	// remoteAddr is rwc.RemoteAddr().String(). It is not populated synchronously
	// inside the Listener's Accept goroutine, as some implementations block.
	// It is populated immediately inside the (*conn).serve goroutine.
	// This is the value of a Handler's (*Request).RemoteAddr.
	remoteAddr string

	// tlsState is the TLS connection state when using TLS.
	// nil means not TLS.
	tlsState *tls.ConnectionState

	// werr is set to the first write error to rwc.
	// It is set via checkConnErrorWriter{w}, where bufw writes.
	werr error

	// r is bufr's read source. It's a wrapper around rwc that provides
	// io.LimitedReader-style limiting (while reading request headers)
	// and functionality to support CloseNotifier. See *connReader docs.
	r *connReader

	// bufr reads from r.
	bufr *bufio.Reader

	// bufw writes to checkConnErrorWriter{c}, which populates werr on error.
	bufw *bufio.Writer

	// lastMethod is the method of the most recent request
	// on this connection, if any.
	lastMethod string

	curReq atomic.Value // of *response (which has a Request in it)

	curState struct{ atomic uint64 } // packed (unixtime<<8|uint8(ConnState))

	// mu guards hijackedv
	mu sync.Mutex

	// hijackedv is whether this connection has been hijacked
	// by a Handler with the Hijacker interface.
	// It is guarded by mu.
	hijackedv bool
}
```

A conn represents the server side of an HTTP connection. 

##### <a name="net-http-type-conn-hijacked">func (c *conn) hijacked() bool</a>

```Go
func (c *conn) hijacked() bool
```

##### <a name="net-http-type-conn-hijackLocked">func (c *conn) hijackLocked() (rwc net.Conn, buf *bufio.ReadWriter, err error)</a>

```Go
func (c *conn) hijackLocked() (rwc net.Conn, buf *bufio.ReadWriter, err error)
```

c.mu must be held. 

##### <a name="net-http-type-conn-readRequest">func (c *conn) readRequest(ctx context.Context) (w *response, err error)</a>

```Go
func (c *conn) readRequest(ctx context.Context) (w *response, err error)
```

Read next request from connection. 

##### <a name="net-http-type-conn-finalFlush">func (c *conn) finalFlush()</a>

```Go
func (c *conn) finalFlush()
```

##### <a name="net-http-type-conn-close">func (c *conn) close()</a>

```Go
func (c *conn) close()
```

Close the connection. 

##### <a name="net-http-type-conn-closeWriteAndWait">func (c *conn) closeWriteAndWait()</a>

```Go
func (c *conn) closeWriteAndWait()
```

closeWrite flushes any outstanding data and sends a FIN packet (if client is connected via TCP), signalling that we're done. We then pause for a bit, hoping the client processes it before any subsequent RST. 

See [https://golang.org/issue/3595](https://golang.org/issue/3595) 

##### <a name="net-http-type-conn-setState">func (c *conn) setState(nc net.Conn, state ConnState, runHook bool)</a>

```Go
func (c *conn) setState(nc net.Conn, state ConnState, runHook bool)
```

##### <a name="net-http-type-conn-getState">func (c *conn) getState() (state ConnState, unixSec int64)</a>

```Go
func (c *conn) getState() (state ConnState, unixSec int64)
```

##### <a name="net-http-type-conn-serve">func (c *conn) serve(ctx context.Context)</a>

```Go
func (c *conn) serve(ctx context.Context)
```

Serve a new connection. 

#### <a name="net-http-type-chunkWriter">type chunkWriter struct</a>

```Go
type chunkWriter struct {
	res *response

	// header is either nil or a deep clone of res.handlerHeader
	// at the time of res.writeHeader, if res.writeHeader is
	// called and extra buffering is being done to calculate
	// Content-Type and/or Content-Length.
	header Header

	// wroteHeader tells whether the header's been written to "the
	// wire" (or rather: w.conn.buf). this is unlike
	// (*response).wroteHeader, which tells only whether it was
	// logically written.
	wroteHeader bool

	// set by the writeHeader method:
	chunking bool // using chunked transfer encoding for reply body
}
```

chunkWriter writes to a response's conn buffer, and is the writer wrapped by the response.bufw buffered writer. 

chunkWriter also is responsible for finalizing the Header, including conditionally setting the Content-Type and setting a Content-Length in cases where the handler's final output is smaller than the buffer size. It also conditionally adds chunk headers, when in chunking mode. 

See the comment above (*response).Write for the entire write flow. 

##### <a name="net-http-type-chunkWriter-Write">func (cw *chunkWriter) Write(p []byte) (n int, err error)</a>

```Go
func (cw *chunkWriter) Write(p []byte) (n int, err error)
```

##### <a name="net-http-type-chunkWriter-flush">func (cw *chunkWriter) flush()</a>

```Go
func (cw *chunkWriter) flush()
```

##### <a name="net-http-type-chunkWriter-close">func (cw *chunkWriter) close()</a>

```Go
func (cw *chunkWriter) close()
```

##### <a name="net-http-type-chunkWriter-writeHeader">func (cw *chunkWriter) writeHeader(p []byte)</a>

```Go
func (cw *chunkWriter) writeHeader(p []byte)
```

writeHeader finalizes the header sent to the client and writes it to cw.res.conn.bufw. 

p is not written by writeHeader, but is the first chunk of the body that will be written. It is sniffed for a Content-Type if none is set explicitly. It's also used to set the Content-Length, if the total body size was small and the handler has already finished running. 

#### <a name="net-http-type-response">type response struct</a>

```Go
type response struct {
	conn             *conn
	req              *Request // request for this response
	reqBody          io.ReadCloser
	cancelCtx        context.CancelFunc // when ServeHTTP exits
	wroteHeader      bool               // reply header has been (logically) written
	wroteContinue    bool               // 100 Continue response was written
	wants10KeepAlive bool               // HTTP/1.0 w/ Connection "keep-alive"
	wantsClose       bool               // HTTP request has Connection "close"

	// canWriteContinue is a boolean value accessed as an atomic int32
	// that says whether or not a 100 Continue header can be written
	// to the connection.
	// writeContinueMu must be held while writing the header.
	// These two fields together synchronize the body reader
	// (the expectContinueReader, which wants to write 100 Continue)
	// against the main writer.
	canWriteContinue atomicBool
	writeContinueMu  sync.Mutex

	w  *bufio.Writer // buffers output in chunks to chunkWriter
	cw chunkWriter

	// handlerHeader is the Header that Handlers get access to,
	// which may be retained and mutated even after WriteHeader.
	// handlerHeader is copied into cw.header at WriteHeader
	// time, and privately mutated thereafter.
	handlerHeader Header
	calledHeader  bool // handler accessed handlerHeader via Header

	written       int64 // number of bytes written in body
	contentLength int64 // explicitly-declared Content-Length; or -1
	status        int   // status code passed to WriteHeader

	// close connection after this reply.  set on request and
	// updated after response from handler if there's a
	// "Connection: keep-alive" response header and a
	// Content-Length.
	closeAfterReply bool

	// requestBodyLimitHit is set by requestTooLarge when
	// maxBytesReader hits its max size. It is checked in
	// WriteHeader, to make sure we don't consume the
	// remaining request body to try to advance to the next HTTP
	// request. Instead, when this is set, we stop reading
	// subsequent requests on this connection and stop reading
	// input from it.
	requestBodyLimitHit bool

	// trailers are the headers to be sent after the handler
	// finishes writing the body. This field is initialized from
	// the Trailer response header when the response header is
	// written.
	trailers []string

	handlerDone atomicBool // set true when the handler exits

	// Buffers for Date, Content-Length, and status code
	dateBuf   [len(TimeFormat)]byte
	clenBuf   [10]byte
	statusBuf [3]byte

	// closeNotifyCh is the channel returned by CloseNotify.
	// TODO(bradfitz): this is currently (for Go 1.8) always
	// non-nil. Make this lazily-created again as it used to be?
	closeNotifyCh  chan bool
	didCloseNotify int32 // atomic (only 0->1 winner should send)
}
```

A response represents the server side of an HTTP response. 

##### <a name="net-http-type-response-finalTrailers">func (w *response) finalTrailers() Header</a>

```Go
func (w *response) finalTrailers() Header
```

finalTrailers is called after the Handler exits and returns a non-nil value if the Handler set any trailers. 

##### <a name="net-http-type-response-declareTrailer">func (w *response) declareTrailer(k string)</a>

```Go
func (w *response) declareTrailer(k string)
```

declareTrailer is called for each Trailer header when the response header is written. It notes that a header will need to be written in the trailers at the end of the response. 

##### <a name="net-http-type-response-requestTooLarge">func (w *response) requestTooLarge()</a>

```Go
func (w *response) requestTooLarge()
```

requestTooLarge is called by maxBytesReader when too much input has been read from the client. 

##### <a name="net-http-type-response-needsSniff">func (w *response) needsSniff() bool</a>

```Go
func (w *response) needsSniff() bool
```

needsSniff reports whether a Content-Type still needs to be sniffed. 

##### <a name="net-http-type-response-ReadFrom">func (w *response) ReadFrom(src io.Reader) (n int64, err error)</a>

```Go
func (w *response) ReadFrom(src io.Reader) (n int64, err error)
```

ReadFrom is here to optimize copying from an *os.File regular file to a *net.TCPConn with sendfile, or from a supported src type such as a *net.TCPConn on Linux with splice. 

##### <a name="net-http-type-response-Header">func (w *response) Header() Header</a>

```Go
func (w *response) Header() Header
```

##### <a name="net-http-type-response-WriteHeader">func (w *response) WriteHeader(code int)</a>

```Go
func (w *response) WriteHeader(code int)
```

##### <a name="net-http-type-response-bodyAllowed">func (w *response) bodyAllowed() bool</a>

```Go
func (w *response) bodyAllowed() bool
```

bodyAllowed reports whether a Write is allowed for this response type. It's illegal to call this before the header has been flushed. 

##### <a name="net-http-type-response-Write">func (w *response) Write(data []byte) (n int, err error)</a>

```Go
func (w *response) Write(data []byte) (n int, err error)
```

The Life Of A Write is like this: 

Handler starts. No header has been sent. The handler can either write a header, or just start writing. Writing before sending a header sends an implicitly empty 200 OK header. 

If the handler didn't declare a Content-Length up front, we either go into chunking mode or, if the handler finishes running before the chunking buffer size, we compute a Content-Length and send that in the header instead. 

Likewise, if the handler didn't set a Content-Type, we sniff that from the initial chunk of output. 

The Writers are wired together like: 

1. *response (the ResponseWriter) -> 2. (*response).w, a *bufio.Writer of bufferBeforeChunkingSize bytes 3. chunkWriter.Writer (whose writeHeader finalizes Content-Length/Type) 

```
and which writes the chunk headers, if needed.

```
4. conn.buf, a bufio.Writer of default (4kB) bytes, writing to -> 5. checkConnErrorWriter{c}, which notes any non-nil error on Write 

```
and populates c.werr with it if so. but otherwise writes to:

```
6. the rwc, the net.Conn. 

TODO(bradfitz): short-circuit some of the buffering when the initial header contains both a Content-Type and Content-Length. Also short-circuit in (1) when the header's been sent and not in chunking mode, writing directly to (4) instead, if (2) has no buffered data. More generally, we could short-circuit from (1) to (3) even in chunking mode if the write size from (1) is over some threshold and nothing is in (2).  The answer might be mostly making bufferBeforeChunkingSize smaller and having bufio's fast-paths deal with this instead. 

##### <a name="net-http-type-response-WriteString">func (w *response) WriteString(data string) (n int, err error)</a>

```Go
func (w *response) WriteString(data string) (n int, err error)
```

##### <a name="net-http-type-response-write">func (w *response) write(lenData int, dataB []byte, dataS string) (n int, err error)</a>

```Go
func (w *response) write(lenData int, dataB []byte, dataS string) (n int, err error)
```

either dataB or dataS is non-zero. 

##### <a name="net-http-type-response-finishRequest">func (w *response) finishRequest()</a>

```Go
func (w *response) finishRequest()
```

##### <a name="net-http-type-response-shouldReuseConnection">func (w *response) shouldReuseConnection() bool</a>

```Go
func (w *response) shouldReuseConnection() bool
```

shouldReuseConnection reports whether the underlying TCP connection can be reused. It must only be called after the handler is done executing. 

##### <a name="net-http-type-response-closedRequestBodyEarly">func (w *response) closedRequestBodyEarly() bool</a>

```Go
func (w *response) closedRequestBodyEarly() bool
```

##### <a name="net-http-type-response-Flush">func (w *response) Flush()</a>

```Go
func (w *response) Flush()
```

##### <a name="net-http-type-response-sendExpectationFailed">func (w *response) sendExpectationFailed()</a>

```Go
func (w *response) sendExpectationFailed()
```

##### <a name="net-http-type-response-Hijack">func (w *response) Hijack() (rwc net.Conn, buf *bufio.ReadWriter, err error)</a>

```Go
func (w *response) Hijack() (rwc net.Conn, buf *bufio.ReadWriter, err error)
```

Hijack implements the Hijacker.Hijack method. Our response is both a ResponseWriter and a Hijacker. 

##### <a name="net-http-type-response-CloseNotify">func (w *response) CloseNotify() <-chan bool</a>

```Go
func (w *response) CloseNotify() <-chan bool
```

#### <a name="net-http-type-atomicBool">type atomicBool int32</a>

```Go
type atomicBool int32
```

##### <a name="net-http-type-atomicBool-isSet">func (b *atomicBool) isSet() bool</a>

```Go
func (b *atomicBool) isSet() bool
```

##### <a name="net-http-type-atomicBool-setTrue">func (b *atomicBool) setTrue()</a>

```Go
func (b *atomicBool) setTrue()
```

##### <a name="net-http-type-atomicBool-setFalse">func (b *atomicBool) setFalse()</a>

```Go
func (b *atomicBool) setFalse()
```

#### <a name="net-http-type-writerOnly">type writerOnly struct</a>

```Go
type writerOnly struct {
	io.Writer
}
```

writerOnly hides an io.Writer value's optional ReadFrom method from io.Copy. 

#### <a name="net-http-type-readResult">type readResult struct</a>

```Go
type readResult struct {
	_   incomparable
	n   int
	err error
	b   byte // byte read, if n == 1
}
```

#### <a name="net-http-type-connReader">type connReader struct</a>

```Go
type connReader struct {
	conn *conn

	mu      sync.Mutex // guards following
	hasByte bool
	byteBuf [1]byte
	cond    *sync.Cond
	inRead  bool
	aborted bool  // set true before conn.rwc deadline is set to past
	remain  int64 // bytes remaining
}
```

connReader is the io.Reader wrapper used by *conn. It combines a selectively-activated io.LimitedReader (to bound request header read sizes) with support for selectively keeping an io.Reader.Read call blocked in a background goroutine to wait for activity and trigger a CloseNotifier channel. 

##### <a name="net-http-type-connReader-lock">func (cr *connReader) lock()</a>

```Go
func (cr *connReader) lock()
```

##### <a name="net-http-type-connReader-unlock">func (cr *connReader) unlock()</a>

```Go
func (cr *connReader) unlock()
```

##### <a name="net-http-type-connReader-startBackgroundRead">func (cr *connReader) startBackgroundRead()</a>

```Go
func (cr *connReader) startBackgroundRead()
```

##### <a name="net-http-type-connReader-backgroundRead">func (cr *connReader) backgroundRead()</a>

```Go
func (cr *connReader) backgroundRead()
```

##### <a name="net-http-type-connReader-abortPendingRead">func (cr *connReader) abortPendingRead()</a>

```Go
func (cr *connReader) abortPendingRead()
```

##### <a name="net-http-type-connReader-setReadLimit">func (cr *connReader) setReadLimit(remain int64)</a>

```Go
func (cr *connReader) setReadLimit(remain int64)
```

##### <a name="net-http-type-connReader-setInfiniteReadLimit">func (cr *connReader) setInfiniteReadLimit()</a>

```Go
func (cr *connReader) setInfiniteReadLimit()
```

##### <a name="net-http-type-connReader-hitReadLimit">func (cr *connReader) hitReadLimit() bool</a>

```Go
func (cr *connReader) hitReadLimit() bool
```

##### <a name="net-http-type-connReader-handleReadError">func (cr *connReader) handleReadError(_ error)</a>

```Go
func (cr *connReader) handleReadError(_ error)
```

handleReadError is called whenever a Read from the client returns a non-nil error. 

The provided non-nil err is almost always io.EOF or a "use of closed network connection". In any case, the error is not particularly interesting, except perhaps for debugging during development. Any error means the connection is dead and we should down its context. 

It may be called from multiple goroutines. 

##### <a name="net-http-type-connReader-closeNotify">func (cr *connReader) closeNotify()</a>

```Go
func (cr *connReader) closeNotify()
```

may be called from multiple goroutines. 

##### <a name="net-http-type-connReader-Read">func (cr *connReader) Read(p []byte) (n int, err error)</a>

```Go
func (cr *connReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-expectContinueReader">type expectContinueReader struct</a>

```Go
type expectContinueReader struct {
	resp       *response
	readCloser io.ReadCloser
	closed     atomicBool
	sawEOF     atomicBool
}
```

wrapper around io.ReadCloser which on first read, sends an HTTP/1.1 100 Continue header 

##### <a name="net-http-type-expectContinueReader-Read">func (ecr *expectContinueReader) Read(p []byte) (n int, err error)</a>

```Go
func (ecr *expectContinueReader) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-expectContinueReader-Close">func (ecr *expectContinueReader) Close() error</a>

```Go
func (ecr *expectContinueReader) Close() error
```

#### <a name="net-http-type-extraHeader">type extraHeader struct</a>

```Go
type extraHeader struct {
	contentType      string
	connection       string
	transferEncoding string
	date             []byte // written if not nil
	contentLength    []byte // written if not nil
}
```

extraHeader is the set of headers sometimes added by chunkWriter.writeHeader. This type is used to avoid extra allocations from cloning and/or populating the response Header map and all its 1-element slices. 

##### <a name="net-http-type-extraHeader-Write">func (h extraHeader) Write(w *bufio.Writer)</a>

```Go
func (h extraHeader) Write(w *bufio.Writer)
```

Write writes the headers described in h to w. 

This method has a value receiver, despite the somewhat large size of h, because it prevents an allocation. The escape analysis isn't smart enough to realize this function doesn't mutate h. 

#### <a name="net-http-type-closeWriter">type closeWriter interface</a>

```Go
type closeWriter interface {
	CloseWrite() error
}
```

#### <a name="net-http-type-statusError">type statusError struct</a>

```Go
type statusError struct {
	code int
	text string
}
```

statusError is an error used to respond to a request with an HTTP status. The text should be plain text without user info or other embedded errors. 

##### <a name="net-http-type-statusError-Error">func (e statusError) Error() string</a>

```Go
func (e statusError) Error() string
```

#### <a name="net-http-type-HandlerFunc">type HandlerFunc func(net/http.ResponseWriter, *net/http.Request) <small>(exported)</small></a>

```Go
type HandlerFunc func(ResponseWriter, *Request)
```

The HandlerFunc type is an adapter to allow the use of ordinary functions as HTTP handlers. If f is a function with the appropriate signature, HandlerFunc(f) is a Handler that calls f. 

##### <a name="net-http-type-HandlerFunc-http2new400Handler">func http2new400Handler(err error) HandlerFunc</a>

```Go
func http2new400Handler(err error) HandlerFunc
```

##### <a name="net-http-type-HandlerFunc-ServeHTTP">func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) <small>(exported)</small></a>

```Go
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)
```

ServeHTTP calls f(w, r). 

#### <a name="net-http-type-redirectHandler">type redirectHandler struct</a>

```Go
type redirectHandler struct {
	url  string
	code int
}
```

Redirect to a fixed URL 

##### <a name="net-http-type-redirectHandler-ServeHTTP">func (rh *redirectHandler) ServeHTTP(w ResponseWriter, r *Request)</a>

```Go
func (rh *redirectHandler) ServeHTTP(w ResponseWriter, r *Request)
```

#### <a name="net-http-type-ServeMux">type ServeMux struct <small>(exported)</small></a>

```Go
type ServeMux struct {
	mu    sync.RWMutex
	m     map[string]muxEntry
	es    []muxEntry // slice of entries sorted from longest to shortest.
	hosts bool       // whether any patterns contain hostnames
}
```

ServeMux is an HTTP request multiplexer. It matches the URL of each incoming request against a list of registered patterns and calls the handler for the pattern that most closely matches the URL. 

Patterns name fixed, rooted paths, like "/favicon.ico", or rooted subtrees, like "/images/" (note the trailing slash). Longer patterns take precedence over shorter ones, so that if there are handlers registered for both "/images/" and "/images/thumbnails/", the latter handler will be called for paths beginning "/images/thumbnails/" and the former will receive requests for any other paths in the "/images/" subtree. 

Note that since a pattern ending in a slash names a rooted subtree, the pattern "/" matches all paths not matched by other registered patterns, not just the URL with Path == "/". 

If a subtree has been registered and a request is received naming the subtree root without its trailing slash, ServeMux redirects that request to the subtree root (adding the trailing slash). This behavior can be overridden with a separate registration for the path without the trailing slash. For example, registering "/images/" causes ServeMux to redirect a request for "/images" to "/images/", unless "/images" has been registered separately. 

Patterns may optionally begin with a host name, restricting matches to URLs on that host only. Host-specific patterns take precedence over general patterns, so that a handler might register for the two patterns "/codesearch" and "codesearch.google.com/" without also taking over requests for "[http://www.google.com/](http://www.google.com/)". 

ServeMux also takes care of sanitizing the URL request path and the Host header, stripping the port number and redirecting any request containing . or .. elements or repeated slashes to an equivalent, cleaner URL. 

##### <a name="net-http-type-ServeMux-NewServeMux">func NewServeMux() *ServeMux <small>(exported)</small></a>

```Go
func NewServeMux() *ServeMux
```

NewServeMux allocates and returns a new ServeMux. 

##### <a name="net-http-type-ServeMux-match">func (mux *ServeMux) match(path string) (h Handler, pattern string)</a>

```Go
func (mux *ServeMux) match(path string) (h Handler, pattern string)
```

Find a handler on a handler map given a path string. Most-specific (longest) pattern wins. 

##### <a name="net-http-type-ServeMux-redirectToPathSlash">func (mux *ServeMux) redirectToPathSlash(host, path string, u *url.URL) (*url.URL, bool)</a>

```Go
func (mux *ServeMux) redirectToPathSlash(host, path string, u *url.URL) (*url.URL, bool)
```

redirectToPathSlash determines if the given path needs appending "/" to it. This occurs when a handler for path + "/" was already registered, but not for path itself. If the path needs appending to, it creates a new URL, setting the path to u.Path + "/" and returning true to indicate so. 

##### <a name="net-http-type-ServeMux-shouldRedirectRLocked">func (mux *ServeMux) shouldRedirectRLocked(host, path string) bool</a>

```Go
func (mux *ServeMux) shouldRedirectRLocked(host, path string) bool
```

shouldRedirectRLocked reports whether the given path and host should be redirected to path+"/". This should happen if a handler is registered for path+"/" but not path -- see comments at ServeMux. 

##### <a name="net-http-type-ServeMux-Handler">func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string) <small>(exported)</small></a>

```Go
func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string)
```

Handler returns the handler to use for the given request, consulting r.Method, r.Host, and r.URL.Path. It always returns a non-nil handler. If the path is not in its canonical form, the handler will be an internally-generated handler that redirects to the canonical path. If the host contains a port, it is ignored when matching handlers. 

The path and host are used unchanged for CONNECT requests. 

Handler also returns the registered pattern that matches the request or, in the case of internally-generated redirects, the pattern that will match after following the redirect. 

If there is no registered handler that applies to the request, Handler returns a `page not found' handler and an empty pattern. 

##### <a name="net-http-type-ServeMux-handler">func (mux *ServeMux) handler(host, path string) (h Handler, pattern string)</a>

```Go
func (mux *ServeMux) handler(host, path string) (h Handler, pattern string)
```

handler is the main implementation of Handler. The path is known to be in canonical form, except for CONNECT methods. 

##### <a name="net-http-type-ServeMux-ServeHTTP">func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request) <small>(exported)</small></a>

```Go
func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request)
```

ServeHTTP dispatches the request to the handler whose pattern most closely matches the request URL. 

##### <a name="net-http-type-ServeMux-Handle">func (mux *ServeMux) Handle(pattern string, handler Handler) <small>(exported)</small></a>

```Go
func (mux *ServeMux) Handle(pattern string, handler Handler)
```

Handle registers the handler for the given pattern. If a handler already exists for pattern, Handle panics. 

##### <a name="net-http-type-ServeMux-HandleFunc">func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) <small>(exported)</small></a>

```Go
func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request))
```

HandleFunc registers the handler function for the given pattern. 

#### <a name="net-http-type-muxEntry">type muxEntry struct</a>

```Go
type muxEntry struct {
	h       Handler
	pattern string
}
```

#### <a name="net-http-type-Server">type Server struct <small>(exported)</small></a>

```Go
type Server struct {
	// Addr optionally specifies the TCP address for the server to listen on,
	// in the form "host:port". If empty, ":http" (port 80) is used.
	// The service names are defined in RFC 6335 and assigned by IANA.
	// See net.Dial for details of the address format.
	Addr string

	Handler Handler // handler to invoke, http.DefaultServeMux if nil

	// TLSConfig optionally provides a TLS configuration for use
	// by ServeTLS and ListenAndServeTLS. Note that this value is
	// cloned by ServeTLS and ListenAndServeTLS, so it's not
	// possible to modify the configuration with methods like
	// tls.Config.SetSessionTicketKeys. To use
	// SetSessionTicketKeys, use Server.Serve with a TLS Listener
	// instead.
	TLSConfig *tls.Config

	// ReadTimeout is the maximum duration for reading the entire
	// request, including the body.
	//
	// Because ReadTimeout does not let Handlers make per-request
	// decisions on each request body's acceptable deadline or
	// upload rate, most users will prefer to use
	// ReadHeaderTimeout. It is valid to use them both.
	ReadTimeout time.Duration

	// ReadHeaderTimeout is the amount of time allowed to read
	// request headers. The connection's read deadline is reset
	// after reading the headers and the Handler can decide what
	// is considered too slow for the body. If ReadHeaderTimeout
	// is zero, the value of ReadTimeout is used. If both are
	// zero, there is no timeout.
	ReadHeaderTimeout time.Duration

	// WriteTimeout is the maximum duration before timing out
	// writes of the response. It is reset whenever a new
	// request's header is read. Like ReadTimeout, it does not
	// let Handlers make decisions on a per-request basis.
	WriteTimeout time.Duration

	// IdleTimeout is the maximum amount of time to wait for the
	// next request when keep-alives are enabled. If IdleTimeout
	// is zero, the value of ReadTimeout is used. If both are
	// zero, there is no timeout.
	IdleTimeout time.Duration

	// MaxHeaderBytes controls the maximum number of bytes the
	// server will read parsing the request header's keys and
	// values, including the request line. It does not limit the
	// size of the request body.
	// If zero, DefaultMaxHeaderBytes is used.
	MaxHeaderBytes int

	// TLSNextProto optionally specifies a function to take over
	// ownership of the provided TLS connection when an ALPN
	// protocol upgrade has occurred. The map key is the protocol
	// name negotiated. The Handler argument should be used to
	// handle HTTP requests and will initialize the Request's TLS
	// and RemoteAddr if not already set. The connection is
	// automatically closed when the function returns.
	// If TLSNextProto is not nil, HTTP/2 support is not enabled
	// automatically.
	TLSNextProto map[string]func(*Server, *tls.Conn, Handler)

	// ConnState specifies an optional callback function that is
	// called when a client connection changes state. See the
	// ConnState type and associated constants for details.
	ConnState func(net.Conn, ConnState)

	// ErrorLog specifies an optional logger for errors accepting
	// connections, unexpected behavior from handlers, and
	// underlying FileSystem errors.
	// If nil, logging is done via the log package's standard logger.
	ErrorLog *log.Logger

	// BaseContext optionally specifies a function that returns
	// the base context for incoming requests on this server.
	// The provided Listener is the specific Listener that's
	// about to start accepting requests.
	// If BaseContext is nil, the default is context.Background().
	// If non-nil, it must return a non-nil context.
	BaseContext func(net.Listener) context.Context

	// ConnContext optionally specifies a function that modifies
	// the context used for a new connection c. The provided ctx
	// is derived from the base context and has a ServerContextKey
	// value.
	ConnContext func(ctx context.Context, c net.Conn) context.Context

	inShutdown atomicBool // true when when server is in shutdown

	disableKeepAlives int32     // accessed atomically.
	nextProtoOnce     sync.Once // guards setupHTTP2_* init
	nextProtoErr      error     // result of http2.ConfigureServer if used

	mu         sync.Mutex
	listeners  map[*net.Listener]struct{}
	activeConn map[*conn]struct{}
	doneChan   chan struct{}
	onShutdown []func()
}
```

A Server defines parameters for running an HTTP server. The zero value for Server is a valid configuration. 

##### <a name="net-http-type-Server-newConn">func (srv *Server) newConn(rwc net.Conn) *conn</a>

```Go
func (srv *Server) newConn(rwc net.Conn) *conn
```

Create new connection from rwc. 

##### <a name="net-http-type-Server-maxHeaderBytes">func (srv *Server) maxHeaderBytes() int</a>

```Go
func (srv *Server) maxHeaderBytes() int
```

##### <a name="net-http-type-Server-initialReadLimitSize">func (srv *Server) initialReadLimitSize() int64</a>

```Go
func (srv *Server) initialReadLimitSize() int64
```

##### <a name="net-http-type-Server-getDoneChan">func (s *Server) getDoneChan() <-chan struct{}</a>

```Go
func (s *Server) getDoneChan() <-chan struct{}
```

##### <a name="net-http-type-Server-getDoneChanLocked">func (s *Server) getDoneChanLocked() chan struct{}</a>

```Go
func (s *Server) getDoneChanLocked() chan struct{}
```

##### <a name="net-http-type-Server-closeDoneChanLocked">func (s *Server) closeDoneChanLocked()</a>

```Go
func (s *Server) closeDoneChanLocked()
```

##### <a name="net-http-type-Server-Close">func (srv *Server) Close() error <small>(exported)</small></a>

```Go
func (srv *Server) Close() error
```

Close immediately closes all active net.Listeners and any connections in state StateNew, StateActive, or StateIdle. For a graceful shutdown, use Shutdown. 

Close does not attempt to close (and does not even know about) any hijacked connections, such as WebSockets. 

Close returns any error returned from closing the Server's underlying Listener(s). 

##### <a name="net-http-type-Server-Shutdown">func (srv *Server) Shutdown(ctx context.Context) error <small>(exported)</small></a>

```Go
func (srv *Server) Shutdown(ctx context.Context) error
```

Shutdown gracefully shuts down the server without interrupting any active connections. Shutdown works by first closing all open listeners, then closing all idle connections, and then waiting indefinitely for connections to return to idle and then shut down. If the provided context expires before the shutdown is complete, Shutdown returns the context's error, otherwise it returns any error returned from closing the Server's underlying Listener(s). 

When Shutdown is called, Serve, ListenAndServe, and ListenAndServeTLS immediately return ErrServerClosed. Make sure the program doesn't exit and waits instead for Shutdown to return. 

Shutdown does not attempt to close nor wait for hijacked connections such as WebSockets. The caller of Shutdown should separately notify such long-lived connections of shutdown and wait for them to close, if desired. See RegisterOnShutdown for a way to register shutdown notification functions. 

Once Shutdown has been called on a server, it may not be reused; future calls to methods such as Serve will return ErrServerClosed. 

##### <a name="net-http-type-Server-RegisterOnShutdown">func (srv *Server) RegisterOnShutdown(f func()) <small>(exported)</small></a>

```Go
func (srv *Server) RegisterOnShutdown(f func())
```

RegisterOnShutdown registers a function to call on Shutdown. This can be used to gracefully shutdown connections that have undergone ALPN protocol upgrade or that have been hijacked. This function should start protocol-specific graceful shutdown, but should not wait for shutdown to complete. 

##### <a name="net-http-type-Server-numListeners">func (s *Server) numListeners() int</a>

```Go
func (s *Server) numListeners() int
```

##### <a name="net-http-type-Server-closeIdleConns">func (s *Server) closeIdleConns() bool</a>

```Go
func (s *Server) closeIdleConns() bool
```

closeIdleConns closes all idle connections and reports whether the server is quiescent. 

##### <a name="net-http-type-Server-closeListenersLocked">func (s *Server) closeListenersLocked() error</a>

```Go
func (s *Server) closeListenersLocked() error
```

##### <a name="net-http-type-Server-ListenAndServe">func (srv *Server) ListenAndServe() error <small>(exported)</small></a>

```Go
func (srv *Server) ListenAndServe() error
```

ListenAndServe listens on the TCP network address srv.Addr and then calls Serve to handle requests on incoming connections. Accepted connections are configured to enable TCP keep-alives. 

If srv.Addr is blank, ":http" is used. 

ListenAndServe always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed. 

##### <a name="net-http-type-Server-shouldConfigureHTTP2ForServe">func (srv *Server) shouldConfigureHTTP2ForServe() bool</a>

```Go
func (srv *Server) shouldConfigureHTTP2ForServe() bool
```

shouldDoServeHTTP2 reports whether Server.Serve should configure automatic HTTP/2. (which sets up the srv.TLSNextProto map) 

##### <a name="net-http-type-Server-Serve">func (srv *Server) Serve(l net.Listener) error <small>(exported)</small></a>

```Go
func (srv *Server) Serve(l net.Listener) error
```

Serve accepts incoming connections on the Listener l, creating a new service goroutine for each. The service goroutines read requests and then call srv.Handler to reply to them. 

HTTP/2 support is only enabled if the Listener returns *tls.Conn connections and they were configured with "h2" in the TLS Config.NextProtos. 

Serve always returns a non-nil error and closes l. After Shutdown or Close, the returned error is ErrServerClosed. 

##### <a name="net-http-type-Server-ServeTLS">func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error <small>(exported)</small></a>

```Go
func (srv *Server) ServeTLS(l net.Listener, certFile, keyFile string) error
```

ServeTLS accepts incoming connections on the Listener l, creating a new service goroutine for each. The service goroutines perform TLS setup and then read requests, calling srv.Handler to reply to them. 

Files containing a certificate and matching private key for the server must be provided if neither the Server's TLSConfig.Certificates nor TLSConfig.GetCertificate are populated. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate. 

ServeTLS always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed. 

##### <a name="net-http-type-Server-trackListener">func (s *Server) trackListener(ln *net.Listener, add bool) bool</a>

```Go
func (s *Server) trackListener(ln *net.Listener, add bool) bool
```

trackListener adds or removes a net.Listener to the set of tracked listeners. 

We store a pointer to interface in the map set, in case the net.Listener is not comparable. This is safe because we only call trackListener via Serve and can track+defer untrack the same pointer to local variable there. We never need to compare a Listener from another caller. 

It reports whether the server is still up (not Shutdown or Closed). 

##### <a name="net-http-type-Server-trackConn">func (s *Server) trackConn(c *conn, add bool)</a>

```Go
func (s *Server) trackConn(c *conn, add bool)
```

##### <a name="net-http-type-Server-idleTimeout">func (s *Server) idleTimeout() time.Duration</a>

```Go
func (s *Server) idleTimeout() time.Duration
```

##### <a name="net-http-type-Server-readHeaderTimeout">func (s *Server) readHeaderTimeout() time.Duration</a>

```Go
func (s *Server) readHeaderTimeout() time.Duration
```

##### <a name="net-http-type-Server-doKeepAlives">func (s *Server) doKeepAlives() bool</a>

```Go
func (s *Server) doKeepAlives() bool
```

##### <a name="net-http-type-Server-shuttingDown">func (s *Server) shuttingDown() bool</a>

```Go
func (s *Server) shuttingDown() bool
```

##### <a name="net-http-type-Server-SetKeepAlivesEnabled">func (srv *Server) SetKeepAlivesEnabled(v bool) <small>(exported)</small></a>

```Go
func (srv *Server) SetKeepAlivesEnabled(v bool)
```

SetKeepAlivesEnabled controls whether HTTP keep-alives are enabled. By default, keep-alives are always enabled. Only very resource-constrained environments or servers in the process of shutting down should disable them. 

##### <a name="net-http-type-Server-logf">func (s *Server) logf(format string, args ...interface{})</a>

```Go
func (s *Server) logf(format string, args ...interface{})
```

##### <a name="net-http-type-Server-ListenAndServeTLS">func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error <small>(exported)</small></a>

```Go
func (srv *Server) ListenAndServeTLS(certFile, keyFile string) error
```

ListenAndServeTLS listens on the TCP network address srv.Addr and then calls ServeTLS to handle requests on incoming TLS connections. Accepted connections are configured to enable TCP keep-alives. 

Filenames containing a certificate and matching private key for the server must be provided if neither the Server's TLSConfig.Certificates nor TLSConfig.GetCertificate are populated. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate. 

If srv.Addr is blank, ":https" is used. 

ListenAndServeTLS always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed. 

##### <a name="net-http-type-Server-setupHTTP2_ServeTLS">func (srv *Server) setupHTTP2_ServeTLS() error</a>

```Go
func (srv *Server) setupHTTP2_ServeTLS() error
```

setupHTTP2_ServeTLS conditionally configures HTTP/2 on srv and reports whether there was an error setting it up. If it is not configured for policy reasons, nil is returned. 

##### <a name="net-http-type-Server-setupHTTP2_Serve">func (srv *Server) setupHTTP2_Serve() error</a>

```Go
func (srv *Server) setupHTTP2_Serve() error
```

setupHTTP2_Serve is called from (*Server).Serve and conditionally configures HTTP/2 on srv using a more conservative policy than setupHTTP2_ServeTLS because Serve is called after tls.Listen, and may be called concurrently. See shouldConfigureHTTP2ForServe. 

The tests named TestTransportAutomaticHTTP2* and TestConcurrentServerServe in server_test.go demonstrate some of the supported use cases and motivations. 

##### <a name="net-http-type-Server-onceSetNextProtoDefaults_Serve">func (srv *Server) onceSetNextProtoDefaults_Serve()</a>

```Go
func (srv *Server) onceSetNextProtoDefaults_Serve()
```

##### <a name="net-http-type-Server-onceSetNextProtoDefaults">func (srv *Server) onceSetNextProtoDefaults()</a>

```Go
func (srv *Server) onceSetNextProtoDefaults()
```

onceSetNextProtoDefaults configures HTTP/2, if the user hasn't configured otherwise. (by setting srv.TLSNextProto non-nil) It must only be called via srv.nextProtoOnce (use srv.setupHTTP2_*). 

##### <a name="net-http-type-Server-ExportAllConnsIdle">func (s *Server) ExportAllConnsIdle() bool</a>

```Go
func (s *Server) ExportAllConnsIdle() bool
```

##### <a name="net-http-type-Server-ExportAllConnsByState">func (s *Server) ExportAllConnsByState() map[ConnState]int</a>

```Go
func (s *Server) ExportAllConnsByState() map[ConnState]int
```

#### <a name="net-http-type-ConnState">type ConnState int <small>(exported)</small></a>

```Go
type ConnState int
```

A ConnState represents the state of a client connection to a server. It's used by the optional Server.ConnState hook. 

##### <a name="net-http-type-ConnState-String">func (c ConnState) String() string <small>(exported)</small></a>

```Go
func (c ConnState) String() string
```

#### <a name="net-http-type-serverHandler">type serverHandler struct</a>

```Go
type serverHandler struct {
	srv *Server
}
```

serverHandler delegates to either the server's Handler or DefaultServeMux and also handles "OPTIONS *" requests. 

##### <a name="net-http-type-serverHandler-ServeHTTP">func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)</a>

```Go
func (sh serverHandler) ServeHTTP(rw ResponseWriter, req *Request)
```

#### <a name="net-http-type-timeoutHandler">type timeoutHandler struct</a>

```Go
type timeoutHandler struct {
	handler Handler
	body    string
	dt      time.Duration

	// When set, no context will be created and this context will
	// be used instead.
	testContext context.Context
}
```

##### <a name="net-http-type-timeoutHandler-errorBody">func (h *timeoutHandler) errorBody() string</a>

```Go
func (h *timeoutHandler) errorBody() string
```

##### <a name="net-http-type-timeoutHandler-ServeHTTP">func (h *timeoutHandler) ServeHTTP(w ResponseWriter, r *Request)</a>

```Go
func (h *timeoutHandler) ServeHTTP(w ResponseWriter, r *Request)
```

#### <a name="net-http-type-timeoutWriter">type timeoutWriter struct</a>

```Go
type timeoutWriter struct {
	w    ResponseWriter
	h    Header
	wbuf bytes.Buffer
	req  *Request

	mu          sync.Mutex
	timedOut    bool
	wroteHeader bool
	code        int
}
```

##### <a name="net-http-type-timeoutWriter-Push">func (tw *timeoutWriter) Push(target string, opts *PushOptions) error</a>

```Go
func (tw *timeoutWriter) Push(target string, opts *PushOptions) error
```

Push implements the Pusher interface. 

##### <a name="net-http-type-timeoutWriter-Header">func (tw *timeoutWriter) Header() Header</a>

```Go
func (tw *timeoutWriter) Header() Header
```

##### <a name="net-http-type-timeoutWriter-Write">func (tw *timeoutWriter) Write(p []byte) (int, error)</a>

```Go
func (tw *timeoutWriter) Write(p []byte) (int, error)
```

##### <a name="net-http-type-timeoutWriter-writeHeaderLocked">func (tw *timeoutWriter) writeHeaderLocked(code int)</a>

```Go
func (tw *timeoutWriter) writeHeaderLocked(code int)
```

##### <a name="net-http-type-timeoutWriter-WriteHeader">func (tw *timeoutWriter) WriteHeader(code int)</a>

```Go
func (tw *timeoutWriter) WriteHeader(code int)
```

#### <a name="net-http-type-onceCloseListener">type onceCloseListener struct</a>

```Go
type onceCloseListener struct {
	net.Listener
	once     sync.Once
	closeErr error
}
```

onceCloseListener wraps a net.Listener, protecting it from multiple Close calls. 

##### <a name="net-http-type-onceCloseListener-Close">func (oc *onceCloseListener) Close() error</a>

```Go
func (oc *onceCloseListener) Close() error
```

##### <a name="net-http-type-onceCloseListener-close">func (oc *onceCloseListener) close()</a>

```Go
func (oc *onceCloseListener) close()
```

#### <a name="net-http-type-globalOptionsHandler">type globalOptionsHandler struct{}</a>

```Go
type globalOptionsHandler struct{}
```

globalOptionsHandler responds to "OPTIONS *" requests. 

##### <a name="net-http-type-globalOptionsHandler-ServeHTTP">func (globalOptionsHandler) ServeHTTP(w ResponseWriter, r *Request)</a>

```Go
func (globalOptionsHandler) ServeHTTP(w ResponseWriter, r *Request)
```

#### <a name="net-http-type-initALPNRequest">type initALPNRequest struct</a>

```Go
type initALPNRequest struct {
	ctx context.Context
	c   *tls.Conn
	h   serverHandler
}
```

initALPNRequest is an HTTP handler that initializes certain uninitialized fields in its *Request. Such partially-initialized Requests come from ALPN protocol handlers. 

##### <a name="net-http-type-initALPNRequest-BaseContext">func (h initALPNRequest) BaseContext() context.Context</a>

```Go
func (h initALPNRequest) BaseContext() context.Context
```

BaseContext is an exported but unadvertised http.Handler method recognized by x/net/http2 to pass down a context; the TLSNextProto API predates context support so we shoehorn through the only interface we have available. 

##### <a name="net-http-type-initALPNRequest-ServeHTTP">func (h initALPNRequest) ServeHTTP(rw ResponseWriter, req *Request)</a>

```Go
func (h initALPNRequest) ServeHTTP(rw ResponseWriter, req *Request)
```

#### <a name="net-http-type-loggingConn">type loggingConn struct</a>

```Go
type loggingConn struct {
	name string
	net.Conn
}
```

loggingConn is used for debugging. 

##### <a name="net-http-type-loggingConn-Write">func (c *loggingConn) Write(p []byte) (n int, err error)</a>

```Go
func (c *loggingConn) Write(p []byte) (n int, err error)
```

##### <a name="net-http-type-loggingConn-Read">func (c *loggingConn) Read(p []byte) (n int, err error)</a>

```Go
func (c *loggingConn) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-loggingConn-Close">func (c *loggingConn) Close() (err error)</a>

```Go
func (c *loggingConn) Close() (err error)
```

#### <a name="net-http-type-checkConnErrorWriter">type checkConnErrorWriter struct</a>

```Go
type checkConnErrorWriter struct {
	c *conn
}
```

checkConnErrorWriter writes to c.rwc and records any write errors to c.werr. It only contains one field (and a pointer field at that), so it fits in an interface value without an extra allocation. 

##### <a name="net-http-type-checkConnErrorWriter-Write">func (w checkConnErrorWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w checkConnErrorWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-sniffSig">type sniffSig interface</a>

```Go
type sniffSig interface {
	// match returns the MIME type of the data, or "" if unknown.
	match(data []byte, firstNonWS int) string
}
```

#### <a name="net-http-type-exactSig">type exactSig struct</a>

```Go
type exactSig struct {
	sig []byte
	ct  string
}
```

##### <a name="net-http-type-exactSig-match">func (e *exactSig) match(data []byte, firstNonWS int) string</a>

```Go
func (e *exactSig) match(data []byte, firstNonWS int) string
```

#### <a name="net-http-type-maskedSig">type maskedSig struct</a>

```Go
type maskedSig struct {
	mask, pat []byte
	skipWS    bool
	ct        string
}
```

##### <a name="net-http-type-maskedSig-match">func (m *maskedSig) match(data []byte, firstNonWS int) string</a>

```Go
func (m *maskedSig) match(data []byte, firstNonWS int) string
```

#### <a name="net-http-type-htmlSig">type htmlSig []byte</a>

```Go
type htmlSig []byte
```

##### <a name="net-http-type-htmlSig-match">func (h htmlSig) match(data []byte, firstNonWS int) string</a>

```Go
func (h htmlSig) match(data []byte, firstNonWS int) string
```

#### <a name="net-http-type-mp4Sig">type mp4Sig struct{}</a>

```Go
type mp4Sig struct{}
```

##### <a name="net-http-type-mp4Sig-match">func (mp4Sig) match(data []byte, firstNonWS int) string</a>

```Go
func (mp4Sig) match(data []byte, firstNonWS int) string
```

#### <a name="net-http-type-textSig">type textSig struct{}</a>

```Go
type textSig struct{}
```

##### <a name="net-http-type-textSig-match">func (textSig) match(data []byte, firstNonWS int) string</a>

```Go
func (textSig) match(data []byte, firstNonWS int) string
```

#### <a name="net-http-type-socksCommand">type socksCommand int</a>

```Go
type socksCommand int
```

A Command represents a SOCKS command. 

##### <a name="net-http-type-socksCommand-String">func (cmd socksCommand) String() string</a>

```Go
func (cmd socksCommand) String() string
```

#### <a name="net-http-type-socksAuthMethod">type socksAuthMethod int</a>

```Go
type socksAuthMethod int
```

An AuthMethod represents a SOCKS authentication method. 

#### <a name="net-http-type-socksReply">type socksReply int</a>

```Go
type socksReply int
```

A Reply represents a SOCKS command reply code. 

##### <a name="net-http-type-socksReply-String">func (code socksReply) String() string</a>

```Go
func (code socksReply) String() string
```

#### <a name="net-http-type-socksAddr">type socksAddr struct</a>

```Go
type socksAddr struct {
	Name string // fully-qualified domain name
	IP   net.IP
	Port int
}
```

An Addr represents a SOCKS-specific address. Either Name or IP is used exclusively. 

##### <a name="net-http-type-socksAddr-Network">func (a *socksAddr) Network() string</a>

```Go
func (a *socksAddr) Network() string
```

##### <a name="net-http-type-socksAddr-String">func (a *socksAddr) String() string</a>

```Go
func (a *socksAddr) String() string
```

#### <a name="net-http-type-socksConn">type socksConn struct</a>

```Go
type socksConn struct {
	net.Conn

	boundAddr net.Addr
}
```

A Conn represents a forward proxy connection. 

##### <a name="net-http-type-socksConn-BoundAddr">func (c *socksConn) BoundAddr() net.Addr</a>

```Go
func (c *socksConn) BoundAddr() net.Addr
```

BoundAddr returns the address assigned by the proxy server for connecting to the command target address from the proxy server. 

#### <a name="net-http-type-socksDialer">type socksDialer struct</a>

```Go
type socksDialer struct {
	cmd          socksCommand // either CmdConnect or cmdBind
	proxyNetwork string       // network between a proxy server and a client
	proxyAddress string       // proxy server address

	// ProxyDial specifies the optional dial function for
	// establishing the transport connection.
	ProxyDial func(context.Context, string, string) (net.Conn, error)

	// AuthMethods specifies the list of request authentication
	// methods.
	// If empty, SOCKS client requests only AuthMethodNotRequired.
	AuthMethods []socksAuthMethod

	// Authenticate specifies the optional authentication
	// function. It must be non-nil when AuthMethods is not empty.
	// It must return an error when the authentication is failed.
	Authenticate func(context.Context, io.ReadWriter, socksAuthMethod) error
}
```

A Dialer holds SOCKS-specific options. 

##### <a name="net-http-type-socksDialer-socksNewDialer">func socksNewDialer(network, address string) *socksDialer</a>

```Go
func socksNewDialer(network, address string) *socksDialer
```

NewDialer returns a new Dialer that dials through the provided proxy server's network and address. 

##### <a name="net-http-type-socksDialer-connect">func (d *socksDialer) connect(ctx context.Context, c net.Conn, address string) (_ net.Addr, ctxErr error)</a>

```Go
func (d *socksDialer) connect(ctx context.Context, c net.Conn, address string) (_ net.Addr, ctxErr error)
```

##### <a name="net-http-type-socksDialer-DialContext">func (d *socksDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)</a>

```Go
func (d *socksDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)
```

DialContext connects to the provided address on the provided network. 

The returned error value may be a net.OpError. When the Op field of net.OpError contains "socks", the Source field contains a proxy server address and the Addr field contains a command target address. 

See func Dial of the net package of standard library for a description of the network and address parameters. 

##### <a name="net-http-type-socksDialer-DialWithConn">func (d *socksDialer) DialWithConn(ctx context.Context, c net.Conn, network, address string) (net.Addr, error)</a>

```Go
func (d *socksDialer) DialWithConn(ctx context.Context, c net.Conn, network, address string) (net.Addr, error)
```

DialWithConn initiates a connection from SOCKS server to the target network and address using the connection c that is already connected to the SOCKS server. 

It returns the connection's local address assigned by the SOCKS server. 

##### <a name="net-http-type-socksDialer-Dial">func (d *socksDialer) Dial(network, address string) (net.Conn, error) <small>(deprecated)</small></a>

```Go
func (d *socksDialer) Dial(network, address string) (net.Conn, error)
```

Dial connects to the provided address on the provided network. 

Unlike DialContext, it returns a raw transport connection instead of a forward proxy connection. 

Deprecated: Use DialContext or DialWithConn instead. 

##### <a name="net-http-type-socksDialer-validateTarget">func (d *socksDialer) validateTarget(network, address string) error</a>

```Go
func (d *socksDialer) validateTarget(network, address string) error
```

##### <a name="net-http-type-socksDialer-pathAddrs">func (d *socksDialer) pathAddrs(address string) (proxy, dst net.Addr, err error)</a>

```Go
func (d *socksDialer) pathAddrs(address string) (proxy, dst net.Addr, err error)
```

#### <a name="net-http-type-socksUsernamePassword">type socksUsernamePassword struct</a>

```Go
type socksUsernamePassword struct {
	Username string
	Password string
}
```

UsernamePassword are the credentials for the username/password authentication method. 

##### <a name="net-http-type-socksUsernamePassword-Authenticate">func (up *socksUsernamePassword) Authenticate(ctx context.Context, rw io.ReadWriter, auth socksAuthMethod) error</a>

```Go
func (up *socksUsernamePassword) Authenticate(ctx context.Context, rw io.ReadWriter, auth socksAuthMethod) error
```

Authenticate authenticates a pair of username and password with the proxy server. 

#### <a name="net-http-type-errorReader">type errorReader struct</a>

```Go
type errorReader struct {
	err error
}
```

##### <a name="net-http-type-errorReader-Read">func (r errorReader) Read(p []byte) (n int, err error)</a>

```Go
func (r errorReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-byteReader">type byteReader struct</a>

```Go
type byteReader struct {
	b    byte
	done bool
}
```

##### <a name="net-http-type-byteReader-Read">func (br *byteReader) Read(p []byte) (n int, err error)</a>

```Go
func (br *byteReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-transferWriter">type transferWriter struct</a>

```Go
type transferWriter struct {
	Method           string
	Body             io.Reader
	BodyCloser       io.Closer
	ResponseToHEAD   bool
	ContentLength    int64 // -1 means unknown, 0 means exactly none
	Close            bool
	TransferEncoding []string
	Header           Header
	Trailer          Header
	IsResponse       bool
	bodyReadError    error // any non-EOF error from reading Body

	FlushHeaders bool            // flush headers to network before body
	ByteReadCh   chan readResult // non-nil if probeRequestBody called
}
```

transferWriter inspects the fields of a user-supplied Request or Response, sanitizes them without changing the user object and provides methods for writing the respective header, body and trailer in wire format. 

##### <a name="net-http-type-transferWriter-newTransferWriter">func newTransferWriter(r interface{}) (t *transferWriter, err error)</a>

```Go
func newTransferWriter(r interface{}) (t *transferWriter, err error)
```

##### <a name="net-http-type-transferWriter-shouldSendChunkedRequestBody">func (t *transferWriter) shouldSendChunkedRequestBody() bool</a>

```Go
func (t *transferWriter) shouldSendChunkedRequestBody() bool
```

shouldSendChunkedRequestBody reports whether we should try to send a chunked request body to the server. In particular, the case we really want to prevent is sending a GET or other typically-bodyless request to a server with a chunked body when the body has zero bytes, since GETs with bodies (while acceptable according to specs), even zero-byte chunked bodies, are approximately never seen in the wild and confuse most servers. See Issue 18257, as one example. 

The only reason we'd send such a request is if the user set the Body to a non-nil value (say, io.NopCloser(bytes.NewReader(nil))) and didn't set ContentLength, or NewRequest set it to -1 (unknown), so then we assume there's bytes to send. 

This code tries to read a byte from the Request.Body in such cases to see whether the body actually has content (super rare) or is actually just a non-nil content-less ReadCloser (the more common case). In that more common case, we act as if their Body were nil instead, and don't send a body. 

##### <a name="net-http-type-transferWriter-probeRequestBody">func (t *transferWriter) probeRequestBody()</a>

```Go
func (t *transferWriter) probeRequestBody()
```

probeRequestBody reads a byte from t.Body to see whether it's empty (returns io.EOF right away). 

But because we've had problems with this blocking users in the past (issue 17480) when the body is a pipe (perhaps waiting on the response headers before the pipe is fed data), we need to be careful and bound how long we wait for it. This delay will only affect users if all the following are true: 

```
* the request body blocks
* the content length is not set (or set to -1)
* the method doesn't usually have a body (GET, HEAD, DELETE, ...)
* there is no transfer-encoding=chunked already set.

```
In other words, this delay will not normally affect anybody, and there are workarounds if it does. 

##### <a name="net-http-type-transferWriter-shouldSendContentLength">func (t *transferWriter) shouldSendContentLength() bool</a>

```Go
func (t *transferWriter) shouldSendContentLength() bool
```

##### <a name="net-http-type-transferWriter-writeHeader">func (t *transferWriter) writeHeader(w io.Writer, trace *httptrace.ClientTrace) error</a>

```Go
func (t *transferWriter) writeHeader(w io.Writer, trace *httptrace.ClientTrace) error
```

##### <a name="net-http-type-transferWriter-writeBody">func (t *transferWriter) writeBody(w io.Writer) (err error)</a>

```Go
func (t *transferWriter) writeBody(w io.Writer) (err error)
```

always closes t.BodyCloser 

##### <a name="net-http-type-transferWriter-doBodyCopy">func (t *transferWriter) doBodyCopy(dst io.Writer, src io.Reader) (n int64, err error)</a>

```Go
func (t *transferWriter) doBodyCopy(dst io.Writer, src io.Reader) (n int64, err error)
```

doBodyCopy wraps a copy operation, with any resulting error also being saved in bodyReadError. 

This function is only intended for use in writeBody. 

##### <a name="net-http-type-transferWriter-unwrapBody">func (t *transferWriter) unwrapBody() io.Reader</a>

```Go
func (t *transferWriter) unwrapBody() io.Reader
```

unwrapBodyReader unwraps the body's inner reader if it's a nopCloser. This is to ensure that body writes sourced from local files (*os.File types) are properly optimized. 

This function is only intended for use in writeBody. 

#### <a name="net-http-type-transferReader">type transferReader struct</a>

```Go
type transferReader struct {
	// Input
	Header        Header
	StatusCode    int
	RequestMethod string
	ProtoMajor    int
	ProtoMinor    int
	// Output
	Body          io.ReadCloser
	ContentLength int64
	Chunked       bool
	Close         bool
	Trailer       Header
}
```

##### <a name="net-http-type-transferReader-protoAtLeast">func (t *transferReader) protoAtLeast(m, n int) bool</a>

```Go
func (t *transferReader) protoAtLeast(m, n int) bool
```

##### <a name="net-http-type-transferReader-parseTransferEncoding">func (t *transferReader) parseTransferEncoding() error</a>

```Go
func (t *transferReader) parseTransferEncoding() error
```

parseTransferEncoding sets t.Chunked based on the Transfer-Encoding header. 

#### <a name="net-http-type-unsupportedTEError">type unsupportedTEError struct</a>

```Go
type unsupportedTEError struct {
	err string
}
```

unsupportedTEError reports unsupported transfer-encodings. 

##### <a name="net-http-type-unsupportedTEError-Error">func (uste *unsupportedTEError) Error() string</a>

```Go
func (uste *unsupportedTEError) Error() string
```

#### <a name="net-http-type-body">type body struct</a>

```Go
type body struct {
	src          io.Reader
	hdr          interface{}   // non-nil (Response or Request) value means read trailer
	r            *bufio.Reader // underlying wire-format reader for the trailer
	closing      bool          // is the connection to be closed after reading body?
	doEarlyClose bool          // whether Close should stop early

	mu         sync.Mutex // guards following, and calls to Read and Close
	sawEOF     bool
	closed     bool
	earlyClose bool   // Close called and we didn't read to the end of src
	onHitEOF   func() // if non-nil, func to call when EOF is Read
}
```

body turns a Reader into a ReadCloser. Close ensures that the body has been fully read and then reads the trailer if necessary. 

##### <a name="net-http-type-body-Read">func (b *body) Read(p []byte) (n int, err error)</a>

```Go
func (b *body) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-body-readLocked">func (b *body) readLocked(p []byte) (n int, err error)</a>

```Go
func (b *body) readLocked(p []byte) (n int, err error)
```

Must hold b.mu. 

##### <a name="net-http-type-body-readTrailer">func (b *body) readTrailer() error</a>

```Go
func (b *body) readTrailer() error
```

##### <a name="net-http-type-body-unreadDataSizeLocked">func (b *body) unreadDataSizeLocked() int64</a>

```Go
func (b *body) unreadDataSizeLocked() int64
```

unreadDataSizeLocked returns the number of bytes of unread input. It returns -1 if unknown. b.mu must be held. 

##### <a name="net-http-type-body-Close">func (b *body) Close() error</a>

```Go
func (b *body) Close() error
```

##### <a name="net-http-type-body-didEarlyClose">func (b *body) didEarlyClose() bool</a>

```Go
func (b *body) didEarlyClose() bool
```

##### <a name="net-http-type-body-bodyRemains">func (b *body) bodyRemains() bool</a>

```Go
func (b *body) bodyRemains() bool
```

bodyRemains reports whether future Read calls might yield data. 

##### <a name="net-http-type-body-registerOnHitEOF">func (b *body) registerOnHitEOF(fn func())</a>

```Go
func (b *body) registerOnHitEOF(fn func())
```

#### <a name="net-http-type-bodyLocked">type bodyLocked struct</a>

```Go
type bodyLocked struct {
	b *body
}
```

bodyLocked is a io.Reader reading from a *body when its mutex is already held. 

##### <a name="net-http-type-bodyLocked-Read">func (bl bodyLocked) Read(p []byte) (n int, err error)</a>

```Go
func (bl bodyLocked) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-finishAsyncByteRead">type finishAsyncByteRead struct</a>

```Go
type finishAsyncByteRead struct {
	tw *transferWriter
}
```

finishAsyncByteRead finishes reading the 1-byte sniff from the ContentLength==0, Body!=nil case. 

##### <a name="net-http-type-finishAsyncByteRead-Read">func (fr finishAsyncByteRead) Read(p []byte) (n int, err error)</a>

```Go
func (fr finishAsyncByteRead) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-bufioFlushWriter">type bufioFlushWriter struct</a>

```Go
type bufioFlushWriter struct{ w io.Writer }
```

bufioFlushWriter is an io.Writer wrapper that flushes all writes on its wrapped writer if it's a *bufio.Writer. 

##### <a name="net-http-type-bufioFlushWriter-Write">func (fw bufioFlushWriter) Write(p []byte) (n int, err error)</a>

```Go
func (fw bufioFlushWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http-type-Transport">type Transport struct <small>(exported)</small></a>

```Go
type Transport struct {
	idleMu       sync.Mutex
	closeIdle    bool                                // user has requested to close all idle conns
	idleConn     map[connectMethodKey][]*persistConn // most recently used at end
	idleConnWait map[connectMethodKey]wantConnQueue  // waiting getConns
	idleLRU      connLRU

	reqMu       sync.Mutex
	reqCanceler map[cancelKey]func(error)

	altMu    sync.Mutex   // guards changing altProto only
	altProto atomic.Value // of nil or map[string]RoundTripper, key is URI scheme

	connsPerHostMu   sync.Mutex
	connsPerHost     map[connectMethodKey]int
	connsPerHostWait map[connectMethodKey]wantConnQueue // waiting getConns

	// Proxy specifies a function to return a proxy for a given
	// Request. If the function returns a non-nil error, the
	// request is aborted with the provided error.
	//
	// The proxy type is determined by the URL scheme. "http",
	// "https", and "socks5" are supported. If the scheme is empty,
	// "http" is assumed.
	//
	// If Proxy is nil or returns a nil *URL, no proxy is used.
	Proxy func(*Request) (*url.URL, error)

	// DialContext specifies the dial function for creating unencrypted TCP connections.
	// If DialContext is nil (and the deprecated Dial below is also nil),
	// then the transport dials using package net.
	//
	// DialContext runs concurrently with calls to RoundTrip.
	// A RoundTrip call that initiates a dial may end up using
	// a connection dialed previously when the earlier connection
	// becomes idle before the later DialContext completes.
	DialContext func(ctx context.Context, network, addr string) (net.Conn, error)

	// Dial specifies the dial function for creating unencrypted TCP connections.
	//
	// Dial runs concurrently with calls to RoundTrip.
	// A RoundTrip call that initiates a dial may end up using
	// a connection dialed previously when the earlier connection
	// becomes idle before the later Dial completes.
	//
	// Deprecated: Use DialContext instead, which allows the transport
	// to cancel dials as soon as they are no longer needed.
	// If both are set, DialContext takes priority.
	Dial func(network, addr string) (net.Conn, error)

	// DialTLSContext specifies an optional dial function for creating
	// TLS connections for non-proxied HTTPS requests.
	//
	// If DialTLSContext is nil (and the deprecated DialTLS below is also nil),
	// DialContext and TLSClientConfig are used.
	//
	// If DialTLSContext is set, the Dial and DialContext hooks are not used for HTTPS
	// requests and the TLSClientConfig and TLSHandshakeTimeout
	// are ignored. The returned net.Conn is assumed to already be
	// past the TLS handshake.
	DialTLSContext func(ctx context.Context, network, addr string) (net.Conn, error)

	// DialTLS specifies an optional dial function for creating
	// TLS connections for non-proxied HTTPS requests.
	//
	// Deprecated: Use DialTLSContext instead, which allows the transport
	// to cancel dials as soon as they are no longer needed.
	// If both are set, DialTLSContext takes priority.
	DialTLS func(network, addr string) (net.Conn, error)

	// TLSClientConfig specifies the TLS configuration to use with
	// tls.Client.
	// If nil, the default configuration is used.
	// If non-nil, HTTP/2 support may not be enabled by default.
	TLSClientConfig *tls.Config

	// TLSHandshakeTimeout specifies the maximum amount of time waiting to
	// wait for a TLS handshake. Zero means no timeout.
	TLSHandshakeTimeout time.Duration

	// DisableKeepAlives, if true, disables HTTP keep-alives and
	// will only use the connection to the server for a single
	// HTTP request.
	//
	// This is unrelated to the similarly named TCP keep-alives.
	DisableKeepAlives bool

	// DisableCompression, if true, prevents the Transport from
	// requesting compression with an "Accept-Encoding: gzip"
	// request header when the Request contains no existing
	// Accept-Encoding value. If the Transport requests gzip on
	// its own and gets a gzipped response, it's transparently
	// decoded in the Response.Body. However, if the user
	// explicitly requested gzip it is not automatically
	// uncompressed.
	DisableCompression bool

	// MaxIdleConns controls the maximum number of idle (keep-alive)
	// connections across all hosts. Zero means no limit.
	MaxIdleConns int

	// MaxIdleConnsPerHost, if non-zero, controls the maximum idle
	// (keep-alive) connections to keep per-host. If zero,
	// DefaultMaxIdleConnsPerHost is used.
	MaxIdleConnsPerHost int

	// MaxConnsPerHost optionally limits the total number of
	// connections per host, including connections in the dialing,
	// active, and idle states. On limit violation, dials will block.
	//
	// Zero means no limit.
	MaxConnsPerHost int

	// IdleConnTimeout is the maximum amount of time an idle
	// (keep-alive) connection will remain idle before closing
	// itself.
	// Zero means no limit.
	IdleConnTimeout time.Duration

	// ResponseHeaderTimeout, if non-zero, specifies the amount of
	// time to wait for a server's response headers after fully
	// writing the request (including its body, if any). This
	// time does not include the time to read the response body.
	ResponseHeaderTimeout time.Duration

	// ExpectContinueTimeout, if non-zero, specifies the amount of
	// time to wait for a server's first response headers after fully
	// writing the request headers if the request has an
	// "Expect: 100-continue" header. Zero means no timeout and
	// causes the body to be sent immediately, without
	// waiting for the server to approve.
	// This time does not include the time to send the request header.
	ExpectContinueTimeout time.Duration

	// TLSNextProto specifies how the Transport switches to an
	// alternate protocol (such as HTTP/2) after a TLS ALPN
	// protocol negotiation. If Transport dials an TLS connection
	// with a non-empty protocol name and TLSNextProto contains a
	// map entry for that key (such as "h2"), then the func is
	// called with the request's authority (such as "example.com"
	// or "example.com:1234") and the TLS connection. The function
	// must return a RoundTripper that then handles the request.
	// If TLSNextProto is not nil, HTTP/2 support is not enabled
	// automatically.
	TLSNextProto map[string]func(authority string, c *tls.Conn) RoundTripper

	// ProxyConnectHeader optionally specifies headers to send to
	// proxies during CONNECT requests.
	// To set the header dynamically, see GetProxyConnectHeader.
	ProxyConnectHeader Header

	// GetProxyConnectHeader optionally specifies a func to return
	// headers to send to proxyURL during a CONNECT request to the
	// ip:port target.
	// If it returns an error, the Transport's RoundTrip fails with
	// that error. It can return (nil, nil) to not add headers.
	// If GetProxyConnectHeader is non-nil, ProxyConnectHeader is
	// ignored.
	GetProxyConnectHeader func(ctx context.Context, proxyURL *url.URL, target string) (Header, error)

	// MaxResponseHeaderBytes specifies a limit on how many
	// response bytes are allowed in the server's response
	// header.
	//
	// Zero means to use a default limit.
	MaxResponseHeaderBytes int64

	// WriteBufferSize specifies the size of the write buffer used
	// when writing to the transport.
	// If zero, a default (currently 4KB) is used.
	WriteBufferSize int

	// ReadBufferSize specifies the size of the read buffer used
	// when reading from the transport.
	// If zero, a default (currently 4KB) is used.
	ReadBufferSize int

	// nextProtoOnce guards initialization of TLSNextProto and
	// h2transport (via onceSetNextProtoDefaults)
	nextProtoOnce      sync.Once
	h2transport        h2Transport // non-nil if http2 wired up
	tlsNextProtoWasNil bool        // whether TLSNextProto was nil when the Once fired

	// ForceAttemptHTTP2 controls whether HTTP/2 is enabled when a non-zero
	// Dial, DialTLS, or DialContext func or TLSClientConfig is provided.
	// By default, use of any those fields conservatively disables HTTP/2.
	// To use a custom dialer or TLS config and still attempt HTTP/2
	// upgrades, set this to true.
	ForceAttemptHTTP2 bool
}
```

Transport is an implementation of RoundTripper that supports HTTP, HTTPS, and HTTP proxies (for either HTTP or HTTPS with CONNECT). 

By default, Transport caches connections for future re-use. This may leave many open connections when accessing many hosts. This behavior can be managed using Transport's CloseIdleConnections method and the MaxIdleConnsPerHost and DisableKeepAlives fields. 

Transports should be reused instead of created as needed. Transports are safe for concurrent use by multiple goroutines. 

A Transport is a low-level primitive for making HTTP and HTTPS requests. For high-level functionality, such as cookies and redirects, see Client. 

Transport uses HTTP/1.1 for HTTP URLs and either HTTP/1.1 or HTTP/2 for HTTPS URLs, depending on whether the server supports HTTP/2, and how the Transport is configured. The DefaultTransport supports HTTP/2. To explicitly enable HTTP/2 on a transport, use golang.org/x/net/http2 and call ConfigureTransport. See the package docs for more about HTTP/2. 

Responses with status codes in the 1xx range are either handled automatically (100 expect-continue) or ignored. The one exception is HTTP status code 101 (Switching Protocols), which is considered a terminal status and returned by RoundTrip. To see the ignored 1xx responses, use the httptrace trace package's ClientTrace.Got1xxResponse. 

Transport only retries a request upon encountering a network error if the request is idempotent and either has no body or has its Request.GetBody defined. HTTP requests are considered idempotent if they have HTTP methods GET, HEAD, OPTIONS, or TRACE; or if their Header map contains an "Idempotency-Key" or "X-Idempotency-Key" entry. If the idempotency key value is a zero-length slice, the request is treated as idempotent but the header is not sent on the wire. 

##### <a name="net-http-type-Transport-RoundTrip">func (t *Transport) RoundTrip(req *Request) (*Response, error) <small>(exported)</small></a>

```Go
func (t *Transport) RoundTrip(req *Request) (*Response, error)
```

RoundTrip implements the RoundTripper interface. 

For higher-level HTTP client support (such as handling of cookies and redirects), see Get, Post, and the Client type. 

Like the RoundTripper interface, the error types returned by RoundTrip are unspecified. 

##### <a name="net-http-type-Transport-writeBufferSize">func (t *Transport) writeBufferSize() int</a>

```Go
func (t *Transport) writeBufferSize() int
```

##### <a name="net-http-type-Transport-readBufferSize">func (t *Transport) readBufferSize() int</a>

```Go
func (t *Transport) readBufferSize() int
```

##### <a name="net-http-type-Transport-Clone">func (t *Transport) Clone() *Transport <small>(exported)</small></a>

```Go
func (t *Transport) Clone() *Transport
```

Clone returns a deep copy of t's exported fields. 

##### <a name="net-http-type-Transport-hasCustomTLSDialer">func (t *Transport) hasCustomTLSDialer() bool</a>

```Go
func (t *Transport) hasCustomTLSDialer() bool
```

##### <a name="net-http-type-Transport-onceSetNextProtoDefaults">func (t *Transport) onceSetNextProtoDefaults()</a>

```Go
func (t *Transport) onceSetNextProtoDefaults()
```

onceSetNextProtoDefaults initializes TLSNextProto. It must be called via t.nextProtoOnce.Do. 

##### <a name="net-http-type-Transport-useRegisteredProtocol">func (t *Transport) useRegisteredProtocol(req *Request) bool</a>

```Go
func (t *Transport) useRegisteredProtocol(req *Request) bool
```

useRegisteredProtocol reports whether an alternate protocol (as registered with Transport.RegisterProtocol) should be respected for this request. 

##### <a name="net-http-type-Transport-alternateRoundTripper">func (t *Transport) alternateRoundTripper(req *Request) RoundTripper</a>

```Go
func (t *Transport) alternateRoundTripper(req *Request) RoundTripper
```

alternateRoundTripper returns the alternate RoundTripper to use for this request if the Request's URL scheme requires one, or nil for the normal case of using the Transport. 

##### <a name="net-http-type-Transport-roundTrip">func (t *Transport) roundTrip(req *Request) (*Response, error)</a>

```Go
func (t *Transport) roundTrip(req *Request) (*Response, error)
```

roundTrip implements a RoundTripper over HTTP. 

##### <a name="net-http-type-Transport-RegisterProtocol">func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper) <small>(exported)</small></a>

```Go
func (t *Transport) RegisterProtocol(scheme string, rt RoundTripper)
```

RegisterProtocol registers a new protocol with scheme. The Transport will pass requests using the given scheme to rt. It is rt's responsibility to simulate HTTP request semantics. 

RegisterProtocol can be used by other packages to provide implementations of protocol schemes like "ftp" or "file". 

If rt.RoundTrip returns ErrSkipAltProtocol, the Transport will handle the RoundTrip itself for that one request, as if the protocol were not registered. 

##### <a name="net-http-type-Transport-CloseIdleConnections">func (t *Transport) CloseIdleConnections() <small>(exported)</small></a>

```Go
func (t *Transport) CloseIdleConnections()
```

CloseIdleConnections closes any connections which were previously connected from previous requests but are now sitting idle in a "keep-alive" state. It does not interrupt any connections currently in use. 

##### <a name="net-http-type-Transport-CancelRequest">func (t *Transport) CancelRequest(req *Request) <small>(exported,deprecated)</small></a>

```Go
func (t *Transport) CancelRequest(req *Request)
```

CancelRequest cancels an in-flight request by closing its connection. CancelRequest should only be called after RoundTrip has returned. 

Deprecated: Use Request.WithContext to create a request with a cancelable context instead. CancelRequest cannot cancel HTTP/2 requests. 

##### <a name="net-http-type-Transport-cancelRequest">func (t *Transport) cancelRequest(key cancelKey, err error) bool</a>

```Go
func (t *Transport) cancelRequest(key cancelKey, err error) bool
```

Cancel an in-flight request, recording the error value. Returns whether the request was canceled. 

##### <a name="net-http-type-Transport-connectMethodForRequest">func (t *Transport) connectMethodForRequest(treq *transportRequest) (cm connectMethod, err error)</a>

```Go
func (t *Transport) connectMethodForRequest(treq *transportRequest) (cm connectMethod, err error)
```

##### <a name="net-http-type-Transport-putOrCloseIdleConn">func (t *Transport) putOrCloseIdleConn(pconn *persistConn)</a>

```Go
func (t *Transport) putOrCloseIdleConn(pconn *persistConn)
```

##### <a name="net-http-type-Transport-maxIdleConnsPerHost">func (t *Transport) maxIdleConnsPerHost() int</a>

```Go
func (t *Transport) maxIdleConnsPerHost() int
```

##### <a name="net-http-type-Transport-tryPutIdleConn">func (t *Transport) tryPutIdleConn(pconn *persistConn) error</a>

```Go
func (t *Transport) tryPutIdleConn(pconn *persistConn) error
```

tryPutIdleConn adds pconn to the list of idle persistent connections awaiting a new request. If pconn is no longer needed or not in a good state, tryPutIdleConn returns an error explaining why it wasn't registered. tryPutIdleConn does not close pconn. Use putOrCloseIdleConn instead for that. 

##### <a name="net-http-type-Transport-queueForIdleConn">func (t *Transport) queueForIdleConn(w *wantConn) (delivered bool)</a>

```Go
func (t *Transport) queueForIdleConn(w *wantConn) (delivered bool)
```

queueForIdleConn queues w to receive the next idle connection for w.cm. As an optimization hint to the caller, queueForIdleConn reports whether it successfully delivered an already-idle connection. 

##### <a name="net-http-type-Transport-removeIdleConn">func (t *Transport) removeIdleConn(pconn *persistConn) bool</a>

```Go
func (t *Transport) removeIdleConn(pconn *persistConn) bool
```

removeIdleConn marks pconn as dead. 

##### <a name="net-http-type-Transport-removeIdleConnLocked">func (t *Transport) removeIdleConnLocked(pconn *persistConn) bool</a>

```Go
func (t *Transport) removeIdleConnLocked(pconn *persistConn) bool
```

t.idleMu must be held. 

##### <a name="net-http-type-Transport-setReqCanceler">func (t *Transport) setReqCanceler(key cancelKey, fn func(error))</a>

```Go
func (t *Transport) setReqCanceler(key cancelKey, fn func(error))
```

##### <a name="net-http-type-Transport-replaceReqCanceler">func (t *Transport) replaceReqCanceler(key cancelKey, fn func(error)) bool</a>

```Go
func (t *Transport) replaceReqCanceler(key cancelKey, fn func(error)) bool
```

replaceReqCanceler replaces an existing cancel function. If there is no cancel function for the request, we don't set the function and return false. Since CancelRequest will clear the canceler, we can use the return value to detect if the request was canceled since the last setReqCancel call. 

##### <a name="net-http-type-Transport-dial">func (t *Transport) dial(ctx context.Context, network, addr string) (net.Conn, error)</a>

```Go
func (t *Transport) dial(ctx context.Context, network, addr string) (net.Conn, error)
```

##### <a name="net-http-type-Transport-customDialTLS">func (t *Transport) customDialTLS(ctx context.Context, network, addr string) (conn net.Conn, err error)</a>

```Go
func (t *Transport) customDialTLS(ctx context.Context, network, addr string) (conn net.Conn, err error)
```

##### <a name="net-http-type-Transport-getConn">func (t *Transport) getConn(treq *transportRequest, cm connectMethod) (pc *persistConn, err error)</a>

```Go
func (t *Transport) getConn(treq *transportRequest, cm connectMethod) (pc *persistConn, err error)
```

getConn dials and creates a new persistConn to the target as specified in the connectMethod. This includes doing a proxy CONNECT and/or setting up TLS.  If this doesn't return an error, the persistConn is ready to write requests to. 

##### <a name="net-http-type-Transport-queueForDial">func (t *Transport) queueForDial(w *wantConn)</a>

```Go
func (t *Transport) queueForDial(w *wantConn)
```

queueForDial queues w to wait for permission to begin dialing. Once w receives permission to dial, it will do so in a separate goroutine. 

##### <a name="net-http-type-Transport-dialConnFor">func (t *Transport) dialConnFor(w *wantConn)</a>

```Go
func (t *Transport) dialConnFor(w *wantConn)
```

dialConnFor dials on behalf of w and delivers the result to w. dialConnFor has received permission to dial w.cm and is counted in t.connCount[w.cm.key()]. If the dial is cancelled or unsuccessful, dialConnFor decrements t.connCount[w.cm.key()]. 

##### <a name="net-http-type-Transport-decConnsPerHost">func (t *Transport) decConnsPerHost(key connectMethodKey)</a>

```Go
func (t *Transport) decConnsPerHost(key connectMethodKey)
```

decConnsPerHost decrements the per-host connection count for key, which may in turn give a different waiting goroutine permission to dial. 

##### <a name="net-http-type-Transport-dialConn">func (t *Transport) dialConn(ctx context.Context, cm connectMethod) (pconn *persistConn, err error)</a>

```Go
func (t *Transport) dialConn(ctx context.Context, cm connectMethod) (pconn *persistConn, err error)
```

##### <a name="net-http-type-Transport-NumPendingRequestsForTesting">func (t *Transport) NumPendingRequestsForTesting() int</a>

```Go
func (t *Transport) NumPendingRequestsForTesting() int
```

##### <a name="net-http-type-Transport-IdleConnKeysForTesting">func (t *Transport) IdleConnKeysForTesting() (keys []string)</a>

```Go
func (t *Transport) IdleConnKeysForTesting() (keys []string)
```

##### <a name="net-http-type-Transport-IdleConnKeyCountForTesting">func (t *Transport) IdleConnKeyCountForTesting() int</a>

```Go
func (t *Transport) IdleConnKeyCountForTesting() int
```

##### <a name="net-http-type-Transport-IdleConnStrsForTesting">func (t *Transport) IdleConnStrsForTesting() []string</a>

```Go
func (t *Transport) IdleConnStrsForTesting() []string
```

##### <a name="net-http-type-Transport-IdleConnStrsForTesting_h2">func (t *Transport) IdleConnStrsForTesting_h2() []string</a>

```Go
func (t *Transport) IdleConnStrsForTesting_h2() []string
```

##### <a name="net-http-type-Transport-IdleConnCountForTesting">func (t *Transport) IdleConnCountForTesting(scheme, addr string) int</a>

```Go
func (t *Transport) IdleConnCountForTesting(scheme, addr string) int
```

##### <a name="net-http-type-Transport-IdleConnWaitMapSizeForTesting">func (t *Transport) IdleConnWaitMapSizeForTesting() int</a>

```Go
func (t *Transport) IdleConnWaitMapSizeForTesting() int
```

##### <a name="net-http-type-Transport-IsIdleForTesting">func (t *Transport) IsIdleForTesting() bool</a>

```Go
func (t *Transport) IsIdleForTesting() bool
```

##### <a name="net-http-type-Transport-QueueForIdleConnForTesting">func (t *Transport) QueueForIdleConnForTesting()</a>

```Go
func (t *Transport) QueueForIdleConnForTesting()
```

##### <a name="net-http-type-Transport-PutIdleTestConn">func (t *Transport) PutIdleTestConn(scheme, addr string) bool</a>

```Go
func (t *Transport) PutIdleTestConn(scheme, addr string) bool
```

PutIdleTestConn reports whether it was able to insert a fresh persistConn for scheme, addr into the idle connection pool. 

##### <a name="net-http-type-Transport-PutIdleTestConnH2">func (t *Transport) PutIdleTestConnH2(scheme, addr string, alt RoundTripper) bool</a>

```Go
func (t *Transport) PutIdleTestConnH2(scheme, addr string, alt RoundTripper) bool
```

PutIdleTestConnH2 reports whether it was able to insert a fresh HTTP/2 persistConn for scheme, addr into the idle connection pool. 

#### <a name="net-http-type-cancelKey">type cancelKey struct</a>

```Go
type cancelKey struct {
	req *Request
}
```

A cancelKey is the key of the reqCanceler map. We wrap the *Request in this type since we want to use the original request, not any transient one created by roundTrip. 

#### <a name="net-http-type-h2Transport">type h2Transport interface</a>

```Go
type h2Transport interface {
	CloseIdleConnections()
}
```

h2Transport is the interface we expect to be able to call from net/http against an *http2.Transport that's either bundled into h2_bundle.go or supplied by the user via x/net/http2. 

We name it with the "h2" prefix to stay out of the "http2" prefix namespace used by x/tools/cmd/bundle for h2_bundle.go. 

#### <a name="net-http-type-transportRequest">type transportRequest struct</a>

```Go
type transportRequest struct {
	*Request                         // original request, not to be mutated
	extra     Header                 // extra headers to write, or nil
	trace     *httptrace.ClientTrace // optional
	cancelKey cancelKey

	mu  sync.Mutex // guards err
	err error      // first setError value for mapRoundTripError to consider
}
```

transportRequest is a wrapper around a *Request that adds optional extra headers to write and stores any error to return from roundTrip. 

##### <a name="net-http-type-transportRequest-extraHeaders">func (tr *transportRequest) extraHeaders() Header</a>

```Go
func (tr *transportRequest) extraHeaders() Header
```

##### <a name="net-http-type-transportRequest-setError">func (tr *transportRequest) setError(err error)</a>

```Go
func (tr *transportRequest) setError(err error)
```

##### <a name="net-http-type-transportRequest-logf">func (tr *transportRequest) logf(format string, args ...interface{})</a>

```Go
func (tr *transportRequest) logf(format string, args ...interface{})
```

#### <a name="net-http-type-readTrackingBody">type readTrackingBody struct</a>

```Go
type readTrackingBody struct {
	io.ReadCloser
	didRead  bool
	didClose bool
}
```

##### <a name="net-http-type-readTrackingBody-Read">func (r *readTrackingBody) Read(data []byte) (int, error)</a>

```Go
func (r *readTrackingBody) Read(data []byte) (int, error)
```

##### <a name="net-http-type-readTrackingBody-Close">func (r *readTrackingBody) Close() error</a>

```Go
func (r *readTrackingBody) Close() error
```

#### <a name="net-http-type-transportReadFromServerError">type transportReadFromServerError struct</a>

```Go
type transportReadFromServerError struct {
	err error
}
```

transportReadFromServerError is used by Transport.readLoop when the 1 byte peek read fails and we're actually anticipating a response. Usually this is just due to the inherent keep-alive shut down race, where the server closed the connection at the same time the client wrote. The underlying err field is usually io.EOF or some ECONNRESET sort of thing which varies by platform. But it might be the user's custom net.Conn.Read error too, so we carry it along for them to return from Transport.RoundTrip. 

##### <a name="net-http-type-transportReadFromServerError-Unwrap">func (e transportReadFromServerError) Unwrap() error</a>

```Go
func (e transportReadFromServerError) Unwrap() error
```

##### <a name="net-http-type-transportReadFromServerError-Error">func (e transportReadFromServerError) Error() string</a>

```Go
func (e transportReadFromServerError) Error() string
```

#### <a name="net-http-type-wantConn">type wantConn struct</a>

```Go
type wantConn struct {
	cm    connectMethod
	key   connectMethodKey // cm.key()
	ctx   context.Context  // context for dial
	ready chan struct{}    // closed when pc, err pair is delivered

	// hooks for testing to know when dials are done
	// beforeDial is called in the getConn goroutine when the dial is queued.
	// afterDial is called when the dial is completed or cancelled.
	beforeDial func()
	afterDial  func()

	mu  sync.Mutex // protects pc, err, close(ready)
	pc  *persistConn
	err error
}
```

A wantConn records state about a wanted connection (that is, an active call to getConn). The conn may be gotten by dialing or by finding an idle connection, or a cancellation may make the conn no longer wanted. These three options are racing against each other and use wantConn to coordinate and agree about the winning outcome. 

##### <a name="net-http-type-wantConn-waiting">func (w *wantConn) waiting() bool</a>

```Go
func (w *wantConn) waiting() bool
```

waiting reports whether w is still waiting for an answer (connection or error). 

##### <a name="net-http-type-wantConn-tryDeliver">func (w *wantConn) tryDeliver(pc *persistConn, err error) bool</a>

```Go
func (w *wantConn) tryDeliver(pc *persistConn, err error) bool
```

tryDeliver attempts to deliver pc, err to w and reports whether it succeeded. 

##### <a name="net-http-type-wantConn-cancel">func (w *wantConn) cancel(t *Transport, err error)</a>

```Go
func (w *wantConn) cancel(t *Transport, err error)
```

cancel marks w as no longer wanting a result (for example, due to cancellation). If a connection has been delivered already, cancel returns it with t.putOrCloseIdleConn. 

#### <a name="net-http-type-wantConnQueue">type wantConnQueue struct</a>

```Go
type wantConnQueue struct {
	// This is a queue, not a deque.
	// It is split into two stages - head[headPos:] and tail.
	// popFront is trivial (headPos++) on the first stage, and
	// pushBack is trivial (append) on the second stage.
	// If the first stage is empty, popFront can swap the
	// first and second stages to remedy the situation.
	//
	// This two-stage split is analogous to the use of two lists
	// in Okasaki's purely functional queue but without the
	// overhead of reversing the list when swapping stages.
	head    []*wantConn
	headPos int
	tail    []*wantConn
}
```

A wantConnQueue is a queue of wantConns. 

##### <a name="net-http-type-wantConnQueue-len">func (q *wantConnQueue) len() int</a>

```Go
func (q *wantConnQueue) len() int
```

len returns the number of items in the queue. 

##### <a name="net-http-type-wantConnQueue-pushBack">func (q *wantConnQueue) pushBack(w *wantConn)</a>

```Go
func (q *wantConnQueue) pushBack(w *wantConn)
```

pushBack adds w to the back of the queue. 

##### <a name="net-http-type-wantConnQueue-popFront">func (q *wantConnQueue) popFront() *wantConn</a>

```Go
func (q *wantConnQueue) popFront() *wantConn
```

popFront removes and returns the wantConn at the front of the queue. 

##### <a name="net-http-type-wantConnQueue-peekFront">func (q *wantConnQueue) peekFront() *wantConn</a>

```Go
func (q *wantConnQueue) peekFront() *wantConn
```

peekFront returns the wantConn at the front of the queue without removing it. 

##### <a name="net-http-type-wantConnQueue-cleanFront">func (q *wantConnQueue) cleanFront() (cleaned bool)</a>

```Go
func (q *wantConnQueue) cleanFront() (cleaned bool)
```

cleanFront pops any wantConns that are no longer waiting from the head of the queue, reporting whether any were popped. 

#### <a name="net-http-type-erringRoundTripper">type erringRoundTripper interface</a>

```Go
type erringRoundTripper interface {
	RoundTripErr() error
}
```

#### <a name="net-http-type-persistConnWriter">type persistConnWriter struct</a>

```Go
type persistConnWriter struct {
	pc *persistConn
}
```

persistConnWriter is the io.Writer written to by pc.bw. It accumulates the number of bytes written to the underlying conn, so the retry logic can determine whether any bytes made it across the wire. This is exactly 1 pointer field wide so it can go into an interface without allocation. 

##### <a name="net-http-type-persistConnWriter-Write">func (w persistConnWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w persistConnWriter) Write(p []byte) (n int, err error)
```

##### <a name="net-http-type-persistConnWriter-ReadFrom">func (w persistConnWriter) ReadFrom(r io.Reader) (n int64, err error)</a>

```Go
func (w persistConnWriter) ReadFrom(r io.Reader) (n int64, err error)
```

ReadFrom exposes persistConnWriter's underlying Conn to io.Copy and if the Conn implements io.ReaderFrom, it can take advantage of optimizations such as sendfile. 

#### <a name="net-http-type-connectMethod">type connectMethod struct</a>

```Go
type connectMethod struct {
	_            incomparable
	proxyURL     *url.URL // nil for no proxy, else full proxy URL
	targetScheme string   // "http" or "https"
	// If proxyURL specifies an http or https proxy, and targetScheme is http (not https),
	// then targetAddr is not included in the connect method key, because the socket can
	// be reused for different targetAddr values.
	targetAddr string
	onlyH1     bool // whether to disable HTTP/2 and force HTTP/1
}
```

connectMethod is the map key (in its String form) for keeping persistent TCP connections alive for subsequent HTTP requests. 

A connect method may be of the following types: 

```
connectMethod.key().String()      Description
------------------------------    -------------------------
|http|foo.com                     http directly to server, no proxy
|https|foo.com                    https directly to server, no proxy
|https,h1|foo.com                 https directly to server w/o HTTP/2, no proxy
[http://proxy.com](http://proxy.com)|https|foo.com    http to proxy, then CONNECT to foo.com
[http://proxy.com](http://proxy.com)|http             http to proxy, http to anywhere after that
socks5://proxy.com|http|foo.com   socks5 to proxy, then http to foo.com
socks5://proxy.com|https|foo.com  socks5 to proxy, then https to foo.com
[https://proxy.com](https://proxy.com)|https|foo.com   https to proxy, then CONNECT to foo.com
[https://proxy.com](https://proxy.com)|http            https to proxy, http to anywhere after that

```
##### <a name="net-http-type-connectMethod-proxyAuth">func (cm *connectMethod) proxyAuth() string</a>

```Go
func (cm *connectMethod) proxyAuth() string
```

proxyAuth returns the Proxy-Authorization header to set on requests, if applicable. 

##### <a name="net-http-type-connectMethod-key">func (cm *connectMethod) key() connectMethodKey</a>

```Go
func (cm *connectMethod) key() connectMethodKey
```

##### <a name="net-http-type-connectMethod-scheme">func (cm *connectMethod) scheme() string</a>

```Go
func (cm *connectMethod) scheme() string
```

scheme returns the first hop scheme: http, https, or socks5 

##### <a name="net-http-type-connectMethod-addr">func (cm *connectMethod) addr() string</a>

```Go
func (cm *connectMethod) addr() string
```

addr returns the first hop "host:port" to which we need to TCP connect. 

##### <a name="net-http-type-connectMethod-tlsHost">func (cm *connectMethod) tlsHost() string</a>

```Go
func (cm *connectMethod) tlsHost() string
```

tlsHost returns the host name to match against the peer's TLS certificate. 

#### <a name="net-http-type-connectMethodKey">type connectMethodKey struct</a>

```Go
type connectMethodKey struct {
	proxy, scheme, addr string
	onlyH1              bool
}
```

connectMethodKey is the map key version of connectMethod, with a stringified proxy URL (or the empty string) instead of a pointer to a URL. 

##### <a name="net-http-type-connectMethodKey-String">func (k connectMethodKey) String() string</a>

```Go
func (k connectMethodKey) String() string
```

#### <a name="net-http-type-persistConn">type persistConn struct</a>

```Go
type persistConn struct {
	// alt optionally specifies the TLS NextProto RoundTripper.
	// This is used for HTTP/2 today and future protocols later.
	// If it's non-nil, the rest of the fields are unused.
	alt RoundTripper

	t         *Transport
	cacheKey  connectMethodKey
	conn      net.Conn
	tlsState  *tls.ConnectionState
	br        *bufio.Reader       // from conn
	bw        *bufio.Writer       // to conn
	nwrite    int64               // bytes written
	reqch     chan requestAndChan // written by roundTrip; read by readLoop
	writech   chan writeRequest   // written by roundTrip; read by writeLoop
	closech   chan struct{}       // closed when conn closed
	isProxy   bool
	sawEOF    bool  // whether we've seen EOF from conn; owned by readLoop
	readLimit int64 // bytes allowed to be read; owned by readLoop
	// writeErrCh passes the request write error (usually nil)
	// from the writeLoop goroutine to the readLoop which passes
	// it off to the res.Body reader, which then uses it to decide
	// whether or not a connection can be reused. Issue 7569.
	writeErrCh chan error

	writeLoopDone chan struct{} // closed when write loop ends

	// Both guarded by Transport.idleMu:
	idleAt    time.Time   // time it last become idle
	idleTimer *time.Timer // holding an AfterFunc to close it

	mu                   sync.Mutex // guards following fields
	numExpectedResponses int
	closed               error // set non-nil when conn is closed, before closech is closed
	canceledErr          error // set non-nil if conn is canceled
	broken               bool  // an error has happened on this connection; marked broken so it's not reused.
	reused               bool  // whether conn has had successful request/response and is being reused.
	// mutateHeaderFunc is an optional func to modify extra
	// headers on each outbound request before it's written. (the
	// original Request given to RoundTrip is not modified)
	mutateHeaderFunc func(Header)
}
```

persistConn wraps a connection, usually a persistent one (but may be used for non-keep-alive requests as well) 

##### <a name="net-http-type-persistConn-shouldRetryRequest">func (pc *persistConn) shouldRetryRequest(req *Request, err error) bool</a>

```Go
func (pc *persistConn) shouldRetryRequest(req *Request, err error) bool
```

shouldRetryRequest reports whether we should retry sending a failed HTTP request on a new connection. The non-nil input error is the error from roundTrip. 

##### <a name="net-http-type-persistConn-addTLS">func (pconn *persistConn) addTLS(name string, trace *httptrace.ClientTrace) error</a>

```Go
func (pconn *persistConn) addTLS(name string, trace *httptrace.ClientTrace) error
```

Add TLS to a persistent connection, i.e. negotiate a TLS session. If pconn is already a TLS tunnel, this function establishes a nested TLS session inside the encrypted channel. The remote endpoint's name may be overridden by TLSClientConfig.ServerName. 

##### <a name="net-http-type-persistConn-maxHeaderResponseSize">func (pc *persistConn) maxHeaderResponseSize() int64</a>

```Go
func (pc *persistConn) maxHeaderResponseSize() int64
```

##### <a name="net-http-type-persistConn-Read">func (pc *persistConn) Read(p []byte) (n int, err error)</a>

```Go
func (pc *persistConn) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-persistConn-isBroken">func (pc *persistConn) isBroken() bool</a>

```Go
func (pc *persistConn) isBroken() bool
```

isBroken reports whether this connection is in a known broken state. 

##### <a name="net-http-type-persistConn-canceled">func (pc *persistConn) canceled() error</a>

```Go
func (pc *persistConn) canceled() error
```

canceled returns non-nil if the connection was closed due to CancelRequest or due to context cancellation. 

##### <a name="net-http-type-persistConn-isReused">func (pc *persistConn) isReused() bool</a>

```Go
func (pc *persistConn) isReused() bool
```

isReused reports whether this connection has been used before. 

##### <a name="net-http-type-persistConn-gotIdleConnTrace">func (pc *persistConn) gotIdleConnTrace(idleAt time.Time) (t httptrace.GotConnInfo)</a>

```Go
func (pc *persistConn) gotIdleConnTrace(idleAt time.Time) (t httptrace.GotConnInfo)
```

##### <a name="net-http-type-persistConn-cancelRequest">func (pc *persistConn) cancelRequest(err error)</a>

```Go
func (pc *persistConn) cancelRequest(err error)
```

##### <a name="net-http-type-persistConn-closeConnIfStillIdle">func (pc *persistConn) closeConnIfStillIdle()</a>

```Go
func (pc *persistConn) closeConnIfStillIdle()
```

closeConnIfStillIdle closes the connection if it's still sitting idle. This is what's called by the persistConn's idleTimer, and is run in its own goroutine. 

##### <a name="net-http-type-persistConn-mapRoundTripError">func (pc *persistConn) mapRoundTripError(req *transportRequest, startBytesWritten int64, err error) error</a>

```Go
func (pc *persistConn) mapRoundTripError(req *transportRequest, startBytesWritten int64, err error) error
```

mapRoundTripError returns the appropriate error value for persistConn.roundTrip. 

The provided err is the first error that (*persistConn).roundTrip happened to receive from its select statement. 

The startBytesWritten value should be the value of pc.nwrite before the roundTrip started writing the request. 

##### <a name="net-http-type-persistConn-readLoop">func (pc *persistConn) readLoop()</a>

```Go
func (pc *persistConn) readLoop()
```

##### <a name="net-http-type-persistConn-readLoopPeekFailLocked">func (pc *persistConn) readLoopPeekFailLocked(peekErr error)</a>

```Go
func (pc *persistConn) readLoopPeekFailLocked(peekErr error)
```

##### <a name="net-http-type-persistConn-readResponse">func (pc *persistConn) readResponse(rc requestAndChan, trace *httptrace.ClientTrace) (resp *Response, err error)</a>

```Go
func (pc *persistConn) readResponse(rc requestAndChan, trace *httptrace.ClientTrace) (resp *Response, err error)
```

readResponse reads an HTTP response (or two, in the case of "Expect: 100-continue") from the server. It returns the final non-100 one. trace is optional. 

##### <a name="net-http-type-persistConn-waitForContinue">func (pc *persistConn) waitForContinue(continueCh <-chan struct{}) func() bool</a>

```Go
func (pc *persistConn) waitForContinue(continueCh <-chan struct{}) func() bool
```

waitForContinue returns the function to block until any response, timeout or connection close. After any of them, the function returns a bool which indicates if the body should be sent. 

##### <a name="net-http-type-persistConn-writeLoop">func (pc *persistConn) writeLoop()</a>

```Go
func (pc *persistConn) writeLoop()
```

##### <a name="net-http-type-persistConn-wroteRequest">func (pc *persistConn) wroteRequest() bool</a>

```Go
func (pc *persistConn) wroteRequest() bool
```

wroteRequest is a check before recycling a connection that the previous write (from writeLoop above) happened and was successful. 

##### <a name="net-http-type-persistConn-roundTrip">func (pc *persistConn) roundTrip(req *transportRequest) (resp *Response, err error)</a>

```Go
func (pc *persistConn) roundTrip(req *transportRequest) (resp *Response, err error)
```

##### <a name="net-http-type-persistConn-markReused">func (pc *persistConn) markReused()</a>

```Go
func (pc *persistConn) markReused()
```

markReused marks this connection as having been successfully used for a request and response. 

##### <a name="net-http-type-persistConn-close">func (pc *persistConn) close(err error)</a>

```Go
func (pc *persistConn) close(err error)
```

close closes the underlying TCP connection and closes the pc.closech channel. 

The provided err is only for testing and debugging; in normal circumstances it should never be seen by users. 

##### <a name="net-http-type-persistConn-closeLocked">func (pc *persistConn) closeLocked(err error)</a>

```Go
func (pc *persistConn) closeLocked(err error)
```

#### <a name="net-http-type-readWriteCloserBody">type readWriteCloserBody struct</a>

```Go
type readWriteCloserBody struct {
	_  incomparable
	br *bufio.Reader // used until empty
	io.ReadWriteCloser
}
```

readWriteCloserBody is the Response.Body type used when we want to give users write access to the Body through the underlying connection (TCP, unless using custom dialers). This is then the concrete type for a Response.Body on the 101 Switching Protocols response, as used by WebSockets, h2c, etc. 

##### <a name="net-http-type-readWriteCloserBody-Read">func (b *readWriteCloserBody) Read(p []byte) (n int, err error)</a>

```Go
func (b *readWriteCloserBody) Read(p []byte) (n int, err error)
```

#### <a name="net-http-type-nothingWrittenError">type nothingWrittenError struct</a>

```Go
type nothingWrittenError struct {
	error
}
```

nothingWrittenError wraps a write errors which ended up writing zero bytes. 

#### <a name="net-http-type-responseAndError">type responseAndError struct</a>

```Go
type responseAndError struct {
	_   incomparable
	res *Response // else use this response (see res method)
	err error
}
```

responseAndError is how the goroutine reading from an HTTP/1 server communicates with the goroutine doing the RoundTrip. 

#### <a name="net-http-type-requestAndChan">type requestAndChan struct</a>

```Go
type requestAndChan struct {
	_         incomparable
	req       *Request
	cancelKey cancelKey
	ch        chan responseAndError // unbuffered; always send in select on callerGone

	// whether the Transport (as opposed to the user client code)
	// added the Accept-Encoding gzip header. If the Transport
	// set it, only then do we transparently decode the gzip.
	addedGzip bool

	// Optional blocking chan for Expect: 100-continue (for send).
	// If the request has an "Expect: 100-continue" header and
	// the server responds 100 Continue, readLoop send a value
	// to writeLoop via this chan.
	continueCh chan<- struct{}

	callerGone <-chan struct{} // closed when roundTrip caller has returned
}
```

#### <a name="net-http-type-writeRequest">type writeRequest struct</a>

```Go
type writeRequest struct {
	req *transportRequest
	ch  chan<- error

	// Optional blocking chan for Expect: 100-continue (for receive).
	// If not nil, writeLoop blocks sending request body until
	// it receives from this chan.
	continueCh <-chan struct{}
}
```

A writeRequest is sent by the readLoop's goroutine to the writeLoop's goroutine to write a request while the read loop concurrently waits on both the write response and the server's reply. 

#### <a name="net-http-type-httpError">type httpError struct</a>

```Go
type httpError struct {
	err     string
	timeout bool
}
```

##### <a name="net-http-type-httpError-Error">func (e *httpError) Error() string</a>

```Go
func (e *httpError) Error() string
```

##### <a name="net-http-type-httpError-Timeout">func (e *httpError) Timeout() bool</a>

```Go
func (e *httpError) Timeout() bool
```

##### <a name="net-http-type-httpError-Temporary">func (e *httpError) Temporary() bool</a>

```Go
func (e *httpError) Temporary() bool
```

#### <a name="net-http-type-tLogKey">type tLogKey struct{}</a>

```Go
type tLogKey struct{}
```

tLogKey is a context WithValue key for test debugging contexts containing a t.Logf func. See export_test.go's Request.WithT method. 

#### <a name="net-http-type-bodyEOFSignal">type bodyEOFSignal struct</a>

```Go
type bodyEOFSignal struct {
	body         io.ReadCloser
	mu           sync.Mutex        // guards following 4 fields
	closed       bool              // whether Close has been called
	rerr         error             // sticky Read error
	fn           func(error) error // err will be nil on Read io.EOF
	earlyCloseFn func() error      // optional alt Close func used if io.EOF not seen
}
```

bodyEOFSignal is used by the HTTP/1 transport when reading response bodies to make sure we see the end of a response body before proceeding and reading on the connection again. 

It wraps a ReadCloser but runs fn (if non-nil) at most once, right before its final (error-producing) Read or Close call returns. fn should return the new error to return from Read or Close. 

If earlyCloseFn is non-nil and Close is called before io.EOF is seen, earlyCloseFn is called instead of fn, and its return value is the return value from Close. 

##### <a name="net-http-type-bodyEOFSignal-Read">func (es *bodyEOFSignal) Read(p []byte) (n int, err error)</a>

```Go
func (es *bodyEOFSignal) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-bodyEOFSignal-Close">func (es *bodyEOFSignal) Close() error</a>

```Go
func (es *bodyEOFSignal) Close() error
```

##### <a name="net-http-type-bodyEOFSignal-condfn">func (es *bodyEOFSignal) condfn(err error) error</a>

```Go
func (es *bodyEOFSignal) condfn(err error) error
```

caller must hold es.mu. 

#### <a name="net-http-type-gzipReader">type gzipReader struct</a>

```Go
type gzipReader struct {
	_    incomparable
	body *bodyEOFSignal // underlying HTTP/1 response body framing
	zr   *gzip.Reader   // lazily-initialized gzip reader
	zerr error          // any error from gzip.NewReader; sticky
}
```

gzipReader wraps a response body so it can lazily call gzip.NewReader on the first call to Read 

##### <a name="net-http-type-gzipReader-Read">func (gz *gzipReader) Read(p []byte) (n int, err error)</a>

```Go
func (gz *gzipReader) Read(p []byte) (n int, err error)
```

##### <a name="net-http-type-gzipReader-Close">func (gz *gzipReader) Close() error</a>

```Go
func (gz *gzipReader) Close() error
```

#### <a name="net-http-type-tlsHandshakeTimeoutError">type tlsHandshakeTimeoutError struct{}</a>

```Go
type tlsHandshakeTimeoutError struct{}
```

##### <a name="net-http-type-tlsHandshakeTimeoutError-Timeout">func (tlsHandshakeTimeoutError) Timeout() bool</a>

```Go
func (tlsHandshakeTimeoutError) Timeout() bool
```

##### <a name="net-http-type-tlsHandshakeTimeoutError-Temporary">func (tlsHandshakeTimeoutError) Temporary() bool</a>

```Go
func (tlsHandshakeTimeoutError) Temporary() bool
```

##### <a name="net-http-type-tlsHandshakeTimeoutError-Error">func (tlsHandshakeTimeoutError) Error() string</a>

```Go
func (tlsHandshakeTimeoutError) Error() string
```

#### <a name="net-http-type-fakeLocker">type fakeLocker struct{}</a>

```Go
type fakeLocker struct{}
```

fakeLocker is a sync.Locker which does nothing. It's used to guard test-only fields when not under test, to avoid runtime atomic overhead. 

##### <a name="net-http-type-fakeLocker-Lock">func (fakeLocker) Lock()</a>

```Go
func (fakeLocker) Lock()
```

##### <a name="net-http-type-fakeLocker-Unlock">func (fakeLocker) Unlock()</a>

```Go
func (fakeLocker) Unlock()
```

#### <a name="net-http-type-connLRU">type connLRU struct</a>

```Go
type connLRU struct {
	ll *list.List // list.Element.Value type is of *persistConn
	m  map[*persistConn]*list.Element
}
```

##### <a name="net-http-type-connLRU-add">func (cl *connLRU) add(pc *persistConn)</a>

```Go
func (cl *connLRU) add(pc *persistConn)
```

add adds pc to the head of the linked list. 

##### <a name="net-http-type-connLRU-removeOldest">func (cl *connLRU) removeOldest() *persistConn</a>

```Go
func (cl *connLRU) removeOldest() *persistConn
```

##### <a name="net-http-type-connLRU-remove">func (cl *connLRU) remove(pc *persistConn)</a>

```Go
func (cl *connLRU) remove(pc *persistConn)
```

remove removes pc from cl. 

##### <a name="net-http-type-connLRU-len">func (cl *connLRU) len() int</a>

```Go
func (cl *connLRU) len() int
```

len returns the number of items in the cache. 

#### <a name="net-http-type-headerOnlyResponseWriter">type headerOnlyResponseWriter http.Header</a>

```Go
type headerOnlyResponseWriter Header
```

##### <a name="net-http-type-headerOnlyResponseWriter-Header">func (ho headerOnlyResponseWriter) Header() Header</a>

```Go
func (ho headerOnlyResponseWriter) Header() Header
```

##### <a name="net-http-type-headerOnlyResponseWriter-Write">func (ho headerOnlyResponseWriter) Write([]byte) (int, error)</a>

```Go
func (ho headerOnlyResponseWriter) Write([]byte) (int, error)
```

##### <a name="net-http-type-headerOnlyResponseWriter-WriteHeader">func (ho headerOnlyResponseWriter) WriteHeader(int)</a>

```Go
func (ho headerOnlyResponseWriter) WriteHeader(int)
```

#### <a name="net-http-type-hasTokenTest">type hasTokenTest struct</a>

```Go
type hasTokenTest struct {
	header string
	token  string
	want   bool
}
```

#### <a name="net-http-type-reqTest">type reqTest struct</a>

```Go
type reqTest struct {
	Raw     string
	Req     *Request
	Body    string
	Trailer Header
	Error   string
}
```

#### <a name="net-http-type-reqWriteTest">type reqWriteTest struct</a>

```Go
type reqWriteTest struct {
	Req  Request
	Body interface{} // optional []byte or func() io.ReadCloser to populate Req.Body

	// Any of these three may be empty to skip that test.
	WantWrite string // Request.Write
	WantProxy string // Request.WriteProxy

	WantError error // wanted error from Request.Write
}
```

#### <a name="net-http-type-testCase">type testCase struct</a>

```Go
type testCase struct {
	method string
	clen   int64 // ContentLength
	body   io.ReadCloser
	want   func(string) error

	// optional:
	init         func(*testCase)
	afterReqRead func()
}
```

#### <a name="net-http-type-closeChecker">type closeChecker struct</a>

```Go
type closeChecker struct {
	io.Reader
	closed bool
}
```

##### <a name="net-http-type-closeChecker-Close">func (rc *closeChecker) Close() error</a>

```Go
func (rc *closeChecker) Close() error
```

#### <a name="net-http-type-writerFunc">type writerFunc func([]byte) (int, error)</a>

```Go
type writerFunc func([]byte) (int, error)
```

##### <a name="net-http-type-writerFunc-Write">func (f writerFunc) Write(p []byte) (int, error)</a>

```Go
func (f writerFunc) Write(p []byte) (int, error)
```

#### <a name="net-http-type-delegateReader">type delegateReader struct</a>

```Go
type delegateReader struct {
	c chan io.Reader
	r io.Reader // nil until received from c
}
```

delegateReader is a reader that delegates to another reader, once it arrives on a channel. 

##### <a name="net-http-type-delegateReader-Read">func (r *delegateReader) Read(p []byte) (int, error)</a>

```Go
func (r *delegateReader) Read(p []byte) (int, error)
```

#### <a name="net-http-type-dumpConn">type dumpConn struct</a>

```Go
type dumpConn struct {
	io.Writer
	io.Reader
}
```

dumpConn is a net.Conn that writes to Writer and reads from Reader. 

##### <a name="net-http-type-dumpConn-Close">func (c *dumpConn) Close() error</a>

```Go
func (c *dumpConn) Close() error
```

##### <a name="net-http-type-dumpConn-LocalAddr">func (c *dumpConn) LocalAddr() net.Addr</a>

```Go
func (c *dumpConn) LocalAddr() net.Addr
```

##### <a name="net-http-type-dumpConn-RemoteAddr">func (c *dumpConn) RemoteAddr() net.Addr</a>

```Go
func (c *dumpConn) RemoteAddr() net.Addr
```

##### <a name="net-http-type-dumpConn-SetDeadline">func (c *dumpConn) SetDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetDeadline(t time.Time) error
```

##### <a name="net-http-type-dumpConn-SetReadDeadline">func (c *dumpConn) SetReadDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetReadDeadline(t time.Time) error
```

##### <a name="net-http-type-dumpConn-SetWriteDeadline">func (c *dumpConn) SetWriteDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetWriteDeadline(t time.Time) error
```

#### <a name="net-http-type-respTest">type respTest struct</a>

```Go
type respTest struct {
	Raw  string
	Resp Response
	Body string
}
```

#### <a name="net-http-type-readerAndCloser">type readerAndCloser struct</a>

```Go
type readerAndCloser struct {
	io.Reader
	io.Closer
}
```

#### <a name="net-http-type-responseLocationTest">type responseLocationTest struct</a>

```Go
type responseLocationTest struct {
	location string // Response's Location header or ""
	requrl   string // Response.Request.URL or ""
	want     string
	wantErr  error
}
```

#### <a name="net-http-type-testCase">type testCase struct</a>

```Go
type testCase struct {
	name    string // optional, defaults to in
	in      string
	wantErr interface{} // nil, err value, or string substring
}
```

#### <a name="net-http-type-respWriteTest">type respWriteTest struct</a>

```Go
type respWriteTest struct {
	Resp Response
	Raw  string
}
```

#### <a name="net-http-type-mockTransferWriter">type mockTransferWriter struct</a>

```Go
type mockTransferWriter struct {
	CalledReader io.Reader
	WriteCalled  bool
}
```

##### <a name="net-http-type-mockTransferWriter-ReadFrom">func (w *mockTransferWriter) ReadFrom(r io.Reader) (int64, error)</a>

```Go
func (w *mockTransferWriter) ReadFrom(r io.Reader) (int64, error)
```

##### <a name="net-http-type-mockTransferWriter-Write">func (w *mockTransferWriter) Write(p []byte) (int, error)</a>

```Go
func (w *mockTransferWriter) Write(p []byte) (int, error)
```

#### <a name="net-http-type-issue22091Error">type issue22091Error struct{}</a>

```Go
type issue22091Error struct{}
```

issue22091Error acts like a golang.org/x/net/http2.ErrNoCachedConn. 

##### <a name="net-http-type-issue22091Error-IsHTTP2NoCachedConnError">func (issue22091Error) IsHTTP2NoCachedConnError()</a>

```Go
func (issue22091Error) IsHTTP2NoCachedConnError()
```

##### <a name="net-http-type-issue22091Error-Error">func (issue22091Error) Error() string</a>

```Go
func (issue22091Error) Error() string
```

#### <a name="net-http-type-roundTripFunc">type roundTripFunc func(r *net/http.Request) (*net/http.Response, error)</a>

```Go
type roundTripFunc func(r *Request) (*Response, error)
```

##### <a name="net-http-type-roundTripFunc-RoundTrip">func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)</a>

```Go
func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)
```

### <a name="net-http-func">Functions <small>(exported)</small></a>

#### <a name="net-http-func-refererForURL">func refererForURL(lastReq, newReq *url.URL) string</a>

```Go
func refererForURL(lastReq, newReq *url.URL) string
```

refererForURL returns a referer without any authentication info or an empty string if lastReq scheme is https and newReq scheme is http. 

#### <a name="net-http-func-timeBeforeContextDeadline">func timeBeforeContextDeadline(t time.Time, ctx context.Context) bool</a>

```Go
func timeBeforeContextDeadline(t time.Time, ctx context.Context) bool
```

timeBeforeContextDeadline reports whether the non-zero Time t is before ctx's deadline, if any. If ctx does not have a deadline, it always reports true (the deadline is considered infinite). 

#### <a name="net-http-func-knownRoundTripperImpl">func knownRoundTripperImpl(rt RoundTripper, req *Request) bool</a>

```Go
func knownRoundTripperImpl(rt RoundTripper, req *Request) bool
```

knownRoundTripperImpl reports whether rt is a RoundTripper that's maintained by the Go team and known to implement the latest optional semantics (notably contexts). The Request is used to check whether this particular request is using an alternate protocol, in which case we need to check the RoundTripper for that protocol. 

#### <a name="net-http-func-setRequestCancel">func setRequestCancel(req *Request, rt RoundTripper, deadline time.Time) (stopTimer func(), didTimeout func() bool)</a>

```Go
func setRequestCancel(req *Request, rt RoundTripper, deadline time.Time) (stopTimer func(), didTimeout func() bool)
```

setRequestCancel sets req.Cancel and adds a deadline context to req if deadline is non-zero. The RoundTripper's type is used to determine whether the legacy CancelRequest behavior should be used. 

As background, there are three ways to cancel a request: First was Transport.CancelRequest. (deprecated) Second was Request.Cancel. Third was Request.Context. This function populates the second and third, and uses the first if it really needs to. 

#### <a name="net-http-func-basicAuth">func basicAuth(username, password string) string</a>

```Go
func basicAuth(username, password string) string
```

See 2 (end of page 4) [https://www.ietf.org/rfc/rfc2617.txt](https://www.ietf.org/rfc/rfc2617.txt) "To receive authorization, the client sends the userid and password, separated by a single colon (":") character, within a base64 encoded string in the credentials." It is not meant to be urlencoded. 

#### <a name="net-http-func-alwaysFalse">func alwaysFalse() bool</a>

```Go
func alwaysFalse() bool
```

#### <a name="net-http-func-redirectBehavior">func redirectBehavior(reqMethod string, resp *Response, ireq *Request) (redirectMethod string, shouldRedirect, includeBody bool)</a>

```Go
func redirectBehavior(reqMethod string, resp *Response, ireq *Request) (redirectMethod string, shouldRedirect, includeBody bool)
```

redirectBehavior describes what should happen when the client encounters a 3xx status code from the server 

#### <a name="net-http-func-urlErrorOp">func urlErrorOp(method string) string</a>

```Go
func urlErrorOp(method string) string
```

urlErrorOp returns the (*url.Error).Op value to use for the provided (*Request).Method value. 

#### <a name="net-http-func-defaultCheckRedirect">func defaultCheckRedirect(req *Request, via []*Request) error</a>

```Go
func defaultCheckRedirect(req *Request, via []*Request) error
```

#### <a name="net-http-func-shouldCopyHeaderOnRedirect">func shouldCopyHeaderOnRedirect(headerKey string, initial, dest *url.URL) bool</a>

```Go
func shouldCopyHeaderOnRedirect(headerKey string, initial, dest *url.URL) bool
```

#### <a name="net-http-func-isDomainOrSubdomain">func isDomainOrSubdomain(sub, parent string) bool</a>

```Go
func isDomainOrSubdomain(sub, parent string) bool
```

isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of the parent domain. 

Both domains must already be in canonical form. 

#### <a name="net-http-func-stripPassword">func stripPassword(u *url.URL) string</a>

```Go
func stripPassword(u *url.URL) string
```

#### <a name="net-http-func-cloneURLValues">func cloneURLValues(v url.Values) url.Values</a>

```Go
func cloneURLValues(v url.Values) url.Values
```

#### <a name="net-http-func-cloneURL">func cloneURL(u *url.URL) *url.URL</a>

```Go
func cloneURL(u *url.URL) *url.URL
```

#### <a name="net-http-func-cloneMultipartForm">func cloneMultipartForm(f *multipart.Form) *multipart.Form</a>

```Go
func cloneMultipartForm(f *multipart.Form) *multipart.Form
```

#### <a name="net-http-func-cloneMultipartFileHeader">func cloneMultipartFileHeader(fh *multipart.FileHeader) *multipart.FileHeader</a>

```Go
func cloneMultipartFileHeader(fh *multipart.FileHeader) *multipart.FileHeader
```

#### <a name="net-http-func-readSetCookies">func readSetCookies(h Header) []*Cookie</a>

```Go
func readSetCookies(h Header) []*Cookie
```

readSetCookies parses all "Set-Cookie" values from the header h and returns the successfully parsed Cookies. 

#### <a name="net-http-func-SetCookie">func SetCookie(w ResponseWriter, cookie *Cookie) <small>(exported)</small></a>

```Go
func SetCookie(w ResponseWriter, cookie *Cookie)
```

SetCookie adds a Set-Cookie header to the provided ResponseWriter's headers. The provided cookie must have a valid Name. Invalid cookies may be silently dropped. 

#### <a name="net-http-func-readCookies">func readCookies(h Header, filter string) []*Cookie</a>

```Go
func readCookies(h Header, filter string) []*Cookie
```

readCookies parses all "Cookie" values from the header h and returns the successfully parsed Cookies. 

if filter isn't empty, only cookies of that name are returned 

#### <a name="net-http-func-validCookieDomain">func validCookieDomain(v string) bool</a>

```Go
func validCookieDomain(v string) bool
```

validCookieDomain reports whether v is a valid cookie domain-value. 

#### <a name="net-http-func-validCookieExpires">func validCookieExpires(t time.Time) bool</a>

```Go
func validCookieExpires(t time.Time) bool
```

validCookieExpires reports whether v is a valid cookie expires-value. 

#### <a name="net-http-func-isCookieDomainName">func isCookieDomainName(s string) bool</a>

```Go
func isCookieDomainName(s string) bool
```

isCookieDomainName reports whether s is a valid domain name or a valid domain name with a leading dot '.'.  It is almost a direct copy of package net's isDomainName. 

#### <a name="net-http-func-sanitizeCookieName">func sanitizeCookieName(n string) string</a>

```Go
func sanitizeCookieName(n string) string
```

#### <a name="net-http-func-sanitizeCookieValue">func sanitizeCookieValue(v string) string</a>

```Go
func sanitizeCookieValue(v string) string
```

sanitizeCookieValue produces a suitable cookie-value from v. [https://tools.ietf.org/html/rfc6265#section-4.1.1](https://tools.ietf.org/html/rfc6265#section-4.1.1) cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE ) cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E 

```
; US-ASCII characters excluding CTLs,
; whitespace DQUOTE, comma, semicolon,
; and backslash

```
We loosen this as spaces and commas are common in cookie values but we produce a quoted cookie-value if and only if v contains commas or spaces. See [https://golang.org/issue/7243](https://golang.org/issue/7243) for the discussion. 

#### <a name="net-http-func-validCookieValueByte">func validCookieValueByte(b byte) bool</a>

```Go
func validCookieValueByte(b byte) bool
```

#### <a name="net-http-func-sanitizeCookiePath">func sanitizeCookiePath(v string) string</a>

```Go
func sanitizeCookiePath(v string) string
```

path-av           = "Path=" path-value path-value        = <any CHAR except CTLs or ";"> 

#### <a name="net-http-func-validCookiePathByte">func validCookiePathByte(b byte) bool</a>

```Go
func validCookiePathByte(b byte) bool
```

#### <a name="net-http-func-sanitizeOrWarn">func sanitizeOrWarn(fieldName string, valid func(byte) bool, v string) string</a>

```Go
func sanitizeOrWarn(fieldName string, valid func(byte) bool, v string) string
```

#### <a name="net-http-func-parseCookieValue">func parseCookieValue(raw string, allowDoubleQuote bool) (string, bool)</a>

```Go
func parseCookieValue(raw string, allowDoubleQuote bool) (string, bool)
```

#### <a name="net-http-func-isCookieNameValid">func isCookieNameValid(raw string) bool</a>

```Go
func isCookieNameValid(raw string) bool
```

#### <a name="net-http-func-mapDirOpenError">func mapDirOpenError(originalErr error, name string) error</a>

```Go
func mapDirOpenError(originalErr error, name string) error
```

mapDirOpenError maps the provided non-nil error from opening name to a possibly better non-nil error. In particular, it turns OS-specific errors about opening files in non-directories into fs.ErrNotExist. See Issue 18984. 

#### <a name="net-http-func-dirList">func dirList(w ResponseWriter, r *Request, f File)</a>

```Go
func dirList(w ResponseWriter, r *Request, f File)
```

#### <a name="net-http-func-ServeContent">func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker) <small>(exported)</small></a>

```Go
func ServeContent(w ResponseWriter, req *Request, name string, modtime time.Time, content io.ReadSeeker)
```

ServeContent replies to the request using the content in the provided ReadSeeker. The main benefit of ServeContent over io.Copy is that it handles Range requests properly, sets the MIME type, and handles If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since, and If-Range requests. 

If the response's Content-Type header is not set, ServeContent first tries to deduce the type from name's file extension and, if that fails, falls back to reading the first block of the content and passing it to DetectContentType. The name is otherwise unused; in particular it can be empty and is never sent in the response. 

If modtime is not the zero time or Unix epoch, ServeContent includes it in a Last-Modified header in the response. If the request includes an If-Modified-Since header, ServeContent uses modtime to decide whether the content needs to be sent at all. 

The content's Seek method must work: ServeContent uses a seek to the end of the content to determine its size. 

If the caller has set w's ETag header formatted per RFC 7232, section 2.3, ServeContent uses it to handle requests using If-Match, If-None-Match, or If-Range. 

Note that *os.File implements the io.ReadSeeker interface. 

#### <a name="net-http-func-serveContent">func serveContent(w ResponseWriter, r *Request, name string, modtime time.Time, sizeFunc func() (int64, error), content io.ReadSeeker)</a>

```Go
func serveContent(w ResponseWriter, r *Request, name string, modtime time.Time, sizeFunc func() (int64, error), content io.ReadSeeker)
```

if name is empty, filename is unknown. (used for mime type, before sniffing) if modtime.IsZero(), modtime is unknown. content must be seeked to the beginning of the file. The sizeFunc is called at most once. Its error, if any, is sent in the HTTP response. 

#### <a name="net-http-func-scanETag">func scanETag(s string) (etag string, remain string)</a>

```Go
func scanETag(s string) (etag string, remain string)
```

scanETag determines if a syntactically valid ETag is present at s. If so, the ETag and remaining text after consuming ETag is returned. Otherwise, it returns "", "". 

#### <a name="net-http-func-etagStrongMatch">func etagStrongMatch(a, b string) bool</a>

```Go
func etagStrongMatch(a, b string) bool
```

etagStrongMatch reports whether a and b match using strong ETag comparison. Assumes a and b are valid ETags. 

#### <a name="net-http-func-etagWeakMatch">func etagWeakMatch(a, b string) bool</a>

```Go
func etagWeakMatch(a, b string) bool
```

etagWeakMatch reports whether a and b match using weak ETag comparison. Assumes a and b are valid ETags. 

#### <a name="net-http-func-isZeroTime">func isZeroTime(t time.Time) bool</a>

```Go
func isZeroTime(t time.Time) bool
```

isZeroTime reports whether t is obviously unspecified (either zero or Unix()=0). 

#### <a name="net-http-func-setLastModified">func setLastModified(w ResponseWriter, modtime time.Time)</a>

```Go
func setLastModified(w ResponseWriter, modtime time.Time)
```

#### <a name="net-http-func-writeNotModified">func writeNotModified(w ResponseWriter)</a>

```Go
func writeNotModified(w ResponseWriter)
```

#### <a name="net-http-func-checkPreconditions">func checkPreconditions(w ResponseWriter, r *Request, modtime time.Time) (done bool, rangeHeader string)</a>

```Go
func checkPreconditions(w ResponseWriter, r *Request, modtime time.Time) (done bool, rangeHeader string)
```

checkPreconditions evaluates request preconditions and reports whether a precondition resulted in sending StatusNotModified or StatusPreconditionFailed. 

#### <a name="net-http-func-serveFile">func serveFile(w ResponseWriter, r *Request, fs FileSystem, name string, redirect bool)</a>

```Go
func serveFile(w ResponseWriter, r *Request, fs FileSystem, name string, redirect bool)
```

name is '/'-separated, not filepath.Separator. 

#### <a name="net-http-func-toHTTPError">func toHTTPError(err error) (msg string, httpStatus int)</a>

```Go
func toHTTPError(err error) (msg string, httpStatus int)
```

toHTTPError returns a non-specific HTTP error message and status code for a given non-nil error value. It's important that toHTTPError does not actually return err.Error(), since msg and httpStatus are returned to users, and historically Go's ServeContent always returned just "404 Not Found" for all errors. We don't want to start leaking information in error messages. 

#### <a name="net-http-func-localRedirect">func localRedirect(w ResponseWriter, r *Request, newPath string)</a>

```Go
func localRedirect(w ResponseWriter, r *Request, newPath string)
```

localRedirect gives a Moved Permanently response. It does not convert relative paths to absolute paths like Redirect does. 

#### <a name="net-http-func-ServeFile">func ServeFile(w ResponseWriter, r *Request, name string) <small>(exported)</small></a>

```Go
func ServeFile(w ResponseWriter, r *Request, name string)
```

ServeFile replies to the request with the contents of the named file or directory. 

If the provided file or directory name is a relative path, it is interpreted relative to the current directory and may ascend to parent directories. If the provided name is constructed from user input, it should be sanitized before calling ServeFile. 

As a precaution, ServeFile will reject requests where r.URL.Path contains a ".." path element; this protects against callers who might unsafely use filepath.Join on r.URL.Path without sanitizing it and then use that filepath.Join result as the name argument. 

As another special case, ServeFile redirects any request where r.URL.Path ends in "/index.html" to the same path, without the final "index.html". To avoid such redirects either modify the path or use ServeContent. 

Outside of those two special cases, ServeFile does not use r.URL.Path for selecting the file or directory to serve; only the file or directory provided in the name argument is used. 

#### <a name="net-http-func-containsDotDot">func containsDotDot(v string) bool</a>

```Go
func containsDotDot(v string) bool
```

#### <a name="net-http-func-isSlashRune">func isSlashRune(r rune) bool</a>

```Go
func isSlashRune(r rune) bool
```

#### <a name="net-http-func-parseRange">func parseRange(s string, size int64) ([]httpRange, error)</a>

```Go
func parseRange(s string, size int64) ([]httpRange, error)
```

parseRange parses a Range header string as per RFC 7233. errNoOverlap is returned if none of the ranges overlap. 

#### <a name="net-http-func-rangesMIMESize">func rangesMIMESize(ranges []httpRange, contentType string, contentSize int64) (encSize int64)</a>

```Go
func rangesMIMESize(ranges []httpRange, contentType string, contentSize int64) (encSize int64)
```

rangesMIMESize returns the number of bytes it takes to encode the provided ranges as a multipart response. 

#### <a name="net-http-func-sumRangesSize">func sumRangesSize(ranges []httpRange) (size int64)</a>

```Go
func sumRangesSize(ranges []httpRange) (size int64)
```

#### <a name="net-http-func-http2isBadCipher">func http2isBadCipher(cipher uint16) bool</a>

```Go
func http2isBadCipher(cipher uint16) bool
```

isBadCipher reports whether the cipher is blacklisted by the HTTP/2 spec. References: [https://tools.ietf.org/html/rfc7540#appendix-A](https://tools.ietf.org/html/rfc7540#appendix-A) Reject cipher suites from Appendix A. "This list includes those cipher suites that do not offer an ephemeral key exchange and those that are based on the TLS null, stream or block cipher type" 

#### <a name="net-http-func-http2filterOutClientConn">func http2filterOutClientConn(in []*http2ClientConn, exclude *http2ClientConn) []*http2ClientConn</a>

```Go
func http2filterOutClientConn(in []*http2ClientConn, exclude *http2ClientConn) []*http2ClientConn
```

#### <a name="net-http-func-http2getDataBufferChunk">func http2getDataBufferChunk(size int64) []byte</a>

```Go
func http2getDataBufferChunk(size int64) []byte
```

#### <a name="net-http-func-http2putDataBufferChunk">func http2putDataBufferChunk(p []byte)</a>

```Go
func http2putDataBufferChunk(p []byte)
```

#### <a name="net-http-func-http2terminalReadFrameError">func http2terminalReadFrameError(err error) bool</a>

```Go
func http2terminalReadFrameError(err error) bool
```

terminalReadFrameError reports whether err is an unrecoverable error from ReadFrame and no other frames should be read. 

#### <a name="net-http-func-http2validStreamIDOrZero">func http2validStreamIDOrZero(streamID uint32) bool</a>

```Go
func http2validStreamIDOrZero(streamID uint32) bool
```

#### <a name="net-http-func-http2validStreamID">func http2validStreamID(streamID uint32) bool</a>

```Go
func http2validStreamID(streamID uint32) bool
```

#### <a name="net-http-func-http2readByte">func http2readByte(p []byte) (remain []byte, b byte, err error)</a>

```Go
func http2readByte(p []byte) (remain []byte, b byte, err error)
```

#### <a name="net-http-func-http2readUint32">func http2readUint32(p []byte) (remain []byte, v uint32, err error)</a>

```Go
func http2readUint32(p []byte) (remain []byte, v uint32, err error)
```

#### <a name="net-http-func-http2summarizeFrame">func http2summarizeFrame(f http2Frame) string</a>

```Go
func http2summarizeFrame(f http2Frame) string
```

#### <a name="net-http-func-http2traceHasWroteHeaderField">func http2traceHasWroteHeaderField(trace *httptrace.ClientTrace) bool</a>

```Go
func http2traceHasWroteHeaderField(trace *httptrace.ClientTrace) bool
```

#### <a name="net-http-func-http2traceWroteHeaderField">func http2traceWroteHeaderField(trace *httptrace.ClientTrace, k, v string)</a>

```Go
func http2traceWroteHeaderField(trace *httptrace.ClientTrace, k, v string)
```

#### <a name="net-http-func-http2traceGot1xxResponseFunc">func http2traceGot1xxResponseFunc(trace *httptrace.ClientTrace) func(int, textproto.MIMEHeader) error</a>

```Go
func http2traceGot1xxResponseFunc(trace *httptrace.ClientTrace) func(int, textproto.MIMEHeader) error
```

#### <a name="net-http-func-http2curGoroutineID">func http2curGoroutineID() uint64</a>

```Go
func http2curGoroutineID() uint64
```

#### <a name="net-http-func-http2parseUintBytes">func http2parseUintBytes(s []byte, base int, bitSize int) (n uint64, err error)</a>

```Go
func http2parseUintBytes(s []byte, base int, bitSize int) (n uint64, err error)
```

parseUintBytes is like strconv.ParseUint, but using a []byte. 

#### <a name="net-http-func-http2cutoff64">func http2cutoff64(base int) uint64</a>

```Go
func http2cutoff64(base int) uint64
```

Return the first number n such that n*base >= 1<<64. 

#### <a name="net-http-func-http2buildCommonHeaderMapsOnce">func http2buildCommonHeaderMapsOnce()</a>

```Go
func http2buildCommonHeaderMapsOnce()
```

#### <a name="net-http-func-http2buildCommonHeaderMaps">func http2buildCommonHeaderMaps()</a>

```Go
func http2buildCommonHeaderMaps()
```

#### <a name="net-http-func-http2lowerHeader">func http2lowerHeader(v string) string</a>

```Go
func http2lowerHeader(v string) string
```

#### <a name="net-http-func-init">func init()</a>

```Go
func init()
```

#### <a name="net-http-func-http2validWireHeaderFieldName">func http2validWireHeaderFieldName(v string) bool</a>

```Go
func http2validWireHeaderFieldName(v string) bool
```

validWireHeaderFieldName reports whether v is a valid header field name (key). See httpguts.ValidHeaderName for the base rules. 

Further, http2 says: 

```
"Just as in HTTP/1.x, header field names are strings of ASCII
characters that are compared in a case-insensitive
fashion. However, header field names MUST be converted to
lowercase prior to their encoding in HTTP/2. "

```
#### <a name="net-http-func-http2httpCodeString">func http2httpCodeString(code int) string</a>

```Go
func http2httpCodeString(code int) string
```

#### <a name="net-http-func-http2mustUint31">func http2mustUint31(v int32) uint32</a>

```Go
func http2mustUint31(v int32) uint32
```

#### <a name="net-http-func-http2bodyAllowedForStatus">func http2bodyAllowedForStatus(status int) bool</a>

```Go
func http2bodyAllowedForStatus(status int) bool
```

bodyAllowedForStatus reports whether a given response status code permits a body. See RFC 7230, section 3.3. 

#### <a name="net-http-func-http2validPseudoPath">func http2validPseudoPath(v string) bool</a>

```Go
func http2validPseudoPath(v string) bool
```

validPseudoPath reports whether v is a valid :path pseudo-header value. It must be either: 

```
*) a non-empty string starting with '/'
*) the string '*', for OPTIONS requests.

```
For now this is only used a quick check for deciding when to clean up Opaque URLs before sending requests from the Transport. See golang.org/issue/16847 

We used to enforce that the path also didn't start with "//", but Google's GFE accepts such paths and Chrome sends them, so ignore that part of the spec. See golang.org/issue/19103. 

#### <a name="net-http-func-http2ConfigureServer">func http2ConfigureServer(s *Server, conf *http2Server) error</a>

```Go
func http2ConfigureServer(s *Server, conf *http2Server) error
```

ConfigureServer adds HTTP/2 support to a net/http Server. 

The configuration conf may be nil. 

ConfigureServer must be called before s begins serving. 

#### <a name="net-http-func-http2serverConnBaseContext">func http2serverConnBaseContext(c net.Conn, opts *http2ServeConnOpts) (ctx context.Context, cancel func())</a>

```Go
func http2serverConnBaseContext(c net.Conn, opts *http2ServeConnOpts) (ctx context.Context, cancel func())
```

#### <a name="net-http-func-http2errno">func http2errno(v error) uintptr</a>

```Go
func http2errno(v error) uintptr
```

errno returns v's underlying uintptr, else 0. 

TODO: remove this helper function once http2 can use build tags. See comment in isClosedConnError. 

#### <a name="net-http-func-http2isClosedConnError">func http2isClosedConnError(err error) bool</a>

```Go
func http2isClosedConnError(err error) bool
```

isClosedConnError reports whether err is an error from use of a closed network connection. 

#### <a name="net-http-func-http2checkPriority">func http2checkPriority(streamID uint32, p http2PriorityParam) error</a>

```Go
func http2checkPriority(streamID uint32, p http2PriorityParam) error
```

#### <a name="net-http-func-http2handleHeaderListTooLong">func http2handleHeaderListTooLong(w ResponseWriter, r *Request)</a>

```Go
func http2handleHeaderListTooLong(w ResponseWriter, r *Request)
```

#### <a name="net-http-func-http2checkWriteHeaderCode">func http2checkWriteHeaderCode(code int)</a>

```Go
func http2checkWriteHeaderCode(code int)
```

checkWriteHeaderCode is a copy of net/http's checkWriteHeaderCode. 

#### <a name="net-http-func-http2foreachHeaderElement">func http2foreachHeaderElement(v string, fn func(string))</a>

```Go
func http2foreachHeaderElement(v string, fn func(string))
```

foreachHeaderElement splits v according to the "#rule" construction in RFC 7230 section 7 and calls fn for each non-empty element. 

#### <a name="net-http-func-http2checkValidHTTP2RequestHeaders">func http2checkValidHTTP2RequestHeaders(h Header) error</a>

```Go
func http2checkValidHTTP2RequestHeaders(h Header) error
```

checkValidHTTP2RequestHeaders checks whether h is a valid HTTP/2 request, per RFC 7540 Section 8.1.2.2. The returned error is reported to users. 

#### <a name="net-http-func-http2h1ServerKeepAlivesDisabled">func http2h1ServerKeepAlivesDisabled(hs *Server) bool</a>

```Go
func http2h1ServerKeepAlivesDisabled(hs *Server) bool
```

h1ServerKeepAlivesDisabled reports whether hs has its keep-alives disabled. See comments on h1ServerShutdownChan above for why the code is written this way. 

#### <a name="net-http-func-http2ConfigureTransport">func http2ConfigureTransport(t1 *Transport) error</a>

```Go
func http2ConfigureTransport(t1 *Transport) error
```

ConfigureTransport configures a net/http HTTP/1 Transport to use HTTP/2. It returns an error if t1 has already been HTTP/2-enabled. 

Use ConfigureTransports instead to configure the HTTP/2 Transport. 

#### <a name="net-http-func-http2awaitRequestCancel">func http2awaitRequestCancel(req *Request, done <-chan struct{}) error</a>

```Go
func http2awaitRequestCancel(req *Request, done <-chan struct{}) error
```

awaitRequestCancel waits for the user to cancel a request or for the done channel to be signaled. A non-nil error is returned only if the request was canceled. 

#### <a name="net-http-func-http2isNoCachedConnError">func http2isNoCachedConnError(err error) bool</a>

```Go
func http2isNoCachedConnError(err error) bool
```

isNoCachedConnError reports whether err is of type noCachedConnError or its equivalent renamed type in net/http2's h2_bundle.go. Both types may coexist in the same running program. 

#### <a name="net-http-func-http2authorityAddr">func http2authorityAddr(scheme string, authority string) (addr string)</a>

```Go
func http2authorityAddr(scheme string, authority string) (addr string)
```

authorityAddr returns a given authority (a host/IP, or host:port / ip:port) and returns a host:port. The port 443 is added if needed. 

#### <a name="net-http-func-http2canRetryError">func http2canRetryError(err error) bool</a>

```Go
func http2canRetryError(err error) bool
```

#### <a name="net-http-func-http2commaSeparatedTrailers">func http2commaSeparatedTrailers(req *Request) (string, error)</a>

```Go
func http2commaSeparatedTrailers(req *Request) (string, error)
```

#### <a name="net-http-func-http2checkConnHeaders">func http2checkConnHeaders(req *Request) error</a>

```Go
func http2checkConnHeaders(req *Request) error
```

checkConnHeaders checks whether req has any invalid connection-level headers. per RFC 7540 section 8.1.2.2: Connection-Specific Header Fields. Certain headers are special-cased as okay but not transmitted later. 

#### <a name="net-http-func-http2actualContentLength">func http2actualContentLength(req *Request) int64</a>

```Go
func http2actualContentLength(req *Request) int64
```

actualContentLength returns a sanitized version of req.ContentLength, where 0 actually means zero (not unknown) and -1 means unknown. 

#### <a name="net-http-func-http2shouldSendReqContentLength">func http2shouldSendReqContentLength(method string, contentLength int64) bool</a>

```Go
func http2shouldSendReqContentLength(method string, contentLength int64) bool
```

shouldSendReqContentLength reports whether the http2.Transport should send a "content-length" request header. This logic is basically a copy of the net/http transferWriter.shouldSendContentLength. The contentLength is the corrected contentLength (so 0 means actually 0, not unknown). -1 means unknown. 

#### <a name="net-http-func-http2isEOFOrNetReadError">func http2isEOFOrNetReadError(err error) bool</a>

```Go
func http2isEOFOrNetReadError(err error) bool
```

#### <a name="net-http-func-http2strSliceContains">func http2strSliceContains(ss []string, s string) bool</a>

```Go
func http2strSliceContains(ss []string, s string) bool
```

#### <a name="net-http-func-http2isConnectionCloseRequest">func http2isConnectionCloseRequest(req *Request) bool</a>

```Go
func http2isConnectionCloseRequest(req *Request) bool
```

isConnectionCloseRequest reports whether req should use its own connection for a single request and then close the connection. 

#### <a name="net-http-func-http2registerHTTPSProtocol">func http2registerHTTPSProtocol(t *Transport, rt http2noDialH2RoundTripper) (err error)</a>

```Go
func http2registerHTTPSProtocol(t *Transport, rt http2noDialH2RoundTripper) (err error)
```

registerHTTPSProtocol calls Transport.RegisterProtocol but converting panics into errors. 

#### <a name="net-http-func-http2traceGetConn">func http2traceGetConn(req *Request, hostPort string)</a>

```Go
func http2traceGetConn(req *Request, hostPort string)
```

#### <a name="net-http-func-http2traceGotConn">func http2traceGotConn(req *Request, cc *http2ClientConn, reused bool)</a>

```Go
func http2traceGotConn(req *Request, cc *http2ClientConn, reused bool)
```

#### <a name="net-http-func-http2traceWroteHeaders">func http2traceWroteHeaders(trace *httptrace.ClientTrace)</a>

```Go
func http2traceWroteHeaders(trace *httptrace.ClientTrace)
```

#### <a name="net-http-func-http2traceGot100Continue">func http2traceGot100Continue(trace *httptrace.ClientTrace)</a>

```Go
func http2traceGot100Continue(trace *httptrace.ClientTrace)
```

#### <a name="net-http-func-http2traceWait100Continue">func http2traceWait100Continue(trace *httptrace.ClientTrace)</a>

```Go
func http2traceWait100Continue(trace *httptrace.ClientTrace)
```

#### <a name="net-http-func-http2traceWroteRequest">func http2traceWroteRequest(trace *httptrace.ClientTrace, err error)</a>

```Go
func http2traceWroteRequest(trace *httptrace.ClientTrace, err error)
```

#### <a name="net-http-func-http2traceFirstResponseByte">func http2traceFirstResponseByte(trace *httptrace.ClientTrace)</a>

```Go
func http2traceFirstResponseByte(trace *httptrace.ClientTrace)
```

#### <a name="net-http-func-http2writeEndsStream">func http2writeEndsStream(w http2writeFramer) bool</a>

```Go
func http2writeEndsStream(w http2writeFramer) bool
```

writeEndsStream reports whether w writes a frame that will transition the stream to a half-closed local state. This returns false for RST_STREAM, which closes the entire stream (not just the local half). 

#### <a name="net-http-func-http2splitHeaderBlock">func http2splitHeaderBlock(ctx http2writeContext, headerBlock []byte, fn func(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error) error</a>

```Go
func http2splitHeaderBlock(ctx http2writeContext, headerBlock []byte, fn func(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error) error
```

splitHeaderBlock splits headerBlock into fragments so that each fragment fits in a single frame, then calls fn for each fragment. firstFrag/lastFrag are true for the first/last fragment, respectively. 

#### <a name="net-http-func-http2encKV">func http2encKV(enc *hpack.Encoder, k, v string)</a>

```Go
func http2encKV(enc *hpack.Encoder, k, v string)
```

#### <a name="net-http-func-http2encodeHeaders">func http2encodeHeaders(enc *hpack.Encoder, h Header, keys []string)</a>

```Go
func http2encodeHeaders(enc *hpack.Encoder, h Header, keys []string)
```

encodeHeaders encodes an http.Header. If keys is not nil, then (k, h[k]) is encoded only if k is in keys. 

#### <a name="net-http-func-ParseTime">func ParseTime(text string) (t time.Time, err error) <small>(exported)</small></a>

```Go
func ParseTime(text string) (t time.Time, err error)
```

ParseTime parses a time header (such as the Date: header), trying each of the three formats allowed by HTTP/1.1: TimeFormat, time.RFC850, and time.ANSIC. 

#### <a name="net-http-func-CanonicalHeaderKey">func CanonicalHeaderKey(s string) string <small>(exported)</small></a>

```Go
func CanonicalHeaderKey(s string) string
```

CanonicalHeaderKey returns the canonical format of the header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for "accept-encoding" is "Accept-Encoding". If s contains a space or invalid header field bytes, it is returned without modifications. 

#### <a name="net-http-func-hasToken">func hasToken(v, token string) bool</a>

```Go
func hasToken(v, token string) bool
```

hasToken reports whether token appears with v, ASCII case-insensitive, with space or comma boundaries. token must be all lowercase. v may contain mixed cased. 

#### <a name="net-http-func-isTokenBoundary">func isTokenBoundary(b byte) bool</a>

```Go
func isTokenBoundary(b byte) bool
```

#### <a name="net-http-func-hasPort">func hasPort(s string) bool</a>

```Go
func hasPort(s string) bool
```

Given a string of the form "host", "host:port", or "[ipv6::address]:port", return true if the string includes a port. 

#### <a name="net-http-func-removeEmptyPort">func removeEmptyPort(host string) string</a>

```Go
func removeEmptyPort(host string) string
```

removeEmptyPort strips the empty port in ":port" to "" as mandated by RFC 3986 Section 6.2.3. 

#### <a name="net-http-func-isNotToken">func isNotToken(r rune) bool</a>

```Go
func isNotToken(r rune) bool
```

#### <a name="net-http-func-isASCII">func isASCII(s string) bool</a>

```Go
func isASCII(s string) bool
```

#### <a name="net-http-func-stringContainsCTLByte">func stringContainsCTLByte(s string) bool</a>

```Go
func stringContainsCTLByte(s string) bool
```

stringContainsCTLByte reports whether s contains any ASCII control character. 

#### <a name="net-http-func-hexEscapeNonASCII">func hexEscapeNonASCII(s string) string</a>

```Go
func hexEscapeNonASCII(s string) string
```

#### <a name="net-http-func-badStringError">func badStringError(what, val string) error</a>

```Go
func badStringError(what, val string) error
```

#### <a name="net-http-func-valueOrDefault">func valueOrDefault(value, def string) string</a>

```Go
func valueOrDefault(value, def string) string
```

Return value if nonempty, def otherwise. 

#### <a name="net-http-func-idnaASCII">func idnaASCII(v string) (string, error)</a>

```Go
func idnaASCII(v string) (string, error)
```

#### <a name="net-http-func-cleanHost">func cleanHost(in string) string</a>

```Go
func cleanHost(in string) string
```

cleanHost cleans up the host sent in request's Host header. 

It both strips anything after '/' or ' ', and puts the value into Punycode form, if necessary. 

Ideally we'd clean the Host header according to the spec: 

```
[https://tools.ietf.org/html/rfc7230#section-5.4](https://tools.ietf.org/html/rfc7230#section-5.4) (Host = uri-host [ ":" port ]")
[https://tools.ietf.org/html/rfc7230#section-2.7](https://tools.ietf.org/html/rfc7230#section-2.7) (uri-host -> rfc3986's host)
[https://tools.ietf.org/html/rfc3986#section-3.2.2](https://tools.ietf.org/html/rfc3986#section-3.2.2) (definition of host)

```
But practically, what we are trying to avoid is the situation in issue 11206, where a malformed Host header used in the proxy context would create a bad request. So it is enough to just truncate at the first offending character. 

#### <a name="net-http-func-removeZone">func removeZone(host string) string</a>

```Go
func removeZone(host string) string
```

removeZone removes IPv6 zone identifier from host. E.g., "[fe80::1%en0]:8080" to "[fe80::1]:8080" 

#### <a name="net-http-func-ParseHTTPVersion">func ParseHTTPVersion(vers string) (major, minor int, ok bool) <small>(exported)</small></a>

```Go
func ParseHTTPVersion(vers string) (major, minor int, ok bool)
```

ParseHTTPVersion parses an HTTP version string. "HTTP/1.0" returns (1, 0, true). 

#### <a name="net-http-func-validMethod">func validMethod(method string) bool</a>

```Go
func validMethod(method string) bool
```

#### <a name="net-http-func-parseBasicAuth">func parseBasicAuth(auth string) (username, password string, ok bool)</a>

```Go
func parseBasicAuth(auth string) (username, password string, ok bool)
```

parseBasicAuth parses an HTTP Basic Authentication string. "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==" returns ("Aladdin", "open sesame", true). 

#### <a name="net-http-func-parseRequestLine">func parseRequestLine(line string) (method, requestURI, proto string, ok bool)</a>

```Go
func parseRequestLine(line string) (method, requestURI, proto string, ok bool)
```

parseRequestLine parses "GET /foo HTTP/1.1" into its three parts. 

#### <a name="net-http-func-newTextprotoReader">func newTextprotoReader(br *bufio.Reader) *textproto.Reader</a>

```Go
func newTextprotoReader(br *bufio.Reader) *textproto.Reader
```

#### <a name="net-http-func-putTextprotoReader">func putTextprotoReader(r *textproto.Reader)</a>

```Go
func putTextprotoReader(r *textproto.Reader)
```

#### <a name="net-http-func-MaxBytesReader">func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser <small>(exported)</small></a>

```Go
func MaxBytesReader(w ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser
```

MaxBytesReader is similar to io.LimitReader but is intended for limiting the size of incoming request bodies. In contrast to io.LimitReader, MaxBytesReader's result is a ReadCloser, returns a non-EOF error for a Read beyond the limit, and closes the underlying reader when its Close method is called. 

MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources. 

#### <a name="net-http-func-copyValues">func copyValues(dst, src url.Values)</a>

```Go
func copyValues(dst, src url.Values)
```

#### <a name="net-http-func-parsePostForm">func parsePostForm(r *Request) (vs url.Values, err error)</a>

```Go
func parsePostForm(r *Request) (vs url.Values, err error)
```

#### <a name="net-http-func-requestMethodUsuallyLacksBody">func requestMethodUsuallyLacksBody(method string) bool</a>

```Go
func requestMethodUsuallyLacksBody(method string) bool
```

requestMethodUsuallyLacksBody reports whether the given request method is one that typically does not involve a request body. This is used by the Transport (via transferWriter.shouldSendChunkedRequestBody) to determine whether we try to test-read a byte from a non-nil Request.Body when Request.outgoingLength() returns -1. See the comments in shouldSendChunkedRequestBody. 

#### <a name="net-http-func-fixPragmaCacheControl">func fixPragmaCacheControl(header Header)</a>

```Go
func fixPragmaCacheControl(header Header)
```

RFC 7234, section 5.4: Should treat 

```
Pragma: no-cache

```
like 

```
Cache-Control: no-cache

```
#### <a name="net-http-func-isProtocolSwitchResponse">func isProtocolSwitchResponse(code int, h Header) bool</a>

```Go
func isProtocolSwitchResponse(code int, h Header) bool
```

isProtocolSwitchResponse reports whether the response code and response header indicate a successful protocol upgrade response. 

#### <a name="net-http-func-isProtocolSwitchHeader">func isProtocolSwitchHeader(h Header) bool</a>

```Go
func isProtocolSwitchHeader(h Header) bool
```

isProtocolSwitchHeader reports whether the request or response header is for a protocol switch. 

#### <a name="net-http-func-bufioWriterPool">func bufioWriterPool(size int) *sync.Pool</a>

```Go
func bufioWriterPool(size int) *sync.Pool
```

#### <a name="net-http-func-newBufioReader">func newBufioReader(r io.Reader) *bufio.Reader</a>

```Go
func newBufioReader(r io.Reader) *bufio.Reader
```

#### <a name="net-http-func-putBufioReader">func putBufioReader(br *bufio.Reader)</a>

```Go
func putBufioReader(br *bufio.Reader)
```

#### <a name="net-http-func-newBufioWriterSize">func newBufioWriterSize(w io.Writer, size int) *bufio.Writer</a>

```Go
func newBufioWriterSize(w io.Writer, size int) *bufio.Writer
```

#### <a name="net-http-func-putBufioWriter">func putBufioWriter(bw *bufio.Writer)</a>

```Go
func putBufioWriter(bw *bufio.Writer)
```

#### <a name="net-http-func-appendTime">func appendTime(b []byte, t time.Time) []byte</a>

```Go
func appendTime(b []byte, t time.Time) []byte
```

appendTime is a non-allocating version of []byte(t.UTC().Format(TimeFormat)) 

#### <a name="net-http-func-http1ServerSupportsRequest">func http1ServerSupportsRequest(req *Request) bool</a>

```Go
func http1ServerSupportsRequest(req *Request) bool
```

http1ServerSupportsRequest reports whether Go's HTTP/1.x server supports the given request. 

#### <a name="net-http-func-checkWriteHeaderCode">func checkWriteHeaderCode(code int)</a>

```Go
func checkWriteHeaderCode(code int)
```

#### <a name="net-http-func-relevantCaller">func relevantCaller() runtime.Frame</a>

```Go
func relevantCaller() runtime.Frame
```

relevantCaller searches the call stack for the first function outside of net/http. The purpose of this function is to provide more helpful error messages. 

#### <a name="net-http-func-foreachHeaderElement">func foreachHeaderElement(v string, fn func(string))</a>

```Go
func foreachHeaderElement(v string, fn func(string))
```

foreachHeaderElement splits v according to the "#rule" construction in RFC 7230 section 7 and calls fn for each non-empty element. 

#### <a name="net-http-func-writeStatusLine">func writeStatusLine(bw *bufio.Writer, is11 bool, code int, scratch []byte)</a>

```Go
func writeStatusLine(bw *bufio.Writer, is11 bool, code int, scratch []byte)
```

writeStatusLine writes an HTTP/1.x Status-Line (RFC 7230 Section 3.1.2) to bw. is11 is whether the HTTP request is HTTP/1.1. false means HTTP/1.0. code is the response status code. scratch is an optional scratch buffer. If it has at least capacity 3, it's used. 

#### <a name="net-http-func-validNextProto">func validNextProto(proto string) bool</a>

```Go
func validNextProto(proto string) bool
```

validNextProto reports whether the proto is a valid ALPN protocol name. Everything is valid except the empty string and built-in protocol types, so that those can't be overridden with alternate implementations. 

#### <a name="net-http-func-badRequestError">func badRequestError(e string) error</a>

```Go
func badRequestError(e string) error
```

badRequestError is a literal string (used by in the server in HTML, unescaped) to tell the user why their request was bad. It should be plain text without user info or other embedded errors. 

#### <a name="net-http-func-isCommonNetReadError">func isCommonNetReadError(err error) bool</a>

```Go
func isCommonNetReadError(err error) bool
```

isCommonNetReadError reports whether err is a common error encountered during reading a request off the network when the client has gone away or had its read fail somehow. This is used to determine which logs are interesting enough to log about. 

#### <a name="net-http-func-registerOnHitEOF">func registerOnHitEOF(rc io.ReadCloser, fn func())</a>

```Go
func registerOnHitEOF(rc io.ReadCloser, fn func())
```

#### <a name="net-http-func-requestBodyRemains">func requestBodyRemains(rc io.ReadCloser) bool</a>

```Go
func requestBodyRemains(rc io.ReadCloser) bool
```

requestBodyRemains reports whether future calls to Read on rc might yield more data. 

#### <a name="net-http-func-Error">func Error(w ResponseWriter, error string, code int) <small>(exported)</small></a>

```Go
func Error(w ResponseWriter, error string, code int)
```

Error replies to the request with the specified error message and HTTP code. It does not otherwise end the request; the caller should ensure no further writes are done to w. The error message should be plain text. 

#### <a name="net-http-func-NotFound">func NotFound(w ResponseWriter, r *Request) <small>(exported)</small></a>

```Go
func NotFound(w ResponseWriter, r *Request)
```

NotFound replies to the request with an HTTP 404 not found error. 

#### <a name="net-http-func-Redirect">func Redirect(w ResponseWriter, r *Request, url string, code int) <small>(exported)</small></a>

```Go
func Redirect(w ResponseWriter, r *Request, url string, code int)
```

Redirect replies to the request with a redirect to url, which may be a path relative to the request path. 

The provided code should be in the 3xx range and is usually StatusMovedPermanently, StatusFound or StatusSeeOther. 

If the Content-Type header has not been set, Redirect sets it to "text/html; charset=utf-8" and writes a small HTML body. Setting the Content-Type header to any value, including nil, disables that behavior. 

#### <a name="net-http-func-htmlEscape">func htmlEscape(s string) string</a>

```Go
func htmlEscape(s string) string
```

#### <a name="net-http-func-cleanPath">func cleanPath(p string) string</a>

```Go
func cleanPath(p string) string
```

cleanPath returns the canonical path for p, eliminating . and .. elements. 

#### <a name="net-http-func-stripHostPort">func stripHostPort(h string) string</a>

```Go
func stripHostPort(h string) string
```

stripHostPort returns h without any trailing ":<port>". 

#### <a name="net-http-func-appendSorted">func appendSorted(es []muxEntry, e muxEntry) []muxEntry</a>

```Go
func appendSorted(es []muxEntry, e muxEntry) []muxEntry
```

#### <a name="net-http-func-Handle">func Handle(pattern string, handler Handler) <small>(exported)</small></a>

```Go
func Handle(pattern string, handler Handler)
```

Handle registers the handler for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched. 

#### <a name="net-http-func-HandleFunc">func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) <small>(exported)</small></a>

```Go
func HandleFunc(pattern string, handler func(ResponseWriter, *Request))
```

HandleFunc registers the handler function for the given pattern in the DefaultServeMux. The documentation for ServeMux explains how patterns are matched. 

#### <a name="net-http-func-Serve">func Serve(l net.Listener, handler Handler) error <small>(exported)</small></a>

```Go
func Serve(l net.Listener, handler Handler) error
```

Serve accepts incoming HTTP connections on the listener l, creating a new service goroutine for each. The service goroutines read requests and then call handler to reply to them. 

The handler is typically nil, in which case the DefaultServeMux is used. 

HTTP/2 support is only enabled if the Listener returns *tls.Conn connections and they were configured with "h2" in the TLS Config.NextProtos. 

Serve always returns a non-nil error. 

#### <a name="net-http-func-ServeTLS">func ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error <small>(exported)</small></a>

```Go
func ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error
```

ServeTLS accepts incoming HTTPS connections on the listener l, creating a new service goroutine for each. The service goroutines read requests and then call handler to reply to them. 

The handler is typically nil, in which case the DefaultServeMux is used. 

Additionally, files containing a certificate and matching private key for the server must be provided. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate. 

ServeTLS always returns a non-nil error. 

#### <a name="net-http-func-logf">func logf(r *Request, format string, args ...interface{})</a>

```Go
func logf(r *Request, format string, args ...interface{})
```

logf prints to the ErrorLog of the *Server associated with request r via ServerContextKey. If there's no associated server, or if ErrorLog is nil, logging is done via the log package's standard logger. 

#### <a name="net-http-func-ListenAndServe">func ListenAndServe(addr string, handler Handler) error <small>(exported)</small></a>

```Go
func ListenAndServe(addr string, handler Handler) error
```

ListenAndServe listens on the TCP network address addr and then calls Serve with handler to handle requests on incoming connections. Accepted connections are configured to enable TCP keep-alives. 

The handler is typically nil, in which case the DefaultServeMux is used. 

ListenAndServe always returns a non-nil error. 

#### <a name="net-http-func-ListenAndServeTLS">func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error <small>(exported)</small></a>

```Go
func ListenAndServeTLS(addr, certFile, keyFile string, handler Handler) error
```

ListenAndServeTLS acts identically to ListenAndServe, except that it expects HTTPS connections. Additionally, files containing a certificate and matching private key for the server must be provided. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate. 

#### <a name="net-http-func-newLoggingConn">func newLoggingConn(baseName string, c net.Conn) net.Conn</a>

```Go
func newLoggingConn(baseName string, c net.Conn) net.Conn
```

#### <a name="net-http-func-numLeadingCRorLF">func numLeadingCRorLF(v []byte) (n int)</a>

```Go
func numLeadingCRorLF(v []byte) (n int)
```

#### <a name="net-http-func-strSliceContains">func strSliceContains(ss []string, s string) bool</a>

```Go
func strSliceContains(ss []string, s string) bool
```

#### <a name="net-http-func-tlsRecordHeaderLooksLikeHTTP">func tlsRecordHeaderLooksLikeHTTP(hdr [5]byte) bool</a>

```Go
func tlsRecordHeaderLooksLikeHTTP(hdr [5]byte) bool
```

tlsRecordHeaderLooksLikeHTTP reports whether a TLS record header looks like it might've been a misdirected plaintext HTTP request. 

#### <a name="net-http-func-DetectContentType">func DetectContentType(data []byte) string <small>(exported)</small></a>

```Go
func DetectContentType(data []byte) string
```

DetectContentType implements the algorithm described at [https://mimesniff.spec.whatwg.org/](https://mimesniff.spec.whatwg.org/) to determine the Content-Type of the given data. It considers at most the first 512 bytes of data. DetectContentType always returns a valid MIME type: if it cannot determine a more specific one, it returns "application/octet-stream". 

#### <a name="net-http-func-isWS">func isWS(b byte) bool</a>

```Go
func isWS(b byte) bool
```

isWS reports whether the provided byte is a whitespace byte (0xWS) as defined in [https://mimesniff.spec.whatwg.org/#terminology](https://mimesniff.spec.whatwg.org/#terminology). 

#### <a name="net-http-func-isTT">func isTT(b byte) bool</a>

```Go
func isTT(b byte) bool
```

isTT reports whether the provided byte is a tag-terminating byte (0xTT) as defined in [https://mimesniff.spec.whatwg.org/#terminology](https://mimesniff.spec.whatwg.org/#terminology). 

#### <a name="net-http-func-sockssplitHostPort">func sockssplitHostPort(address string) (string, int, error)</a>

```Go
func sockssplitHostPort(address string) (string, int, error)
```

#### <a name="net-http-func-StatusText">func StatusText(code int) string <small>(exported)</small></a>

```Go
func StatusText(code int) string
```

StatusText returns a text for the HTTP status code. It returns the empty string if the code is unknown. 

#### <a name="net-http-func-noResponseBodyExpected">func noResponseBodyExpected(requestMethod string) bool</a>

```Go
func noResponseBodyExpected(requestMethod string) bool
```

#### <a name="net-http-func-bodyAllowedForStatus">func bodyAllowedForStatus(status int) bool</a>

```Go
func bodyAllowedForStatus(status int) bool
```

bodyAllowedForStatus reports whether a given response status code permits a body. See RFC 7230, section 3.3. 

#### <a name="net-http-func-suppressedHeaders">func suppressedHeaders(status int) []string</a>

```Go
func suppressedHeaders(status int) []string
```

#### <a name="net-http-func-readTransfer">func readTransfer(msg interface{}, r *bufio.Reader) (err error)</a>

```Go
func readTransfer(msg interface{}, r *bufio.Reader) (err error)
```

msg is *Request or *Response. 

#### <a name="net-http-func-chunked">func chunked(te []string) bool</a>

```Go
func chunked(te []string) bool
```

Checks whether chunked is part of the encodings stack 

#### <a name="net-http-func-isIdentity">func isIdentity(te []string) bool</a>

```Go
func isIdentity(te []string) bool
```

Checks whether the encoding is explicitly "identity". 

#### <a name="net-http-func-isUnsupportedTEError">func isUnsupportedTEError(err error) bool</a>

```Go
func isUnsupportedTEError(err error) bool
```

isUnsupportedTEError checks if the error is of type unsupportedTEError. It is usually invoked with a non-nil err. 

#### <a name="net-http-func-fixLength">func fixLength(isResponse bool, status int, requestMethod string, header Header, chunked bool) (int64, error)</a>

```Go
func fixLength(isResponse bool, status int, requestMethod string, header Header, chunked bool) (int64, error)
```

Determine the expected body length, using RFC 7230 Section 3.3. This function is not a method, because ultimately it should be shared by ReadResponse and ReadRequest. 

#### <a name="net-http-func-shouldClose">func shouldClose(major, minor int, header Header, removeCloseHeader bool) bool</a>

```Go
func shouldClose(major, minor int, header Header, removeCloseHeader bool) bool
```

Determine whether to hang up after sending a request and body, or receiving a response and body 'header' is the request headers 

#### <a name="net-http-func-seeUpcomingDoubleCRLF">func seeUpcomingDoubleCRLF(r *bufio.Reader) bool</a>

```Go
func seeUpcomingDoubleCRLF(r *bufio.Reader) bool
```

#### <a name="net-http-func-mergeSetHeader">func mergeSetHeader(dst *Header, src Header)</a>

```Go
func mergeSetHeader(dst *Header, src Header)
```

#### <a name="net-http-func-parseContentLength">func parseContentLength(cl string) (int64, error)</a>

```Go
func parseContentLength(cl string) (int64, error)
```

parseContentLength trims whitespace from s and returns -1 if no value is set, or the value if it's >= 0. 

#### <a name="net-http-func-isKnownInMemoryReader">func isKnownInMemoryReader(r io.Reader) bool</a>

```Go
func isKnownInMemoryReader(r io.Reader) bool
```

isKnownInMemoryReader reports whether r is a type known to not block on Read. Its caller uses this as an optional optimization to send fewer TCP packets. 

#### <a name="net-http-func-ProxyFromEnvironment">func ProxyFromEnvironment(req *Request) (*url.URL, error) <small>(exported)</small></a>

```Go
func ProxyFromEnvironment(req *Request) (*url.URL, error)
```

ProxyFromEnvironment returns the URL of the proxy to use for a given request, as indicated by the environment variables HTTP_PROXY, HTTPS_PROXY and NO_PROXY (or the lowercase versions thereof). HTTPS_PROXY takes precedence over HTTP_PROXY for https requests. 

The environment values may be either a complete URL or a "host[:port]", in which case the "http" scheme is assumed. An error is returned if the value is a different form. 

A nil URL and nil error are returned if no proxy is defined in the environment, or a proxy should not be used for the given request, as defined by NO_PROXY. 

As a special case, if req.URL.Host is "localhost" (with or without a port number), then a nil URL and nil error will be returned. 

#### <a name="net-http-func-ProxyURL">func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error) <small>(exported)</small></a>

```Go
func ProxyURL(fixedURL *url.URL) func(*Request) (*url.URL, error)
```

ProxyURL returns a proxy function (for use in a Transport) that always returns the same URL. 

#### <a name="net-http-func-envProxyFunc">func envProxyFunc() func(*url.URL) (*url.URL, error)</a>

```Go
func envProxyFunc() func(*url.URL) (*url.URL, error)
```

defaultProxyConfig returns a ProxyConfig value looked up from the environment. This mitigates expensive lookups on some platforms (e.g. Windows). 

#### <a name="net-http-func-resetProxyConfig">func resetProxyConfig()</a>

```Go
func resetProxyConfig()
```

resetProxyConfig is used by tests. 

#### <a name="net-http-func-is408Message">func is408Message(buf []byte) bool</a>

```Go
func is408Message(buf []byte) bool
```

is408Message reports whether buf has the prefix of an HTTP 408 Request Timeout response. See golang.org/issue/32310. 

#### <a name="net-http-func-newReadWriteCloserBody">func newReadWriteCloserBody(br *bufio.Reader, rwc io.ReadWriteCloser) io.ReadWriteCloser</a>

```Go
func newReadWriteCloserBody(br *bufio.Reader, rwc io.ReadWriteCloser) io.ReadWriteCloser
```

#### <a name="net-http-func-nop">func nop()</a>

```Go
func nop()
```

#### <a name="net-http-func-canonicalAddr">func canonicalAddr(url *url.URL) string</a>

```Go
func canonicalAddr(url *url.URL) string
```

canonicalAddr returns url.Host but always with a ":port" suffix 

#### <a name="net-http-func-cloneTLSConfig">func cloneTLSConfig(cfg *tls.Config) *tls.Config</a>

```Go
func cloneTLSConfig(cfg *tls.Config) *tls.Config
```

cloneTLSConfig returns a shallow clone of cfg, or a new zero tls.Config if cfg is nil. This is safe to call even if cfg is in active use by a TLS client or server. 

#### <a name="net-http-func-TestWriteSetCookies">func TestWriteSetCookies(t *testing.T)</a>

```Go
func TestWriteSetCookies(t *testing.T)
```

#### <a name="net-http-func-TestSetCookie">func TestSetCookie(t *testing.T)</a>

```Go
func TestSetCookie(t *testing.T)
```

#### <a name="net-http-func-TestAddCookie">func TestAddCookie(t *testing.T)</a>

```Go
func TestAddCookie(t *testing.T)
```

#### <a name="net-http-func-toJSON">func toJSON(v interface{}) string</a>

```Go
func toJSON(v interface{}) string
```

#### <a name="net-http-func-TestReadSetCookies">func TestReadSetCookies(t *testing.T)</a>

```Go
func TestReadSetCookies(t *testing.T)
```

#### <a name="net-http-func-TestReadCookies">func TestReadCookies(t *testing.T)</a>

```Go
func TestReadCookies(t *testing.T)
```

#### <a name="net-http-func-TestSetCookieDoubleQuotes">func TestSetCookieDoubleQuotes(t *testing.T)</a>

```Go
func TestSetCookieDoubleQuotes(t *testing.T)
```

#### <a name="net-http-func-TestCookieSanitizeValue">func TestCookieSanitizeValue(t *testing.T)</a>

```Go
func TestCookieSanitizeValue(t *testing.T)
```

#### <a name="net-http-func-TestCookieSanitizePath">func TestCookieSanitizePath(t *testing.T)</a>

```Go
func TestCookieSanitizePath(t *testing.T)
```

#### <a name="net-http-func-BenchmarkCookieString">func BenchmarkCookieString(b *testing.B)</a>

```Go
func BenchmarkCookieString(b *testing.B)
```

#### <a name="net-http-func-BenchmarkReadSetCookies">func BenchmarkReadSetCookies(b *testing.B)</a>

```Go
func BenchmarkReadSetCookies(b *testing.B)
```

#### <a name="net-http-func-BenchmarkReadCookies">func BenchmarkReadCookies(b *testing.B)</a>

```Go
func BenchmarkReadCookies(b *testing.B)
```

#### <a name="net-http-func-init">func init()</a>

```Go
func init()
```

#### <a name="net-http-func-CondSkipHTTP2">func CondSkipHTTP2(t *testing.T)</a>

```Go
func CondSkipHTTP2(t *testing.T)
```

#### <a name="net-http-func-SetReadLoopBeforeNextReadHook">func SetReadLoopBeforeNextReadHook(f func())</a>

```Go
func SetReadLoopBeforeNextReadHook(f func())
```

#### <a name="net-http-func-SetPendingDialHooks">func SetPendingDialHooks(before, after func())</a>

```Go
func SetPendingDialHooks(before, after func())
```

SetPendingDialHooks sets the hooks that run before and after handling pending dials. 

#### <a name="net-http-func-SetTestHookServerServe">func SetTestHookServerServe(fn func(*Server, net.Listener))</a>

```Go
func SetTestHookServerServe(fn func(*Server, net.Listener))
```

#### <a name="net-http-func-ResetCachedEnvironment">func ResetCachedEnvironment()</a>

```Go
func ResetCachedEnvironment()
```

#### <a name="net-http-func-unnilTestHook">func unnilTestHook(f *func())</a>

```Go
func unnilTestHook(f *func())
```

All test hooks must be non-nil so they can be called directly, but the tests use nil to mean hook disabled. 

#### <a name="net-http-func-hookSetter">func hookSetter(dst *func()) func(func())</a>

```Go
func hookSetter(dst *func()) func(func())
```

#### <a name="net-http-func-ExportHttp2ConfigureTransport">func ExportHttp2ConfigureTransport(t *Transport) error</a>

```Go
func ExportHttp2ConfigureTransport(t *Transport) error
```

#### <a name="net-http-func-ExportSetH2GoawayTimeout">func ExportSetH2GoawayTimeout(d time.Duration) (restore func())</a>

```Go
func ExportSetH2GoawayTimeout(d time.Duration) (restore func())
```

#### <a name="net-http-func-ExportCloseTransportConnsAbruptly">func ExportCloseTransportConnsAbruptly(tr *Transport)</a>

```Go
func ExportCloseTransportConnsAbruptly(tr *Transport)
```

ExportCloseTransportConnsAbruptly closes all idle connections from tr in an abrupt way, just reaching into the underlying Conns and closing them, without telling the Transport or its persistConns that it's doing so. This is to simulate the server closing connections on the Transport. 

#### <a name="net-http-func-checker">func checker(t *testing.T) func(string, error)</a>

```Go
func checker(t *testing.T) func(string, error)
```

#### <a name="net-http-func-TestFileTransport">func TestFileTransport(t *testing.T)</a>

```Go
func TestFileTransport(t *testing.T)
```

#### <a name="net-http-func-TestHeaderWrite">func TestHeaderWrite(t *testing.T)</a>

```Go
func TestHeaderWrite(t *testing.T)
```

#### <a name="net-http-func-TestParseTime">func TestParseTime(t *testing.T)</a>

```Go
func TestParseTime(t *testing.T)
```

#### <a name="net-http-func-TestHasToken">func TestHasToken(t *testing.T)</a>

```Go
func TestHasToken(t *testing.T)
```

#### <a name="net-http-func-TestNilHeaderClone">func TestNilHeaderClone(t *testing.T)</a>

```Go
func TestNilHeaderClone(t *testing.T)
```

#### <a name="net-http-func-BenchmarkHeaderWriteSubset">func BenchmarkHeaderWriteSubset(b *testing.B)</a>

```Go
func BenchmarkHeaderWriteSubset(b *testing.B)
```

#### <a name="net-http-func-TestHeaderWriteSubsetAllocs">func TestHeaderWriteSubsetAllocs(t *testing.T)</a>

```Go
func TestHeaderWriteSubsetAllocs(t *testing.T)
```

#### <a name="net-http-func-TestCloneOrMakeHeader">func TestCloneOrMakeHeader(t *testing.T)</a>

```Go
func TestCloneOrMakeHeader(t *testing.T)
```

Issue 34878: test that every call to cloneOrMakeHeader never returns a nil Header. 

#### <a name="net-http-func-TestForeachHeaderElement">func TestForeachHeaderElement(t *testing.T)</a>

```Go
func TestForeachHeaderElement(t *testing.T)
```

#### <a name="net-http-func-TestCleanHost">func TestCleanHost(t *testing.T)</a>

```Go
func TestCleanHost(t *testing.T)
```

#### <a name="net-http-func-TestCmdGoNoHTTPServer">func TestCmdGoNoHTTPServer(t *testing.T)</a>

```Go
func TestCmdGoNoHTTPServer(t *testing.T)
```

Test that cmd/go doesn't link in the HTTP server. 

This catches accidental dependencies between the HTTP transport and server code. 

#### <a name="net-http-func-TestOmitHTTP2">func TestOmitHTTP2(t *testing.T)</a>

```Go
func TestOmitHTTP2(t *testing.T)
```

Tests that the nethttpomithttp2 build tag doesn't rot too much, even if there's not a regular builder on it. 

#### <a name="net-http-func-TestOmitHTTP2Vet">func TestOmitHTTP2Vet(t *testing.T)</a>

```Go
func TestOmitHTTP2Vet(t *testing.T)
```

Tests that the nethttpomithttp2 build tag at least type checks in short mode. The TestOmitHTTP2 test above actually runs tests (in long mode). 

#### <a name="net-http-func-BenchmarkCopyValues">func BenchmarkCopyValues(b *testing.B)</a>

```Go
func BenchmarkCopyValues(b *testing.B)
```

#### <a name="net-http-func-TestCacheKeys">func TestCacheKeys(t *testing.T)</a>

```Go
func TestCacheKeys(t *testing.T)
```

#### <a name="net-http-func-ResetProxyEnv">func ResetProxyEnv()</a>

```Go
func ResetProxyEnv()
```

#### <a name="net-http-func-TestParseRange">func TestParseRange(t *testing.T)</a>

```Go
func TestParseRange(t *testing.T)
```

#### <a name="net-http-func-TestReadRequest">func TestReadRequest(t *testing.T)</a>

```Go
func TestReadRequest(t *testing.T)
```

#### <a name="net-http-func-reqBytes">func reqBytes(req string) []byte</a>

```Go
func reqBytes(req string) []byte
```

reqBytes treats req as a request (with \n delimiters) and returns it with \r\n delimiters, ending in \r\n\r\n 

#### <a name="net-http-func-TestReadRequest_Bad">func TestReadRequest_Bad(t *testing.T)</a>

```Go
func TestReadRequest_Bad(t *testing.T)
```

#### <a name="net-http-func-TestRequestWrite">func TestRequestWrite(t *testing.T)</a>

```Go
func TestRequestWrite(t *testing.T)
```

#### <a name="net-http-func-TestRequestWriteTransport">func TestRequestWriteTransport(t *testing.T)</a>

```Go
func TestRequestWriteTransport(t *testing.T)
```

#### <a name="net-http-func-TestRequestWriteClosesBody">func TestRequestWriteClosesBody(t *testing.T)</a>

```Go
func TestRequestWriteClosesBody(t *testing.T)
```

TestRequestWriteClosesBody tests that Request.Write closes its request.Body. It also indirectly tests NewRequest and that it doesn't wrap an existing Closer inside a NopCloser, and that it serializes it correctly. 

#### <a name="net-http-func-chunk">func chunk(s string) string</a>

```Go
func chunk(s string) string
```

#### <a name="net-http-func-mustParseURL">func mustParseURL(s string) *url.URL</a>

```Go
func mustParseURL(s string) *url.URL
```

#### <a name="net-http-func-TestRequestWriteError">func TestRequestWriteError(t *testing.T)</a>

```Go
func TestRequestWriteError(t *testing.T)
```

TestRequestWriteError tests the Write err != nil checks in (*Request).write. 

#### <a name="net-http-func-dumpRequestOut">func dumpRequestOut(req *Request, onReadHeaders func()) ([]byte, error)</a>

```Go
func dumpRequestOut(req *Request, onReadHeaders func()) ([]byte, error)
```

dumpRequestOut is a modified copy of net/http/httputil.DumpRequestOut. Unlike the original, this version doesn't mutate the req.Body and try to restore it. It always dumps the whole body. And it doesn't support https. 

#### <a name="net-http-func-TestReadResponse">func TestReadResponse(t *testing.T)</a>

```Go
func TestReadResponse(t *testing.T)
```

tests successful calls to ReadResponse, and inspects the returned Response. For error cases, see TestReadResponseErrors below. 

#### <a name="net-http-func-TestWriteResponse">func TestWriteResponse(t *testing.T)</a>

```Go
func TestWriteResponse(t *testing.T)
```

#### <a name="net-http-func-TestReadResponseCloseInMiddle">func TestReadResponseCloseInMiddle(t *testing.T)</a>

```Go
func TestReadResponseCloseInMiddle(t *testing.T)
```

TestReadResponseCloseInMiddle tests that closing a body after reading only part of its contents advances the read to the end of the request, right up until the next request. 

#### <a name="net-http-func-diff">func diff(t *testing.T, prefix string, have, want interface{})</a>

```Go
func diff(t *testing.T, prefix string, have, want interface{})
```

#### <a name="net-http-func-TestLocationResponse">func TestLocationResponse(t *testing.T)</a>

```Go
func TestLocationResponse(t *testing.T)
```

#### <a name="net-http-func-TestResponseStatusStutter">func TestResponseStatusStutter(t *testing.T)</a>

```Go
func TestResponseStatusStutter(t *testing.T)
```

#### <a name="net-http-func-TestResponseContentLengthShortBody">func TestResponseContentLengthShortBody(t *testing.T)</a>

```Go
func TestResponseContentLengthShortBody(t *testing.T)
```

#### <a name="net-http-func-TestReadResponseErrors">func TestReadResponseErrors(t *testing.T)</a>

```Go
func TestReadResponseErrors(t *testing.T)
```

Test various ReadResponse error cases. (also tests success cases, but mostly it's about errors).  This does not test anything involving the bodies. Only the return value from ReadResponse itself. 

#### <a name="net-http-func-matchErr">func matchErr(err error, wantErr interface{}) error</a>

```Go
func matchErr(err error, wantErr interface{}) error
```

wantErr can be nil, an error value to match exactly, or type string to match a substring. 

#### <a name="net-http-func-TestNeedsSniff">func TestNeedsSniff(t *testing.T)</a>

```Go
func TestNeedsSniff(t *testing.T)
```

#### <a name="net-http-func-TestResponseWritesOnlySingleConnectionClose">func TestResponseWritesOnlySingleConnectionClose(t *testing.T)</a>

```Go
func TestResponseWritesOnlySingleConnectionClose(t *testing.T)
```

A response should only write out single Connection: close header. Tests #19499. 

#### <a name="net-http-func-TestResponseWrite">func TestResponseWrite(t *testing.T)</a>

```Go
func TestResponseWrite(t *testing.T)
```

#### <a name="net-http-func-BenchmarkServerMatch">func BenchmarkServerMatch(b *testing.B)</a>

```Go
func BenchmarkServerMatch(b *testing.B)
```

#### <a name="net-http-func-TestBodyReadBadTrailer">func TestBodyReadBadTrailer(t *testing.T)</a>

```Go
func TestBodyReadBadTrailer(t *testing.T)
```

#### <a name="net-http-func-TestFinalChunkedBodyReadEOF">func TestFinalChunkedBodyReadEOF(t *testing.T)</a>

```Go
func TestFinalChunkedBodyReadEOF(t *testing.T)
```

#### <a name="net-http-func-TestDetectInMemoryReaders">func TestDetectInMemoryReaders(t *testing.T)</a>

```Go
func TestDetectInMemoryReaders(t *testing.T)
```

#### <a name="net-http-func-TestTransferWriterWriteBodyReaderTypes">func TestTransferWriterWriteBodyReaderTypes(t *testing.T)</a>

```Go
func TestTransferWriterWriteBodyReaderTypes(t *testing.T)
```

#### <a name="net-http-func-TestParseTransferEncoding">func TestParseTransferEncoding(t *testing.T)</a>

```Go
func TestParseTransferEncoding(t *testing.T)
```

#### <a name="net-http-func-TestParseContentLength">func TestParseContentLength(t *testing.T)</a>

```Go
func TestParseContentLength(t *testing.T)
```

issue 39017 - disallow Content-Length values such as "+3" 

#### <a name="net-http-func-TestTransportPersistConnReadLoopEOF">func TestTransportPersistConnReadLoopEOF(t *testing.T)</a>

```Go
func TestTransportPersistConnReadLoopEOF(t *testing.T)
```

Issue 15446: incorrect wrapping of errors when server closes an idle connection. 

#### <a name="net-http-func-isTransportReadFromServerError">func isTransportReadFromServerError(err error) bool</a>

```Go
func isTransportReadFromServerError(err error) bool
```

#### <a name="net-http-func-newLocalListener">func newLocalListener(t *testing.T) net.Listener</a>

```Go
func newLocalListener(t *testing.T) net.Listener
```

#### <a name="net-http-func-TestTransportShouldRetryRequest">func TestTransportShouldRetryRequest(t *testing.T)</a>

```Go
func TestTransportShouldRetryRequest(t *testing.T)
```

#### <a name="net-http-func-TestTransportBodyAltRewind">func TestTransportBodyAltRewind(t *testing.T)</a>

```Go
func TestTransportBodyAltRewind(t *testing.T)
```

Issue 25009 

## <a name="cgi">Package cgi <small>(new page,exported)</small></a>

Package cgi implements CGI (Common Gateway Interface) as specified in RFC 3875. 

Note that using CGI means starting a new process to handle each request, which is typically less efficient than using a long-running server. This package is intended primarily for compatibility with existing systems. 

## Index

- [Constants](#cgi-const)
  - [const writeLen](#cgi-const-writeLen)
- [Variables](#cgi-var)
  - [var ok](#cgi-var-ok)
  - [var trailingPort](#cgi-var-trailingPort)
  - [var osDefaultInheritEnv](#cgi-var-osDefaultInheritEnv)
  - [var cwd](#cgi-var-cwd)
  - [var path](#cgi-var-path)
  - [var testHookStartProcess](#cgi-var-testHookStartProcess)
  - [var tests](#cgi-var-tests)
  - [var buf](#cgi-var-buf)
  - [var cgiTested](#cgi-var-cgiTested)
  - [var cgiWorks](#cgi-var-cgiWorks)
  - [var buf](#cgi-var-buf)
  - [var stderr](#cgi-var-stderr)
  - [var out](#cgi-var-out)
  - [var tests](#cgi-var-tests)
- [Types](#cgi-type)
  - [type response struct](#cgi-type-response)
    - [func (r *response) Flush()](#cgi-type-response-Flush)
    - [func (r *response) Header() http.Header](#cgi-type-response-Header)
    - [func (r *response) Write(p []byte) (n int, err error)](#cgi-type-response-Write)
    - [func (r *response) WriteHeader(code int)](#cgi-type-response-WriteHeader)
    - [func (r *response) writeCGIHeader(p []byte)](#cgi-type-response-writeCGIHeader)
  - [type Handler struct](#cgi-type-Handler)
    - [func (h *Handler) stderr() io.Writer](#cgi-type-Handler-stderr)
    - [func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)](#cgi-type-Handler-ServeHTTP)
    - [func (h *Handler) printf(format string, v ...interface{})](#cgi-type-Handler-printf)
    - [func (h *Handler) handleInternalRedirect(rw http.ResponseWriter, req *http.Request, path string)](#cgi-type-Handler-handleInternalRedirect)
  - [type customWriterRecorder struct](#cgi-type-customWriterRecorder)
    - [func (r *customWriterRecorder) Write(p []byte) (n int, err error)](#cgi-type-customWriterRecorder-Write)
  - [type limitWriter struct](#cgi-type-limitWriter)
    - [func (w *limitWriter) Write(p []byte) (n int, err error)](#cgi-type-limitWriter-Write)
  - [type neverEnding byte](#cgi-type-neverEnding)
    - [func (b neverEnding) Read(p []byte) (n int, err error)](#cgi-type-neverEnding-Read)
- [Functions](#cgi-func)
  - [func Request() (*http.Request, error)](#cgi-func-Request)
  - [func envMap(env []string) map[string]string](#cgi-func-envMap)
  - [func RequestFromMap(params map[string]string) (*http.Request, error)](#cgi-func-RequestFromMap)
  - [func Serve(handler http.Handler) error](#cgi-func-Serve)
  - [func removeLeadingDuplicates(env []string) (ret []string)](#cgi-func-removeLeadingDuplicates)
  - [func upperCaseAndUnderscore(r rune) rune](#cgi-func-upperCaseAndUnderscore)
  - [func TestRequest(t *testing.T)](#cgi-func-TestRequest)
  - [func TestRequestWithTLS(t *testing.T)](#cgi-func-TestRequestWithTLS)
  - [func TestRequestWithoutHost(t *testing.T)](#cgi-func-TestRequestWithoutHost)
  - [func TestRequestWithoutRequestURI(t *testing.T)](#cgi-func-TestRequestWithoutRequestURI)
  - [func TestRequestWithoutRemotePort(t *testing.T)](#cgi-func-TestRequestWithoutRemotePort)
  - [func TestResponse(t *testing.T)](#cgi-func-TestResponse)
  - [func newRequest(httpreq string) *http.Request](#cgi-func-newRequest)
  - [func runCgiTest(t *testing.T, h *Handler,...](#cgi-func-runCgiTest)
  - [func runResponseChecks(t *testing.T, rw *httptest.ResponseRecorder,...](#cgi-func-runResponseChecks)
  - [func check(t *testing.T)](#cgi-func-check)
  - [func TestCGIBasicGet(t *testing.T)](#cgi-func-TestCGIBasicGet)
  - [func TestCGIEnvIPv6(t *testing.T)](#cgi-func-TestCGIEnvIPv6)
  - [func TestCGIBasicGetAbsPath(t *testing.T)](#cgi-func-TestCGIBasicGetAbsPath)
  - [func TestPathInfo(t *testing.T)](#cgi-func-TestPathInfo)
  - [func TestPathInfoDirRoot(t *testing.T)](#cgi-func-TestPathInfoDirRoot)
  - [func TestDupHeaders(t *testing.T)](#cgi-func-TestDupHeaders)
  - [func TestDropProxyHeader(t *testing.T)](#cgi-func-TestDropProxyHeader)
  - [func TestPathInfoNoRoot(t *testing.T)](#cgi-func-TestPathInfoNoRoot)
  - [func TestCGIBasicPost(t *testing.T)](#cgi-func-TestCGIBasicPost)
  - [func chunk(s string) string](#cgi-func-chunk)
  - [func TestCGIPostChunked(t *testing.T)](#cgi-func-TestCGIPostChunked)
  - [func TestRedirect(t *testing.T)](#cgi-func-TestRedirect)
  - [func TestInternalRedirect(t *testing.T)](#cgi-func-TestInternalRedirect)
  - [func TestCopyError(t *testing.T)](#cgi-func-TestCopyError)
  - [func TestDirUnix(t *testing.T)](#cgi-func-TestDirUnix)
  - [func findPerl(t *testing.T) string](#cgi-func-findPerl)
  - [func TestDirWindows(t *testing.T)](#cgi-func-TestDirWindows)
  - [func TestEnvOverride(t *testing.T)](#cgi-func-TestEnvOverride)
  - [func TestHandlerStderr(t *testing.T)](#cgi-func-TestHandlerStderr)
  - [func TestRemoveLeadingDuplicates(t *testing.T)](#cgi-func-TestRemoveLeadingDuplicates)
  - [func TestHostingOurselves(t *testing.T)](#cgi-func-TestHostingOurselves)
  - [func TestKillChildAfterCopyError(t *testing.T)](#cgi-func-TestKillChildAfterCopyError)
  - [func TestChildOnlyHeaders(t *testing.T)](#cgi-func-TestChildOnlyHeaders)
  - [func TestNilRequestBody(t *testing.T)](#cgi-func-TestNilRequestBody)
  - [func TestChildContentType(t *testing.T)](#cgi-func-TestChildContentType)
  - [func Test500WithNoHeaders(t *testing.T)](#cgi-func-Test500WithNoHeaders)
  - [func Test500WithNoContentType(t *testing.T)](#cgi-func-Test500WithNoContentType)
  - [func Test500WithEmptyHeaders(t *testing.T)](#cgi-func-Test500WithEmptyHeaders)
  - [func want500Test(t *testing.T, path string)](#cgi-func-want500Test)
  - [func TestBeChildCGIProcess(t *testing.T)](#cgi-func-TestBeChildCGIProcess)
  - [func isProcessRunning(pid int) bool](#cgi-func-isProcessRunning)

### <a name="cgi-const">Constants <small>(exported)</small></a>

#### <a name="cgi-const-writeLen">const writeLen</a>

```Go
const writeLen = 50 << 10
```

### <a name="cgi-var">Variables <small>(exported)</small></a>

#### <a name="cgi-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="cgi-var-trailingPort">var trailingPort</a>

```Go
var trailingPort = regexp.MustCompile(`:([0-9]+)$`)
```

#### <a name="cgi-var-osDefaultInheritEnv">var osDefaultInheritEnv</a>

```Go
var osDefaultInheritEnv = func() []string {
	switch runtime.GOOS {
	case "darwin", "ios":
		return []string{"DYLD_LIBRARY_PATH"}
	case "linux", "freebsd", "netbsd", "openbsd":
		return []string{"LD_LIBRARY_PATH"}
	case "hpux":
		return []string{"LD_LIBRARY_PATH", "SHLIB_PATH"}
	case "irix":
		return []string{"LD_LIBRARY_PATH", "LD_LIBRARYN32_PATH", "LD_LIBRARY64_PATH"}
	case "illumos", "solaris":
		return []string{"LD_LIBRARY_PATH", "LD_LIBRARY_PATH_32", "LD_LIBRARY_PATH_64"}
	case "windows":
		return []string{"SystemRoot", "COMSPEC", "PATHEXT", "WINDIR"}
	}
	return nil
}()
```

#### <a name="cgi-var-cwd">var cwd</a>

```Go
var cwd, path string
```

#### <a name="cgi-var-path">var path</a>

```Go
var cwd, path string
```

#### <a name="cgi-var-testHookStartProcess">var testHookStartProcess</a>

```Go
var testHookStartProcess func(*os.Process) // nil except for some tests

```

#### <a name="cgi-var-tests">var tests</a>

```Go
var tests = ...
```

#### <a name="cgi-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="cgi-var-cgiTested">var cgiTested</a>

```Go
var cgiTested, cgiWorks bool
```

#### <a name="cgi-var-cgiWorks">var cgiWorks</a>

```Go
var cgiTested, cgiWorks bool
```

#### <a name="cgi-var-buf">var buf</a>

```Go
var buf [5000]byte
```

#### <a name="cgi-var-stderr">var stderr</a>

```Go
var stderr bytes.Buffer
```

#### <a name="cgi-var-out">var out</a>

```Go
var out bytes.Buffer
```

#### <a name="cgi-var-tests">var tests</a>

```Go
var tests = ...
```

### <a name="cgi-type">Types <small>(exported)</small></a>

#### <a name="cgi-type-response">type response struct</a>

```Go
type response struct {
	req            *http.Request
	header         http.Header
	code           int
	wroteHeader    bool
	wroteCGIHeader bool
	bufw           *bufio.Writer
}
```

##### <a name="cgi-type-response-Flush">func (r *response) Flush()</a>

```Go
func (r *response) Flush()
```

##### <a name="cgi-type-response-Header">func (r *response) Header() http.Header</a>

```Go
func (r *response) Header() http.Header
```

##### <a name="cgi-type-response-Write">func (r *response) Write(p []byte) (n int, err error)</a>

```Go
func (r *response) Write(p []byte) (n int, err error)
```

##### <a name="cgi-type-response-WriteHeader">func (r *response) WriteHeader(code int)</a>

```Go
func (r *response) WriteHeader(code int)
```

##### <a name="cgi-type-response-writeCGIHeader">func (r *response) writeCGIHeader(p []byte)</a>

```Go
func (r *response) writeCGIHeader(p []byte)
```

writeCGIHeader finalizes the header sent to the client and writes it to the output. p is not written by writeHeader, but is the first chunk of the body that will be written. It is sniffed for a Content-Type if none is set explicitly. 

#### <a name="cgi-type-Handler">type Handler struct <small>(exported)</small></a>

```Go
type Handler struct {
	Path string // path to the CGI executable
	Root string // root URI prefix of handler or empty for "/"

	// Dir specifies the CGI executable's working directory.
	// If Dir is empty, the base directory of Path is used.
	// If Path has no base directory, the current working
	// directory is used.
	Dir string

	Env        []string    // extra environment variables to set, if any, as "key=value"
	InheritEnv []string    // environment variables to inherit from host, as "key"
	Logger     *log.Logger // optional log for errors or nil to use log.Print
	Args       []string    // optional arguments to pass to child process
	Stderr     io.Writer   // optional stderr for the child process; nil means os.Stderr

	// PathLocationHandler specifies the root http Handler that
	// should handle internal redirects when the CGI process
	// returns a Location header value starting with a "/", as
	// specified in RFC 3875 § 6.3.2. This will likely be
	// http.DefaultServeMux.
	//
	// If nil, a CGI response with a local URI path is instead sent
	// back to the client and not redirected internally.
	PathLocationHandler http.Handler
}
```

Handler runs an executable in a subprocess with a CGI environment. 

##### <a name="cgi-type-Handler-stderr">func (h *Handler) stderr() io.Writer</a>

```Go
func (h *Handler) stderr() io.Writer
```

##### <a name="cgi-type-Handler-ServeHTTP">func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request) <small>(exported)</small></a>

```Go
func (h *Handler) ServeHTTP(rw http.ResponseWriter, req *http.Request)
```

##### <a name="cgi-type-Handler-printf">func (h *Handler) printf(format string, v ...interface{})</a>

```Go
func (h *Handler) printf(format string, v ...interface{})
```

##### <a name="cgi-type-Handler-handleInternalRedirect">func (h *Handler) handleInternalRedirect(rw http.ResponseWriter, req *http.Request, path string)</a>

```Go
func (h *Handler) handleInternalRedirect(rw http.ResponseWriter, req *http.Request, path string)
```

#### <a name="cgi-type-customWriterRecorder">type customWriterRecorder struct</a>

```Go
type customWriterRecorder struct {
	w io.Writer
	*httptest.ResponseRecorder
}
```

##### <a name="cgi-type-customWriterRecorder-Write">func (r *customWriterRecorder) Write(p []byte) (n int, err error)</a>

```Go
func (r *customWriterRecorder) Write(p []byte) (n int, err error)
```

#### <a name="cgi-type-limitWriter">type limitWriter struct</a>

```Go
type limitWriter struct {
	w io.Writer
	n int
}
```

##### <a name="cgi-type-limitWriter-Write">func (w *limitWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w *limitWriter) Write(p []byte) (n int, err error)
```

#### <a name="cgi-type-neverEnding">type neverEnding byte</a>

```Go
type neverEnding byte
```

##### <a name="cgi-type-neverEnding-Read">func (b neverEnding) Read(p []byte) (n int, err error)</a>

```Go
func (b neverEnding) Read(p []byte) (n int, err error)
```

### <a name="cgi-func">Functions <small>(exported)</small></a>

#### <a name="cgi-func-Request">func Request() (*http.Request, error) <small>(exported)</small></a>

```Go
func Request() (*http.Request, error)
```

Request returns the HTTP request as represented in the current environment. This assumes the current program is being run by a web server in a CGI environment. The returned Request's Body is populated, if applicable. 

#### <a name="cgi-func-envMap">func envMap(env []string) map[string]string</a>

```Go
func envMap(env []string) map[string]string
```

#### <a name="cgi-func-RequestFromMap">func RequestFromMap(params map[string]string) (*http.Request, error) <small>(exported)</small></a>

```Go
func RequestFromMap(params map[string]string) (*http.Request, error)
```

RequestFromMap creates an http.Request from CGI variables. The returned Request's Body field is not populated. 

#### <a name="cgi-func-Serve">func Serve(handler http.Handler) error <small>(exported)</small></a>

```Go
func Serve(handler http.Handler) error
```

Serve executes the provided Handler on the currently active CGI request, if any. If there's no current CGI environment an error is returned. The provided handler may be nil to use http.DefaultServeMux. 

#### <a name="cgi-func-removeLeadingDuplicates">func removeLeadingDuplicates(env []string) (ret []string)</a>

```Go
func removeLeadingDuplicates(env []string) (ret []string)
```

removeLeadingDuplicates remove leading duplicate in environments. It's possible to override environment like following. 

```
cgi.Handler{
  ...
  Env: []string{"SCRIPT_FILENAME=foo.php"},
}

```
#### <a name="cgi-func-upperCaseAndUnderscore">func upperCaseAndUnderscore(r rune) rune</a>

```Go
func upperCaseAndUnderscore(r rune) rune
```

#### <a name="cgi-func-TestRequest">func TestRequest(t *testing.T)</a>

```Go
func TestRequest(t *testing.T)
```

#### <a name="cgi-func-TestRequestWithTLS">func TestRequestWithTLS(t *testing.T)</a>

```Go
func TestRequestWithTLS(t *testing.T)
```

#### <a name="cgi-func-TestRequestWithoutHost">func TestRequestWithoutHost(t *testing.T)</a>

```Go
func TestRequestWithoutHost(t *testing.T)
```

#### <a name="cgi-func-TestRequestWithoutRequestURI">func TestRequestWithoutRequestURI(t *testing.T)</a>

```Go
func TestRequestWithoutRequestURI(t *testing.T)
```

#### <a name="cgi-func-TestRequestWithoutRemotePort">func TestRequestWithoutRemotePort(t *testing.T)</a>

```Go
func TestRequestWithoutRemotePort(t *testing.T)
```

#### <a name="cgi-func-TestResponse">func TestResponse(t *testing.T)</a>

```Go
func TestResponse(t *testing.T)
```

#### <a name="cgi-func-newRequest">func newRequest(httpreq string) *http.Request</a>

```Go
func newRequest(httpreq string) *http.Request
```

#### <a name="cgi-func-runCgiTest">func runCgiTest(t *testing.T, h *Handler,...</a>

```Go
func runCgiTest(t *testing.T, h *Handler,
	httpreq string,
	expectedMap map[string]string, checks ...func(reqInfo map[string]string)) *httptest.ResponseRecorder
```

#### <a name="cgi-func-runResponseChecks">func runResponseChecks(t *testing.T, rw *httptest.ResponseRecorder,...</a>

```Go
func runResponseChecks(t *testing.T, rw *httptest.ResponseRecorder,
	expectedMap map[string]string, checks ...func(reqInfo map[string]string))
```

#### <a name="cgi-func-check">func check(t *testing.T)</a>

```Go
func check(t *testing.T)
```

#### <a name="cgi-func-TestCGIBasicGet">func TestCGIBasicGet(t *testing.T)</a>

```Go
func TestCGIBasicGet(t *testing.T)
```

#### <a name="cgi-func-TestCGIEnvIPv6">func TestCGIEnvIPv6(t *testing.T)</a>

```Go
func TestCGIEnvIPv6(t *testing.T)
```

#### <a name="cgi-func-TestCGIBasicGetAbsPath">func TestCGIBasicGetAbsPath(t *testing.T)</a>

```Go
func TestCGIBasicGetAbsPath(t *testing.T)
```

#### <a name="cgi-func-TestPathInfo">func TestPathInfo(t *testing.T)</a>

```Go
func TestPathInfo(t *testing.T)
```

#### <a name="cgi-func-TestPathInfoDirRoot">func TestPathInfoDirRoot(t *testing.T)</a>

```Go
func TestPathInfoDirRoot(t *testing.T)
```

#### <a name="cgi-func-TestDupHeaders">func TestDupHeaders(t *testing.T)</a>

```Go
func TestDupHeaders(t *testing.T)
```

#### <a name="cgi-func-TestDropProxyHeader">func TestDropProxyHeader(t *testing.T)</a>

```Go
func TestDropProxyHeader(t *testing.T)
```

Issue 16405: CGI+http.Transport differing uses of HTTP_PROXY. Verify we don't set the HTTP_PROXY environment variable. Hope nobody was depending on it. It's not a known header, though. 

#### <a name="cgi-func-TestPathInfoNoRoot">func TestPathInfoNoRoot(t *testing.T)</a>

```Go
func TestPathInfoNoRoot(t *testing.T)
```

#### <a name="cgi-func-TestCGIBasicPost">func TestCGIBasicPost(t *testing.T)</a>

```Go
func TestCGIBasicPost(t *testing.T)
```

#### <a name="cgi-func-chunk">func chunk(s string) string</a>

```Go
func chunk(s string) string
```

#### <a name="cgi-func-TestCGIPostChunked">func TestCGIPostChunked(t *testing.T)</a>

```Go
func TestCGIPostChunked(t *testing.T)
```

The CGI spec doesn't allow chunked requests. 

#### <a name="cgi-func-TestRedirect">func TestRedirect(t *testing.T)</a>

```Go
func TestRedirect(t *testing.T)
```

#### <a name="cgi-func-TestInternalRedirect">func TestInternalRedirect(t *testing.T)</a>

```Go
func TestInternalRedirect(t *testing.T)
```

#### <a name="cgi-func-TestCopyError">func TestCopyError(t *testing.T)</a>

```Go
func TestCopyError(t *testing.T)
```

TestCopyError tests that we kill the process if there's an error copying its output. (for example, from the client having gone away) 

#### <a name="cgi-func-TestDirUnix">func TestDirUnix(t *testing.T)</a>

```Go
func TestDirUnix(t *testing.T)
```

#### <a name="cgi-func-findPerl">func findPerl(t *testing.T) string</a>

```Go
func findPerl(t *testing.T) string
```

#### <a name="cgi-func-TestDirWindows">func TestDirWindows(t *testing.T)</a>

```Go
func TestDirWindows(t *testing.T)
```

#### <a name="cgi-func-TestEnvOverride">func TestEnvOverride(t *testing.T)</a>

```Go
func TestEnvOverride(t *testing.T)
```

#### <a name="cgi-func-TestHandlerStderr">func TestHandlerStderr(t *testing.T)</a>

```Go
func TestHandlerStderr(t *testing.T)
```

#### <a name="cgi-func-TestRemoveLeadingDuplicates">func TestRemoveLeadingDuplicates(t *testing.T)</a>

```Go
func TestRemoveLeadingDuplicates(t *testing.T)
```

#### <a name="cgi-func-TestHostingOurselves">func TestHostingOurselves(t *testing.T)</a>

```Go
func TestHostingOurselves(t *testing.T)
```

This test is a CGI host (testing host.go) that runs its own binary as a child process testing the other half of CGI (child.go). 

#### <a name="cgi-func-TestKillChildAfterCopyError">func TestKillChildAfterCopyError(t *testing.T)</a>

```Go
func TestKillChildAfterCopyError(t *testing.T)
```

If there's an error copying the child's output to the parent, test that we kill the child. 

#### <a name="cgi-func-TestChildOnlyHeaders">func TestChildOnlyHeaders(t *testing.T)</a>

```Go
func TestChildOnlyHeaders(t *testing.T)
```

Test that a child handler writing only headers works. golang.org/issue/7196 

#### <a name="cgi-func-TestNilRequestBody">func TestNilRequestBody(t *testing.T)</a>

```Go
func TestNilRequestBody(t *testing.T)
```

Test that a child handler does not receive a nil Request Body. golang.org/issue/39190 

#### <a name="cgi-func-TestChildContentType">func TestChildContentType(t *testing.T)</a>

```Go
func TestChildContentType(t *testing.T)
```

#### <a name="cgi-func-Test500WithNoHeaders">func Test500WithNoHeaders(t *testing.T)</a>

```Go
func Test500WithNoHeaders(t *testing.T)
```

golang.org/issue/7198 

#### <a name="cgi-func-Test500WithNoContentType">func Test500WithNoContentType(t *testing.T)</a>

```Go
func Test500WithNoContentType(t *testing.T)
```

#### <a name="cgi-func-Test500WithEmptyHeaders">func Test500WithEmptyHeaders(t *testing.T)</a>

```Go
func Test500WithEmptyHeaders(t *testing.T)
```

#### <a name="cgi-func-want500Test">func want500Test(t *testing.T, path string)</a>

```Go
func want500Test(t *testing.T, path string)
```

#### <a name="cgi-func-TestBeChildCGIProcess">func TestBeChildCGIProcess(t *testing.T)</a>

```Go
func TestBeChildCGIProcess(t *testing.T)
```

Note: not actually a test. 

#### <a name="cgi-func-isProcessRunning">func isProcessRunning(pid int) bool</a>

```Go
func isProcessRunning(pid int) bool
```

## <a name="cookiejar">Package cookiejar <small>(new page,exported)</small></a>

Package cookiejar implements an in-memory RFC 6265-compliant http.CookieJar. 

## Index

- [Constants](#cookiejar-const)
  - [const base](#cookiejar-const-base)
  - [const damp](#cookiejar-const-damp)
  - [const initialBias](#cookiejar-const-initialBias)
  - [const initialN](#cookiejar-const-initialN)
  - [const skew](#cookiejar-const-skew)
  - [const tmax](#cookiejar-const-tmax)
  - [const tmin](#cookiejar-const-tmin)
  - [const acePrefix](#cookiejar-const-acePrefix)
- [Variables](#cookiejar-var)
  - [var selected](#cookiejar-var-selected)
  - [var err](#cookiejar-var-err)
  - [var i](#cookiejar-var-i)
  - [var errIllegalDomain](#cookiejar-var-errIllegalDomain)
  - [var errMalformedDomain](#cookiejar-var-errMalformedDomain)
  - [var errNoHostname](#cookiejar-var-errNoHostname)
  - [var endOfTime](#cookiejar-var-endOfTime)
  - [var tNow](#cookiejar-var-tNow)
  - [var hasDotSuffixTests](#cookiejar-var-hasDotSuffixTests)
  - [var canonicalHostTests](#cookiejar-var-canonicalHostTests)
  - [var hasPortTests](#cookiejar-var-hasPortTests)
  - [var jarKeyTests](#cookiejar-var-jarKeyTests)
  - [var jarKeyNilPSLTests](#cookiejar-var-jarKeyNilPSLTests)
  - [var isIPTests](#cookiejar-var-isIPTests)
  - [var defaultPathTests](#cookiejar-var-defaultPathTests)
  - [var domainAndTypeTests](#cookiejar-var-domainAndTypeTests)
  - [var cs](#cookiejar-var-cs)
  - [var s](#cookiejar-var-s)
  - [var basicsTests](#cookiejar-var-basicsTests)
  - [var updateAndDeleteTests](#cookiejar-var-updateAndDeleteTests)
  - [var chromiumBasicsTests](#cookiejar-var-chromiumBasicsTests)
  - [var chromiumDomainTests](#cookiejar-var-chromiumDomainTests)
  - [var chromiumDeletionTests](#cookiejar-var-chromiumDeletionTests)
  - [var domainHandlingTests](#cookiejar-var-domainHandlingTests)
  - [var punycodeTestCases](#cookiejar-var-punycodeTestCases)
- [Types](#cookiejar-type)
  - [type PublicSuffixList interface](#cookiejar-type-PublicSuffixList)
  - [type Options struct](#cookiejar-type-Options)
  - [type Jar struct](#cookiejar-type-Jar)
    - [func New(o *Options) (*Jar, error)](#cookiejar-type-Jar-New)
    - [func newTestJar() *Jar](#cookiejar-type-Jar-newTestJar)
    - [func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)](#cookiejar-type-Jar-Cookies)
    - [func (j *Jar) cookies(u *url.URL, now time.Time) (cookies []*http.Cookie)](#cookiejar-type-Jar-cookies)
    - [func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)](#cookiejar-type-Jar-SetCookies)
    - [func (j *Jar) setCookies(u *url.URL, cookies []*http.Cookie, now time.Time)](#cookiejar-type-Jar-setCookies)
    - [func (j *Jar) newEntry(c *http.Cookie, now time.Time, defPath, host string) (e entry, remove bool, err error)](#cookiejar-type-Jar-newEntry)
    - [func (j *Jar) domainAndType(host, domain string) (string, bool, error)](#cookiejar-type-Jar-domainAndType)
  - [type entry struct](#cookiejar-type-entry)
    - [func (e *entry) id() string](#cookiejar-type-entry-id)
    - [func (e *entry) shouldSend(https bool, host, path string) bool](#cookiejar-type-entry-shouldSend)
    - [func (e *entry) domainMatch(host string) bool](#cookiejar-type-entry-domainMatch)
    - [func (e *entry) pathMatch(requestPath string) bool](#cookiejar-type-entry-pathMatch)
  - [type testPSL struct{}](#cookiejar-type-testPSL)
    - [func (testPSL) String() string](#cookiejar-type-testPSL-String)
    - [func (testPSL) PublicSuffix(d string) string](#cookiejar-type-testPSL-PublicSuffix)
  - [type jarTest struct](#cookiejar-type-jarTest)
    - [func (test jarTest) run(t *testing.T, jar *Jar)](#cookiejar-type-jarTest-run)
  - [type query struct](#cookiejar-type-query)
- [Functions](#cookiejar-func)
  - [func hasDotSuffix(s, suffix string) bool](#cookiejar-func-hasDotSuffix)
  - [func canonicalHost(host string) (string, error)](#cookiejar-func-canonicalHost)
  - [func hasPort(host string) bool](#cookiejar-func-hasPort)
  - [func jarKey(host string, psl PublicSuffixList) string](#cookiejar-func-jarKey)
  - [func isIP(host string) bool](#cookiejar-func-isIP)
  - [func defaultPath(path string) string](#cookiejar-func-defaultPath)
  - [func encode(prefix, s string) (string, error)](#cookiejar-func-encode)
  - [func encodeDigit(digit int32) byte](#cookiejar-func-encodeDigit)
  - [func adapt(delta, numPoints int32, firstTime bool) int32](#cookiejar-func-adapt)
  - [func toASCII(s string) (string, error)](#cookiejar-func-toASCII)
  - [func ascii(s string) bool](#cookiejar-func-ascii)
  - [func TestHasDotSuffix(t *testing.T)](#cookiejar-func-TestHasDotSuffix)
  - [func TestCanonicalHost(t *testing.T)](#cookiejar-func-TestCanonicalHost)
  - [func TestHasPort(t *testing.T)](#cookiejar-func-TestHasPort)
  - [func TestJarKey(t *testing.T)](#cookiejar-func-TestJarKey)
  - [func TestJarKeyNilPSL(t *testing.T)](#cookiejar-func-TestJarKeyNilPSL)
  - [func TestIsIP(t *testing.T)](#cookiejar-func-TestIsIP)
  - [func TestDefaultPath(t *testing.T)](#cookiejar-func-TestDefaultPath)
  - [func TestDomainAndType(t *testing.T)](#cookiejar-func-TestDomainAndType)
  - [func expiresIn(delta int) string](#cookiejar-func-expiresIn)
  - [func mustParseURL(s string) *url.URL](#cookiejar-func-mustParseURL)
  - [func TestBasics(t *testing.T)](#cookiejar-func-TestBasics)
  - [func TestUpdateAndDelete(t *testing.T)](#cookiejar-func-TestUpdateAndDelete)
  - [func TestExpiration(t *testing.T)](#cookiejar-func-TestExpiration)
  - [func TestChromiumBasics(t *testing.T)](#cookiejar-func-TestChromiumBasics)
  - [func TestChromiumDomain(t *testing.T)](#cookiejar-func-TestChromiumDomain)
  - [func TestChromiumDeletion(t *testing.T)](#cookiejar-func-TestChromiumDeletion)
  - [func TestDomainHandling(t *testing.T)](#cookiejar-func-TestDomainHandling)
  - [func TestIssue19384(t *testing.T)](#cookiejar-func-TestIssue19384)
  - [func TestPunycode(t *testing.T)](#cookiejar-func-TestPunycode)

### <a name="cookiejar-const">Constants <small>(exported)</small></a>

#### <a name="cookiejar-const-base">const base</a>

```Go
const base int32 = 36
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-damp">const damp</a>

```Go
const damp int32 = 700
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-initialBias">const initialBias</a>

```Go
const initialBias int32 = 72
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-initialN">const initialN</a>

```Go
const initialN int32 = 128
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-skew">const skew</a>

```Go
const skew int32 = 38
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-tmax">const tmax</a>

```Go
const tmax int32 = 26
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-tmin">const tmin</a>

```Go
const tmin int32 = 1
```

These parameter values are specified in section 5. 

All computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. 

#### <a name="cookiejar-const-acePrefix">const acePrefix</a>

```Go
const acePrefix = "xn--"
```

acePrefix is the ASCII Compatible Encoding prefix. 

### <a name="cookiejar-var">Variables <small>(exported)</small></a>

#### <a name="cookiejar-var-selected">var selected</a>

```Go
var selected []entry
```

#### <a name="cookiejar-var-err">var err</a>

```Go
var err error
```

#### <a name="cookiejar-var-i">var i</a>

```Go
var i int
```

#### <a name="cookiejar-var-errIllegalDomain">var errIllegalDomain</a>

```Go
var errIllegalDomain = errors.New("cookiejar: illegal cookie domain attribute")
```

#### <a name="cookiejar-var-errMalformedDomain">var errMalformedDomain</a>

```Go
var errMalformedDomain = errors.New("cookiejar: malformed cookie domain attribute")
```

#### <a name="cookiejar-var-errNoHostname">var errNoHostname</a>

```Go
var errNoHostname = errors.New("cookiejar: no host name available (IP only)")
```

#### <a name="cookiejar-var-endOfTime">var endOfTime</a>

```Go
var endOfTime = time.Date(9999, 12, 31, 23, 59, 59, 0, time.UTC)
```

endOfTime is the time when session (non-persistent) cookies expire. This instant is representable in most date/time formats (not just Go's time.Time) and should be far enough in the future. 

#### <a name="cookiejar-var-tNow">var tNow</a>

```Go
var tNow = time.Date(2013, 1, 1, 12, 0, 0, 0, time.UTC)
```

tNow is the synthetic current time used as now during testing. 

#### <a name="cookiejar-var-hasDotSuffixTests">var hasDotSuffixTests</a>

```Go
var hasDotSuffixTests = ...
```

#### <a name="cookiejar-var-canonicalHostTests">var canonicalHostTests</a>

```Go
var canonicalHostTests = ...
```

#### <a name="cookiejar-var-hasPortTests">var hasPortTests</a>

```Go
var hasPortTests = ...
```

#### <a name="cookiejar-var-jarKeyTests">var jarKeyTests</a>

```Go
var jarKeyTests = ...
```

#### <a name="cookiejar-var-jarKeyNilPSLTests">var jarKeyNilPSLTests</a>

```Go
var jarKeyNilPSLTests = ...
```

#### <a name="cookiejar-var-isIPTests">var isIPTests</a>

```Go
var isIPTests = ...
```

#### <a name="cookiejar-var-defaultPathTests">var defaultPathTests</a>

```Go
var defaultPathTests = ...
```

#### <a name="cookiejar-var-domainAndTypeTests">var domainAndTypeTests</a>

```Go
var domainAndTypeTests = ...
```

#### <a name="cookiejar-var-cs">var cs</a>

```Go
var cs []string
```

Serialize non-expired entries in the form "name1=val1 name2=val2". 

#### <a name="cookiejar-var-s">var s</a>

```Go
var s []string
```

#### <a name="cookiejar-var-basicsTests">var basicsTests</a>

```Go
var basicsTests = ...
```

basicsTests contains fundamental tests. Each jarTest has to be performed on a fresh, empty Jar. 

#### <a name="cookiejar-var-updateAndDeleteTests">var updateAndDeleteTests</a>

```Go
var updateAndDeleteTests = ...
```

updateAndDeleteTests contains jarTests which must be performed on the same Jar. 

#### <a name="cookiejar-var-chromiumBasicsTests">var chromiumBasicsTests</a>

```Go
var chromiumBasicsTests = ...
```

chromiumBasicsTests contains fundamental tests. Each jarTest has to be performed on a fresh, empty Jar. 

#### <a name="cookiejar-var-chromiumDomainTests">var chromiumDomainTests</a>

```Go
var chromiumDomainTests = ...
```

chromiumDomainTests contains jarTests which must be executed all on the same Jar. 

#### <a name="cookiejar-var-chromiumDeletionTests">var chromiumDeletionTests</a>

```Go
var chromiumDeletionTests = ...
```

chromiumDeletionTests must be performed all on the same Jar. 

#### <a name="cookiejar-var-domainHandlingTests">var domainHandlingTests</a>

```Go
var domainHandlingTests = ...
```

domainHandlingTests tests and documents the rules for domain handling. Each test must be performed on an empty new Jar. 

#### <a name="cookiejar-var-punycodeTestCases">var punycodeTestCases</a>

```Go
var punycodeTestCases = ...
```

### <a name="cookiejar-type">Types <small>(exported)</small></a>

#### <a name="cookiejar-type-PublicSuffixList">type PublicSuffixList interface <small>(exported)</small></a>

```Go
type PublicSuffixList interface {
	// PublicSuffix returns the public suffix of domain.
	//
	// TODO: specify which of the caller and callee is responsible for IP
	// addresses, for leading and trailing dots, for case sensitivity, and
	// for IDN/Punycode.
	PublicSuffix(domain string) string

	// String returns a description of the source of this public suffix
	// list. The description will typically contain something like a time
	// stamp or version number.
	String() string
}
```

PublicSuffixList provides the public suffix of a domain. For example: 

```
- the public suffix of "example.com" is "com",
- the public suffix of "foo1.foo2.foo3.co.uk" is "co.uk", and
- the public suffix of "bar.pvt.k12.ma.us" is "pvt.k12.ma.us".

```
Implementations of PublicSuffixList must be safe for concurrent use by multiple goroutines. 

An implementation that always returns "" is valid and may be useful for testing but it is not secure: it means that the HTTP server for foo.com can set a cookie for bar.com. 

A public suffix list implementation is in the package golang.org/x/net/publicsuffix. 

#### <a name="cookiejar-type-Options">type Options struct <small>(exported)</small></a>

```Go
type Options struct {
	// PublicSuffixList is the public suffix list that determines whether
	// an HTTP server can set a cookie for a domain.
	//
	// A nil value is valid and may be useful for testing but it is not
	// secure: it means that the HTTP server for foo.co.uk can set a cookie
	// for bar.co.uk.
	PublicSuffixList PublicSuffixList
}
```

Options are the options for creating a new Jar. 

#### <a name="cookiejar-type-Jar">type Jar struct <small>(exported)</small></a>

```Go
type Jar struct {
	psList PublicSuffixList

	// mu locks the remaining fields.
	mu sync.Mutex

	// entries is a set of entries, keyed by their eTLD+1 and subkeyed by
	// their name/domain/path.
	entries map[string]map[string]entry

	// nextSeqNum is the next sequence number assigned to a new cookie
	// created SetCookies.
	nextSeqNum uint64
}
```

Jar implements the http.CookieJar interface from the net/http package. 

##### <a name="cookiejar-type-Jar-New">func New(o *Options) (*Jar, error) <small>(exported)</small></a>

```Go
func New(o *Options) (*Jar, error)
```

New returns a new cookie jar. A nil *Options is equivalent to a zero Options. 

##### <a name="cookiejar-type-Jar-newTestJar">func newTestJar() *Jar</a>

```Go
func newTestJar() *Jar
```

newTestJar creates an empty Jar with testPSL as the public suffix list. 

##### <a name="cookiejar-type-Jar-Cookies">func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie) <small>(exported)</small></a>

```Go
func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)
```

Cookies implements the Cookies method of the http.CookieJar interface. 

It returns an empty slice if the URL's scheme is not HTTP or HTTPS. 

##### <a name="cookiejar-type-Jar-cookies">func (j *Jar) cookies(u *url.URL, now time.Time) (cookies []*http.Cookie)</a>

```Go
func (j *Jar) cookies(u *url.URL, now time.Time) (cookies []*http.Cookie)
```

cookies is like Cookies but takes the current time as a parameter. 

##### <a name="cookiejar-type-Jar-SetCookies">func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie) <small>(exported)</small></a>

```Go
func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)
```

SetCookies implements the SetCookies method of the http.CookieJar interface. 

It does nothing if the URL's scheme is not HTTP or HTTPS. 

##### <a name="cookiejar-type-Jar-setCookies">func (j *Jar) setCookies(u *url.URL, cookies []*http.Cookie, now time.Time)</a>

```Go
func (j *Jar) setCookies(u *url.URL, cookies []*http.Cookie, now time.Time)
```

setCookies is like SetCookies but takes the current time as parameter. 

##### <a name="cookiejar-type-Jar-newEntry">func (j *Jar) newEntry(c *http.Cookie, now time.Time, defPath, host string) (e entry, remove bool, err error)</a>

```Go
func (j *Jar) newEntry(c *http.Cookie, now time.Time, defPath, host string) (e entry, remove bool, err error)
```

newEntry creates an entry from a http.Cookie c. now is the current time and is compared to c.Expires to determine deletion of c. defPath and host are the default-path and the canonical host name of the URL c was received from. 

remove records whether the jar should delete this cookie, as it has already expired with respect to now. In this case, e may be incomplete, but it will be valid to call e.id (which depends on e's Name, Domain and Path). 

A malformed c.Domain will result in an error. 

##### <a name="cookiejar-type-Jar-domainAndType">func (j *Jar) domainAndType(host, domain string) (string, bool, error)</a>

```Go
func (j *Jar) domainAndType(host, domain string) (string, bool, error)
```

domainAndType determines the cookie's domain and hostOnly attribute. 

#### <a name="cookiejar-type-entry">type entry struct</a>

```Go
type entry struct {
	Name       string
	Value      string
	Domain     string
	Path       string
	SameSite   string
	Secure     bool
	HttpOnly   bool
	Persistent bool
	HostOnly   bool
	Expires    time.Time
	Creation   time.Time
	LastAccess time.Time

	// seqNum is a sequence number so that Cookies returns cookies in a
	// deterministic order, even for cookies that have equal Path length and
	// equal Creation time. This simplifies testing.
	seqNum uint64
}
```

entry is the internal representation of a cookie. 

This struct type is not used outside of this package per se, but the exported fields are those of RFC 6265. 

##### <a name="cookiejar-type-entry-id">func (e *entry) id() string</a>

```Go
func (e *entry) id() string
```

id returns the domain;path;name triple of e as an id. 

##### <a name="cookiejar-type-entry-shouldSend">func (e *entry) shouldSend(https bool, host, path string) bool</a>

```Go
func (e *entry) shouldSend(https bool, host, path string) bool
```

shouldSend determines whether e's cookie qualifies to be included in a request to host/path. It is the caller's responsibility to check if the cookie is expired. 

##### <a name="cookiejar-type-entry-domainMatch">func (e *entry) domainMatch(host string) bool</a>

```Go
func (e *entry) domainMatch(host string) bool
```

domainMatch implements "domain-match" of RFC 6265 section 5.1.3. 

##### <a name="cookiejar-type-entry-pathMatch">func (e *entry) pathMatch(requestPath string) bool</a>

```Go
func (e *entry) pathMatch(requestPath string) bool
```

pathMatch implements "path-match" according to RFC 6265 section 5.1.4. 

#### <a name="cookiejar-type-testPSL">type testPSL struct{}</a>

```Go
type testPSL struct{}
```

testPSL implements PublicSuffixList with just two rules: "co.uk" and the default rule "*". The implementation has two intentional bugs: 

```
PublicSuffix("www.buggy.psl") == "xy"
PublicSuffix("www2.buggy.psl") == "com"

```
##### <a name="cookiejar-type-testPSL-String">func (testPSL) String() string</a>

```Go
func (testPSL) String() string
```

##### <a name="cookiejar-type-testPSL-PublicSuffix">func (testPSL) PublicSuffix(d string) string</a>

```Go
func (testPSL) PublicSuffix(d string) string
```

#### <a name="cookiejar-type-jarTest">type jarTest struct</a>

```Go
type jarTest struct {
	description string   // The description of what this test is supposed to test
	fromURL     string   // The full URL of the request from which Set-Cookie headers where received
	setCookies  []string // All the cookies received from fromURL
	content     string   // The whole (non-expired) content of the jar
	queries     []query  // Queries to test the Jar.Cookies method
}
```

jarTest encapsulates the following actions on a jar: 

```
1. Perform SetCookies with fromURL and the cookies from setCookies.
   (Done at time tNow + 0 ms.)
2. Check that the entries in the jar matches content.
   (Done at time tNow + 1001 ms.)
3. For each query in tests: Check that Cookies with toURL yields the
   cookies in want.
   (Query n done at tNow + (n+2)*1001 ms.)

```
##### <a name="cookiejar-type-jarTest-run">func (test jarTest) run(t *testing.T, jar *Jar)</a>

```Go
func (test jarTest) run(t *testing.T, jar *Jar)
```

run runs the jarTest. 

#### <a name="cookiejar-type-query">type query struct</a>

```Go
type query struct {
	toURL string // the URL in the Cookies call
	want  string // the expected list of cookies (order matters)
}
```

query contains one test of the cookies returned from Jar.Cookies. 

### <a name="cookiejar-func">Functions <small>(exported)</small></a>

#### <a name="cookiejar-func-hasDotSuffix">func hasDotSuffix(s, suffix string) bool</a>

```Go
func hasDotSuffix(s, suffix string) bool
```

hasDotSuffix reports whether s ends in "."+suffix. 

#### <a name="cookiejar-func-canonicalHost">func canonicalHost(host string) (string, error)</a>

```Go
func canonicalHost(host string) (string, error)
```

canonicalHost strips port from host if present and returns the canonicalized host name. 

#### <a name="cookiejar-func-hasPort">func hasPort(host string) bool</a>

```Go
func hasPort(host string) bool
```

hasPort reports whether host contains a port number. host may be a host name, an IPv4 or an IPv6 address. 

#### <a name="cookiejar-func-jarKey">func jarKey(host string, psl PublicSuffixList) string</a>

```Go
func jarKey(host string, psl PublicSuffixList) string
```

jarKey returns the key to use for a jar. 

#### <a name="cookiejar-func-isIP">func isIP(host string) bool</a>

```Go
func isIP(host string) bool
```

isIP reports whether host is an IP address. 

#### <a name="cookiejar-func-defaultPath">func defaultPath(path string) string</a>

```Go
func defaultPath(path string) string
```

defaultPath returns the directory part of an URL's path according to RFC 6265 section 5.1.4. 

#### <a name="cookiejar-func-encode">func encode(prefix, s string) (string, error)</a>

```Go
func encode(prefix, s string) (string, error)
```

encode encodes a string as specified in section 6.3 and prepends prefix to the result. 

The "while h < length(input)" line in the specification becomes "for remaining != 0" in the Go code, because len(s) in Go is in bytes, not runes. 

#### <a name="cookiejar-func-encodeDigit">func encodeDigit(digit int32) byte</a>

```Go
func encodeDigit(digit int32) byte
```

#### <a name="cookiejar-func-adapt">func adapt(delta, numPoints int32, firstTime bool) int32</a>

```Go
func adapt(delta, numPoints int32, firstTime bool) int32
```

adapt is the bias adaptation function specified in section 6.1. 

#### <a name="cookiejar-func-toASCII">func toASCII(s string) (string, error)</a>

```Go
func toASCII(s string) (string, error)
```

toASCII converts a domain or domain label to its ASCII form. For example, toASCII("bücher.example.com") is "xn--bcher-kva.example.com", and toASCII("golang") is "golang". 

#### <a name="cookiejar-func-ascii">func ascii(s string) bool</a>

```Go
func ascii(s string) bool
```

#### <a name="cookiejar-func-TestHasDotSuffix">func TestHasDotSuffix(t *testing.T)</a>

```Go
func TestHasDotSuffix(t *testing.T)
```

#### <a name="cookiejar-func-TestCanonicalHost">func TestCanonicalHost(t *testing.T)</a>

```Go
func TestCanonicalHost(t *testing.T)
```

#### <a name="cookiejar-func-TestHasPort">func TestHasPort(t *testing.T)</a>

```Go
func TestHasPort(t *testing.T)
```

#### <a name="cookiejar-func-TestJarKey">func TestJarKey(t *testing.T)</a>

```Go
func TestJarKey(t *testing.T)
```

#### <a name="cookiejar-func-TestJarKeyNilPSL">func TestJarKeyNilPSL(t *testing.T)</a>

```Go
func TestJarKeyNilPSL(t *testing.T)
```

#### <a name="cookiejar-func-TestIsIP">func TestIsIP(t *testing.T)</a>

```Go
func TestIsIP(t *testing.T)
```

#### <a name="cookiejar-func-TestDefaultPath">func TestDefaultPath(t *testing.T)</a>

```Go
func TestDefaultPath(t *testing.T)
```

#### <a name="cookiejar-func-TestDomainAndType">func TestDomainAndType(t *testing.T)</a>

```Go
func TestDomainAndType(t *testing.T)
```

#### <a name="cookiejar-func-expiresIn">func expiresIn(delta int) string</a>

```Go
func expiresIn(delta int) string
```

expiresIn creates an expires attribute delta seconds from tNow. 

#### <a name="cookiejar-func-mustParseURL">func mustParseURL(s string) *url.URL</a>

```Go
func mustParseURL(s string) *url.URL
```

mustParseURL parses s to an URL and panics on error. 

#### <a name="cookiejar-func-TestBasics">func TestBasics(t *testing.T)</a>

```Go
func TestBasics(t *testing.T)
```

#### <a name="cookiejar-func-TestUpdateAndDelete">func TestUpdateAndDelete(t *testing.T)</a>

```Go
func TestUpdateAndDelete(t *testing.T)
```

#### <a name="cookiejar-func-TestExpiration">func TestExpiration(t *testing.T)</a>

```Go
func TestExpiration(t *testing.T)
```

#### <a name="cookiejar-func-TestChromiumBasics">func TestChromiumBasics(t *testing.T)</a>

```Go
func TestChromiumBasics(t *testing.T)
```

#### <a name="cookiejar-func-TestChromiumDomain">func TestChromiumDomain(t *testing.T)</a>

```Go
func TestChromiumDomain(t *testing.T)
```

#### <a name="cookiejar-func-TestChromiumDeletion">func TestChromiumDeletion(t *testing.T)</a>

```Go
func TestChromiumDeletion(t *testing.T)
```

#### <a name="cookiejar-func-TestDomainHandling">func TestDomainHandling(t *testing.T)</a>

```Go
func TestDomainHandling(t *testing.T)
```

#### <a name="cookiejar-func-TestIssue19384">func TestIssue19384(t *testing.T)</a>

```Go
func TestIssue19384(t *testing.T)
```

#### <a name="cookiejar-func-TestPunycode">func TestPunycode(t *testing.T)</a>

```Go
func TestPunycode(t *testing.T)
```

## <a name="cookiejar_test">Package cookiejar_test <small>(new page)</small></a>

## Index

- [Variables](#cookiejar_test-var)
  - [var publicsuffix](#cookiejar_test-var-publicsuffix)
- [Types](#cookiejar_test-type)
  - [type dummypsl struct](#cookiejar_test-type-dummypsl)
    - [func (dummypsl) PublicSuffix(domain string) string](#cookiejar_test-type-dummypsl-PublicSuffix)
    - [func (dummypsl) String() string](#cookiejar_test-type-dummypsl-String)
- [Functions](#cookiejar_test-func)
  - [func ExampleNew()](#cookiejar_test-func-ExampleNew)

### <a name="cookiejar_test-var">Variables</a>

#### <a name="cookiejar_test-var-publicsuffix">var publicsuffix</a>

```Go
var publicsuffix = ...
```

### <a name="cookiejar_test-type">Types</a>

#### <a name="cookiejar_test-type-dummypsl">type dummypsl struct</a>

```Go
type dummypsl struct {
	List cookiejar.PublicSuffixList
}
```

##### <a name="cookiejar_test-type-dummypsl-PublicSuffix">func (dummypsl) PublicSuffix(domain string) string</a>

```Go
func (dummypsl) PublicSuffix(domain string) string
```

##### <a name="cookiejar_test-type-dummypsl-String">func (dummypsl) String() string</a>

```Go
func (dummypsl) String() string
```

### <a name="cookiejar_test-func">Functions</a>

#### <a name="cookiejar_test-func-ExampleNew">func ExampleNew()</a>

```Go
func ExampleNew()
```

## <a name="fcgi">Package fcgi <small>(new page,exported)</small></a>

Package fcgi implements the FastCGI protocol. 

See [https://fast-cgi.github.io/](https://fast-cgi.github.io/) for an unofficial mirror of the original documentation. 

Currently only the responder role is supported. 

## Index

- [Constants](#fcgi-const)
  - [const typeBeginRequest](#fcgi-const-typeBeginRequest)
  - [const typeAbortRequest](#fcgi-const-typeAbortRequest)
  - [const typeEndRequest](#fcgi-const-typeEndRequest)
  - [const typeParams](#fcgi-const-typeParams)
  - [const typeStdin](#fcgi-const-typeStdin)
  - [const typeStdout](#fcgi-const-typeStdout)
  - [const typeStderr](#fcgi-const-typeStderr)
  - [const typeData](#fcgi-const-typeData)
  - [const typeGetValues](#fcgi-const-typeGetValues)
  - [const typeGetValuesResult](#fcgi-const-typeGetValuesResult)
  - [const typeUnknownType](#fcgi-const-typeUnknownType)
  - [const flagKeepConn](#fcgi-const-flagKeepConn)
  - [const maxWrite](#fcgi-const-maxWrite)
  - [const maxPad](#fcgi-const-maxPad)
  - [const roleResponder](#fcgi-const-roleResponder)
  - [const roleAuthorizer](#fcgi-const-roleAuthorizer)
  - [const roleFilter](#fcgi-const-roleFilter)
  - [const statusRequestComplete](#fcgi-const-statusRequestComplete)
  - [const statusCantMultiplex](#fcgi-const-statusCantMultiplex)
  - [const statusOverloaded](#fcgi-const-statusOverloaded)
  - [const statusUnknownRole](#fcgi-const-statusUnknownRole)
  - [const want](#fcgi-const-want)
- [Variables](#fcgi-var)
  - [var rec](#fcgi-var-rec)
  - [var errCloseConn](#fcgi-var-errCloseConn)
  - [var emptyBody](#fcgi-var-emptyBody)
  - [var ErrRequestAborted](#fcgi-var-ErrRequestAborted)
  - [var ErrConnClosed](#fcgi-var-ErrConnClosed)
  - [var br](#fcgi-var-br)
  - [var body](#fcgi-var-body)
  - [var err](#fcgi-var-err)
  - [var pad](#fcgi-var-pad)
  - [var sizeTests](#fcgi-var-sizeTests)
  - [var streamTests](#fcgi-var-streamTests)
  - [var rec](#fcgi-var-rec)
  - [var content](#fcgi-var-content)
  - [var rec](#fcgi-var-rec)
  - [var streamBeginTypeStdin](#fcgi-var-streamBeginTypeStdin)
  - [var cleanUpTests](#fcgi-var-cleanUpTests)
  - [var streamFullRequestStdin](#fcgi-var-streamFullRequestStdin)
  - [var envVarTests](#fcgi-var-envVarTests)
  - [var tests](#fcgi-var-tests)
  - [var resp](#fcgi-var-resp)
- [Types](#fcgi-type)
  - [type request struct](#fcgi-type-request)
    - [func newRequest(reqId uint16, flags uint8) *request](#fcgi-type-request-newRequest)
    - [func (r *request) parseParams()](#fcgi-type-request-parseParams)
  - [type envVarsContextKey struct{}](#fcgi-type-envVarsContextKey)
  - [type response struct](#fcgi-type-response)
    - [func newResponse(c *child, req *request) *response](#fcgi-type-response-newResponse)
    - [func (r *response) Header() http.Header](#fcgi-type-response-Header)
    - [func (r *response) Write(p []byte) (n int, err error)](#fcgi-type-response-Write)
    - [func (r *response) WriteHeader(code int)](#fcgi-type-response-WriteHeader)
    - [func (r *response) writeCGIHeader(p []byte)](#fcgi-type-response-writeCGIHeader)
    - [func (r *response) Flush()](#fcgi-type-response-Flush)
    - [func (r *response) Close() error](#fcgi-type-response-Close)
  - [type child struct](#fcgi-type-child)
    - [func newChild(rwc io.ReadWriteCloser, handler http.Handler) *child](#fcgi-type-child-newChild)
    - [func (c *child) serve()](#fcgi-type-child-serve)
    - [func (c *child) handleRecord(rec *record) error](#fcgi-type-child-handleRecord)
    - [func (c *child) serveRequest(req *request, body io.ReadCloser)](#fcgi-type-child-serveRequest)
    - [func (c *child) cleanUp()](#fcgi-type-child-cleanUp)
  - [type recType uint8](#fcgi-type-recType)
  - [type header struct](#fcgi-type-header)
    - [func (h *header) init(recType recType, reqId uint16, contentLength int)](#fcgi-type-header-init)
  - [type beginRequest struct](#fcgi-type-beginRequest)
    - [func (br *beginRequest) read(content []byte) error](#fcgi-type-beginRequest-read)
  - [type conn struct](#fcgi-type-conn)
    - [func newConn(rwc io.ReadWriteCloser) *conn](#fcgi-type-conn-newConn)
    - [func (c *conn) Close() error](#fcgi-type-conn-Close)
    - [func (c *conn) writeRecord(recType recType, reqId uint16, b []byte) error](#fcgi-type-conn-writeRecord)
    - [func (c *conn) writeEndRequest(reqId uint16, appStatus int, protocolStatus uint8) error](#fcgi-type-conn-writeEndRequest)
    - [func (c *conn) writePairs(recType recType, reqId uint16, pairs map[string]string) error](#fcgi-type-conn-writePairs)
  - [type record struct](#fcgi-type-record)
    - [func (rec *record) read(r io.Reader) (err error)](#fcgi-type-record-read)
    - [func (r *record) content() []byte](#fcgi-type-record-content)
  - [type bufWriter struct](#fcgi-type-bufWriter)
    - [func newWriter(c *conn, recType recType, reqId uint16) *bufWriter](#fcgi-type-bufWriter-newWriter)
    - [func (w *bufWriter) Close() error](#fcgi-type-bufWriter-Close)
  - [type streamWriter struct](#fcgi-type-streamWriter)
    - [func (w *streamWriter) Write(p []byte) (int, error)](#fcgi-type-streamWriter-Write)
    - [func (w *streamWriter) Close() error](#fcgi-type-streamWriter-Close)
  - [type nilCloser struct](#fcgi-type-nilCloser)
    - [func (c *nilCloser) Close() error](#fcgi-type-nilCloser-Close)
  - [type writeOnlyConn struct](#fcgi-type-writeOnlyConn)
    - [func (c *writeOnlyConn) Write(p []byte) (int, error)](#fcgi-type-writeOnlyConn-Write)
    - [func (c *writeOnlyConn) Read(p []byte) (int, error)](#fcgi-type-writeOnlyConn-Read)
    - [func (c *writeOnlyConn) Close() error](#fcgi-type-writeOnlyConn-Close)
  - [type nopWriteCloser struct](#fcgi-type-nopWriteCloser)
    - [func (nopWriteCloser) Write(buf []byte) (int, error)](#fcgi-type-nopWriteCloser-Write)
    - [func (nopWriteCloser) Close() error](#fcgi-type-nopWriteCloser-Close)
  - [type rwNopCloser struct](#fcgi-type-rwNopCloser)
    - [func (rwNopCloser) Close() error](#fcgi-type-rwNopCloser-Close)
- [Functions](#fcgi-func)
  - [func filterOutUsedEnvVars(envVars map[string]string) map[string]string](#fcgi-func-filterOutUsedEnvVars)
  - [func Serve(l net.Listener, handler http.Handler) error](#fcgi-func-Serve)
  - [func ProcessEnv(r *http.Request) map[string]string](#fcgi-func-ProcessEnv)
  - [func addFastCGIEnvToContext(s string) bool](#fcgi-func-addFastCGIEnvToContext)
  - [func readSize(s []byte) (uint32, int)](#fcgi-func-readSize)
  - [func readString(s []byte, size uint32) string](#fcgi-func-readString)
  - [func encodeSize(b []byte, size uint32) int](#fcgi-func-encodeSize)
  - [func TestSize(t *testing.T)](#fcgi-func-TestSize)
  - [func TestStreams(t *testing.T)](#fcgi-func-TestStreams)
  - [func TestGetValues(t *testing.T)](#fcgi-func-TestGetValues)
  - [func nameValuePair11(nameData, valueData string) []byte](#fcgi-func-nameValuePair11)
  - [func makeRecord(recordType recType,...](#fcgi-func-makeRecord)
  - [func TestChildServeCleansUp(t *testing.T)](#fcgi-func-TestChildServeCleansUp)
  - [func TestMalformedParams(t *testing.T)](#fcgi-func-TestMalformedParams)
  - [func TestChildServeReadsEnvVars(t *testing.T)](#fcgi-func-TestChildServeReadsEnvVars)
  - [func TestResponseWriterSniffsContentType(t *testing.T)](#fcgi-func-TestResponseWriterSniffsContentType)

### <a name="fcgi-const">Constants <small>(exported)</small></a>

#### <a name="fcgi-const-typeBeginRequest">const typeBeginRequest</a>

```Go
const typeBeginRequest recType = 1
```

#### <a name="fcgi-const-typeAbortRequest">const typeAbortRequest</a>

```Go
const typeAbortRequest recType = 2
```

#### <a name="fcgi-const-typeEndRequest">const typeEndRequest</a>

```Go
const typeEndRequest recType = 3
```

#### <a name="fcgi-const-typeParams">const typeParams</a>

```Go
const typeParams recType = 4
```

#### <a name="fcgi-const-typeStdin">const typeStdin</a>

```Go
const typeStdin recType = 5
```

#### <a name="fcgi-const-typeStdout">const typeStdout</a>

```Go
const typeStdout recType = 6
```

#### <a name="fcgi-const-typeStderr">const typeStderr</a>

```Go
const typeStderr recType = 7
```

#### <a name="fcgi-const-typeData">const typeData</a>

```Go
const typeData recType = 8
```

#### <a name="fcgi-const-typeGetValues">const typeGetValues</a>

```Go
const typeGetValues recType = 9
```

#### <a name="fcgi-const-typeGetValuesResult">const typeGetValuesResult</a>

```Go
const typeGetValuesResult recType = 10
```

#### <a name="fcgi-const-typeUnknownType">const typeUnknownType</a>

```Go
const typeUnknownType recType = 11
```

#### <a name="fcgi-const-flagKeepConn">const flagKeepConn</a>

```Go
const flagKeepConn = 1
```

keep the connection between web-server and responder open after request 

#### <a name="fcgi-const-maxWrite">const maxWrite</a>

```Go
const maxWrite = 65535 // maximum record body

```

#### <a name="fcgi-const-maxPad">const maxPad</a>

```Go
const maxPad = 255
```

#### <a name="fcgi-const-roleResponder">const roleResponder</a>

```Go
const roleResponder = iota + 1 // only Responders are implemented.

```

#### <a name="fcgi-const-roleAuthorizer">const roleAuthorizer</a>

```Go
const roleAuthorizer
```

#### <a name="fcgi-const-roleFilter">const roleFilter</a>

```Go
const roleFilter
```

#### <a name="fcgi-const-statusRequestComplete">const statusRequestComplete</a>

```Go
const statusRequestComplete = iota
```

#### <a name="fcgi-const-statusCantMultiplex">const statusCantMultiplex</a>

```Go
const statusCantMultiplex
```

#### <a name="fcgi-const-statusOverloaded">const statusOverloaded</a>

```Go
const statusOverloaded
```

#### <a name="fcgi-const-statusUnknownRole">const statusUnknownRole</a>

```Go
const statusUnknownRole
```

#### <a name="fcgi-const-want">const want</a>

```Go
const want = "\x01\n\x00\x00\x00\x12\x06\x00" +
	"\x0f\x01FCGI_MPXS_CONNS1" +
	"\x00\x00\x00\x00\x00\x00\x01\n\x00\x00\x00\x00\x00\x00"
```

### <a name="fcgi-var">Variables <small>(exported)</small></a>

#### <a name="fcgi-var-rec">var rec</a>

```Go
var rec record
```

#### <a name="fcgi-var-errCloseConn">var errCloseConn</a>

```Go
var errCloseConn = errors.New("fcgi: connection should be closed")
```

#### <a name="fcgi-var-emptyBody">var emptyBody</a>

```Go
var emptyBody = io.NopCloser(strings.NewReader(""))
```

#### <a name="fcgi-var-ErrRequestAborted">var ErrRequestAborted <small>(exported)</small></a>

```Go
var ErrRequestAborted = errors.New("fcgi: request aborted by web server")
```

ErrRequestAborted is returned by Read when a handler attempts to read the body of a request that has been aborted by the web server. 

#### <a name="fcgi-var-ErrConnClosed">var ErrConnClosed <small>(exported)</small></a>

```Go
var ErrConnClosed = errors.New("fcgi: connection to web server closed")
```

ErrConnClosed is returned by Read when a handler attempts to read the body of a request after the connection to the web server has been closed. 

#### <a name="fcgi-var-br">var br</a>

```Go
var br beginRequest
```

#### <a name="fcgi-var-body">var body</a>

```Go
var body io.ReadCloser
```

#### <a name="fcgi-var-err">var err</a>

```Go
var err error
```

#### <a name="fcgi-var-pad">var pad</a>

```Go
var pad [maxPad]byte
```

for padding so we don't have to allocate all the time not synchronized because we don't care what the contents are 

#### <a name="fcgi-var-sizeTests">var sizeTests</a>

```Go
var sizeTests = ...
```

#### <a name="fcgi-var-streamTests">var streamTests</a>

```Go
var streamTests = ...
```

#### <a name="fcgi-var-rec">var rec</a>

```Go
var rec record
```

#### <a name="fcgi-var-content">var content</a>

```Go
var content []byte
```

#### <a name="fcgi-var-rec">var rec</a>

```Go
var rec record
```

#### <a name="fcgi-var-streamBeginTypeStdin">var streamBeginTypeStdin</a>

```Go
var streamBeginTypeStdin = bytes.Join([][]byte{

	makeRecord(typeBeginRequest, 1,
		[]byte{0, byte(roleResponder), 0, 0, 0, 0, 0, 0}),

	makeRecord(typeParams, 1, nameValuePair11("REQUEST_METHOD", "GET")),
	makeRecord(typeParams, 1, nameValuePair11("SERVER_PROTOCOL", "HTTP/1.1")),
	makeRecord(typeParams, 1, nil),

	makeRecord(typeStdin, 1, []byte("0123456789abcdef")),
},
	nil)
```

a series of FastCGI records that start a request and begin sending the request body 

#### <a name="fcgi-var-cleanUpTests">var cleanUpTests</a>

```Go
var cleanUpTests = ...
```

#### <a name="fcgi-var-streamFullRequestStdin">var streamFullRequestStdin</a>

```Go
var streamFullRequestStdin = bytes.Join([][]byte{

	makeRecord(typeBeginRequest, 1,
		[]byte{0, byte(roleResponder), 0, 0, 0, 0, 0, 0}),

	makeRecord(typeParams, 1, nameValuePair11("REQUEST_METHOD", "GET")),
	makeRecord(typeParams, 1, nameValuePair11("SERVER_PROTOCOL", "HTTP/1.1")),

	makeRecord(typeParams, 1, nameValuePair11("REMOTE_USER", "jane.doe")),
	makeRecord(typeParams, 1, nameValuePair11("QUERY_STRING", "/foo/bar")),
	makeRecord(typeParams, 1, nil),

	makeRecord(typeStdin, 1, []byte("0123456789abcdef")),

	makeRecord(typeEndRequest, 1, nil),
},
	nil)
```

a series of FastCGI records that start and end a request 

#### <a name="fcgi-var-envVarTests">var envVarTests</a>

```Go
var envVarTests = ...
```

#### <a name="fcgi-var-tests">var tests</a>

```Go
var tests = ...
```

#### <a name="fcgi-var-resp">var resp</a>

```Go
var resp *response
```

### <a name="fcgi-type">Types <small>(exported)</small></a>

#### <a name="fcgi-type-request">type request struct</a>

```Go
type request struct {
	pw        *io.PipeWriter
	reqId     uint16
	params    map[string]string
	buf       [1024]byte
	rawParams []byte
	keepConn  bool
}
```

request holds the state for an in-progress request. As soon as it's complete, it's converted to an http.Request. 

##### <a name="fcgi-type-request-newRequest">func newRequest(reqId uint16, flags uint8) *request</a>

```Go
func newRequest(reqId uint16, flags uint8) *request
```

##### <a name="fcgi-type-request-parseParams">func (r *request) parseParams()</a>

```Go
func (r *request) parseParams()
```

parseParams reads an encoded []byte into Params. 

#### <a name="fcgi-type-envVarsContextKey">type envVarsContextKey struct{}</a>

```Go
type envVarsContextKey struct{}
```

envVarsContextKey uniquely identifies a mapping of CGI environment variables to their values in a request context 

#### <a name="fcgi-type-response">type response struct</a>

```Go
type response struct {
	req            *request
	header         http.Header
	code           int
	wroteHeader    bool
	wroteCGIHeader bool
	w              *bufWriter
}
```

response implements http.ResponseWriter. 

##### <a name="fcgi-type-response-newResponse">func newResponse(c *child, req *request) *response</a>

```Go
func newResponse(c *child, req *request) *response
```

##### <a name="fcgi-type-response-Header">func (r *response) Header() http.Header</a>

```Go
func (r *response) Header() http.Header
```

##### <a name="fcgi-type-response-Write">func (r *response) Write(p []byte) (n int, err error)</a>

```Go
func (r *response) Write(p []byte) (n int, err error)
```

##### <a name="fcgi-type-response-WriteHeader">func (r *response) WriteHeader(code int)</a>

```Go
func (r *response) WriteHeader(code int)
```

##### <a name="fcgi-type-response-writeCGIHeader">func (r *response) writeCGIHeader(p []byte)</a>

```Go
func (r *response) writeCGIHeader(p []byte)
```

writeCGIHeader finalizes the header sent to the client and writes it to the output. p is not written by writeHeader, but is the first chunk of the body that will be written. It is sniffed for a Content-Type if none is set explicitly. 

##### <a name="fcgi-type-response-Flush">func (r *response) Flush()</a>

```Go
func (r *response) Flush()
```

##### <a name="fcgi-type-response-Close">func (r *response) Close() error</a>

```Go
func (r *response) Close() error
```

#### <a name="fcgi-type-child">type child struct</a>

```Go
type child struct {
	conn    *conn
	handler http.Handler

	mu       sync.Mutex          // protects requests:
	requests map[uint16]*request // keyed by request ID
}
```

##### <a name="fcgi-type-child-newChild">func newChild(rwc io.ReadWriteCloser, handler http.Handler) *child</a>

```Go
func newChild(rwc io.ReadWriteCloser, handler http.Handler) *child
```

##### <a name="fcgi-type-child-serve">func (c *child) serve()</a>

```Go
func (c *child) serve()
```

##### <a name="fcgi-type-child-handleRecord">func (c *child) handleRecord(rec *record) error</a>

```Go
func (c *child) handleRecord(rec *record) error
```

##### <a name="fcgi-type-child-serveRequest">func (c *child) serveRequest(req *request, body io.ReadCloser)</a>

```Go
func (c *child) serveRequest(req *request, body io.ReadCloser)
```

##### <a name="fcgi-type-child-cleanUp">func (c *child) cleanUp()</a>

```Go
func (c *child) cleanUp()
```

#### <a name="fcgi-type-recType">type recType uint8</a>

```Go
type recType uint8
```

recType is a record type, as defined by [https://web.archive.org/web/20150420080736/http://www.fastcgi.com/drupal/node/6?q=node/22#S8](https://web.archive.org/web/20150420080736/http://www.fastcgi.com/drupal/node/6?q=node/22#S8) 

#### <a name="fcgi-type-header">type header struct</a>

```Go
type header struct {
	Version       uint8
	Type          recType
	Id            uint16
	ContentLength uint16
	PaddingLength uint8
	Reserved      uint8
}
```

##### <a name="fcgi-type-header-init">func (h *header) init(recType recType, reqId uint16, contentLength int)</a>

```Go
func (h *header) init(recType recType, reqId uint16, contentLength int)
```

#### <a name="fcgi-type-beginRequest">type beginRequest struct</a>

```Go
type beginRequest struct {
	role     uint16
	flags    uint8
	reserved [5]uint8
}
```

##### <a name="fcgi-type-beginRequest-read">func (br *beginRequest) read(content []byte) error</a>

```Go
func (br *beginRequest) read(content []byte) error
```

#### <a name="fcgi-type-conn">type conn struct</a>

```Go
type conn struct {
	mutex sync.Mutex
	rwc   io.ReadWriteCloser

	// to avoid allocations
	buf bytes.Buffer
	h   header
}
```

conn sends records over rwc 

##### <a name="fcgi-type-conn-newConn">func newConn(rwc io.ReadWriteCloser) *conn</a>

```Go
func newConn(rwc io.ReadWriteCloser) *conn
```

##### <a name="fcgi-type-conn-Close">func (c *conn) Close() error</a>

```Go
func (c *conn) Close() error
```

##### <a name="fcgi-type-conn-writeRecord">func (c *conn) writeRecord(recType recType, reqId uint16, b []byte) error</a>

```Go
func (c *conn) writeRecord(recType recType, reqId uint16, b []byte) error
```

writeRecord writes and sends a single record. 

##### <a name="fcgi-type-conn-writeEndRequest">func (c *conn) writeEndRequest(reqId uint16, appStatus int, protocolStatus uint8) error</a>

```Go
func (c *conn) writeEndRequest(reqId uint16, appStatus int, protocolStatus uint8) error
```

##### <a name="fcgi-type-conn-writePairs">func (c *conn) writePairs(recType recType, reqId uint16, pairs map[string]string) error</a>

```Go
func (c *conn) writePairs(recType recType, reqId uint16, pairs map[string]string) error
```

#### <a name="fcgi-type-record">type record struct</a>

```Go
type record struct {
	h   header
	buf [maxWrite + maxPad]byte
}
```

##### <a name="fcgi-type-record-read">func (rec *record) read(r io.Reader) (err error)</a>

```Go
func (rec *record) read(r io.Reader) (err error)
```

##### <a name="fcgi-type-record-content">func (r *record) content() []byte</a>

```Go
func (r *record) content() []byte
```

#### <a name="fcgi-type-bufWriter">type bufWriter struct</a>

```Go
type bufWriter struct {
	closer io.Closer
	*bufio.Writer
}
```

bufWriter encapsulates bufio.Writer but also closes the underlying stream when Closed. 

##### <a name="fcgi-type-bufWriter-newWriter">func newWriter(c *conn, recType recType, reqId uint16) *bufWriter</a>

```Go
func newWriter(c *conn, recType recType, reqId uint16) *bufWriter
```

##### <a name="fcgi-type-bufWriter-Close">func (w *bufWriter) Close() error</a>

```Go
func (w *bufWriter) Close() error
```

#### <a name="fcgi-type-streamWriter">type streamWriter struct</a>

```Go
type streamWriter struct {
	c       *conn
	recType recType
	reqId   uint16
}
```

streamWriter abstracts out the separation of a stream into discrete records. It only writes maxWrite bytes at a time. 

##### <a name="fcgi-type-streamWriter-Write">func (w *streamWriter) Write(p []byte) (int, error)</a>

```Go
func (w *streamWriter) Write(p []byte) (int, error)
```

##### <a name="fcgi-type-streamWriter-Close">func (w *streamWriter) Close() error</a>

```Go
func (w *streamWriter) Close() error
```

#### <a name="fcgi-type-nilCloser">type nilCloser struct</a>

```Go
type nilCloser struct {
	io.ReadWriter
}
```

##### <a name="fcgi-type-nilCloser-Close">func (c *nilCloser) Close() error</a>

```Go
func (c *nilCloser) Close() error
```

#### <a name="fcgi-type-writeOnlyConn">type writeOnlyConn struct</a>

```Go
type writeOnlyConn struct {
	buf []byte
}
```

##### <a name="fcgi-type-writeOnlyConn-Write">func (c *writeOnlyConn) Write(p []byte) (int, error)</a>

```Go
func (c *writeOnlyConn) Write(p []byte) (int, error)
```

##### <a name="fcgi-type-writeOnlyConn-Read">func (c *writeOnlyConn) Read(p []byte) (int, error)</a>

```Go
func (c *writeOnlyConn) Read(p []byte) (int, error)
```

##### <a name="fcgi-type-writeOnlyConn-Close">func (c *writeOnlyConn) Close() error</a>

```Go
func (c *writeOnlyConn) Close() error
```

#### <a name="fcgi-type-nopWriteCloser">type nopWriteCloser struct</a>

```Go
type nopWriteCloser struct {
	io.Reader
}
```

##### <a name="fcgi-type-nopWriteCloser-Write">func (nopWriteCloser) Write(buf []byte) (int, error)</a>

```Go
func (nopWriteCloser) Write(buf []byte) (int, error)
```

##### <a name="fcgi-type-nopWriteCloser-Close">func (nopWriteCloser) Close() error</a>

```Go
func (nopWriteCloser) Close() error
```

#### <a name="fcgi-type-rwNopCloser">type rwNopCloser struct</a>

```Go
type rwNopCloser struct {
	io.Reader
	io.Writer
}
```

##### <a name="fcgi-type-rwNopCloser-Close">func (rwNopCloser) Close() error</a>

```Go
func (rwNopCloser) Close() error
```

### <a name="fcgi-func">Functions <small>(exported)</small></a>

#### <a name="fcgi-func-filterOutUsedEnvVars">func filterOutUsedEnvVars(envVars map[string]string) map[string]string</a>

```Go
func filterOutUsedEnvVars(envVars map[string]string) map[string]string
```

filterOutUsedEnvVars returns a new map of env vars without the variables in the given envVars map that are read for creating each http.Request 

#### <a name="fcgi-func-Serve">func Serve(l net.Listener, handler http.Handler) error <small>(exported)</small></a>

```Go
func Serve(l net.Listener, handler http.Handler) error
```

Serve accepts incoming FastCGI connections on the listener l, creating a new goroutine for each. The goroutine reads requests and then calls handler to reply to them. If l is nil, Serve accepts connections from os.Stdin. If handler is nil, http.DefaultServeMux is used. 

#### <a name="fcgi-func-ProcessEnv">func ProcessEnv(r *http.Request) map[string]string <small>(exported)</small></a>

```Go
func ProcessEnv(r *http.Request) map[string]string
```

ProcessEnv returns FastCGI environment variables associated with the request r for which no effort was made to be included in the request itself - the data is hidden in the request's context. As an example, if REMOTE_USER is set for a request, it will not be found anywhere in r, but it will be included in ProcessEnv's response (via r's context). 

#### <a name="fcgi-func-addFastCGIEnvToContext">func addFastCGIEnvToContext(s string) bool</a>

```Go
func addFastCGIEnvToContext(s string) bool
```

addFastCGIEnvToContext reports whether to include the FastCGI environment variable s in the http.Request.Context, accessible via ProcessEnv. 

#### <a name="fcgi-func-readSize">func readSize(s []byte) (uint32, int)</a>

```Go
func readSize(s []byte) (uint32, int)
```

#### <a name="fcgi-func-readString">func readString(s []byte, size uint32) string</a>

```Go
func readString(s []byte, size uint32) string
```

#### <a name="fcgi-func-encodeSize">func encodeSize(b []byte, size uint32) int</a>

```Go
func encodeSize(b []byte, size uint32) int
```

#### <a name="fcgi-func-TestSize">func TestSize(t *testing.T)</a>

```Go
func TestSize(t *testing.T)
```

#### <a name="fcgi-func-TestStreams">func TestStreams(t *testing.T)</a>

```Go
func TestStreams(t *testing.T)
```

#### <a name="fcgi-func-TestGetValues">func TestGetValues(t *testing.T)</a>

```Go
func TestGetValues(t *testing.T)
```

#### <a name="fcgi-func-nameValuePair11">func nameValuePair11(nameData, valueData string) []byte</a>

```Go
func nameValuePair11(nameData, valueData string) []byte
```

#### <a name="fcgi-func-makeRecord">func makeRecord(recordType recType,...</a>

```Go
func makeRecord(
	recordType recType,
	requestId uint16,
	contentData []byte,
) []byte
```

#### <a name="fcgi-func-TestChildServeCleansUp">func TestChildServeCleansUp(t *testing.T)</a>

```Go
func TestChildServeCleansUp(t *testing.T)
```

Test that child.serve closes the bodies of aborted requests and closes the bodies of all requests before returning. Causes deadlock if either condition isn't met. See issue 6934. 

#### <a name="fcgi-func-TestMalformedParams">func TestMalformedParams(t *testing.T)</a>

```Go
func TestMalformedParams(t *testing.T)
```

Verifies it doesn't crash. 	Issue 11824. 

#### <a name="fcgi-func-TestChildServeReadsEnvVars">func TestChildServeReadsEnvVars(t *testing.T)</a>

```Go
func TestChildServeReadsEnvVars(t *testing.T)
```

Test that environment variables set for a request can be read by a handler. Ensures that variables not set will not be exposed to a handler. 

#### <a name="fcgi-func-TestResponseWriterSniffsContentType">func TestResponseWriterSniffsContentType(t *testing.T)</a>

```Go
func TestResponseWriterSniffsContentType(t *testing.T)
```

## <a name="httptest">Package httptest <small>(new page,exported)</small></a>

Package httptest provides utilities for HTTP testing. 

## Index

- [Constants](#httptest-const)
  - [const DefaultRemoteAddr](#httptest-const-DefaultRemoteAddr)
- [Variables](#httptest-var)
  - [var serveFlag](#httptest-var-serveFlag)
  - [var buf](#httptest-var-buf)
  - [var newServers](#httptest-var-newServers)
  - [var s](#httptest-var-s)
- [Types](#httptest-type)
  - [type ResponseRecorder struct](#httptest-type-ResponseRecorder)
    - [func NewRecorder() *ResponseRecorder](#httptest-type-ResponseRecorder-NewRecorder)
    - [func (rw *ResponseRecorder) Header() http.Header](#httptest-type-ResponseRecorder-Header)
    - [func (rw *ResponseRecorder) writeHeader(b []byte, str string)](#httptest-type-ResponseRecorder-writeHeader)
    - [func (rw *ResponseRecorder) Write(buf []byte) (int, error)](#httptest-type-ResponseRecorder-Write)
    - [func (rw *ResponseRecorder) WriteString(str string) (int, error)](#httptest-type-ResponseRecorder-WriteString)
    - [func (rw *ResponseRecorder) WriteHeader(code int)](#httptest-type-ResponseRecorder-WriteHeader)
    - [func (rw *ResponseRecorder) Flush()](#httptest-type-ResponseRecorder-Flush)
    - [func (rw *ResponseRecorder) Result() *http.Response](#httptest-type-ResponseRecorder-Result)
  - [type Server struct](#httptest-type-Server)
    - [func NewServer(handler http.Handler) *Server](#httptest-type-Server-NewServer)
    - [func NewUnstartedServer(handler http.Handler) *Server](#httptest-type-Server-NewUnstartedServer)
    - [func NewTLSServer(handler http.Handler) *Server](#httptest-type-Server-NewTLSServer)
    - [func (s *Server) Start()](#httptest-type-Server-Start)
    - [func (s *Server) StartTLS()](#httptest-type-Server-StartTLS)
    - [func (s *Server) Close()](#httptest-type-Server-Close)
    - [func (s *Server) logCloseHangDebugInfo()](#httptest-type-Server-logCloseHangDebugInfo)
    - [func (s *Server) CloseClientConnections()](#httptest-type-Server-CloseClientConnections)
    - [func (s *Server) Certificate() *x509.Certificate](#httptest-type-Server-Certificate)
    - [func (s *Server) Client() *http.Client](#httptest-type-Server-Client)
    - [func (s *Server) goServe()](#httptest-type-Server-goServe)
    - [func (s *Server) wrap()](#httptest-type-Server-wrap)
    - [func (s *Server) closeConn(c net.Conn)](#httptest-type-Server-closeConn)
    - [func (s *Server) closeConnChan(c net.Conn, done chan<- struct{})](#httptest-type-Server-closeConnChan)
    - [func (s *Server) forgetConn(c net.Conn)](#httptest-type-Server-forgetConn)
  - [type closeIdleTransport interface](#httptest-type-closeIdleTransport)
  - [type checkFunc func(*net/http/httptest.ResponseRecorder) error](#httptest-type-checkFunc)
  - [type newServerFunc func(net/http.Handler) *net/http/httptest.Server](#httptest-type-newServerFunc)
  - [type onlyCloseListener struct](#httptest-type-onlyCloseListener)
    - [func (onlyCloseListener) Close() error](#httptest-type-onlyCloseListener-Close)
- [Functions](#httptest-func)
  - [func NewRequest(method, target string, body io.Reader) *http.Request](#httptest-func-NewRequest)
  - [func parseContentLength(cl string) int64](#httptest-func-parseContentLength)
  - [func newLocalListener() net.Listener](#httptest-func-newLocalListener)
  - [func init()](#httptest-func-init)
  - [func strSliceContainsPrefix(v []string, pre string) bool](#httptest-func-strSliceContainsPrefix)
  - [func TestNewRequest(t *testing.T)](#httptest-func-TestNewRequest)
  - [func TestRecorder(t *testing.T)](#httptest-func-TestRecorder)
  - [func TestParseContentLength(t *testing.T)](#httptest-func-TestParseContentLength)
  - [func TestServer(t *testing.T)](#httptest-func-TestServer)
  - [func testServer(t *testing.T, newServer newServerFunc)](#httptest-func-testServer)
  - [func testGetAfterClose(t *testing.T, newServer newServerFunc)](#httptest-func-testGetAfterClose)
  - [func testServerCloseBlocking(t *testing.T, newServer newServerFunc)](#httptest-func-testServerCloseBlocking)
  - [func testServerCloseClientConnections(t *testing.T, newServer newServerFunc)](#httptest-func-testServerCloseClientConnections)
  - [func testServerClient(t *testing.T, newTLSServer newServerFunc)](#httptest-func-testServerClient)
  - [func testServerClientTransportType(t *testing.T, newServer newServerFunc)](#httptest-func-testServerClientTransportType)
  - [func testTLSServerClientTransportType(t *testing.T, newTLSServer newServerFunc)](#httptest-func-testTLSServerClientTransportType)
  - [func TestServerZeroValueClose(t *testing.T)](#httptest-func-TestServerZeroValueClose)
  - [func TestTLSServerWithHTTP2(t *testing.T)](#httptest-func-TestTLSServerWithHTTP2)

### <a name="httptest-const">Constants <small>(exported)</small></a>

#### <a name="httptest-const-DefaultRemoteAddr">const DefaultRemoteAddr <small>(exported)</small></a>

```Go
const DefaultRemoteAddr = "1.2.3.4"
```

DefaultRemoteAddr is the default remote address to return in RemoteAddr if an explicit DefaultRemoteAddr isn't set on ResponseRecorder. 

### <a name="httptest-var">Variables <small>(exported)</small></a>

#### <a name="httptest-var-serveFlag">var serveFlag</a>

```Go
var serveFlag string
```

When debugging a particular http server-based test, this flag lets you run 

```
go test -run=BrokenTest -httptest.serve=127.0.0.1:8000

```
to start the broken server so you can interact with it manually. We only register this flag if it looks like the caller knows about it and is trying to use it as we don't want to pollute flags and this isn't really part of our API. Don't depend on this. 

#### <a name="httptest-var-buf">var buf</a>

```Go
var buf strings.Builder
```

#### <a name="httptest-var-newServers">var newServers</a>

```Go
var newServers = ...
```

#### <a name="httptest-var-s">var s</a>

```Go
var s *Server
```

### <a name="httptest-type">Types <small>(exported)</small></a>

#### <a name="httptest-type-ResponseRecorder">type ResponseRecorder struct <small>(exported)</small></a>

```Go
type ResponseRecorder struct {
	// Code is the HTTP response code set by WriteHeader.
	//
	// Note that if a Handler never calls WriteHeader or Write,
	// this might end up being 0, rather than the implicit
	// http.StatusOK. To get the implicit value, use the Result
	// method.
	Code int

	// HeaderMap contains the headers explicitly set by the Handler.
	// It is an internal detail.
	//
	// Deprecated: HeaderMap exists for historical compatibility
	// and should not be used. To access the headers returned by a handler,
	// use the Response.Header map as returned by the Result method.
	HeaderMap http.Header

	// Body is the buffer to which the Handler's Write calls are sent.
	// If nil, the Writes are silently discarded.
	Body *bytes.Buffer

	// Flushed is whether the Handler called Flush.
	Flushed bool

	result      *http.Response // cache of Result's return value
	snapHeader  http.Header    // snapshot of HeaderMap at first Write
	wroteHeader bool
}
```

ResponseRecorder is an implementation of http.ResponseWriter that records its mutations for later inspection in tests. 

##### <a name="httptest-type-ResponseRecorder-NewRecorder">func NewRecorder() *ResponseRecorder <small>(exported)</small></a>

```Go
func NewRecorder() *ResponseRecorder
```

NewRecorder returns an initialized ResponseRecorder. 

##### <a name="httptest-type-ResponseRecorder-Header">func (rw *ResponseRecorder) Header() http.Header <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) Header() http.Header
```

Header implements http.ResponseWriter. It returns the response headers to mutate within a handler. To test the headers that were written after a handler completes, use the Result method and see the returned Response value's Header. 

##### <a name="httptest-type-ResponseRecorder-writeHeader">func (rw *ResponseRecorder) writeHeader(b []byte, str string)</a>

```Go
func (rw *ResponseRecorder) writeHeader(b []byte, str string)
```

writeHeader writes a header if it was not written yet and detects Content-Type if needed. 

bytes or str are the beginning of the response body. We pass both to avoid unnecessarily generate garbage in rw.WriteString which was created for performance reasons. Non-nil bytes win. 

##### <a name="httptest-type-ResponseRecorder-Write">func (rw *ResponseRecorder) Write(buf []byte) (int, error) <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) Write(buf []byte) (int, error)
```

Write implements http.ResponseWriter. The data in buf is written to rw.Body, if not nil. 

##### <a name="httptest-type-ResponseRecorder-WriteString">func (rw *ResponseRecorder) WriteString(str string) (int, error) <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) WriteString(str string) (int, error)
```

WriteString implements io.StringWriter. The data in str is written to rw.Body, if not nil. 

##### <a name="httptest-type-ResponseRecorder-WriteHeader">func (rw *ResponseRecorder) WriteHeader(code int) <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) WriteHeader(code int)
```

WriteHeader implements http.ResponseWriter. 

##### <a name="httptest-type-ResponseRecorder-Flush">func (rw *ResponseRecorder) Flush() <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) Flush()
```

Flush implements http.Flusher. To test whether Flush was called, see rw.Flushed. 

##### <a name="httptest-type-ResponseRecorder-Result">func (rw *ResponseRecorder) Result() *http.Response <small>(exported)</small></a>

```Go
func (rw *ResponseRecorder) Result() *http.Response
```

Result returns the response generated by the handler. 

The returned Response will have at least its StatusCode, Header, Body, and optionally Trailer populated. More fields may be populated in the future, so callers should not DeepEqual the result in tests. 

The Response.Header is a snapshot of the headers at the time of the first write call, or at the time of this call, if the handler never did a write. 

The Response.Body is guaranteed to be non-nil and Body.Read call is guaranteed to not return any error other than io.EOF. 

Result must only be called after the handler has finished running. 

#### <a name="httptest-type-Server">type Server struct <small>(exported)</small></a>

```Go
type Server struct {
	URL      string // base URL of form http://ipaddr:port with no trailing slash
	Listener net.Listener

	// EnableHTTP2 controls whether HTTP/2 is enabled
	// on the server. It must be set between calling
	// NewUnstartedServer and calling Server.StartTLS.
	EnableHTTP2 bool

	// TLS is the optional TLS configuration, populated with a new config
	// after TLS is started. If set on an unstarted server before StartTLS
	// is called, existing fields are copied into the new config.
	TLS *tls.Config

	// Config may be changed after calling NewUnstartedServer and
	// before Start or StartTLS.
	Config *http.Server

	// certificate is a parsed version of the TLS config certificate, if present.
	certificate *x509.Certificate

	// wg counts the number of outstanding HTTP requests on this server.
	// Close blocks until all requests are finished.
	wg sync.WaitGroup

	mu     sync.Mutex // guards closed and conns
	closed bool
	conns  map[net.Conn]http.ConnState // except terminal states

	// client is configured for use with the server.
	// Its transport is automatically closed when Close is called.
	client *http.Client
}
```

A Server is an HTTP server listening on a system-chosen port on the local loopback interface, for use in end-to-end HTTP tests. 

##### <a name="httptest-type-Server-NewServer">func NewServer(handler http.Handler) *Server <small>(exported)</small></a>

```Go
func NewServer(handler http.Handler) *Server
```

NewServer starts and returns a new Server. The caller should call Close when finished, to shut it down. 

##### <a name="httptest-type-Server-NewUnstartedServer">func NewUnstartedServer(handler http.Handler) *Server <small>(exported)</small></a>

```Go
func NewUnstartedServer(handler http.Handler) *Server
```

NewUnstartedServer returns a new Server but doesn't start it. 

After changing its configuration, the caller should call Start or StartTLS. 

The caller should call Close when finished, to shut it down. 

##### <a name="httptest-type-Server-NewTLSServer">func NewTLSServer(handler http.Handler) *Server <small>(exported)</small></a>

```Go
func NewTLSServer(handler http.Handler) *Server
```

NewTLSServer starts and returns a new Server using TLS. The caller should call Close when finished, to shut it down. 

##### <a name="httptest-type-Server-Start">func (s *Server) Start() <small>(exported)</small></a>

```Go
func (s *Server) Start()
```

Start starts a server from NewUnstartedServer. 

##### <a name="httptest-type-Server-StartTLS">func (s *Server) StartTLS() <small>(exported)</small></a>

```Go
func (s *Server) StartTLS()
```

StartTLS starts TLS on a server from NewUnstartedServer. 

##### <a name="httptest-type-Server-Close">func (s *Server) Close() <small>(exported)</small></a>

```Go
func (s *Server) Close()
```

Close shuts down the server and blocks until all outstanding requests on this server have completed. 

##### <a name="httptest-type-Server-logCloseHangDebugInfo">func (s *Server) logCloseHangDebugInfo()</a>

```Go
func (s *Server) logCloseHangDebugInfo()
```

##### <a name="httptest-type-Server-CloseClientConnections">func (s *Server) CloseClientConnections() <small>(exported)</small></a>

```Go
func (s *Server) CloseClientConnections()
```

CloseClientConnections closes any open HTTP connections to the test Server. 

##### <a name="httptest-type-Server-Certificate">func (s *Server) Certificate() *x509.Certificate <small>(exported)</small></a>

```Go
func (s *Server) Certificate() *x509.Certificate
```

Certificate returns the certificate used by the server, or nil if the server doesn't use TLS. 

##### <a name="httptest-type-Server-Client">func (s *Server) Client() *http.Client <small>(exported)</small></a>

```Go
func (s *Server) Client() *http.Client
```

Client returns an HTTP client configured for making requests to the server. It is configured to trust the server's TLS test certificate and will close its idle connections on Server.Close. 

##### <a name="httptest-type-Server-goServe">func (s *Server) goServe()</a>

```Go
func (s *Server) goServe()
```

##### <a name="httptest-type-Server-wrap">func (s *Server) wrap()</a>

```Go
func (s *Server) wrap()
```

wrap installs the connection state-tracking hook to know which connections are idle. 

##### <a name="httptest-type-Server-closeConn">func (s *Server) closeConn(c net.Conn)</a>

```Go
func (s *Server) closeConn(c net.Conn)
```

closeConn closes c. s.mu must be held. 

##### <a name="httptest-type-Server-closeConnChan">func (s *Server) closeConnChan(c net.Conn, done chan<- struct{})</a>

```Go
func (s *Server) closeConnChan(c net.Conn, done chan<- struct{})
```

closeConnChan is like closeConn, but takes an optional channel to receive a value when the goroutine closing c is done. 

##### <a name="httptest-type-Server-forgetConn">func (s *Server) forgetConn(c net.Conn)</a>

```Go
func (s *Server) forgetConn(c net.Conn)
```

forgetConn removes c from the set of tracked conns and decrements it from the waitgroup, unless it was previously removed. s.mu must be held. 

#### <a name="httptest-type-closeIdleTransport">type closeIdleTransport interface</a>

```Go
type closeIdleTransport interface {
	CloseIdleConnections()
}
```

#### <a name="httptest-type-checkFunc">type checkFunc func(*net/http/httptest.ResponseRecorder) error</a>

```Go
type checkFunc func(*ResponseRecorder) error
```

#### <a name="httptest-type-newServerFunc">type newServerFunc func(net/http.Handler) *net/http/httptest.Server</a>

```Go
type newServerFunc func(http.Handler) *Server
```

#### <a name="httptest-type-onlyCloseListener">type onlyCloseListener struct</a>

```Go
type onlyCloseListener struct {
	net.Listener
}
```

##### <a name="httptest-type-onlyCloseListener-Close">func (onlyCloseListener) Close() error</a>

```Go
func (onlyCloseListener) Close() error
```

### <a name="httptest-func">Functions <small>(exported)</small></a>

#### <a name="httptest-func-NewRequest">func NewRequest(method, target string, body io.Reader) *http.Request <small>(exported)</small></a>

```Go
func NewRequest(method, target string, body io.Reader) *http.Request
```

NewRequest returns a new incoming server Request, suitable for passing to an http.Handler for testing. 

The target is the RFC 7230 "request-target": it may be either a path or an absolute URL. If target is an absolute URL, the host name from the URL is used. Otherwise, "example.com" is used. 

The TLS field is set to a non-nil dummy value if target has scheme "https". 

The Request.Proto is always HTTP/1.1. 

An empty method means "GET". 

The provided body may be nil. If the body is of type *bytes.Reader, *strings.Reader, or *bytes.Buffer, the Request.ContentLength is set. 

NewRequest panics on error for ease of use in testing, where a panic is acceptable. 

To generate a client HTTP request instead of a server request, see the NewRequest function in the net/http package. 

#### <a name="httptest-func-parseContentLength">func parseContentLength(cl string) int64</a>

```Go
func parseContentLength(cl string) int64
```

parseContentLength trims whitespace from s and returns -1 if no value is set, or the value if it's >= 0. 

This a modified version of same function found in net/http/transfer.go. This one just ignores an invalid header. 

#### <a name="httptest-func-newLocalListener">func newLocalListener() net.Listener</a>

```Go
func newLocalListener() net.Listener
```

#### <a name="httptest-func-init">func init()</a>

```Go
func init()
```

#### <a name="httptest-func-strSliceContainsPrefix">func strSliceContainsPrefix(v []string, pre string) bool</a>

```Go
func strSliceContainsPrefix(v []string, pre string) bool
```

#### <a name="httptest-func-TestNewRequest">func TestNewRequest(t *testing.T)</a>

```Go
func TestNewRequest(t *testing.T)
```

#### <a name="httptest-func-TestRecorder">func TestRecorder(t *testing.T)</a>

```Go
func TestRecorder(t *testing.T)
```

#### <a name="httptest-func-TestParseContentLength">func TestParseContentLength(t *testing.T)</a>

```Go
func TestParseContentLength(t *testing.T)
```

issue 39017 - disallow Content-Length values such as "+3" 

#### <a name="httptest-func-TestServer">func TestServer(t *testing.T)</a>

```Go
func TestServer(t *testing.T)
```

#### <a name="httptest-func-testServer">func testServer(t *testing.T, newServer newServerFunc)</a>

```Go
func testServer(t *testing.T, newServer newServerFunc)
```

#### <a name="httptest-func-testGetAfterClose">func testGetAfterClose(t *testing.T, newServer newServerFunc)</a>

```Go
func testGetAfterClose(t *testing.T, newServer newServerFunc)
```

Issue 12781 

#### <a name="httptest-func-testServerCloseBlocking">func testServerCloseBlocking(t *testing.T, newServer newServerFunc)</a>

```Go
func testServerCloseBlocking(t *testing.T, newServer newServerFunc)
```

#### <a name="httptest-func-testServerCloseClientConnections">func testServerCloseClientConnections(t *testing.T, newServer newServerFunc)</a>

```Go
func testServerCloseClientConnections(t *testing.T, newServer newServerFunc)
```

Issue 14290 

#### <a name="httptest-func-testServerClient">func testServerClient(t *testing.T, newTLSServer newServerFunc)</a>

```Go
func testServerClient(t *testing.T, newTLSServer newServerFunc)
```

Tests that the Server.Client method works and returns an http.Client that can hit NewTLSServer without cert warnings. 

#### <a name="httptest-func-testServerClientTransportType">func testServerClientTransportType(t *testing.T, newServer newServerFunc)</a>

```Go
func testServerClientTransportType(t *testing.T, newServer newServerFunc)
```

Tests that the Server.Client.Transport interface is implemented by a *http.Transport. 

#### <a name="httptest-func-testTLSServerClientTransportType">func testTLSServerClientTransportType(t *testing.T, newTLSServer newServerFunc)</a>

```Go
func testTLSServerClientTransportType(t *testing.T, newTLSServer newServerFunc)
```

Tests that the TLS Server.Client.Transport interface is implemented by a *http.Transport. 

#### <a name="httptest-func-TestServerZeroValueClose">func TestServerZeroValueClose(t *testing.T)</a>

```Go
func TestServerZeroValueClose(t *testing.T)
```

Issue 19729: panic in Server.Close for values created directly without a constructor (so the unexported client field is nil). 

#### <a name="httptest-func-TestTLSServerWithHTTP2">func TestTLSServerWithHTTP2(t *testing.T)</a>

```Go
func TestTLSServerWithHTTP2(t *testing.T)
```

## <a name="httptest_test">Package httptest_test <small>(new page)</small></a>

## Index

- [Functions](#httptest_test-func)
  - [func ExampleResponseRecorder()](#httptest_test-func-ExampleResponseRecorder)
  - [func ExampleServer()](#httptest_test-func-ExampleServer)
  - [func ExampleServer_hTTP2()](#httptest_test-func-ExampleServer_hTTP2)
  - [func ExampleNewTLSServer()](#httptest_test-func-ExampleNewTLSServer)

### <a name="httptest_test-func">Functions</a>

#### <a name="httptest_test-func-ExampleResponseRecorder">func ExampleResponseRecorder()</a>

```Go
func ExampleResponseRecorder()
```

#### <a name="httptest_test-func-ExampleServer">func ExampleServer()</a>

```Go
func ExampleServer()
```

#### <a name="httptest_test-func-ExampleServer_hTTP2">func ExampleServer_hTTP2()</a>

```Go
func ExampleServer_hTTP2()
```

#### <a name="httptest_test-func-ExampleNewTLSServer">func ExampleNewTLSServer()</a>

```Go
func ExampleNewTLSServer()
```

## <a name="httptrace">Package httptrace <small>(new page,exported)</small></a>

Package httptrace provides mechanisms to trace the events within HTTP client requests. 

## Index

- [Variables](#httptrace-var)
  - [var buf](#httptrace-var-buf)
  - [var buf](#httptrace-var-buf)
  - [var testNum](#httptrace-var-testNum)
- [Types](#httptrace-type)
  - [type clientEventContextKey struct{}](#httptrace-type-clientEventContextKey)
  - [type ClientTrace struct](#httptrace-type-ClientTrace)
    - [func ContextClientTrace(ctx context.Context) *ClientTrace](#httptrace-type-ClientTrace-ContextClientTrace)
    - [func (t *ClientTrace) compose(old *ClientTrace)](#httptrace-type-ClientTrace-compose)
    - [func (t *ClientTrace) hasNetHooks() bool](#httptrace-type-ClientTrace-hasNetHooks)
  - [type WroteRequestInfo struct](#httptrace-type-WroteRequestInfo)
  - [type DNSStartInfo struct](#httptrace-type-DNSStartInfo)
  - [type DNSDoneInfo struct](#httptrace-type-DNSDoneInfo)
  - [type GotConnInfo struct](#httptrace-type-GotConnInfo)
- [Functions](#httptrace-func)
  - [func WithClientTrace(ctx context.Context, trace *ClientTrace) context.Context](#httptrace-func-WithClientTrace)
  - [func TestWithClientTrace(t *testing.T)](#httptrace-func-TestWithClientTrace)
  - [func TestCompose(t *testing.T)](#httptrace-func-TestCompose)

### <a name="httptrace-var">Variables <small>(exported)</small></a>

#### <a name="httptrace-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="httptrace-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="httptrace-var-testNum">var testNum</a>

```Go
var testNum int
```

### <a name="httptrace-type">Types <small>(exported)</small></a>

#### <a name="httptrace-type-clientEventContextKey">type clientEventContextKey struct{}</a>

```Go
type clientEventContextKey struct{}
```

unique type to prevent assignment. 

#### <a name="httptrace-type-ClientTrace">type ClientTrace struct <small>(exported)</small></a>

```Go
type ClientTrace struct {
	// GetConn is called before a connection is created or
	// retrieved from an idle pool. The hostPort is the
	// "host:port" of the target or proxy. GetConn is called even
	// if there's already an idle cached connection available.
	GetConn func(hostPort string)

	// GotConn is called after a successful connection is
	// obtained. There is no hook for failure to obtain a
	// connection; instead, use the error from
	// Transport.RoundTrip.
	GotConn func(GotConnInfo)

	// PutIdleConn is called when the connection is returned to
	// the idle pool. If err is nil, the connection was
	// successfully returned to the idle pool. If err is non-nil,
	// it describes why not. PutIdleConn is not called if
	// connection reuse is disabled via Transport.DisableKeepAlives.
	// PutIdleConn is called before the caller's Response.Body.Close
	// call returns.
	// For HTTP/2, this hook is not currently used.
	PutIdleConn func(err error)

	// GotFirstResponseByte is called when the first byte of the response
	// headers is available.
	GotFirstResponseByte func()

	// Got100Continue is called if the server replies with a "100
	// Continue" response.
	Got100Continue func()

	// Got1xxResponse is called for each 1xx informational response header
	// returned before the final non-1xx response. Got1xxResponse is called
	// for "100 Continue" responses, even if Got100Continue is also defined.
	// If it returns an error, the client request is aborted with that error value.
	Got1xxResponse func(code int, header textproto.MIMEHeader) error

	// DNSStart is called when a DNS lookup begins.
	DNSStart func(DNSStartInfo)

	// DNSDone is called when a DNS lookup ends.
	DNSDone func(DNSDoneInfo)

	// ConnectStart is called when a new connection's Dial begins.
	// If net.Dialer.DualStack (IPv6 "Happy Eyeballs") support is
	// enabled, this may be called multiple times.
	ConnectStart func(network, addr string)

	// ConnectDone is called when a new connection's Dial
	// completes. The provided err indicates whether the
	// connection completedly successfully.
	// If net.Dialer.DualStack ("Happy Eyeballs") support is
	// enabled, this may be called multiple times.
	ConnectDone func(network, addr string, err error)

	// TLSHandshakeStart is called when the TLS handshake is started. When
	// connecting to an HTTPS site via an HTTP proxy, the handshake happens
	// after the CONNECT request is processed by the proxy.
	TLSHandshakeStart func()

	// TLSHandshakeDone is called after the TLS handshake with either the
	// successful handshake's connection state, or a non-nil error on handshake
	// failure.
	TLSHandshakeDone func(tls.ConnectionState, error)

	// WroteHeaderField is called after the Transport has written
	// each request header. At the time of this call the values
	// might be buffered and not yet written to the network.
	WroteHeaderField func(key string, value []string)

	// WroteHeaders is called after the Transport has written
	// all request headers.
	WroteHeaders func()

	// Wait100Continue is called if the Request specified
	// "Expect: 100-continue" and the Transport has written the
	// request headers but is waiting for "100 Continue" from the
	// server before writing the request body.
	Wait100Continue func()

	// WroteRequest is called with the result of writing the
	// request and any body. It may be called multiple times
	// in the case of retried requests.
	WroteRequest func(WroteRequestInfo)
}
```

ClientTrace is a set of hooks to run at various stages of an outgoing HTTP request. Any particular hook may be nil. Functions may be called concurrently from different goroutines and some may be called after the request has completed or failed. 

ClientTrace currently traces a single HTTP request & response during a single round trip and has no hooks that span a series of redirected requests. 

See [https://blog.golang.org/http-tracing](https://blog.golang.org/http-tracing) for more. 

##### <a name="httptrace-type-ClientTrace-ContextClientTrace">func ContextClientTrace(ctx context.Context) *ClientTrace <small>(exported)</small></a>

```Go
func ContextClientTrace(ctx context.Context) *ClientTrace
```

ContextClientTrace returns the ClientTrace associated with the provided context. If none, it returns nil. 

##### <a name="httptrace-type-ClientTrace-compose">func (t *ClientTrace) compose(old *ClientTrace)</a>

```Go
func (t *ClientTrace) compose(old *ClientTrace)
```

compose modifies t such that it respects the previously-registered hooks in old, subject to the composition policy requested in t.Compose. 

##### <a name="httptrace-type-ClientTrace-hasNetHooks">func (t *ClientTrace) hasNetHooks() bool</a>

```Go
func (t *ClientTrace) hasNetHooks() bool
```

#### <a name="httptrace-type-WroteRequestInfo">type WroteRequestInfo struct <small>(exported)</small></a>

```Go
type WroteRequestInfo struct {
	// Err is any error encountered while writing the Request.
	Err error
}
```

WroteRequestInfo contains information provided to the WroteRequest hook. 

#### <a name="httptrace-type-DNSStartInfo">type DNSStartInfo struct <small>(exported)</small></a>

```Go
type DNSStartInfo struct {
	Host string
}
```

DNSStartInfo contains information about a DNS request. 

#### <a name="httptrace-type-DNSDoneInfo">type DNSDoneInfo struct <small>(exported)</small></a>

```Go
type DNSDoneInfo struct {
	// Addrs are the IPv4 and/or IPv6 addresses found in the DNS
	// lookup. The contents of the slice should not be mutated.
	Addrs []net.IPAddr

	// Err is any error that occurred during the DNS lookup.
	Err error

	// Coalesced is whether the Addrs were shared with another
	// caller who was doing the same DNS lookup concurrently.
	Coalesced bool
}
```

DNSDoneInfo contains information about the results of a DNS lookup. 

#### <a name="httptrace-type-GotConnInfo">type GotConnInfo struct <small>(exported)</small></a>

```Go
type GotConnInfo struct {
	// Conn is the connection that was obtained. It is owned by
	// the http.Transport and should not be read, written or
	// closed by users of ClientTrace.
	Conn net.Conn

	// Reused is whether this connection has been previously
	// used for another HTTP request.
	Reused bool

	// WasIdle is whether this connection was obtained from an
	// idle pool.
	WasIdle bool

	// IdleTime reports how long the connection was previously
	// idle, if WasIdle is true.
	IdleTime time.Duration
}
```

GotConnInfo is the argument to the ClientTrace.GotConn function and contains information about the obtained connection. 

### <a name="httptrace-func">Functions <small>(exported)</small></a>

#### <a name="httptrace-func-WithClientTrace">func WithClientTrace(ctx context.Context, trace *ClientTrace) context.Context <small>(exported)</small></a>

```Go
func WithClientTrace(ctx context.Context, trace *ClientTrace) context.Context
```

WithClientTrace returns a new context based on the provided parent ctx. HTTP client requests made with the returned context will use the provided trace hooks, in addition to any previous hooks registered with ctx. Any hooks defined in the provided trace will be called first. 

#### <a name="httptrace-func-TestWithClientTrace">func TestWithClientTrace(t *testing.T)</a>

```Go
func TestWithClientTrace(t *testing.T)
```

#### <a name="httptrace-func-TestCompose">func TestCompose(t *testing.T)</a>

```Go
func TestCompose(t *testing.T)
```

## <a name="httptrace_test">Package httptrace_test <small>(new page)</small></a>

## Index

- [Functions](#httptrace_test-func)
  - [func Example()](#httptrace_test-func-Example)

### <a name="httptrace_test-func">Functions</a>

#### <a name="httptrace_test-func-Example">func Example()</a>

```Go
func Example()
```

## <a name="httputil">Package httputil <small>(new page,exported)</small></a>

Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package. 

## Index

- [Constants](#httputil-const)
  - [const fakeHopHeader](#httputil-const-fakeHopHeader)
  - [const backendResponse](#httputil-const-backendResponse)
  - [const backendStatus](#httputil-const-backendStatus)
  - [const fakeConnectionToken](#httputil-const-fakeConnectionToken)
  - [const backendResponse](#httputil-const-backendResponse)
  - [const someConnHeader](#httputil-const-someConnHeader)
  - [const prevForwardedFor](#httputil-const-prevForwardedFor)
  - [const backendResponse](#httputil-const-backendResponse)
  - [const backendStatus](#httputil-const-backendStatus)
  - [const expected](#httputil-const-expected)
  - [const expected](#httputil-const-expected)
  - [const backendResponse](#httputil-const-backendResponse)
  - [const explicitUA](#httputil-const-explicitUA)
  - [const msg](#httputil-const-msg)
  - [const size](#httputil-const-size)
  - [const backendResponse](#httputil-const-backendResponse)
  - [const backendStatus](#httputil-const-backendStatus)
- [Variables](#httputil-var)
  - [var buf](#httputil-var-buf)
  - [var err](#httputil-var-err)
  - [var buf](#httputil-var-buf)
  - [var ok](#httputil-var-ok)
  - [var reqWriteExcludeHeaderDump](#httputil-var-reqWriteExcludeHeaderDump)
  - [var err](#httputil-var-err)
  - [var b](#httputil-var-b)
  - [var dest](#httputil-var-dest)
  - [var errNoBody](#httputil-var-errNoBody)
  - [var emptyBody](#httputil-var-emptyBody)
  - [var b](#httputil-var-b)
  - [var err](#httputil-var-err)
  - [var ErrLineTooLong](#httputil-var-ErrLineTooLong)
  - [var ErrPersistEOF](#httputil-var-ErrPersistEOF)
  - [var ErrClosed](#httputil-var-ErrClosed)
  - [var ErrPipeline](#httputil-var-ErrPipeline)
  - [var errClosed](#httputil-var-errClosed)
  - [var req](#httputil-var-req)
  - [var err](#httputil-var-err)
  - [var err](#httputil-var-err)
  - [var hopHeaders](#httputil-var-hopHeaders)
  - [var cancel](#httputil-var-cancel)
  - [var inOurTests](#httputil-var-inOurTests)
  - [var buf](#httputil-var-buf)
  - [var written](#httputil-var-written)
  - [var dumpTests](#httputil-var-dumpTests)
  - [var dg](#httputil-var-dg)
  - [var dumpResTests](#httputil-var-dumpResTests)
  - [var cf](#httputil-var-cf)
  - [var proxyQueryTests](#httputil-var-proxyQueryTests)
  - [var mu](#httputil-var-mu)
  - [var log](#httputil-var-log)
  - [var requestBody](#httputil-var-requestBody)
  - [var proxyLog](#httputil-var-proxyLog)
- [Types](#httputil-type)
  - [type dumpConn struct](#httputil-type-dumpConn)
    - [func (c *dumpConn) Close() error](#httputil-type-dumpConn-Close)
    - [func (c *dumpConn) LocalAddr() net.Addr](#httputil-type-dumpConn-LocalAddr)
    - [func (c *dumpConn) RemoteAddr() net.Addr](#httputil-type-dumpConn-RemoteAddr)
    - [func (c *dumpConn) SetDeadline(t time.Time) error](#httputil-type-dumpConn-SetDeadline)
    - [func (c *dumpConn) SetReadDeadline(t time.Time) error](#httputil-type-dumpConn-SetReadDeadline)
    - [func (c *dumpConn) SetWriteDeadline(t time.Time) error](#httputil-type-dumpConn-SetWriteDeadline)
  - [type neverEnding byte](#httputil-type-neverEnding)
    - [func (b neverEnding) Read(p []byte) (n int, err error)](#httputil-type-neverEnding-Read)
  - [type delegateReader struct](#httputil-type-delegateReader)
    - [func (r *delegateReader) Read(p []byte) (int, error)](#httputil-type-delegateReader-Read)
  - [type failureToReadBody struct{}](#httputil-type-failureToReadBody)
    - [func (failureToReadBody) Read([]byte) (int, error)](#httputil-type-failureToReadBody-Read)
    - [func (failureToReadBody) Close() error](#httputil-type-failureToReadBody-Close)
  - [type ServerConn struct](#httputil-type-ServerConn)
    - [func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn](#httputil-type-ServerConn-NewServerConn)
    - [func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)](#httputil-type-ServerConn-Hijack)
    - [func (sc *ServerConn) Close() error](#httputil-type-ServerConn-Close)
    - [func (sc *ServerConn) Read() (*http.Request, error)](#httputil-type-ServerConn-Read)
    - [func (sc *ServerConn) Pending() int](#httputil-type-ServerConn-Pending)
    - [func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error](#httputil-type-ServerConn-Write)
  - [type ClientConn struct](#httputil-type-ClientConn)
    - [func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn](#httputil-type-ClientConn-NewClientConn)
    - [func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn](#httputil-type-ClientConn-NewProxyClientConn)
    - [func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader)](#httputil-type-ClientConn-Hijack)
    - [func (cc *ClientConn) Close() error](#httputil-type-ClientConn-Close)
    - [func (cc *ClientConn) Write(req *http.Request) error](#httputil-type-ClientConn-Write)
    - [func (cc *ClientConn) Pending() int](#httputil-type-ClientConn-Pending)
    - [func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error)](#httputil-type-ClientConn-Read)
    - [func (cc *ClientConn) Do(req *http.Request) (*http.Response, error)](#httputil-type-ClientConn-Do)
  - [type ReverseProxy struct](#httputil-type-ReverseProxy)
    - [func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy](#httputil-type-ReverseProxy-NewSingleHostReverseProxy)
    - [func (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error)](#httputil-type-ReverseProxy-defaultErrorHandler)
    - [func (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error)](#httputil-type-ReverseProxy-getErrorHandler)
    - [func (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool](#httputil-type-ReverseProxy-modifyResponse)
    - [func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)](#httputil-type-ReverseProxy-ServeHTTP)
    - [func (p *ReverseProxy) flushInterval(res *http.Response) time.Duration](#httputil-type-ReverseProxy-flushInterval)
    - [func (p *ReverseProxy) copyResponse(dst io.Writer, src io.Reader, flushInterval time.Duration) error](#httputil-type-ReverseProxy-copyResponse)
    - [func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error)](#httputil-type-ReverseProxy-copyBuffer)
    - [func (p *ReverseProxy) logf(format string, args ...interface{})](#httputil-type-ReverseProxy-logf)
    - [func (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response)](#httputil-type-ReverseProxy-handleUpgradeResponse)
  - [type BufferPool interface](#httputil-type-BufferPool)
  - [type writeFlusher interface](#httputil-type-writeFlusher)
  - [type maxLatencyWriter struct](#httputil-type-maxLatencyWriter)
    - [func (m *maxLatencyWriter) Write(p []byte) (n int, err error)](#httputil-type-maxLatencyWriter-Write)
    - [func (m *maxLatencyWriter) delayedFlush()](#httputil-type-maxLatencyWriter-delayedFlush)
    - [func (m *maxLatencyWriter) stop()](#httputil-type-maxLatencyWriter-stop)
  - [type switchProtocolCopier struct](#httputil-type-switchProtocolCopier)
    - [func (c switchProtocolCopier) copyFromBackend(errc chan<- error)](#httputil-type-switchProtocolCopier-copyFromBackend)
    - [func (c switchProtocolCopier) copyToBackend(errc chan<- error)](#httputil-type-switchProtocolCopier-copyToBackend)
  - [type eofReader struct{}](#httputil-type-eofReader)
    - [func (n eofReader) Close() error](#httputil-type-eofReader-Close)
    - [func (n eofReader) Read([]byte) (int, error)](#httputil-type-eofReader-Read)
  - [type dumpTest struct](#httputil-type-dumpTest)
  - [type bufferPool struct](#httputil-type-bufferPool)
    - [func (bp bufferPool) Get() []byte](#httputil-type-bufferPool-Get)
    - [func (bp bufferPool) Put(v []byte)](#httputil-type-bufferPool-Put)
  - [type RoundTripperFunc func(*net/http.Request) (*net/http.Response, error)](#httputil-type-RoundTripperFunc)
    - [func (fn RoundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)](#httputil-type-RoundTripperFunc-RoundTrip)
  - [type failingRoundTripper struct{}](#httputil-type-failingRoundTripper)
    - [func (failingRoundTripper) RoundTrip(*http.Request) (*http.Response, error)](#httputil-type-failingRoundTripper-RoundTrip)
  - [type staticResponseRoundTripper struct](#httputil-type-staticResponseRoundTripper)
    - [func (rt staticResponseRoundTripper) RoundTrip(*http.Request) (*http.Response, error)](#httputil-type-staticResponseRoundTripper-RoundTrip)
  - [type staticTransport struct](#httputil-type-staticTransport)
    - [func (t *staticTransport) RoundTrip(r *http.Request) (*http.Response, error)](#httputil-type-staticTransport-RoundTrip)
  - [type result struct](#httputil-type-result)
  - [type roundTripperFunc func(req *net/http.Request) (*net/http.Response, error)](#httputil-type-roundTripperFunc)
    - [func (fn roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)](#httputil-type-roundTripperFunc-RoundTrip)
  - [type checkCloser struct](#httputil-type-checkCloser)
    - [func (cc *checkCloser) Close() error](#httputil-type-checkCloser-Close)
    - [func (cc *checkCloser) Read(b []byte) (int, error)](#httputil-type-checkCloser-Read)
- [Functions](#httputil-func)
  - [func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error)](#httputil-func-drainBody)
  - [func outgoingLength(req *http.Request) int64](#httputil-func-outgoingLength)
  - [func DumpRequestOut(req *http.Request, body bool) ([]byte, error)](#httputil-func-DumpRequestOut)
  - [func valueOrDefault(value, def string) string](#httputil-func-valueOrDefault)
  - [func DumpRequest(req *http.Request, body bool) ([]byte, error)](#httputil-func-DumpRequest)
  - [func DumpResponse(resp *http.Response, body bool) ([]byte, error)](#httputil-func-DumpResponse)
  - [func NewChunkedReader(r io.Reader) io.Reader](#httputil-func-NewChunkedReader)
  - [func NewChunkedWriter(w io.Writer) io.WriteCloser](#httputil-func-NewChunkedWriter)
  - [func singleJoiningSlash(a, b string) string](#httputil-func-singleJoiningSlash)
  - [func joinURLPath(a, b *url.URL) (path, rawpath string)](#httputil-func-joinURLPath)
  - [func copyHeader(dst, src http.Header)](#httputil-func-copyHeader)
  - [func shouldPanicOnCopyError(req *http.Request) bool](#httputil-func-shouldPanicOnCopyError)
  - [func removeConnectionHeaders(h http.Header)](#httputil-func-removeConnectionHeaders)
  - [func upgradeType(h http.Header) string](#httputil-func-upgradeType)
  - [func TestDumpRequest(t *testing.T)](#httputil-func-TestDumpRequest)
  - [func deadline(t *testing.T, defaultDelay, needed time.Duration) time.Time](#httputil-func-deadline)
  - [func chunk(s string) string](#httputil-func-chunk)
  - [func mustParseURL(s string) *url.URL](#httputil-func-mustParseURL)
  - [func mustNewRequest(method, url string, body io.Reader) *http.Request](#httputil-func-mustNewRequest)
  - [func mustReadRequest(s string) *http.Request](#httputil-func-mustReadRequest)
  - [func TestDumpResponse(t *testing.T)](#httputil-func-TestDumpResponse)
  - [func TestDumpRequestOutIssue38352(t *testing.T)](#httputil-func-TestDumpRequestOutIssue38352)
  - [func init()](#httputil-func-init)
  - [func TestReverseProxy(t *testing.T)](#httputil-func-TestReverseProxy)
  - [func TestReverseProxyStripHeadersPresentInConnection(t *testing.T)](#httputil-func-TestReverseProxyStripHeadersPresentInConnection)
  - [func TestXForwardedFor(t *testing.T)](#httputil-func-TestXForwardedFor)
  - [func TestXForwardedFor_Omit(t *testing.T)](#httputil-func-TestXForwardedFor_Omit)
  - [func TestReverseProxyQuery(t *testing.T)](#httputil-func-TestReverseProxyQuery)
  - [func TestReverseProxyFlushInterval(t *testing.T)](#httputil-func-TestReverseProxyFlushInterval)
  - [func TestReverseProxyFlushIntervalHeaders(t *testing.T)](#httputil-func-TestReverseProxyFlushIntervalHeaders)
  - [func TestReverseProxyCancellation(t *testing.T)](#httputil-func-TestReverseProxyCancellation)
  - [func req(t *testing.T, v string) *http.Request](#httputil-func-req)
  - [func TestNilBody(t *testing.T)](#httputil-func-TestNilBody)
  - [func TestUserAgentHeader(t *testing.T)](#httputil-func-TestUserAgentHeader)
  - [func TestReverseProxyGetPutBuffer(t *testing.T)](#httputil-func-TestReverseProxyGetPutBuffer)
  - [func TestReverseProxy_Post(t *testing.T)](#httputil-func-TestReverseProxy_Post)
  - [func TestReverseProxy_NilBody(t *testing.T)](#httputil-func-TestReverseProxy_NilBody)
  - [func TestReverseProxy_AllocatedHeader(t *testing.T)](#httputil-func-TestReverseProxy_AllocatedHeader)
  - [func TestReverseProxyModifyResponse(t *testing.T)](#httputil-func-TestReverseProxyModifyResponse)
  - [func TestReverseProxyErrorHandler(t *testing.T)](#httputil-func-TestReverseProxyErrorHandler)
  - [func TestReverseProxy_CopyBuffer(t *testing.T)](#httputil-func-TestReverseProxy_CopyBuffer)
  - [func BenchmarkServeHTTP(b *testing.B)](#httputil-func-BenchmarkServeHTTP)
  - [func TestServeHTTPDeepCopy(t *testing.T)](#httputil-func-TestServeHTTPDeepCopy)
  - [func TestClonesRequestHeaders(t *testing.T)](#httputil-func-TestClonesRequestHeaders)
  - [func TestModifyResponseClosesBody(t *testing.T)](#httputil-func-TestModifyResponseClosesBody)
  - [func TestReverseProxy_PanicBodyError(t *testing.T)](#httputil-func-TestReverseProxy_PanicBodyError)
  - [func TestSelectFlushInterval(t *testing.T)](#httputil-func-TestSelectFlushInterval)
  - [func TestReverseProxyWebSocket(t *testing.T)](#httputil-func-TestReverseProxyWebSocket)
  - [func TestReverseProxyWebSocketCancelation(t *testing.T)](#httputil-func-TestReverseProxyWebSocketCancelation)
  - [func TestUnannouncedTrailer(t *testing.T)](#httputil-func-TestUnannouncedTrailer)
  - [func TestSingleJoinSlash(t *testing.T)](#httputil-func-TestSingleJoinSlash)
  - [func TestJoinURLPath(t *testing.T)](#httputil-func-TestJoinURLPath)

### <a name="httputil-const">Constants <small>(exported)</small></a>

#### <a name="httputil-const-fakeHopHeader">const fakeHopHeader</a>

```Go
const fakeHopHeader = "X-Fake-Hop-Header-For-Test"
```

#### <a name="httputil-const-backendResponse">const backendResponse</a>

```Go
const backendResponse = "I am the backend"
```

#### <a name="httputil-const-backendStatus">const backendStatus</a>

```Go
const backendStatus = 404
```

#### <a name="httputil-const-fakeConnectionToken">const fakeConnectionToken</a>

```Go
const fakeConnectionToken = "X-Fake-Connection-Token"
```

#### <a name="httputil-const-backendResponse">const backendResponse</a>

```Go
const backendResponse = "I am the backend"
```

#### <a name="httputil-const-someConnHeader">const someConnHeader</a>

```Go
const someConnHeader = "X-Some-Conn-Header"
```

someConnHeader is some arbitrary header to be declared as a hop-by-hop header in the Request's Connection header. 

#### <a name="httputil-const-prevForwardedFor">const prevForwardedFor</a>

```Go
const prevForwardedFor = "client ip"
```

#### <a name="httputil-const-backendResponse">const backendResponse</a>

```Go
const backendResponse = "I am the backend"
```

#### <a name="httputil-const-backendStatus">const backendStatus</a>

```Go
const backendStatus = 404
```

#### <a name="httputil-const-expected">const expected</a>

```Go
const expected = "hi"
```

#### <a name="httputil-const-expected">const expected</a>

```Go
const expected = "hi"
```

#### <a name="httputil-const-backendResponse">const backendResponse</a>

```Go
const backendResponse = "I am the backend"
```

#### <a name="httputil-const-explicitUA">const explicitUA</a>

```Go
const explicitUA = "explicit UA"
```

#### <a name="httputil-const-msg">const msg</a>

```Go
const msg = "hi"
```

#### <a name="httputil-const-size">const size</a>

```Go
const size = 1234
```

#### <a name="httputil-const-backendResponse">const backendResponse</a>

```Go
const backendResponse = "I am the backend"
```

#### <a name="httputil-const-backendStatus">const backendStatus</a>

```Go
const backendStatus = 200
```

### <a name="httputil-var">Variables <small>(exported)</small></a>

#### <a name="httputil-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="httputil-var-err">var err</a>

```Go
var err error
```

#### <a name="httputil-var-buf">var buf</a>

```Go
var buf bytes.Buffer // records the output

```

Use the actual Transport code to record what we would send on the wire, but not using TCP.  Use a Transport with a custom dialer that returns a fake net.Conn that waits for the full input (and recording it), and then responds with a dummy response. 

#### <a name="httputil-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="httputil-var-reqWriteExcludeHeaderDump">var reqWriteExcludeHeaderDump</a>

```Go
var reqWriteExcludeHeaderDump = ...
```

#### <a name="httputil-var-err">var err</a>

```Go
var err error
```

#### <a name="httputil-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="httputil-var-dest">var dest</a>

```Go
var dest io.Writer = &b
```

#### <a name="httputil-var-errNoBody">var errNoBody</a>

```Go
var errNoBody = errors.New("sentinel error value")
```

errNoBody is a sentinel error value used by failureToReadBody so we can detect that the lack of body was intentional. 

#### <a name="httputil-var-emptyBody">var emptyBody</a>

```Go
var emptyBody = io.NopCloser(strings.NewReader(""))
```

emptyBody is an instance of empty reader. 

#### <a name="httputil-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="httputil-var-err">var err</a>

```Go
var err error
```

#### <a name="httputil-var-ErrLineTooLong">var ErrLineTooLong <small>(exported)</small></a>

```Go
var ErrLineTooLong = internal.ErrLineTooLong
```

ErrLineTooLong is returned when reading malformed chunked data with lines that are too long. 

#### <a name="httputil-var-ErrPersistEOF">var ErrPersistEOF <small>(exported,deprecated)</small></a>

```Go
var ErrPersistEOF = ...
```

Deprecated: No longer used. 

#### <a name="httputil-var-ErrClosed">var ErrClosed <small>(exported,deprecated)</small></a>

```Go
var ErrClosed = ...
```

Deprecated: No longer used. 

#### <a name="httputil-var-ErrPipeline">var ErrPipeline <small>(exported,deprecated)</small></a>

```Go
var ErrPipeline = ...
```

Deprecated: No longer used. 

#### <a name="httputil-var-errClosed">var errClosed</a>

```Go
var errClosed = errors.New("i/o operation on closed connection")
```

This is an API usage error - the local side is closed. ErrPersistEOF (above) reports that the remote side is closed. 

#### <a name="httputil-var-req">var req</a>

```Go
var req *http.Request
```

#### <a name="httputil-var-err">var err</a>

```Go
var err error
```

#### <a name="httputil-var-err">var err</a>

```Go
var err error
```

#### <a name="httputil-var-hopHeaders">var hopHeaders</a>

```Go
var hopHeaders = ...
```

Hop-by-hop headers. These are removed when sent to the backend. As of RFC 7230, hop-by-hop headers are required to appear in the Connection header field. These are the headers defined by the obsoleted RFC 2616 (section 13.5.1) and are used for backward compatibility. 

#### <a name="httputil-var-cancel">var cancel</a>

```Go
var cancel context.CancelFunc
```

#### <a name="httputil-var-inOurTests">var inOurTests</a>

```Go
var inOurTests bool // whether we're in our own tests

```

#### <a name="httputil-var-buf">var buf</a>

```Go
var buf []byte
```

#### <a name="httputil-var-written">var written</a>

```Go
var written int64
```

#### <a name="httputil-var-dumpTests">var dumpTests</a>

```Go
var dumpTests = ...
```

#### <a name="httputil-var-dg">var dg</a>

```Go
var dg int
```

Validate we haven't leaked any goroutines. 

#### <a name="httputil-var-dumpResTests">var dumpResTests</a>

```Go
var dumpResTests = ...
```

#### <a name="httputil-var-cf">var cf</a>

```Go
var cf []string
```

#### <a name="httputil-var-proxyQueryTests">var proxyQueryTests</a>

```Go
var proxyQueryTests = ...
```

#### <a name="httputil-var-mu">var mu</a>

```Go
var mu sync.Mutex
```

#### <a name="httputil-var-log">var log</a>

```Go
var log []string
```

#### <a name="httputil-var-requestBody">var requestBody</a>

```Go
var requestBody = bytes.Repeat([]byte("a"), 1<<20)
```

#### <a name="httputil-var-proxyLog">var proxyLog</a>

```Go
var proxyLog bytes.Buffer
```

### <a name="httputil-type">Types <small>(exported)</small></a>

#### <a name="httputil-type-dumpConn">type dumpConn struct</a>

```Go
type dumpConn struct {
	io.Writer
	io.Reader
}
```

dumpConn is a net.Conn which writes to Writer and reads from Reader 

##### <a name="httputil-type-dumpConn-Close">func (c *dumpConn) Close() error</a>

```Go
func (c *dumpConn) Close() error
```

##### <a name="httputil-type-dumpConn-LocalAddr">func (c *dumpConn) LocalAddr() net.Addr</a>

```Go
func (c *dumpConn) LocalAddr() net.Addr
```

##### <a name="httputil-type-dumpConn-RemoteAddr">func (c *dumpConn) RemoteAddr() net.Addr</a>

```Go
func (c *dumpConn) RemoteAddr() net.Addr
```

##### <a name="httputil-type-dumpConn-SetDeadline">func (c *dumpConn) SetDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetDeadline(t time.Time) error
```

##### <a name="httputil-type-dumpConn-SetReadDeadline">func (c *dumpConn) SetReadDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetReadDeadline(t time.Time) error
```

##### <a name="httputil-type-dumpConn-SetWriteDeadline">func (c *dumpConn) SetWriteDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetWriteDeadline(t time.Time) error
```

#### <a name="httputil-type-neverEnding">type neverEnding byte</a>

```Go
type neverEnding byte
```

##### <a name="httputil-type-neverEnding-Read">func (b neverEnding) Read(p []byte) (n int, err error)</a>

```Go
func (b neverEnding) Read(p []byte) (n int, err error)
```

#### <a name="httputil-type-delegateReader">type delegateReader struct</a>

```Go
type delegateReader struct {
	c   chan io.Reader
	err error     // only used if r is nil and c is closed.
	r   io.Reader // nil until received from c
}
```

delegateReader is a reader that delegates to another reader, once it arrives on a channel. 

##### <a name="httputil-type-delegateReader-Read">func (r *delegateReader) Read(p []byte) (int, error)</a>

```Go
func (r *delegateReader) Read(p []byte) (int, error)
```

#### <a name="httputil-type-failureToReadBody">type failureToReadBody struct{}</a>

```Go
type failureToReadBody struct{}
```

failureToReadBody is a io.ReadCloser that just returns errNoBody on Read. It's swapped in when we don't actually want to consume the body, but need a non-nil one, and want to distinguish the error from reading the dummy body. 

##### <a name="httputil-type-failureToReadBody-Read">func (failureToReadBody) Read([]byte) (int, error)</a>

```Go
func (failureToReadBody) Read([]byte) (int, error)
```

##### <a name="httputil-type-failureToReadBody-Close">func (failureToReadBody) Close() error</a>

```Go
func (failureToReadBody) Close() error
```

#### <a name="httputil-type-ServerConn">type ServerConn struct <small>(exported)</small></a>

```Go
type ServerConn struct {
	mu              sync.Mutex // read-write protects the following fields
	c               net.Conn
	r               *bufio.Reader
	re, we          error // read/write errors
	lastbody        io.ReadCloser
	nread, nwritten int
	pipereq         map[*http.Request]uint

	pipe textproto.Pipeline
}
```

ServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. 

Deprecated: Use the Server in package net/http instead. 

##### <a name="httputil-type-ServerConn-NewServerConn">func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn <small>(exported,deprecated)</small></a>

```Go
func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn
```

NewServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. 

Deprecated: Use the Server in package net/http instead. 

##### <a name="httputil-type-ServerConn-Hijack">func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader) <small>(exported)</small></a>

```Go
func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)
```

Hijack detaches the ServerConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before Read has signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress. 

##### <a name="httputil-type-ServerConn-Close">func (sc *ServerConn) Close() error <small>(exported)</small></a>

```Go
func (sc *ServerConn) Close() error
```

Close calls Hijack and then also closes the underlying connection. 

##### <a name="httputil-type-ServerConn-Read">func (sc *ServerConn) Read() (*http.Request, error) <small>(exported)</small></a>

```Go
func (sc *ServerConn) Read() (*http.Request, error)
```

Read returns the next request on the wire. An ErrPersistEOF is returned if it is gracefully determined that there are no more requests (e.g. after the first request on an HTTP/1.0 connection, or after a Connection:close on a HTTP/1.1 connection). 

##### <a name="httputil-type-ServerConn-Pending">func (sc *ServerConn) Pending() int <small>(exported)</small></a>

```Go
func (sc *ServerConn) Pending() int
```

Pending returns the number of unanswered requests that have been received on the connection. 

##### <a name="httputil-type-ServerConn-Write">func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error <small>(exported)</small></a>

```Go
func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error
```

Write writes resp in response to req. To close the connection gracefully, set the Response.Close field to true. Write should be considered operational until it returns an error, regardless of any errors returned on the Read side. 

#### <a name="httputil-type-ClientConn">type ClientConn struct <small>(exported)</small></a>

```Go
type ClientConn struct {
	mu              sync.Mutex // read-write protects the following fields
	c               net.Conn
	r               *bufio.Reader
	re, we          error // read/write errors
	lastbody        io.ReadCloser
	nread, nwritten int
	pipereq         map[*http.Request]uint

	pipe     textproto.Pipeline
	writeReq func(*http.Request, io.Writer) error
}
```

ClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. 

Deprecated: Use Client or Transport in package net/http instead. 

##### <a name="httputil-type-ClientConn-NewClientConn">func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn <small>(exported,deprecated)</small></a>

```Go
func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn
```

NewClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. 

Deprecated: Use the Client or Transport in package net/http instead. 

##### <a name="httputil-type-ClientConn-NewProxyClientConn">func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn <small>(exported,deprecated)</small></a>

```Go
func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn
```

NewProxyClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. 

Deprecated: Use the Client or Transport in package net/http instead. 

##### <a name="httputil-type-ClientConn-Hijack">func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader) <small>(exported)</small></a>

```Go
func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader)
```

Hijack detaches the ClientConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before the user or Read have signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress. 

##### <a name="httputil-type-ClientConn-Close">func (cc *ClientConn) Close() error <small>(exported)</small></a>

```Go
func (cc *ClientConn) Close() error
```

Close calls Hijack and then also closes the underlying connection. 

##### <a name="httputil-type-ClientConn-Write">func (cc *ClientConn) Write(req *http.Request) error <small>(exported)</small></a>

```Go
func (cc *ClientConn) Write(req *http.Request) error
```

Write writes a request. An ErrPersistEOF error is returned if the connection has been closed in an HTTP keep-alive sense. If req.Close equals true, the keep-alive connection is logically closed after this request and the opposing server is informed. An ErrUnexpectedEOF indicates the remote closed the underlying TCP connection, which is usually considered as graceful close. 

##### <a name="httputil-type-ClientConn-Pending">func (cc *ClientConn) Pending() int <small>(exported)</small></a>

```Go
func (cc *ClientConn) Pending() int
```

Pending returns the number of unanswered requests that have been sent on the connection. 

##### <a name="httputil-type-ClientConn-Read">func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error) <small>(exported)</small></a>

```Go
func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error)
```

Read reads the next response from the wire. A valid response might be returned together with an ErrPersistEOF, which means that the remote requested that this be the last request serviced. Read can be called concurrently with Write, but not with another Read. 

##### <a name="httputil-type-ClientConn-Do">func (cc *ClientConn) Do(req *http.Request) (*http.Response, error) <small>(exported)</small></a>

```Go
func (cc *ClientConn) Do(req *http.Request) (*http.Response, error)
```

Do is convenience method that writes a request and reads a response. 

#### <a name="httputil-type-ReverseProxy">type ReverseProxy struct <small>(exported)</small></a>

```Go
type ReverseProxy struct {
	// Director must be a function which modifies
	// the request into a new request to be sent
	// using Transport. Its response is then copied
	// back to the original client unmodified.
	// Director must not access the provided Request
	// after returning.
	Director func(*http.Request)

	// The transport used to perform proxy requests.
	// If nil, http.DefaultTransport is used.
	Transport http.RoundTripper

	// FlushInterval specifies the flush interval
	// to flush to the client while copying the
	// response body.
	// If zero, no periodic flushing is done.
	// A negative value means to flush immediately
	// after each write to the client.
	// The FlushInterval is ignored when ReverseProxy
	// recognizes a response as a streaming response, or
	// if its ContentLength is -1; for such responses, writes
	// are flushed to the client immediately.
	FlushInterval time.Duration

	// ErrorLog specifies an optional logger for errors
	// that occur when attempting to proxy the request.
	// If nil, logging is done via the log package's standard logger.
	ErrorLog *log.Logger

	// BufferPool optionally specifies a buffer pool to
	// get byte slices for use by io.CopyBuffer when
	// copying HTTP response bodies.
	BufferPool BufferPool

	// ModifyResponse is an optional function that modifies the
	// Response from the backend. It is called if the backend
	// returns a response at all, with any HTTP status code.
	// If the backend is unreachable, the optional ErrorHandler is
	// called without any call to ModifyResponse.
	//
	// If ModifyResponse returns an error, ErrorHandler is called
	// with its error value. If ErrorHandler is nil, its default
	// implementation is used.
	ModifyResponse func(*http.Response) error

	// ErrorHandler is an optional function that handles errors
	// reaching the backend or errors from ModifyResponse.
	//
	// If nil, the default is to log the provided error and return
	// a 502 Status Bad Gateway response.
	ErrorHandler func(http.ResponseWriter, *http.Request, error)
}
```

ReverseProxy is an HTTP Handler that takes an incoming request and sends it to another server, proxying the response back to the client. 

ReverseProxy by default sets the client IP as the value of the X-Forwarded-For header. 

If an X-Forwarded-For header already exists, the client IP is appended to the existing values. As a special case, if the header exists in the Request.Header map but has a nil value (such as when set by the Director func), the X-Forwarded-For header is not modified. 

To prevent IP spoofing, be sure to delete any pre-existing X-Forwarded-For header coming from the client or an untrusted proxy. 

##### <a name="httputil-type-ReverseProxy-NewSingleHostReverseProxy">func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy <small>(exported)</small></a>

```Go
func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy
```

NewSingleHostReverseProxy returns a new ReverseProxy that routes URLs to the scheme, host, and base path provided in target. If the target's path is "/base" and the incoming request was for "/dir", the target request will be for /base/dir. NewSingleHostReverseProxy does not rewrite the Host header. To rewrite Host headers, use ReverseProxy directly with a custom Director policy. 

##### <a name="httputil-type-ReverseProxy-defaultErrorHandler">func (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error)</a>

```Go
func (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error)
```

##### <a name="httputil-type-ReverseProxy-getErrorHandler">func (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error)</a>

```Go
func (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error)
```

##### <a name="httputil-type-ReverseProxy-modifyResponse">func (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool</a>

```Go
func (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool
```

modifyResponse conditionally runs the optional ModifyResponse hook and reports whether the request should proceed. 

##### <a name="httputil-type-ReverseProxy-ServeHTTP">func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request) <small>(exported)</small></a>

```Go
func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)
```

##### <a name="httputil-type-ReverseProxy-flushInterval">func (p *ReverseProxy) flushInterval(res *http.Response) time.Duration</a>

```Go
func (p *ReverseProxy) flushInterval(res *http.Response) time.Duration
```

flushInterval returns the p.FlushInterval value, conditionally overriding its value for a specific request/response. 

##### <a name="httputil-type-ReverseProxy-copyResponse">func (p *ReverseProxy) copyResponse(dst io.Writer, src io.Reader, flushInterval time.Duration) error</a>

```Go
func (p *ReverseProxy) copyResponse(dst io.Writer, src io.Reader, flushInterval time.Duration) error
```

##### <a name="httputil-type-ReverseProxy-copyBuffer">func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error)</a>

```Go
func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error)
```

copyBuffer returns any write errors or non-EOF read errors, and the amount of bytes written. 

##### <a name="httputil-type-ReverseProxy-logf">func (p *ReverseProxy) logf(format string, args ...interface{})</a>

```Go
func (p *ReverseProxy) logf(format string, args ...interface{})
```

##### <a name="httputil-type-ReverseProxy-handleUpgradeResponse">func (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response)</a>

```Go
func (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response)
```

#### <a name="httputil-type-BufferPool">type BufferPool interface <small>(exported)</small></a>

```Go
type BufferPool interface {
	Get() []byte
	Put([]byte)
}
```

A BufferPool is an interface for getting and returning temporary byte slices for use by io.CopyBuffer. 

#### <a name="httputil-type-writeFlusher">type writeFlusher interface</a>

```Go
type writeFlusher interface {
	io.Writer
	http.Flusher
}
```

#### <a name="httputil-type-maxLatencyWriter">type maxLatencyWriter struct</a>

```Go
type maxLatencyWriter struct {
	dst     writeFlusher
	latency time.Duration // non-zero; negative means to flush immediately

	mu           sync.Mutex // protects t, flushPending, and dst.Flush
	t            *time.Timer
	flushPending bool
}
```

##### <a name="httputil-type-maxLatencyWriter-Write">func (m *maxLatencyWriter) Write(p []byte) (n int, err error)</a>

```Go
func (m *maxLatencyWriter) Write(p []byte) (n int, err error)
```

##### <a name="httputil-type-maxLatencyWriter-delayedFlush">func (m *maxLatencyWriter) delayedFlush()</a>

```Go
func (m *maxLatencyWriter) delayedFlush()
```

##### <a name="httputil-type-maxLatencyWriter-stop">func (m *maxLatencyWriter) stop()</a>

```Go
func (m *maxLatencyWriter) stop()
```

#### <a name="httputil-type-switchProtocolCopier">type switchProtocolCopier struct</a>

```Go
type switchProtocolCopier struct {
	user, backend io.ReadWriter
}
```

switchProtocolCopier exists so goroutines proxying data back and forth have nice names in stacks. 

##### <a name="httputil-type-switchProtocolCopier-copyFromBackend">func (c switchProtocolCopier) copyFromBackend(errc chan<- error)</a>

```Go
func (c switchProtocolCopier) copyFromBackend(errc chan<- error)
```

##### <a name="httputil-type-switchProtocolCopier-copyToBackend">func (c switchProtocolCopier) copyToBackend(errc chan<- error)</a>

```Go
func (c switchProtocolCopier) copyToBackend(errc chan<- error)
```

#### <a name="httputil-type-eofReader">type eofReader struct{}</a>

```Go
type eofReader struct{}
```

##### <a name="httputil-type-eofReader-Close">func (n eofReader) Close() error</a>

```Go
func (n eofReader) Close() error
```

##### <a name="httputil-type-eofReader-Read">func (n eofReader) Read([]byte) (int, error)</a>

```Go
func (n eofReader) Read([]byte) (int, error)
```

#### <a name="httputil-type-dumpTest">type dumpTest struct</a>

```Go
type dumpTest struct {
	// Either Req or GetReq can be set/nil but not both.
	Req    *http.Request
	GetReq func() *http.Request

	Body interface{} // optional []byte or func() io.ReadCloser to populate Req.Body

	WantDump    string
	WantDumpOut string
	MustError   bool // if true, the test is expected to throw an error
	NoBody      bool // if true, set DumpRequest{,Out} body to false
}
```

#### <a name="httputil-type-bufferPool">type bufferPool struct</a>

```Go
type bufferPool struct {
	get func() []byte
	put func([]byte)
}
```

##### <a name="httputil-type-bufferPool-Get">func (bp bufferPool) Get() []byte</a>

```Go
func (bp bufferPool) Get() []byte
```

##### <a name="httputil-type-bufferPool-Put">func (bp bufferPool) Put(v []byte)</a>

```Go
func (bp bufferPool) Put(v []byte)
```

#### <a name="httputil-type-RoundTripperFunc">type RoundTripperFunc func(*net/http.Request) (*net/http.Response, error)</a>

```Go
type RoundTripperFunc func(*http.Request) (*http.Response, error)
```

##### <a name="httputil-type-RoundTripperFunc-RoundTrip">func (fn RoundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)</a>

```Go
func (fn RoundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)
```

#### <a name="httputil-type-failingRoundTripper">type failingRoundTripper struct{}</a>

```Go
type failingRoundTripper struct{}
```

##### <a name="httputil-type-failingRoundTripper-RoundTrip">func (failingRoundTripper) RoundTrip(*http.Request) (*http.Response, error)</a>

```Go
func (failingRoundTripper) RoundTrip(*http.Request) (*http.Response, error)
```

#### <a name="httputil-type-staticResponseRoundTripper">type staticResponseRoundTripper struct</a>

```Go
type staticResponseRoundTripper struct{ res *http.Response }
```

##### <a name="httputil-type-staticResponseRoundTripper-RoundTrip">func (rt staticResponseRoundTripper) RoundTrip(*http.Request) (*http.Response, error)</a>

```Go
func (rt staticResponseRoundTripper) RoundTrip(*http.Request) (*http.Response, error)
```

#### <a name="httputil-type-staticTransport">type staticTransport struct</a>

```Go
type staticTransport struct {
	res *http.Response
}
```

##### <a name="httputil-type-staticTransport-RoundTrip">func (t *staticTransport) RoundTrip(r *http.Request) (*http.Response, error)</a>

```Go
func (t *staticTransport) RoundTrip(r *http.Request) (*http.Response, error)
```

#### <a name="httputil-type-result">type result struct</a>

```Go
type result struct {
	before, after string
}
```

#### <a name="httputil-type-roundTripperFunc">type roundTripperFunc func(req *net/http.Request) (*net/http.Response, error)</a>

```Go
type roundTripperFunc func(req *http.Request) (*http.Response, error)
```

##### <a name="httputil-type-roundTripperFunc-RoundTrip">func (fn roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)</a>

```Go
func (fn roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)
```

#### <a name="httputil-type-checkCloser">type checkCloser struct</a>

```Go
type checkCloser struct {
	closed bool
}
```

##### <a name="httputil-type-checkCloser-Close">func (cc *checkCloser) Close() error</a>

```Go
func (cc *checkCloser) Close() error
```

##### <a name="httputil-type-checkCloser-Read">func (cc *checkCloser) Read(b []byte) (int, error)</a>

```Go
func (cc *checkCloser) Read(b []byte) (int, error)
```

### <a name="httputil-func">Functions <small>(exported)</small></a>

#### <a name="httputil-func-drainBody">func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error)</a>

```Go
func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error)
```

drainBody reads all of b to memory and then returns two equivalent ReadClosers yielding the same bytes. 

It returns an error if the initial slurp of all bytes fails. It does not attempt to make the returned ReadClosers have identical error-matching behavior. 

#### <a name="httputil-func-outgoingLength">func outgoingLength(req *http.Request) int64</a>

```Go
func outgoingLength(req *http.Request) int64
```

outGoingLength is a copy of the unexported (*http.Request).outgoingLength method. 

#### <a name="httputil-func-DumpRequestOut">func DumpRequestOut(req *http.Request, body bool) ([]byte, error) <small>(exported)</small></a>

```Go
func DumpRequestOut(req *http.Request, body bool) ([]byte, error)
```

DumpRequestOut is like DumpRequest but for outgoing client requests. It includes any headers that the standard http.Transport adds, such as User-Agent. 

#### <a name="httputil-func-valueOrDefault">func valueOrDefault(value, def string) string</a>

```Go
func valueOrDefault(value, def string) string
```

Return value if nonempty, def otherwise. 

#### <a name="httputil-func-DumpRequest">func DumpRequest(req *http.Request, body bool) ([]byte, error) <small>(exported)</small></a>

```Go
func DumpRequest(req *http.Request, body bool) ([]byte, error)
```

DumpRequest returns the given request in its HTTP/1.x wire representation. It should only be used by servers to debug client requests. The returned representation is an approximation only; some details of the initial request are lost while parsing it into an http.Request. In particular, the order and case of header field names are lost. The order of values in multi-valued headers is kept intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their original binary representations. 

If body is true, DumpRequest also returns the body. To do so, it consumes req.Body and then replaces it with a new io.ReadCloser that yields the same bytes. If DumpRequest returns an error, the state of req is undefined. 

The documentation for http.Request.Write details which fields of req are included in the dump. 

#### <a name="httputil-func-DumpResponse">func DumpResponse(resp *http.Response, body bool) ([]byte, error) <small>(exported)</small></a>

```Go
func DumpResponse(resp *http.Response, body bool) ([]byte, error)
```

DumpResponse is like DumpRequest but dumps a response. 

#### <a name="httputil-func-NewChunkedReader">func NewChunkedReader(r io.Reader) io.Reader <small>(exported)</small></a>

```Go
func NewChunkedReader(r io.Reader) io.Reader
```

NewChunkedReader returns a new chunkedReader that translates the data read from r out of HTTP "chunked" format before returning it. The chunkedReader returns io.EOF when the final 0-length chunk is read. 

NewChunkedReader is not needed by normal applications. The http package automatically decodes chunking when reading response bodies. 

#### <a name="httputil-func-NewChunkedWriter">func NewChunkedWriter(w io.Writer) io.WriteCloser <small>(exported)</small></a>

```Go
func NewChunkedWriter(w io.Writer) io.WriteCloser
```

NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP "chunked" format before writing them to w. Closing the returned chunkedWriter sends the final 0-length chunk that marks the end of the stream but does not send the final CRLF that appears after trailers; trailers and the last CRLF must be written separately. 

NewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using NewChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong. 

#### <a name="httputil-func-singleJoiningSlash">func singleJoiningSlash(a, b string) string</a>

```Go
func singleJoiningSlash(a, b string) string
```

#### <a name="httputil-func-joinURLPath">func joinURLPath(a, b *url.URL) (path, rawpath string)</a>

```Go
func joinURLPath(a, b *url.URL) (path, rawpath string)
```

#### <a name="httputil-func-copyHeader">func copyHeader(dst, src http.Header)</a>

```Go
func copyHeader(dst, src http.Header)
```

#### <a name="httputil-func-shouldPanicOnCopyError">func shouldPanicOnCopyError(req *http.Request) bool</a>

```Go
func shouldPanicOnCopyError(req *http.Request) bool
```

shouldPanicOnCopyError reports whether the reverse proxy should panic with http.ErrAbortHandler. This is the right thing to do by default, but Go 1.10 and earlier did not, so existing unit tests weren't expecting panics. Only panic in our own tests, or when running under the HTTP server. 

#### <a name="httputil-func-removeConnectionHeaders">func removeConnectionHeaders(h http.Header)</a>

```Go
func removeConnectionHeaders(h http.Header)
```

removeConnectionHeaders removes hop-by-hop headers listed in the "Connection" header of h. See RFC 7230, section 6.1 

#### <a name="httputil-func-upgradeType">func upgradeType(h http.Header) string</a>

```Go
func upgradeType(h http.Header) string
```

#### <a name="httputil-func-TestDumpRequest">func TestDumpRequest(t *testing.T)</a>

```Go
func TestDumpRequest(t *testing.T)
```

#### <a name="httputil-func-deadline">func deadline(t *testing.T, defaultDelay, needed time.Duration) time.Time</a>

```Go
func deadline(t *testing.T, defaultDelay, needed time.Duration) time.Time
```

deadline returns the time which is needed before t.Deadline() if one is configured and it is s greater than needed in the future, otherwise defaultDelay from the current time. 

#### <a name="httputil-func-chunk">func chunk(s string) string</a>

```Go
func chunk(s string) string
```

#### <a name="httputil-func-mustParseURL">func mustParseURL(s string) *url.URL</a>

```Go
func mustParseURL(s string) *url.URL
```

#### <a name="httputil-func-mustNewRequest">func mustNewRequest(method, url string, body io.Reader) *http.Request</a>

```Go
func mustNewRequest(method, url string, body io.Reader) *http.Request
```

#### <a name="httputil-func-mustReadRequest">func mustReadRequest(s string) *http.Request</a>

```Go
func mustReadRequest(s string) *http.Request
```

#### <a name="httputil-func-TestDumpResponse">func TestDumpResponse(t *testing.T)</a>

```Go
func TestDumpResponse(t *testing.T)
```

#### <a name="httputil-func-TestDumpRequestOutIssue38352">func TestDumpRequestOutIssue38352(t *testing.T)</a>

```Go
func TestDumpRequestOutIssue38352(t *testing.T)
```

Issue 38352: Check for deadlock on cancelled requests. 

#### <a name="httputil-func-init">func init()</a>

```Go
func init()
```

#### <a name="httputil-func-TestReverseProxy">func TestReverseProxy(t *testing.T)</a>

```Go
func TestReverseProxy(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyStripHeadersPresentInConnection">func TestReverseProxyStripHeadersPresentInConnection(t *testing.T)</a>

```Go
func TestReverseProxyStripHeadersPresentInConnection(t *testing.T)
```

Issue 16875: remove any proxied headers mentioned in the "Connection" header value. 

#### <a name="httputil-func-TestXForwardedFor">func TestXForwardedFor(t *testing.T)</a>

```Go
func TestXForwardedFor(t *testing.T)
```

#### <a name="httputil-func-TestXForwardedFor_Omit">func TestXForwardedFor_Omit(t *testing.T)</a>

```Go
func TestXForwardedFor_Omit(t *testing.T)
```

Issue 38079: don't append to X-Forwarded-For if it's present but nil 

#### <a name="httputil-func-TestReverseProxyQuery">func TestReverseProxyQuery(t *testing.T)</a>

```Go
func TestReverseProxyQuery(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyFlushInterval">func TestReverseProxyFlushInterval(t *testing.T)</a>

```Go
func TestReverseProxyFlushInterval(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyFlushIntervalHeaders">func TestReverseProxyFlushIntervalHeaders(t *testing.T)</a>

```Go
func TestReverseProxyFlushIntervalHeaders(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyCancellation">func TestReverseProxyCancellation(t *testing.T)</a>

```Go
func TestReverseProxyCancellation(t *testing.T)
```

#### <a name="httputil-func-req">func req(t *testing.T, v string) *http.Request</a>

```Go
func req(t *testing.T, v string) *http.Request
```

#### <a name="httputil-func-TestNilBody">func TestNilBody(t *testing.T)</a>

```Go
func TestNilBody(t *testing.T)
```

Issue 12344 

#### <a name="httputil-func-TestUserAgentHeader">func TestUserAgentHeader(t *testing.T)</a>

```Go
func TestUserAgentHeader(t *testing.T)
```

Issue 15524 

#### <a name="httputil-func-TestReverseProxyGetPutBuffer">func TestReverseProxyGetPutBuffer(t *testing.T)</a>

```Go
func TestReverseProxyGetPutBuffer(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxy_Post">func TestReverseProxy_Post(t *testing.T)</a>

```Go
func TestReverseProxy_Post(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxy_NilBody">func TestReverseProxy_NilBody(t *testing.T)</a>

```Go
func TestReverseProxy_NilBody(t *testing.T)
```

Issue 16036: send a Request with a nil Body when possible 

#### <a name="httputil-func-TestReverseProxy_AllocatedHeader">func TestReverseProxy_AllocatedHeader(t *testing.T)</a>

```Go
func TestReverseProxy_AllocatedHeader(t *testing.T)
```

Issue 33142: always allocate the request headers 

#### <a name="httputil-func-TestReverseProxyModifyResponse">func TestReverseProxyModifyResponse(t *testing.T)</a>

```Go
func TestReverseProxyModifyResponse(t *testing.T)
```

Issue 14237. Test ModifyResponse and that an error from it causes the proxy to return StatusBadGateway, or StatusOK otherwise. 

#### <a name="httputil-func-TestReverseProxyErrorHandler">func TestReverseProxyErrorHandler(t *testing.T)</a>

```Go
func TestReverseProxyErrorHandler(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxy_CopyBuffer">func TestReverseProxy_CopyBuffer(t *testing.T)</a>

```Go
func TestReverseProxy_CopyBuffer(t *testing.T)
```

Issue 16659: log errors from short read 

#### <a name="httputil-func-BenchmarkServeHTTP">func BenchmarkServeHTTP(b *testing.B)</a>

```Go
func BenchmarkServeHTTP(b *testing.B)
```

#### <a name="httputil-func-TestServeHTTPDeepCopy">func TestServeHTTPDeepCopy(t *testing.T)</a>

```Go
func TestServeHTTPDeepCopy(t *testing.T)
```

#### <a name="httputil-func-TestClonesRequestHeaders">func TestClonesRequestHeaders(t *testing.T)</a>

```Go
func TestClonesRequestHeaders(t *testing.T)
```

Issue 18327: verify we always do a deep copy of the Request.Header map before any mutations. 

#### <a name="httputil-func-TestModifyResponseClosesBody">func TestModifyResponseClosesBody(t *testing.T)</a>

```Go
func TestModifyResponseClosesBody(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxy_PanicBodyError">func TestReverseProxy_PanicBodyError(t *testing.T)</a>

```Go
func TestReverseProxy_PanicBodyError(t *testing.T)
```

Issue 23643: panic on body copy error 

#### <a name="httputil-func-TestSelectFlushInterval">func TestSelectFlushInterval(t *testing.T)</a>

```Go
func TestSelectFlushInterval(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyWebSocket">func TestReverseProxyWebSocket(t *testing.T)</a>

```Go
func TestReverseProxyWebSocket(t *testing.T)
```

#### <a name="httputil-func-TestReverseProxyWebSocketCancelation">func TestReverseProxyWebSocketCancelation(t *testing.T)</a>

```Go
func TestReverseProxyWebSocketCancelation(t *testing.T)
```

#### <a name="httputil-func-TestUnannouncedTrailer">func TestUnannouncedTrailer(t *testing.T)</a>

```Go
func TestUnannouncedTrailer(t *testing.T)
```

#### <a name="httputil-func-TestSingleJoinSlash">func TestSingleJoinSlash(t *testing.T)</a>

```Go
func TestSingleJoinSlash(t *testing.T)
```

#### <a name="httputil-func-TestJoinURLPath">func TestJoinURLPath(t *testing.T)</a>

```Go
func TestJoinURLPath(t *testing.T)
```

## <a name="httputil_test">Package httputil_test <small>(new page)</small></a>

## Index

- [Constants](#httputil_test-const)
  - [const body](#httputil_test-const-body)
  - [const body](#httputil_test-const-body)
  - [const body](#httputil_test-const-body)
- [Functions](#httputil_test-func)
  - [func ExampleDumpRequest()](#httputil_test-func-ExampleDumpRequest)
  - [func ExampleDumpRequestOut()](#httputil_test-func-ExampleDumpRequestOut)
  - [func ExampleDumpResponse()](#httputil_test-func-ExampleDumpResponse)
  - [func ExampleReverseProxy()](#httputil_test-func-ExampleReverseProxy)

### <a name="httputil_test-const">Constants</a>

#### <a name="httputil_test-const-body">const body</a>

```Go
const body = "Go is a general-purpose language designed with systems programming in mind."
```

#### <a name="httputil_test-const-body">const body</a>

```Go
const body = "Go is a general-purpose language designed with systems programming in mind."
```

#### <a name="httputil_test-const-body">const body</a>

```Go
const body = "Go is a general-purpose language designed with systems programming in mind."
```

### <a name="httputil_test-func">Functions</a>

#### <a name="httputil_test-func-ExampleDumpRequest">func ExampleDumpRequest()</a>

```Go
func ExampleDumpRequest()
```

#### <a name="httputil_test-func-ExampleDumpRequestOut">func ExampleDumpRequestOut()</a>

```Go
func ExampleDumpRequestOut()
```

#### <a name="httputil_test-func-ExampleDumpResponse">func ExampleDumpResponse()</a>

```Go
func ExampleDumpResponse()
```

#### <a name="httputil_test-func-ExampleReverseProxy">func ExampleReverseProxy()</a>

```Go
func ExampleReverseProxy()
```

## <a name="internal">Package internal <small>(new page,exported)</small></a>

Package internal contains HTTP internals shared by net/http and net/http/httputil. 

## Index

- [Constants](#internal-const)
  - [const maxLineLength](#internal-const-maxLineLength)
  - [const chunk1](#internal-const-chunk1)
  - [const chunk2](#internal-const-chunk2)
  - [const fillBufChunk](#internal-const-fillBufChunk)
  - [const shortChunk](#internal-const-shortChunk)
- [Variables](#internal-var)
  - [var ErrLineTooLong](#internal-var-ErrLineTooLong)
  - [var line](#internal-var-line)
  - [var n0](#internal-var-n0)
  - [var LocalhostCert](#internal-var-LocalhostCert)
  - [var LocalhostKey](#internal-var-LocalhostKey)
  - [var b](#internal-var-b)
  - [var b](#internal-var-b)
  - [var b](#internal-var-b)
  - [var buf](#internal-var-buf)
- [Types](#internal-type)
  - [type chunkedReader struct](#internal-type-chunkedReader)
    - [func (cr *chunkedReader) beginChunk()](#internal-type-chunkedReader-beginChunk)
    - [func (cr *chunkedReader) chunkHeaderAvailable() bool](#internal-type-chunkedReader-chunkHeaderAvailable)
    - [func (cr *chunkedReader) Read(b []uint8) (n int, err error)](#internal-type-chunkedReader-Read)
  - [type chunkedWriter struct](#internal-type-chunkedWriter)
    - [func (cw *chunkedWriter) Write(data []byte) (n int, err error)](#internal-type-chunkedWriter-Write)
    - [func (cw *chunkedWriter) Close() error](#internal-type-chunkedWriter-Close)
  - [type FlushAfterChunkWriter struct](#internal-type-FlushAfterChunkWriter)
  - [type testCase struct](#internal-type-testCase)
- [Functions](#internal-func)
  - [func NewChunkedReader(r io.Reader) io.Reader](#internal-func-NewChunkedReader)
  - [func readChunkLine(b *bufio.Reader) ([]byte, error)](#internal-func-readChunkLine)
  - [func trimTrailingWhitespace(b []byte) []byte](#internal-func-trimTrailingWhitespace)
  - [func isASCIISpace(b byte) bool](#internal-func-isASCIISpace)
  - [func removeChunkExtension(p []byte) ([]byte, error)](#internal-func-removeChunkExtension)
  - [func NewChunkedWriter(w io.Writer) io.WriteCloser](#internal-func-NewChunkedWriter)
  - [func parseHexUint(v []byte) (n uint64, err error)](#internal-func-parseHexUint)
  - [func testingKey(s string) string](#internal-func-testingKey)
  - [func TestChunk(t *testing.T)](#internal-func-TestChunk)
  - [func TestChunkReadMultiple(t *testing.T)](#internal-func-TestChunkReadMultiple)
  - [func TestChunkReaderAllocs(t *testing.T)](#internal-func-TestChunkReaderAllocs)
  - [func TestParseHexUint(t *testing.T)](#internal-func-TestParseHexUint)
  - [func TestChunkReadingIgnoresExtensions(t *testing.T)](#internal-func-TestChunkReadingIgnoresExtensions)
  - [func TestChunkReadPartial(t *testing.T)](#internal-func-TestChunkReadPartial)

### <a name="internal-const">Constants <small>(exported)</small></a>

#### <a name="internal-const-maxLineLength">const maxLineLength</a>

```Go
const maxLineLength = 4096 // assumed <= bufio.defaultBufSize

```

#### <a name="internal-const-chunk1">const chunk1</a>

```Go
const chunk1 = "hello, "
```

#### <a name="internal-const-chunk2">const chunk2</a>

```Go
const chunk2 = "world! 0123456789abcdef"
```

#### <a name="internal-const-fillBufChunk">const fillBufChunk</a>

```Go
const fillBufChunk = "0123456789a"
```

fillBufChunk is 11 bytes + 3 bytes header + 2 bytes footer = 16 bytes, the same as the bufio ReaderSize below (the minimum), so even though we're going to try to Read with a buffer larger enough to also receive "foo", the second chunk header won't be read yet. 

#### <a name="internal-const-shortChunk">const shortChunk</a>

```Go
const shortChunk = "foo"
```

### <a name="internal-var">Variables <small>(exported)</small></a>

#### <a name="internal-var-ErrLineTooLong">var ErrLineTooLong <small>(exported)</small></a>

```Go
var ErrLineTooLong = errors.New("header line too long")
```

#### <a name="internal-var-line">var line</a>

```Go
var line []byte
```

chunk-size CRLF 

#### <a name="internal-var-n0">var n0</a>

```Go
var n0 int
```

#### <a name="internal-var-LocalhostCert">var LocalhostCert <small>(exported)</small></a>

```Go
var LocalhostCert = []byte(`-----BEGIN CERTIFICATE-----
MIICEzCCAXygAwIBAgIQMIMChMLGrR+QvmQvpwAU6zANBgkqhkiG9w0BAQsFADAS
MRAwDgYDVQQKEwdBY21lIENvMCAXDTcwMDEwMTAwMDAwMFoYDzIwODQwMTI5MTYw
MDAwWjASMRAwDgYDVQQKEwdBY21lIENvMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
iQKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9SjY1bIw4
iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZBl2+XsDul
rKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQABo2gwZjAO
BgNVHQ8BAf8EBAMCAqQwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDwYDVR0TAQH/BAUw
AwEB/zAuBgNVHREEJzAlggtleGFtcGxlLmNvbYcEfwAAAYcQAAAAAAAAAAAAAAAA
AAAAATANBgkqhkiG9w0BAQsFAAOBgQCEcetwO59EWk7WiJsG4x8SY+UIAA+flUI9
tyC4lNhbcF2Idq9greZwbYCqTTTr2XiRNSMLCOjKyI7ukPoPjo16ocHj+P3vZGfs
h1fIw3cSS2OolhloGw/XM6RWPWtPAlGykKLciQrBru5NAPvCMsb/I1DAceTiotQM
fblo6RBxUQ==
-----END CERTIFICATE-----`)
```

LocalhostCert is a PEM-encoded TLS cert with SAN IPs "127.0.0.1" and "[::1]", expiring at Jan 29 16:00:00 2084 GMT. generated from src/crypto/tls: go run generate_cert.go  --rsa-bits 1024 --host 127.0.0.1,::1,example.com --ca --start-date "Jan 1 00:00:00 1970" --duration=1000000h 

#### <a name="internal-var-LocalhostKey">var LocalhostKey <small>(exported)</small></a>

```Go
var LocalhostKey = []byte(testingKey(`-----BEGIN RSA TESTING KEY-----
MIICXgIBAAKBgQDuLnQAI3mDgey3VBzWnB2L39JUU4txjeVE6myuDqkM/uGlfjb9
SjY1bIw4iA5sBBZzHi3z0h1YV8QPuxEbi4nW91IJm2gsvvZhIrCHS3l6afab4pZB
l2+XsDulrKBxKKtD1rGxlG4LjncdabFn9gvLZad2bSysqz/qTAUStTvqJQIDAQAB
AoGAGRzwwir7XvBOAy5tM/uV6e+Zf6anZzus1s1Y1ClbjbE6HXbnWWF/wbZGOpet
3Zm4vD6MXc7jpTLryzTQIvVdfQbRc6+MUVeLKwZatTXtdZrhu+Jk7hx0nTPy8Jcb
uJqFk541aEw+mMogY/xEcfbWd6IOkp+4xqjlFLBEDytgbIECQQDvH/E6nk+hgN4H
qzzVtxxr397vWrjrIgPbJpQvBsafG7b0dA4AFjwVbFLmQcj2PprIMmPcQrooz8vp
jy4SHEg1AkEA/v13/5M47K9vCxmb8QeD/asydfsgS5TeuNi8DoUBEmiSJwma7FXY
fFUtxuvL7XvjwjN5B30pNEbc6Iuyt7y4MQJBAIt21su4b3sjXNueLKH85Q+phy2U
fQtuUE9txblTu14q3N7gHRZB4ZMhFYyDy8CKrN2cPg/Fvyt0Xlp/DoCzjA0CQQDU
y2ptGsuSmgUtWj3NM9xuwYPm+Z/F84K6+ARYiZ6PYj013sovGKUFfYAqVXVlxtIX
qyUBnu3X9ps8ZfjLZO7BAkEAlT4R5Yl6cGhaJQYZHOde3JEMhNRcVFMO8dJDaFeo
f9Oeos0UUothgiDktdQHxdNEwLjQf7lJJBzV+5OtwswCWA==
-----END RSA TESTING KEY-----`))
```

LocalhostKey is the private key for localhostCert. 

#### <a name="internal-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="internal-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="internal-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="internal-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

### <a name="internal-type">Types <small>(exported)</small></a>

#### <a name="internal-type-chunkedReader">type chunkedReader struct</a>

```Go
type chunkedReader struct {
	r        *bufio.Reader
	n        uint64 // unread bytes in chunk
	err      error
	buf      [2]byte
	checkEnd bool // whether need to check for \r\n chunk footer
}
```

##### <a name="internal-type-chunkedReader-beginChunk">func (cr *chunkedReader) beginChunk()</a>

```Go
func (cr *chunkedReader) beginChunk()
```

##### <a name="internal-type-chunkedReader-chunkHeaderAvailable">func (cr *chunkedReader) chunkHeaderAvailable() bool</a>

```Go
func (cr *chunkedReader) chunkHeaderAvailable() bool
```

##### <a name="internal-type-chunkedReader-Read">func (cr *chunkedReader) Read(b []uint8) (n int, err error)</a>

```Go
func (cr *chunkedReader) Read(b []uint8) (n int, err error)
```

#### <a name="internal-type-chunkedWriter">type chunkedWriter struct</a>

```Go
type chunkedWriter struct {
	Wire io.Writer
}
```

Writing to chunkedWriter translates to writing in HTTP chunked Transfer Encoding wire format to the underlying Wire chunkedWriter. 

##### <a name="internal-type-chunkedWriter-Write">func (cw *chunkedWriter) Write(data []byte) (n int, err error)</a>

```Go
func (cw *chunkedWriter) Write(data []byte) (n int, err error)
```

Write the contents of data as one chunk to Wire. NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has a bug since it does not check for success of io.WriteString 

##### <a name="internal-type-chunkedWriter-Close">func (cw *chunkedWriter) Close() error</a>

```Go
func (cw *chunkedWriter) Close() error
```

#### <a name="internal-type-FlushAfterChunkWriter">type FlushAfterChunkWriter struct <small>(exported)</small></a>

```Go
type FlushAfterChunkWriter struct {
	*bufio.Writer
}
```

FlushAfterChunkWriter signals from the caller of NewChunkedWriter that each chunk should be followed by a flush. It is used by the http.Transport code to keep the buffering behavior for headers and trailers, but flush out chunks aggressively in the middle for request bodies which may be generated slowly. See Issue 6574. 

#### <a name="internal-type-testCase">type testCase struct</a>

```Go
type testCase struct {
	in      string
	want    uint64
	wantErr string
}
```

### <a name="internal-func">Functions <small>(exported)</small></a>

#### <a name="internal-func-NewChunkedReader">func NewChunkedReader(r io.Reader) io.Reader <small>(exported)</small></a>

```Go
func NewChunkedReader(r io.Reader) io.Reader
```

NewChunkedReader returns a new chunkedReader that translates the data read from r out of HTTP "chunked" format before returning it. The chunkedReader returns io.EOF when the final 0-length chunk is read. 

NewChunkedReader is not needed by normal applications. The http package automatically decodes chunking when reading response bodies. 

#### <a name="internal-func-readChunkLine">func readChunkLine(b *bufio.Reader) ([]byte, error)</a>

```Go
func readChunkLine(b *bufio.Reader) ([]byte, error)
```

Read a line of bytes (up to \n) from b. Give up if the line exceeds maxLineLength. The returned bytes are owned by the bufio.Reader so they are only valid until the next bufio read. 

#### <a name="internal-func-trimTrailingWhitespace">func trimTrailingWhitespace(b []byte) []byte</a>

```Go
func trimTrailingWhitespace(b []byte) []byte
```

#### <a name="internal-func-isASCIISpace">func isASCIISpace(b byte) bool</a>

```Go
func isASCIISpace(b byte) bool
```

#### <a name="internal-func-removeChunkExtension">func removeChunkExtension(p []byte) ([]byte, error)</a>

```Go
func removeChunkExtension(p []byte) ([]byte, error)
```

removeChunkExtension removes any chunk-extension from p. For example, 

```
"0" => "0"
"0;token" => "0"
"0;token=val" => "0"
`0;token="quoted string"` => "0"

```
#### <a name="internal-func-NewChunkedWriter">func NewChunkedWriter(w io.Writer) io.WriteCloser <small>(exported)</small></a>

```Go
func NewChunkedWriter(w io.Writer) io.WriteCloser
```

NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP "chunked" format before writing them to w. Closing the returned chunkedWriter sends the final 0-length chunk that marks the end of the stream but does not send the final CRLF that appears after trailers; trailers and the last CRLF must be written separately. 

NewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using newChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong. 

#### <a name="internal-func-parseHexUint">func parseHexUint(v []byte) (n uint64, err error)</a>

```Go
func parseHexUint(v []byte) (n uint64, err error)
```

#### <a name="internal-func-testingKey">func testingKey(s string) string</a>

```Go
func testingKey(s string) string
```

#### <a name="internal-func-TestChunk">func TestChunk(t *testing.T)</a>

```Go
func TestChunk(t *testing.T)
```

#### <a name="internal-func-TestChunkReadMultiple">func TestChunkReadMultiple(t *testing.T)</a>

```Go
func TestChunkReadMultiple(t *testing.T)
```

#### <a name="internal-func-TestChunkReaderAllocs">func TestChunkReaderAllocs(t *testing.T)</a>

```Go
func TestChunkReaderAllocs(t *testing.T)
```

#### <a name="internal-func-TestParseHexUint">func TestParseHexUint(t *testing.T)</a>

```Go
func TestParseHexUint(t *testing.T)
```

#### <a name="internal-func-TestChunkReadingIgnoresExtensions">func TestChunkReadingIgnoresExtensions(t *testing.T)</a>

```Go
func TestChunkReadingIgnoresExtensions(t *testing.T)
```

#### <a name="internal-func-TestChunkReadPartial">func TestChunkReadPartial(t *testing.T)</a>

```Go
func TestChunkReadPartial(t *testing.T)
```

Issue 17355: ChunkedReader shouldn't block waiting for more data if it can return something. 

## <a name="pprof">Package pprof <small>(new page,exported)</small></a>

Package pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool. 

The package is typically only imported for the side effect of registering its HTTP handlers. The handled paths all begin with /debug/pprof/. 

To use pprof, link this package into your program: 

```
import _ "net/http/pprof"

```
If your application is not already running an http server, you need to start one. Add "net/http" and "log" to your imports and the following code to your main function: 

```
go func() {
	log.Println(http.ListenAndServe("localhost:6060", nil))
}()

```
If you are not using DefaultServeMux, you will have to register handlers with the mux you are using. 

Then use the pprof tool to look at the heap profile: 

```
go tool pprof [http://localhost:6060/debug/pprof/heap](http://localhost:6060/debug/pprof/heap)

```
Or to look at a 30-second CPU profile: 

```
go tool pprof [http://localhost:6060/debug/pprof/profile?seconds=30](http://localhost:6060/debug/pprof/profile?seconds=30)

```
Or to look at the goroutine blocking profile, after calling runtime.SetBlockProfileRate in your program: 

```
go tool pprof [http://localhost:6060/debug/pprof/block](http://localhost:6060/debug/pprof/block)

```
Or to look at the holders of contended mutexes, after calling runtime.SetMutexProfileFraction in your program: 

```
go tool pprof [http://localhost:6060/debug/pprof/mutex](http://localhost:6060/debug/pprof/mutex)

```
The package also exports a handler that serves execution trace data for the "go tool trace" command. To collect a 5-second execution trace: 

```
wget -O trace.out [http://localhost:6060/debug/pprof/trace?seconds=5](http://localhost:6060/debug/pprof/trace?seconds=5)
go tool trace trace.out

```
To view all available profiles, open [http://localhost:6060/debug/pprof/](http://localhost:6060/debug/pprof/) in your browser. 

For a study of the facility in action, visit 

```
[https://blog.golang.org/2011/06/profiling-go-programs.html](https://blog.golang.org/2011/06/profiling-go-programs.html)

```
## Index

- [Variables](#pprof-var)
  - [var buf](#pprof-var-buf)
  - [var b](#pprof-var-b)
  - [var buf](#pprof-var-buf)
  - [var profileSupportsDelta](#pprof-var-profileSupportsDelta)
  - [var profileDescriptions](#pprof-var-profileDescriptions)
  - [var profiles](#pprof-var-profiles)
  - [var b](#pprof-var-b)
  - [var Sink](#pprof-var-Sink)
  - [var wg](#pprof-var-wg)
  - [var srv](#pprof-var-srv)
- [Types](#pprof-type)
  - [type handler string](#pprof-type-handler)
    - [func (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request)](#pprof-type-handler-ServeHTTP)
    - [func (name handler) serveDeltaProfile(w http.ResponseWriter, r *http.Request, p *pprof.Profile, secStr string)](#pprof-type-handler-serveDeltaProfile)
  - [type profileEntry struct](#pprof-type-profileEntry)
- [Functions](#pprof-func)
  - [func init()](#pprof-func-init)
  - [func Cmdline(w http.ResponseWriter, r *http.Request)](#pprof-func-Cmdline)
  - [func sleep(r *http.Request, d time.Duration)](#pprof-func-sleep)
  - [func durationExceedsWriteTimeout(r *http.Request, seconds float64) bool](#pprof-func-durationExceedsWriteTimeout)
  - [func serveError(w http.ResponseWriter, status int, txt string)](#pprof-func-serveError)
  - [func Profile(w http.ResponseWriter, r *http.Request)](#pprof-func-Profile)
  - [func Trace(w http.ResponseWriter, r *http.Request)](#pprof-func-Trace)
  - [func Symbol(w http.ResponseWriter, r *http.Request)](#pprof-func-Symbol)
  - [func Handler(name string) http.Handler](#pprof-func-Handler)
  - [func collectProfile(p *pprof.Profile) (*profile.Profile, error)](#pprof-func-collectProfile)
  - [func Index(w http.ResponseWriter, r *http.Request)](#pprof-func-Index)
  - [func indexTmplExecute(w io.Writer, profiles []profileEntry) error](#pprof-func-indexTmplExecute)
  - [func TestDescriptions(t *testing.T)](#pprof-func-TestDescriptions)
  - [func TestHandlers(t *testing.T)](#pprof-func-TestHandlers)
  - [func mutexHog1(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)](#pprof-func-mutexHog1)
  - [func mutexHog2(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)](#pprof-func-mutexHog2)
  - [func mutexHog(duration time.Duration, hogger func(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration))](#pprof-func-mutexHog)
  - [func TestDeltaProfile(t *testing.T)](#pprof-func-TestDeltaProfile)
  - [func query(endpoint string) (*profile.Profile, error)](#pprof-func-query)
  - [func seen(p *profile.Profile, fname string) bool](#pprof-func-seen)

### <a name="pprof-var">Variables <small>(exported)</small></a>

#### <a name="pprof-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

We have to read the whole POST body before writing any output. Buffer the output here. 

#### <a name="pprof-var-b">var b</a>

```Go
var b *bufio.Reader
```

#### <a name="pprof-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="pprof-var-profileSupportsDelta">var profileSupportsDelta</a>

```Go
var profileSupportsDelta = ...
```

#### <a name="pprof-var-profileDescriptions">var profileDescriptions</a>

```Go
var profileDescriptions = ...
```

#### <a name="pprof-var-profiles">var profiles</a>

```Go
var profiles []profileEntry
```

#### <a name="pprof-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="pprof-var-Sink">var Sink</a>

```Go
var Sink uint32
```

#### <a name="pprof-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="pprof-var-srv">var srv</a>

```Go
var srv = httptest.NewServer(nil)
```

### <a name="pprof-type">Types <small>(exported)</small></a>

#### <a name="pprof-type-handler">type handler string</a>

```Go
type handler string
```

##### <a name="pprof-type-handler-ServeHTTP">func (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request)</a>

```Go
func (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request)
```

##### <a name="pprof-type-handler-serveDeltaProfile">func (name handler) serveDeltaProfile(w http.ResponseWriter, r *http.Request, p *pprof.Profile, secStr string)</a>

```Go
func (name handler) serveDeltaProfile(w http.ResponseWriter, r *http.Request, p *pprof.Profile, secStr string)
```

#### <a name="pprof-type-profileEntry">type profileEntry struct</a>

```Go
type profileEntry struct {
	Name  string
	Href  string
	Desc  string
	Count int
}
```

### <a name="pprof-func">Functions <small>(exported)</small></a>

#### <a name="pprof-func-init">func init()</a>

```Go
func init()
```

#### <a name="pprof-func-Cmdline">func Cmdline(w http.ResponseWriter, r *http.Request) <small>(exported)</small></a>

```Go
func Cmdline(w http.ResponseWriter, r *http.Request)
```

Cmdline responds with the running program's command line, with arguments separated by NUL bytes. The package initialization registers it as /debug/pprof/cmdline. 

#### <a name="pprof-func-sleep">func sleep(r *http.Request, d time.Duration)</a>

```Go
func sleep(r *http.Request, d time.Duration)
```

#### <a name="pprof-func-durationExceedsWriteTimeout">func durationExceedsWriteTimeout(r *http.Request, seconds float64) bool</a>

```Go
func durationExceedsWriteTimeout(r *http.Request, seconds float64) bool
```

#### <a name="pprof-func-serveError">func serveError(w http.ResponseWriter, status int, txt string)</a>

```Go
func serveError(w http.ResponseWriter, status int, txt string)
```

#### <a name="pprof-func-Profile">func Profile(w http.ResponseWriter, r *http.Request) <small>(exported)</small></a>

```Go
func Profile(w http.ResponseWriter, r *http.Request)
```

Profile responds with the pprof-formatted cpu profile. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified. The package initialization registers it as /debug/pprof/profile. 

#### <a name="pprof-func-Trace">func Trace(w http.ResponseWriter, r *http.Request) <small>(exported)</small></a>

```Go
func Trace(w http.ResponseWriter, r *http.Request)
```

Trace responds with the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified. The package initialization registers it as /debug/pprof/trace. 

#### <a name="pprof-func-Symbol">func Symbol(w http.ResponseWriter, r *http.Request) <small>(exported)</small></a>

```Go
func Symbol(w http.ResponseWriter, r *http.Request)
```

Symbol looks up the program counters listed in the request, responding with a table mapping program counters to function names. The package initialization registers it as /debug/pprof/symbol. 

#### <a name="pprof-func-Handler">func Handler(name string) http.Handler <small>(exported)</small></a>

```Go
func Handler(name string) http.Handler
```

Handler returns an HTTP handler that serves the named profile. 

#### <a name="pprof-func-collectProfile">func collectProfile(p *pprof.Profile) (*profile.Profile, error)</a>

```Go
func collectProfile(p *pprof.Profile) (*profile.Profile, error)
```

#### <a name="pprof-func-Index">func Index(w http.ResponseWriter, r *http.Request) <small>(exported)</small></a>

```Go
func Index(w http.ResponseWriter, r *http.Request)
```

Index responds with the pprof-formatted profile named by the request. For example, "/debug/pprof/heap" serves the "heap" profile. Index responds to a request for "/debug/pprof/" with an HTML page listing the available profiles. 

#### <a name="pprof-func-indexTmplExecute">func indexTmplExecute(w io.Writer, profiles []profileEntry) error</a>

```Go
func indexTmplExecute(w io.Writer, profiles []profileEntry) error
```

#### <a name="pprof-func-TestDescriptions">func TestDescriptions(t *testing.T)</a>

```Go
func TestDescriptions(t *testing.T)
```

TestDescriptions checks that the profile names under runtime/pprof package have a key in the description map. 

#### <a name="pprof-func-TestHandlers">func TestHandlers(t *testing.T)</a>

```Go
func TestHandlers(t *testing.T)
```

#### <a name="pprof-func-mutexHog1">func mutexHog1(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)</a>

```Go
func mutexHog1(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)
```

#### <a name="pprof-func-mutexHog2">func mutexHog2(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)</a>

```Go
func mutexHog2(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)
```

mutexHog2 is almost identical to mutexHog but we keep them separate in order to distinguish them with function names in the stack trace. We make them slightly different, using Sink, because otherwise gccgo -c opt will merge them. 

#### <a name="pprof-func-mutexHog">func mutexHog(duration time.Duration, hogger func(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration))</a>

```Go
func mutexHog(duration time.Duration, hogger func(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration))
```

mutexHog starts multiple goroutines that runs the given hogger function for the specified duration. The hogger function will be given two mutexes to lock & unlock. 

#### <a name="pprof-func-TestDeltaProfile">func TestDeltaProfile(t *testing.T)</a>

```Go
func TestDeltaProfile(t *testing.T)
```

#### <a name="pprof-func-query">func query(endpoint string) (*profile.Profile, error)</a>

```Go
func query(endpoint string) (*profile.Profile, error)
```

#### <a name="pprof-func-seen">func seen(p *profile.Profile, fname string) bool</a>

```Go
func seen(p *profile.Profile, fname string) bool
```

seen returns true if the profile includes samples whose stacks include the specified function name (fname). 

## <a name="net-http_test">Package http_test <small>(new page)</small></a>

## Index

- [Constants](#net-http_test-const)
  - [const body](#net-http_test-const-body)
  - [const fakeURL](#net-http_test-const-fakeURL)
  - [const serverName](#net-http_test-const-serverName)
  - [const timeout](#net-http_test-const-timeout)
  - [const failTime](#net-http_test-const-failTime)
  - [const ua](#net-http_test-const-ua)
  - [const xfoo](#net-http_test-const-xfoo)
  - [const wantBody](#net-http_test-const-wantBody)
  - [const h1Mode](#net-http_test-const-h1Mode)
  - [const h2Mode](#net-http_test-const-h2Mode)
  - [const body](#net-http_test-const-body)
  - [const body](#net-http_test-const-body)
  - [const reqBody](#net-http_test-const-reqBody)
  - [const resBody](#net-http_test-const-resBody)
  - [const N](#net-http_test-const-N)
  - [const msg](#net-http_test-const-msg)
  - [const size](#net-http_test-const-size)
  - [const testFile](#net-http_test-const-testFile)
  - [const testFileLen](#net-http_test-const-testFileLen)
  - [const dirListPrefix](#net-http_test-const-dirListPrefix)
  - [const dirListSuffix](#net-http_test-const-dirListSuffix)
  - [const contents](#net-http_test-const-contents)
  - [const ctype](#net-http_test-const-ctype)
  - [const want](#net-http_test-const-want)
  - [const want](#net-http_test-const-want)
  - [const indexContents](#net-http_test-const-indexContents)
  - [const fileaContents](#net-http_test-const-fileaContents)
  - [const filebContents](#net-http_test-const-filebContents)
  - [const textaValue](#net-http_test-const-textaValue)
  - [const textbValue](#net-http_test-const-textbValue)
  - [const boundary](#net-http_test-const-boundary)
  - [const message](#net-http_test-const-message)
  - [const withTLS](#net-http_test-const-withTLS)
  - [const noTLS](#net-http_test-const-noTLS)
  - [const wantPrefix](#net-http_test-const-wantPrefix)
  - [const maxTries](#net-http_test-const-maxTries)
  - [const limit](#net-http_test-const-limit)
  - [const bodySize](#net-http_test-const-bodySize)
  - [const req](#net-http_test-const-req)
  - [const size](#net-http_test-const-size)
  - [const bodySize](#net-http_test-const-bodySize)
  - [const arbitraryCleanupMargin](#net-http_test-const-arbitraryCleanupMargin)
  - [const reqs](#net-http_test-const-reqs)
  - [const numReq](#net-http_test-const-numReq)
  - [const upgradeResponse](#net-http_test-const-upgradeResponse)
  - [const want](#net-http_test-const-want)
  - [const hdr](#net-http_test-const-hdr)
  - [const someResponse](#net-http_test-const-someResponse)
  - [const expectTimeout](#net-http_test-const-expectTimeout)
  - [const size](#net-http_test-const-size)
  - [const input](#net-http_test-const-input)
  - [const expected](#net-http_test-const-expected)
  - [const msg](#net-http_test-const-msg)
  - [const numClients](#net-http_test-const-numClients)
  - [const reqsPerClient](#net-http_test-const-reqsPerClient)
  - [const responseBody](#net-http_test-const-responseBody)
  - [const testString](#net-http_test-const-testString)
  - [const nRandBytes](#net-http_test-const-nRandBytes)
  - [const numReq](#net-http_test-const-numReq)
  - [const numFoos](#net-http_test-const-numFoos)
  - [const deniedMsg](#net-http_test-const-deniedMsg)
  - [const n](#net-http_test-const-n)
  - [const debug](#net-http_test-const-debug)
  - [const debug](#net-http_test-const-debug)
  - [const repeats](#net-http_test-const-repeats)
  - [const numReqs](#net-http_test-const-numReqs)
  - [const nReqs](#net-http_test-const-nReqs)
  - [const trials](#net-http_test-const-trials)
  - [const bodySize](#net-http_test-const-bodySize)
  - [const encodedString](#net-http_test-const-encodedString)
  - [const contentLengthLimit](#net-http_test-const-contentLengthLimit)
  - [const resBody](#net-http_test-const-resBody)
  - [const timeout](#net-http_test-const-timeout)
  - [const uniDomain](#net-http_test-const-uniDomain)
  - [const punyDomain](#net-http_test-const-punyDomain)
  - [const want](#net-http_test-const-want)
  - [const timeout](#net-http_test-const-timeout)
  - [const target](#net-http_test-const-target)
  - [const target](#net-http_test-const-target)
  - [const numReqs](#net-http_test-const-numReqs)
- [Variables](#net-http_test-var)
  - [var buf](#net-http_test-var-buf)
  - [var robotsTxtHandler](#net-http_test-var-robotsTxtHandler)
  - [var bufa](#net-http_test-var-bufa)
  - [var b](#net-http_test-var-b)
  - [var ts](#net-http_test-var-ts)
  - [var checkErr](#net-http_test-var-checkErr)
  - [var lastVia](#net-http_test-var-lastVia)
  - [var lastReq](#net-http_test-var-lastReq)
  - [var log](#net-http_test-var-log)
  - [var ts](#net-http_test-var-ts)
  - [var ts](#net-http_test-var-ts)
  - [var expectedCookies](#net-http_test-var-expectedCookies)
  - [var echoCookiesRedirectHandler](#net-http_test-var-echoCookiesRedirectHandler)
  - [var ts](#net-http_test-var-ts)
  - [var buf](#net-http_test-var-buf)
  - [var first](#net-http_test-var-first)
  - [var second](#net-http_test-var-second)
  - [var ts2URL](#net-http_test-var-ts2URL)
  - [var tsURL](#net-http_test-var-tsURL)
  - [var tsHost](#net-http_test-var-tsHost)
  - [var want](#net-http_test-var-want)
  - [var readCallsAtomic](#net-http_test-var-readCallsAtomic)
  - [var closeCallsAtomic](#net-http_test-var-closeCallsAtomic)
  - [var tr](#net-http_test-var-tr)
  - [var ctx](#net-http_test-var-ctx)
  - [var cancel](#net-http_test-var-cancel)
  - [var wantIsTimeout](#net-http_test-var-wantIsTimeout)
  - [var wantErr](#net-http_test-var-wantErr)
  - [var optQuietLog](#net-http_test-var-optQuietLog)
  - [var got](#net-http_test-var-got)
  - [var decl](#net-http_test-var-decl)
  - [var req](#net-http_test-var-req)
  - [var wg](#net-http_test-var-wg)
  - [var numOpen](#net-http_test-var-numOpen)
  - [var numClose](#net-http_test-var-numClose)
  - [var wg](#net-http_test-var-wg)
  - [var last](#net-http_test-var-last)
  - [var open](#net-http_test-var-open)
  - [var close](#net-http_test-var-close)
  - [var body](#net-http_test-var-body)
  - [var dialed](#net-http_test-var-dialed)
  - [var errorLog](#net-http_test-var-errorLog)
  - [var errorLog](#net-http_test-var-errorLog)
  - [var srv](#net-http_test-var-srv)
  - [var ServeFileRangeTests](#net-http_test-var-ServeFileRangeTests)
  - [var err](#net-http_test-var-err)
  - [var req](#net-http_test-var-req)
  - [var fsRedirectTestData](#net-http_test-var-fsRedirectTestData)
  - [var h](#net-http_test-var-h)
  - [var name](#net-http_test-var-name)
  - [var got](#net-http_test-var-got)
  - [var fis](#net-http_test-var-fis)
  - [var content](#net-http_test-var-content)
  - [var buf](#net-http_test-var-buf)
  - [var log](#net-http_test-var-log)
  - [var quietLog](#net-http_test-var-quietLog)
  - [var stackCount](#net-http_test-var-stackCount)
  - [var bad](#net-http_test-var-bad)
  - [var stacks](#net-http_test-var-stacks)
  - [var err](#net-http_test-var-err)
  - [var end](#net-http_test-var-end)
  - [var readRequestErrorTests](#net-http_test-var-readRequestErrorTests)
  - [var newRequestHostTests](#net-http_test-var-newRequestHostTests)
  - [var b](#net-http_test-var-b)
  - [var parseHTTPVersionTests](#net-http_test-var-parseHTTPVersionTests)
  - [var getBasicAuthTests](#net-http_test-var-getBasicAuthTests)
  - [var parseBasicAuthTests](#net-http_test-var-parseBasicAuthTests)
  - [var out](#net-http_test-var-out)
  - [var log](#net-http_test-var-log)
  - [var firstErr](#net-http_test-var-firstErr)
  - [var b](#net-http_test-var-b)
  - [var cst](#net-http_test-var-cst)
  - [var output](#net-http_test-var-output)
  - [var req](#net-http_test-var-req)
  - [var handlers](#net-http_test-var-handlers)
  - [var vtests](#net-http_test-var-vtests)
  - [var r](#net-http_test-var-r)
  - [var req](#net-http_test-var-req)
  - [var serveMuxRegister](#net-http_test-var-serveMuxRegister)
  - [var serveMuxTests](#net-http_test-var-serveMuxTests)
  - [var serveMuxTests2](#net-http_test-var-serveMuxTests2)
  - [var tests](#net-http_test-var-tests)
  - [var mu](#net-http_test-var-mu)
  - [var conn](#net-http_test-var-conn)
  - [var afterTimeoutErrc](#net-http_test-var-afterTimeoutErrc)
  - [var addrs](#net-http_test-var-addrs)
  - [var conn2](#net-http_test-var-conn2)
  - [var buf](#net-http_test-var-buf)
  - [var errBuf](#net-http_test-var-errBuf)
  - [var s](#net-http_test-var-s)
  - [var s](#net-http_test-var-s)
  - [var ok](#net-http_test-var-ok)
  - [var s](#net-http_test-var-s)
  - [var ln](#net-http_test-var-ln)
  - [var serverExpectTests](#net-http_test-var-serverExpectTests)
  - [var targ](#net-http_test-var-targ)
  - [var handlerBodyCloseTests](#net-http_test-var-handlerBodyCloseTests)
  - [var numReqs](#net-http_test-var-numReqs)
  - [var size0](#net-http_test-var-size0)
  - [var size1](#net-http_test-var-size1)
  - [var testHandlerBodyConsumers](#net-http_test-var-testHandlerBodyConsumers)
  - [var numReqs](#net-http_test-var-numReqs)
  - [var numReqs](#net-http_test-var-numReqs)
  - [var numReqs](#net-http_test-var-numReqs)
  - [var wg](#net-http_test-var-wg)
  - [var wg](#net-http_test-var-wg)
  - [var handler](#net-http_test-var-handler)
  - [var handler](#net-http_test-var-handler)
  - [var tests](#net-http_test-var-tests)
  - [var tests](#net-http_test-var-tests)
  - [var resp](#net-http_test-var-resp)
  - [var handler](#net-http_test-var-handler)
  - [var bytesPerHeader](#net-http_test-var-bytesPerHeader)
  - [var output](#net-http_test-var-output)
  - [var requestBody](#net-http_test-var-requestBody)
  - [var buf](#net-http_test-var-buf)
  - [var buf](#net-http_test-var-buf)
  - [var quitTimer](#net-http_test-var-quitTimer)
  - [var proxy](#net-http_test-var-proxy)
  - [var b](#net-http_test-var-b)
  - [var n](#net-http_test-var-n)
  - [var wg](#net-http_test-var-wg)
  - [var srv](#net-http_test-var-srv)
  - [var testConn](#net-http_test-var-testConn)
  - [var got](#net-http_test-var-got)
  - [var buf](#net-http_test-var-buf)
  - [var buf](#net-http_test-var-buf)
  - [var buf](#net-http_test-var-buf)
  - [var inHandlerLen](#net-http_test-var-inHandlerLen)
  - [var res](#net-http_test-var-res)
  - [var data](#net-http_test-var-data)
  - [var srv](#net-http_test-var-srv)
  - [var response](#net-http_test-var-response)
  - [var idle1](#net-http_test-var-idle1)
  - [var doShutdown](#net-http_test-var-doShutdown)
  - [var doStateCount](#net-http_test-var-doStateCount)
  - [var shutdownRes](#net-http_test-var-shutdownRes)
  - [var statesRes](#net-http_test-var-statesRes)
  - [var gotOnShutdown](#net-http_test-var-gotOnShutdown)
  - [var connAccepted](#net-http_test-var-connAccepted)
  - [var s](#net-http_test-var-s)
  - [var wg](#net-http_test-var-wg)
  - [var s](#net-http_test-var-s)
  - [var err](#net-http_test-var-err)
  - [var srv](#net-http_test-var-srv)
  - [var res](#net-http_test-var-res)
  - [var err](#net-http_test-var-err)
  - [var buf3](#net-http_test-var-buf3)
  - [var sniffTests](#net-http_test-var-sniffTests)
  - [var hostPortHandler](#net-http_test-var-hostPortHandler)
  - [var err](#net-http_test-var-err)
  - [var err](#net-http_test-var-err)
  - [var addrSeen](#net-http_test-var-addrSeen)
  - [var msg](#net-http_test-var-msg)
  - [var dialCnt](#net-http_test-var-dialCnt)
  - [var gotConnCnt](#net-http_test-var-gotConnCnt)
  - [var tlsHandshakeCnt](#net-http_test-var-tlsHandshakeCnt)
  - [var keys2](#net-http_test-var-keys2)
  - [var roundTripTests](#net-http_test-var-roundTripTests)
  - [var body](#net-http_test-var-body)
  - [var r](#net-http_test-var-r)
  - [var w](#net-http_test-var-w)
  - [var buf](#net-http_test-var-buf)
  - [var buf](#net-http_test-var-buf)
  - [var ipLen](#net-http_test-var-ipLen)
  - [var ts](#net-http_test-var-ts)
  - [var got](#net-http_test-var-got)
  - [var ts](#net-http_test-var-ts)
  - [var proxy](#net-http_test-var-proxy)
  - [var got](#net-http_test-var-got)
  - [var buf](#net-http_test-var-buf)
  - [var errDial](#net-http_test-var-errDial)
  - [var d](#net-http_test-var-d)
  - [var wg](#net-http_test-var-wg)
  - [var initialCC](#net-http_test-var-initialCC)
  - [var flushCC](#net-http_test-var-flushCC)
  - [var tr](#net-http_test-var-tr)
  - [var wg](#net-http_test-var-wg)
  - [var logbuf](#net-http_test-var-logbuf)
  - [var got](#net-http_test-var-got)
  - [var buf](#net-http_test-var-buf)
  - [var proxyFromEnvTests](#net-http_test-var-proxyFromEnvTests)
  - [var mu](#net-http_test-var-mu)
  - [var n](#net-http_test-var-n)
  - [var nSuccess](#net-http_test-var-nSuccess)
  - [var errs](#net-http_test-var-errs)
  - [var sconn](#net-http_test-var-sconn)
  - [var getOkay](#net-http_test-var-getOkay)
  - [var mu](#net-http_test-var-mu)
  - [var logbuf](#net-http_test-var-logbuf)
  - [var writeNumAtomic](#net-http_test-var-writeNumAtomic)
  - [var mu](#net-http_test-var-mu)
  - [var gotReq](#net-http_test-var-gotReq)
  - [var didDial](#net-http_test-var-didDial)
  - [var mu](#net-http_test-var-mu)
  - [var gotReq](#net-http_test-var-gotReq)
  - [var receivedContext](#net-http_test-var-receivedContext)
  - [var mu](#net-http_test-var-mu)
  - [var gotReq](#net-http_test-var-gotReq)
  - [var receivedContext](#net-http_test-var-receivedContext)
  - [var b](#net-http_test-var-b)
  - [var d](#net-http_test-var-d)
  - [var d](#net-http_test-var-d)
  - [var firstAddr](#net-http_test-var-firstAddr)
  - [var wg](#net-http_test-var-wg)
  - [var n](#net-http_test-var-n)
  - [var mu](#net-http_test-var-mu)
  - [var buf](#net-http_test-var-buf)
  - [var mu](#net-http_test-var-mu)
  - [var buf](#net-http_test-var-buf)
  - [var isDNSHijackedOnce](#net-http_test-var-isDNSHijackedOnce)
  - [var isDNSHijacked](#net-http_test-var-isDNSHijacked)
  - [var mu](#net-http_test-var-mu)
  - [var buf](#net-http_test-var-buf)
  - [var mu](#net-http_test-var-mu)
  - [var start](#net-http_test-var-start)
  - [var done](#net-http_test-var-done)
  - [var conn](#net-http_test-var-conn)
  - [var wroteOnce](#net-http_test-var-wroteOnce)
  - [var port](#net-http_test-var-port)
  - [var errFakeRoundTrip](#net-http_test-var-errFakeRoundTrip)
  - [var rgz](#net-http_test-var-rgz)
  - [var d](#net-http_test-var-d)
  - [var logout](#net-http_test-var-logout)
  - [var bc](#net-http_test-var-bc)
  - [var brokenState](#net-http_test-var-brokenState)
  - [var numDials](#net-http_test-var-numDials)
  - [var gotConns](#net-http_test-var-gotConns)
  - [var wg](#net-http_test-var-wg)
  - [var timeoutProtoErr](#net-http_test-var-timeoutProtoErr)
  - [var ok](#net-http_test-var-ok)
  - [var wg](#net-http_test-var-wg)
- [Types](#net-http_test-type)
  - [type http09Writer struct](#net-http_test-type-http09Writer)
    - [func (w http09Writer) Header() Header](#net-http_test-type-http09Writer-Header)
    - [func (w http09Writer) WriteHeader(int)](#net-http_test-type-http09Writer-WriteHeader)
  - [type chanWriter chan string](#net-http_test-type-chanWriter)
    - [func (w chanWriter) Write(p []byte) (n int, err error)](#net-http_test-type-chanWriter-Write)
  - [type recordingTransport struct](#net-http_test-type-recordingTransport)
    - [func (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error)](#net-http_test-type-recordingTransport-RoundTrip)
  - [type redirectTest struct](#net-http_test-type-redirectTest)
  - [type TestJar struct](#net-http_test-type-TestJar)
    - [func (j *TestJar) SetCookies(u *url.URL, cookies []*Cookie)](#net-http_test-type-TestJar-SetCookies)
    - [func (j *TestJar) Cookies(u *url.URL) []*Cookie](#net-http_test-type-TestJar-Cookies)
  - [type RecordingJar struct](#net-http_test-type-RecordingJar)
    - [func (j *RecordingJar) SetCookies(u *url.URL, cookies []*Cookie)](#net-http_test-type-RecordingJar-SetCookies)
    - [func (j *RecordingJar) Cookies(u *url.URL) []*Cookie](#net-http_test-type-RecordingJar-Cookies)
    - [func (j *RecordingJar) logf(format string, args ...interface{})](#net-http_test-type-RecordingJar-logf)
  - [type writeCountingConn struct](#net-http_test-type-writeCountingConn)
    - [func (c *writeCountingConn) Write(p []byte) (int, error)](#net-http_test-type-writeCountingConn-Write)
  - [type eofReaderFunc func()](#net-http_test-type-eofReaderFunc)
    - [func (f eofReaderFunc) Read(p []byte) (n int, err error)](#net-http_test-type-eofReaderFunc-Read)
  - [type issue15577Tripper struct{}](#net-http_test-type-issue15577Tripper)
    - [func (issue15577Tripper) RoundTrip(*Request) (*Response, error)](#net-http_test-type-issue15577Tripper-RoundTrip)
  - [type issue18239Body struct](#net-http_test-type-issue18239Body)
    - [func (b issue18239Body) Read([]byte) (int, error)](#net-http_test-type-issue18239Body-Read)
    - [func (b issue18239Body) Close() error](#net-http_test-type-issue18239Body-Close)
  - [type roundTripperWithoutCloseIdle struct{}](#net-http_test-type-roundTripperWithoutCloseIdle)
    - [func (roundTripperWithoutCloseIdle) RoundTrip(*Request) (*Response, error)](#net-http_test-type-roundTripperWithoutCloseIdle-RoundTrip)
  - [type roundTripperWithCloseIdle func()](#net-http_test-type-roundTripperWithCloseIdle)
    - [func (roundTripperWithCloseIdle) RoundTrip(*Request) (*Response, error)](#net-http_test-type-roundTripperWithCloseIdle-RoundTrip)
    - [func (f roundTripperWithCloseIdle) CloseIdleConnections()](#net-http_test-type-roundTripperWithCloseIdle-CloseIdleConnections)
  - [type nilBodyRoundTripper struct{}](#net-http_test-type-nilBodyRoundTripper)
    - [func (nilBodyRoundTripper) RoundTrip(req *Request) (*Response, error)](#net-http_test-type-nilBodyRoundTripper-RoundTrip)
  - [type issue40382Body struct](#net-http_test-type-issue40382Body)
    - [func (b *issue40382Body) Read(p []byte) (int, error)](#net-http_test-type-issue40382Body-Read)
    - [func (b *issue40382Body) Close() error](#net-http_test-type-issue40382Body-Close)
  - [type clientServerTest struct](#net-http_test-type-clientServerTest)
    - [func newClientServerTest(t *testing.T, h2 bool, h Handler, opts ...interface{}) *clientServerTest](#net-http_test-type-clientServerTest-newClientServerTest)
    - [func (t *clientServerTest) close()](#net-http_test-type-clientServerTest-close)
    - [func (t *clientServerTest) getURL(u string) string](#net-http_test-type-clientServerTest-getURL)
    - [func (t *clientServerTest) scheme() string](#net-http_test-type-clientServerTest-scheme)
  - [type reqFunc func(c *net/http.Client, url string) (*net/http.Response, error)](#net-http_test-type-reqFunc)
  - [type h12Compare struct](#net-http_test-type-h12Compare)
    - [func (tt h12Compare) reqFunc() reqFunc](#net-http_test-type-h12Compare-reqFunc)
    - [func (tt h12Compare) run(t *testing.T)](#net-http_test-type-h12Compare-run)
    - [func (tt h12Compare) normalizeRes(t *testing.T, res *Response, wantProto string)](#net-http_test-type-h12Compare-normalizeRes)
  - [type slurpResult struct](#net-http_test-type-slurpResult)
    - [func (sr slurpResult) String() string](#net-http_test-type-slurpResult-String)
  - [type lockedBytesBuffer struct](#net-http_test-type-lockedBytesBuffer)
    - [func (b *lockedBytesBuffer) Write(p []byte) (int, error)](#net-http_test-type-lockedBytesBuffer-Write)
  - [type noteCloseConn struct](#net-http_test-type-noteCloseConn)
    - [func (x noteCloseConn) Close() error](#net-http_test-type-noteCloseConn-Close)
  - [type testErrorReader struct](#net-http_test-type-testErrorReader)
    - [func (r testErrorReader) Read(p []byte) (n int, err error)](#net-http_test-type-testErrorReader-Read)
  - [type dotFileHidingFile struct](#net-http_test-type-dotFileHidingFile)
    - [func (f dotFileHidingFile) Readdir(n int) (fis []fs.FileInfo, err error)](#net-http_test-type-dotFileHidingFile-Readdir)
  - [type dotFileHidingFileSystem struct](#net-http_test-type-dotFileHidingFileSystem)
    - [func (fsys dotFileHidingFileSystem) Open(name string) (http.File, error)](#net-http_test-type-dotFileHidingFileSystem-Open)
  - [type countHandler struct](#net-http_test-type-countHandler)
    - [func (h *countHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)](#net-http_test-type-countHandler-ServeHTTP)
  - [type apiHandler struct{}](#net-http_test-type-apiHandler)
    - [func (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request)](#net-http_test-type-apiHandler-ServeHTTP)
  - [type wantRange struct](#net-http_test-type-wantRange)
  - [type testFileSystem struct](#net-http_test-type-testFileSystem)
    - [func (fs *testFileSystem) Open(name string) (File, error)](#net-http_test-type-testFileSystem-Open)
  - [type fakeFileInfo struct](#net-http_test-type-fakeFileInfo)
    - [func (f *fakeFileInfo) Name() string](#net-http_test-type-fakeFileInfo-Name)
    - [func (f *fakeFileInfo) Sys() interface{}](#net-http_test-type-fakeFileInfo-Sys)
    - [func (f *fakeFileInfo) ModTime() time.Time](#net-http_test-type-fakeFileInfo-ModTime)
    - [func (f *fakeFileInfo) IsDir() bool](#net-http_test-type-fakeFileInfo-IsDir)
    - [func (f *fakeFileInfo) Size() int64](#net-http_test-type-fakeFileInfo-Size)
    - [func (f *fakeFileInfo) Mode() fs.FileMode](#net-http_test-type-fakeFileInfo-Mode)
  - [type fakeFile struct](#net-http_test-type-fakeFile)
    - [func (f *fakeFile) Close() error](#net-http_test-type-fakeFile-Close)
    - [func (f *fakeFile) Stat() (fs.FileInfo, error)](#net-http_test-type-fakeFile-Stat)
    - [func (f *fakeFile) Readdir(count int) ([]fs.FileInfo, error)](#net-http_test-type-fakeFile-Readdir)
  - [type fakeFS map[string]*http_test.fakeFileInfo](#net-http_test-type-fakeFS)
    - [func (fsys fakeFS) Open(name string) (File, error)](#net-http_test-type-fakeFS-Open)
  - [type serveParam struct](#net-http_test-type-serveParam)
  - [type testCase struct](#net-http_test-type-testCase)
  - [type issue12991FS struct{}](#net-http_test-type-issue12991FS)
    - [func (issue12991FS) Open(string) (File, error)](#net-http_test-type-issue12991FS-Open)
  - [type issue12991File struct](#net-http_test-type-issue12991File)
    - [func (issue12991File) Stat() (fs.FileInfo, error)](#net-http_test-type-issue12991File-Stat)
    - [func (issue12991File) Close() error](#net-http_test-type-issue12991File-Close)
  - [type fileServerCleanPathDir struct](#net-http_test-type-fileServerCleanPathDir)
    - [func (d fileServerCleanPathDir) Open(path string) (File, error)](#net-http_test-type-fileServerCleanPathDir-Open)
  - [type panicOnSeek struct](#net-http_test-type-panicOnSeek)
  - [type version struct](#net-http_test-type-version)
  - [type getBasicAuthTest struct](#net-http_test-type-getBasicAuthTest)
  - [type basicAuthCredentialsTest struct](#net-http_test-type-basicAuthCredentialsTest)
  - [type logWrites struct](#net-http_test-type-logWrites)
    - [func (l logWrites) WriteByte(c byte) error](#net-http_test-type-logWrites-WriteByte)
    - [func (l logWrites) Write(p []byte) (n int, err error)](#net-http_test-type-logWrites-Write)
  - [type responseWriterJustWriter struct](#net-http_test-type-responseWriterJustWriter)
    - [func (responseWriterJustWriter) Header() Header](#net-http_test-type-responseWriterJustWriter-Header)
    - [func (responseWriterJustWriter) WriteHeader(int)](#net-http_test-type-responseWriterJustWriter-WriteHeader)
  - [type delayedEOFReader struct](#net-http_test-type-delayedEOFReader)
    - [func (dr delayedEOFReader) Read(p []byte) (n int, err error)](#net-http_test-type-delayedEOFReader-Read)
  - [type infiniteReader struct](#net-http_test-type-infiniteReader)
    - [func (r *infiniteReader) Read(b []byte) (int, error)](#net-http_test-type-infiniteReader-Read)
  - [type dummyAddr string](#net-http_test-type-dummyAddr)
    - [func (a dummyAddr) Network() string](#net-http_test-type-dummyAddr-Network)
    - [func (a dummyAddr) String() string](#net-http_test-type-dummyAddr-String)
  - [type oneConnListener struct](#net-http_test-type-oneConnListener)
    - [func (l *oneConnListener) Accept() (c net.Conn, err error)](#net-http_test-type-oneConnListener-Accept)
    - [func (l *oneConnListener) Close() error](#net-http_test-type-oneConnListener-Close)
    - [func (l *oneConnListener) Addr() net.Addr](#net-http_test-type-oneConnListener-Addr)
  - [type noopConn struct{}](#net-http_test-type-noopConn)
    - [func (noopConn) LocalAddr() net.Addr](#net-http_test-type-noopConn-LocalAddr)
    - [func (noopConn) RemoteAddr() net.Addr](#net-http_test-type-noopConn-RemoteAddr)
    - [func (noopConn) SetDeadline(t time.Time) error](#net-http_test-type-noopConn-SetDeadline)
    - [func (noopConn) SetReadDeadline(t time.Time) error](#net-http_test-type-noopConn-SetReadDeadline)
    - [func (noopConn) SetWriteDeadline(t time.Time) error](#net-http_test-type-noopConn-SetWriteDeadline)
  - [type rwTestConn struct](#net-http_test-type-rwTestConn)
    - [func (c *rwTestConn) Close() error](#net-http_test-type-rwTestConn-Close)
  - [type testConn struct](#net-http_test-type-testConn)
    - [func (c *testConn) Read(b []byte) (int, error)](#net-http_test-type-testConn-Read)
    - [func (c *testConn) Write(b []byte) (int, error)](#net-http_test-type-testConn-Write)
    - [func (c *testConn) Close() error](#net-http_test-type-testConn-Close)
  - [type handlerTest struct](#net-http_test-type-handlerTest)
    - [func newHandlerTest(h Handler) handlerTest](#net-http_test-type-handlerTest-newHandlerTest)
    - [func (ht *handlerTest) rawResponse(req string) string](#net-http_test-type-handlerTest-rawResponse)
  - [type stringHandler string](#net-http_test-type-stringHandler)
    - [func (s stringHandler) ServeHTTP(w ResponseWriter, r *Request)](#net-http_test-type-stringHandler-ServeHTTP)
  - [type test struct](#net-http_test-type-test)
  - [type trackLastConnListener struct](#net-http_test-type-trackLastConnListener)
    - [func (l trackLastConnListener) Accept() (c net.Conn, err error)](#net-http_test-type-trackLastConnListener-Accept)
  - [type data struct](#net-http_test-type-data)
  - [type blockingRemoteAddrListener struct](#net-http_test-type-blockingRemoteAddrListener)
    - [func (l *blockingRemoteAddrListener) Accept() (net.Conn, error)](#net-http_test-type-blockingRemoteAddrListener-Accept)
  - [type blockingRemoteAddrConn struct](#net-http_test-type-blockingRemoteAddrConn)
    - [func (c *blockingRemoteAddrConn) RemoteAddr() net.Addr](#net-http_test-type-blockingRemoteAddrConn-RemoteAddr)
  - [type serverExpectTest struct](#net-http_test-type-serverExpectTest)
    - [func expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest](#net-http_test-type-serverExpectTest-expectTest)
  - [type handlerBodyCloseTest struct](#net-http_test-type-handlerBodyCloseTest)
    - [func (t handlerBodyCloseTest) connectionHeader() string](#net-http_test-type-handlerBodyCloseTest-connectionHeader)
  - [type testHandlerBodyConsumer struct](#net-http_test-type-testHandlerBodyConsumer)
  - [type slowTestConn struct](#net-http_test-type-slowTestConn)
    - [func (c *slowTestConn) SetDeadline(t time.Time) error](#net-http_test-type-slowTestConn-SetDeadline)
    - [func (c *slowTestConn) SetReadDeadline(t time.Time) error](#net-http_test-type-slowTestConn-SetReadDeadline)
    - [func (c *slowTestConn) SetWriteDeadline(t time.Time) error](#net-http_test-type-slowTestConn-SetWriteDeadline)
    - [func (c *slowTestConn) Read(b []byte) (n int, err error)](#net-http_test-type-slowTestConn-Read)
    - [func (c *slowTestConn) Close() error](#net-http_test-type-slowTestConn-Close)
    - [func (c *slowTestConn) Write(b []byte) (int, error)](#net-http_test-type-slowTestConn-Write)
  - [type ctHeader struct](#net-http_test-type-ctHeader)
  - [type terrorWriter struct](#net-http_test-type-terrorWriter)
    - [func (w terrorWriter) Write(p []byte) (int, error)](#net-http_test-type-terrorWriter-Write)
  - [type neverEnding byte](#net-http_test-type-neverEnding)
    - [func (b neverEnding) Read(p []byte) (n int, err error)](#net-http_test-type-neverEnding-Read)
  - [type countReader struct](#net-http_test-type-countReader)
    - [func (cr countReader) Read(p []byte) (n int, err error)](#net-http_test-type-countReader-Read)
  - [type errorListener struct](#net-http_test-type-errorListener)
    - [func (l *errorListener) Accept() (c net.Conn, err error)](#net-http_test-type-errorListener-Accept)
    - [func (l *errorListener) Close() error](#net-http_test-type-errorListener-Close)
    - [func (l *errorListener) Addr() net.Addr](#net-http_test-type-errorListener-Addr)
  - [type stateLog struct](#net-http_test-type-stateLog)
  - [type closeWriteTestConn struct](#net-http_test-type-closeWriteTestConn)
    - [func (c *closeWriteTestConn) CloseWrite() error](#net-http_test-type-closeWriteTestConn-CloseWrite)
  - [type repeatReader struct](#net-http_test-type-repeatReader)
    - [func (r *repeatReader) Read(p []byte) (n int, err error)](#net-http_test-type-repeatReader-Read)
  - [type eofListenerNotComparable []int](#net-http_test-type-eofListenerNotComparable)
    - [func (eofListenerNotComparable) Accept() (net.Conn, error)](#net-http_test-type-eofListenerNotComparable-Accept)
    - [func (eofListenerNotComparable) Addr() net.Addr](#net-http_test-type-eofListenerNotComparable-Addr)
    - [func (eofListenerNotComparable) Close() error](#net-http_test-type-eofListenerNotComparable-Close)
  - [type countCloseListener struct](#net-http_test-type-countCloseListener)
    - [func (p *countCloseListener) Close() error](#net-http_test-type-countCloseListener-Close)
  - [type baseKey struct{}](#net-http_test-type-baseKey)
  - [type connKey struct{}](#net-http_test-type-connKey)
  - [type baseKey struct{}](#net-http_test-type-baseKey)
  - [type connKey struct{}](#net-http_test-type-connKey)
  - [type connKey struct{}](#net-http_test-type-connKey)
  - [type setting struct](#net-http_test-type-setting)
  - [type testCloseConn struct](#net-http_test-type-testCloseConn)
    - [func (c *testCloseConn) Close() error](#net-http_test-type-testCloseConn-Close)
  - [type testConnSet struct](#net-http_test-type-testConnSet)
    - [func makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, error))](#net-http_test-type-testConnSet-makeTestDial)
    - [func (tcs *testConnSet) insert(c net.Conn)](#net-http_test-type-testConnSet-insert)
    - [func (tcs *testConnSet) remove(c net.Conn)](#net-http_test-type-testConnSet-remove)
    - [func (tcs *testConnSet) check(t *testing.T)](#net-http_test-type-testConnSet-check)
  - [type countedConn struct](#net-http_test-type-countedConn)
  - [type countingDialer struct](#net-http_test-type-countingDialer)
    - [func (d *countingDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)](#net-http_test-type-countingDialer-DialContext)
    - [func (d *countingDialer) decrement(*countedConn)](#net-http_test-type-countingDialer-decrement)
    - [func (d *countingDialer) Read() (total, live int64)](#net-http_test-type-countingDialer-Read)
  - [type countedContext struct](#net-http_test-type-countedContext)
  - [type contextCounter struct](#net-http_test-type-contextCounter)
    - [func (cc *contextCounter) Track(ctx context.Context) context.Context](#net-http_test-type-contextCounter-Track)
    - [func (cc *contextCounter) decrement(*countedContext)](#net-http_test-type-contextCounter-decrement)
    - [func (cc *contextCounter) Read() (live int64)](#net-http_test-type-contextCounter-Read)
  - [type fooProto struct{}](#net-http_test-type-fooProto)
    - [func (fooProto) RoundTrip(req *Request) (*Response, error)](#net-http_test-type-fooProto-RoundTrip)
  - [type proxyFromEnvTest struct](#net-http_test-type-proxyFromEnvTest)
    - [func (t proxyFromEnvTest) String() string](#net-http_test-type-proxyFromEnvTest-String)
  - [type byteFromChanReader chan byte](#net-http_test-type-byteFromChanReader)
    - [func (c byteFromChanReader) Read(p []byte) (n int, err error)](#net-http_test-type-byteFromChanReader-Read)
  - [type closerFunc func() error](#net-http_test-type-closerFunc)
    - [func (f closerFunc) Close() error](#net-http_test-type-closerFunc-Close)
  - [type writerFuncConn struct](#net-http_test-type-writerFuncConn)
    - [func (c writerFuncConn) Write(p []byte) (n int, err error)](#net-http_test-type-writerFuncConn-Write)
  - [type logWritesConn struct](#net-http_test-type-logWritesConn)
    - [func (c *logWritesConn) Write(p []byte) (n int, err error)](#net-http_test-type-logWritesConn-Write)
    - [func (c *logWritesConn) Read(p []byte) (n int, err error)](#net-http_test-type-logWritesConn-Read)
    - [func (c *logWritesConn) Close() error](#net-http_test-type-logWritesConn-Close)
  - [type funcConn struct](#net-http_test-type-funcConn)
    - [func (c funcConn) Read(p []byte) (int, error)](#net-http_test-type-funcConn-Read)
    - [func (c funcConn) Write(p []byte) (int, error)](#net-http_test-type-funcConn-Write)
    - [func (c funcConn) Close() error](#net-http_test-type-funcConn-Close)
  - [type funcRoundTripper func()](#net-http_test-type-funcRoundTripper)
    - [func (fn funcRoundTripper) RoundTrip(*Request) (*Response, error)](#net-http_test-type-funcRoundTripper-RoundTrip)
  - [type countCloseReader struct](#net-http_test-type-countCloseReader)
    - [func (cr countCloseReader) Close() error](#net-http_test-type-countCloseReader-Close)
  - [type funcWriter func([]byte) (int, error)](#net-http_test-type-funcWriter)
    - [func (f funcWriter) Write(p []byte) (int, error)](#net-http_test-type-funcWriter-Write)
  - [type doneContext struct](#net-http_test-type-doneContext)
    - [func (doneContext) Done() <-chan struct{}](#net-http_test-type-doneContext-Done)
    - [func (d doneContext) Err() error](#net-http_test-type-doneContext-Err)
  - [type testMockTCPConn struct](#net-http_test-type-testMockTCPConn)
    - [func (c *testMockTCPConn) ReadFrom(r io.Reader) (int64, error)](#net-http_test-type-testMockTCPConn-ReadFrom)
  - [type bodyCloser bool](#net-http_test-type-bodyCloser)
    - [func (bc *bodyCloser) Close() error](#net-http_test-type-bodyCloser-Close)
    - [func (bc *bodyCloser) Read(b []byte) (n int, err error)](#net-http_test-type-bodyCloser-Read)
  - [type breakableConn struct](#net-http_test-type-breakableConn)
    - [func (w *breakableConn) Write(b []byte) (n int, err error)](#net-http_test-type-breakableConn-Write)
  - [type brokenState struct](#net-http_test-type-brokenState)
  - [type timeoutProto struct{}](#net-http_test-type-timeoutProto)
    - [func (timeoutProto) RoundTrip(req *Request) (*Response, error)](#net-http_test-type-timeoutProto-RoundTrip)
  - [type roundTripFunc func(r *net/http.Request) (*net/http.Response, error)](#net-http_test-type-roundTripFunc)
    - [func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)](#net-http_test-type-roundTripFunc-RoundTrip)
  - [type dumpConn struct](#net-http_test-type-dumpConn)
    - [func (c *dumpConn) Close() error](#net-http_test-type-dumpConn-Close)
    - [func (c *dumpConn) LocalAddr() net.Addr](#net-http_test-type-dumpConn-LocalAddr)
    - [func (c *dumpConn) RemoteAddr() net.Addr](#net-http_test-type-dumpConn-RemoteAddr)
    - [func (c *dumpConn) SetDeadline(t time.Time) error](#net-http_test-type-dumpConn-SetDeadline)
    - [func (c *dumpConn) SetReadDeadline(t time.Time) error](#net-http_test-type-dumpConn-SetReadDeadline)
    - [func (c *dumpConn) SetWriteDeadline(t time.Time) error](#net-http_test-type-dumpConn-SetWriteDeadline)
  - [type delegateReader struct](#net-http_test-type-delegateReader)
    - [func (r *delegateReader) Read(p []byte) (int, error)](#net-http_test-type-delegateReader-Read)
- [Functions](#net-http_test-func)
  - [func TestNextProtoUpgrade(t *testing.T)](#net-http_test-func-TestNextProtoUpgrade)
  - [func handleTLSProtocol09(srv *Server, conn *tls.Conn, h Handler)](#net-http_test-func-handleTLSProtocol09)
  - [func pedanticReadAll(r io.Reader) (b []byte, err error)](#net-http_test-func-pedanticReadAll)
  - [func TestClient(t *testing.T)](#net-http_test-func-TestClient)
  - [func TestClientHead_h1(t *testing.T)](#net-http_test-func-TestClientHead_h1)
  - [func TestClientHead_h2(t *testing.T)](#net-http_test-func-TestClientHead_h2)
  - [func testClientHead(t *testing.T, h2 bool)](#net-http_test-func-testClientHead)
  - [func TestGetRequestFormat(t *testing.T)](#net-http_test-func-TestGetRequestFormat)
  - [func TestPostRequestFormat(t *testing.T)](#net-http_test-func-TestPostRequestFormat)
  - [func TestPostFormRequestFormat(t *testing.T)](#net-http_test-func-TestPostFormRequestFormat)
  - [func TestClientRedirects(t *testing.T)](#net-http_test-func-TestClientRedirects)
  - [func TestClientRedirectContext(t *testing.T)](#net-http_test-func-TestClientRedirectContext)
  - [func TestPostRedirects(t *testing.T)](#net-http_test-func-TestPostRedirects)
  - [func TestDeleteRedirects(t *testing.T)](#net-http_test-func-TestDeleteRedirects)
  - [func testRedirectsByMethod(t *testing.T, method string, table []redirectTest, want string)](#net-http_test-func-testRedirectsByMethod)
  - [func removeCommonLines(a, b string) (asuffix, bsuffix string, commonLines int)](#net-http_test-func-removeCommonLines)
  - [func TestClientRedirectUseResponse(t *testing.T)](#net-http_test-func-TestClientRedirectUseResponse)
  - [func TestClientRedirect308NoLocation(t *testing.T)](#net-http_test-func-TestClientRedirect308NoLocation)
  - [func TestClientRedirect308NoGetBody(t *testing.T)](#net-http_test-func-TestClientRedirect308NoGetBody)
  - [func TestClientSendsCookieFromJar(t *testing.T)](#net-http_test-func-TestClientSendsCookieFromJar)
  - [func TestRedirectCookiesJar(t *testing.T)](#net-http_test-func-TestRedirectCookiesJar)
  - [func matchReturnedCookies(t *testing.T, expected, given []*Cookie)](#net-http_test-func-matchReturnedCookies)
  - [func TestJarCalls(t *testing.T)](#net-http_test-func-TestJarCalls)
  - [func TestStreamingGet_h1(t *testing.T)](#net-http_test-func-TestStreamingGet_h1)
  - [func TestStreamingGet_h2(t *testing.T)](#net-http_test-func-TestStreamingGet_h2)
  - [func testStreamingGet(t *testing.T, h2 bool)](#net-http_test-func-testStreamingGet)
  - [func TestClientWrites(t *testing.T)](#net-http_test-func-TestClientWrites)
  - [func TestClientInsecureTransport(t *testing.T)](#net-http_test-func-TestClientInsecureTransport)
  - [func TestClientErrorWithRequestURI(t *testing.T)](#net-http_test-func-TestClientErrorWithRequestURI)
  - [func TestClientWithCorrectTLSServerName(t *testing.T)](#net-http_test-func-TestClientWithCorrectTLSServerName)
  - [func TestClientWithIncorrectTLSServerName(t *testing.T)](#net-http_test-func-TestClientWithIncorrectTLSServerName)
  - [func TestTransportUsesTLSConfigServerName(t *testing.T)](#net-http_test-func-TestTransportUsesTLSConfigServerName)
  - [func TestResponseSetsTLSConnectionState(t *testing.T)](#net-http_test-func-TestResponseSetsTLSConnectionState)
  - [func TestHTTPSClientDetectsHTTPServer(t *testing.T)](#net-http_test-func-TestHTTPSClientDetectsHTTPServer)
  - [func TestClientHeadContentLength_h1(t *testing.T)](#net-http_test-func-TestClientHeadContentLength_h1)
  - [func TestClientHeadContentLength_h2(t *testing.T)](#net-http_test-func-TestClientHeadContentLength_h2)
  - [func testClientHeadContentLength(t *testing.T, h2 bool)](#net-http_test-func-testClientHeadContentLength)
  - [func TestEmptyPasswordAuth(t *testing.T)](#net-http_test-func-TestEmptyPasswordAuth)
  - [func TestBasicAuth(t *testing.T)](#net-http_test-func-TestBasicAuth)
  - [func TestBasicAuthHeadersPreserved(t *testing.T)](#net-http_test-func-TestBasicAuthHeadersPreserved)
  - [func TestStripPasswordFromError(t *testing.T)](#net-http_test-func-TestStripPasswordFromError)
  - [func TestClientTimeout_h1(t *testing.T)](#net-http_test-func-TestClientTimeout_h1)
  - [func TestClientTimeout_h2(t *testing.T)](#net-http_test-func-TestClientTimeout_h2)
  - [func testClientTimeout(t *testing.T, h2 bool)](#net-http_test-func-testClientTimeout)
  - [func TestClientTimeout_Headers_h1(t *testing.T)](#net-http_test-func-TestClientTimeout_Headers_h1)
  - [func TestClientTimeout_Headers_h2(t *testing.T)](#net-http_test-func-TestClientTimeout_Headers_h2)
  - [func testClientTimeout_Headers(t *testing.T, h2 bool)](#net-http_test-func-testClientTimeout_Headers)
  - [func TestClientTimeoutCancel(t *testing.T)](#net-http_test-func-TestClientTimeoutCancel)
  - [func TestClientRedirectEatsBody_h1(t *testing.T)](#net-http_test-func-TestClientRedirectEatsBody_h1)
  - [func TestClientRedirectEatsBody_h2(t *testing.T)](#net-http_test-func-TestClientRedirectEatsBody_h2)
  - [func testClientRedirectEatsBody(t *testing.T, h2 bool)](#net-http_test-func-testClientRedirectEatsBody)
  - [func TestReferer(t *testing.T)](#net-http_test-func-TestReferer)
  - [func TestClientRedirectResponseWithoutRequest(t *testing.T)](#net-http_test-func-TestClientRedirectResponseWithoutRequest)
  - [func TestClientCopyHeadersOnRedirect(t *testing.T)](#net-http_test-func-TestClientCopyHeadersOnRedirect)
  - [func TestClientCopyHostOnRedirect(t *testing.T)](#net-http_test-func-TestClientCopyHostOnRedirect)
  - [func TestClientAltersCookiesOnRedirect(t *testing.T)](#net-http_test-func-TestClientAltersCookiesOnRedirect)
  - [func TestShouldCopyHeaderOnRedirect(t *testing.T)](#net-http_test-func-TestShouldCopyHeaderOnRedirect)
  - [func TestClientRedirectTypes(t *testing.T)](#net-http_test-func-TestClientRedirectTypes)
  - [func TestTransportBodyReadError(t *testing.T)](#net-http_test-func-TestTransportBodyReadError)
  - [func TestClientCloseIdleConnections(t *testing.T)](#net-http_test-func-TestClientCloseIdleConnections)
  - [func TestClientPropagatesTimeoutToContext(t *testing.T)](#net-http_test-func-TestClientPropagatesTimeoutToContext)
  - [func TestClientDoCanceledVsTimeout_h1(t *testing.T)](#net-http_test-func-TestClientDoCanceledVsTimeout_h1)
  - [func TestClientDoCanceledVsTimeout_h2(t *testing.T)](#net-http_test-func-TestClientDoCanceledVsTimeout_h2)
  - [func testClientDoCanceledVsTimeout(t *testing.T, h2 bool)](#net-http_test-func-testClientDoCanceledVsTimeout)
  - [func TestClientPopulatesNilResponseBody(t *testing.T)](#net-http_test-func-TestClientPopulatesNilResponseBody)
  - [func TestClientCallsCloseOnlyOnce(t *testing.T)](#net-http_test-func-TestClientCallsCloseOnlyOnce)
  - [func optWithServerLog(lg *log.Logger) func(*httptest.Server)](#net-http_test-func-optWithServerLog)
  - [func TestNewClientServerTest(t *testing.T)](#net-http_test-func-TestNewClientServerTest)
  - [func TestChunkedResponseHeaders_h1(t *testing.T)](#net-http_test-func-TestChunkedResponseHeaders_h1)
  - [func TestChunkedResponseHeaders_h2(t *testing.T)](#net-http_test-func-TestChunkedResponseHeaders_h2)
  - [func testChunkedResponseHeaders(t *testing.T, h2 bool)](#net-http_test-func-testChunkedResponseHeaders)
  - [func mostlyCopy(r *Response) *Response](#net-http_test-func-mostlyCopy)
  - [func TestH12_HeadContentLengthNoBody(t *testing.T)](#net-http_test-func-TestH12_HeadContentLengthNoBody)
  - [func TestH12_HeadContentLengthSmallBody(t *testing.T)](#net-http_test-func-TestH12_HeadContentLengthSmallBody)
  - [func TestH12_HeadContentLengthLargeBody(t *testing.T)](#net-http_test-func-TestH12_HeadContentLengthLargeBody)
  - [func TestH12_200NoBody(t *testing.T)](#net-http_test-func-TestH12_200NoBody)
  - [func TestH2_204NoBody(t *testing.T)](#net-http_test-func-TestH2_204NoBody)
  - [func TestH2_304NoBody(t *testing.T)](#net-http_test-func-TestH2_304NoBody)
  - [func TestH2_404NoBody(t *testing.T)](#net-http_test-func-TestH2_404NoBody)
  - [func testH12_noBody(t *testing.T, status int)](#net-http_test-func-testH12_noBody)
  - [func TestH12_SmallBody(t *testing.T)](#net-http_test-func-TestH12_SmallBody)
  - [func TestH12_ExplicitContentLength(t *testing.T)](#net-http_test-func-TestH12_ExplicitContentLength)
  - [func TestH12_FlushBeforeBody(t *testing.T)](#net-http_test-func-TestH12_FlushBeforeBody)
  - [func TestH12_FlushMidBody(t *testing.T)](#net-http_test-func-TestH12_FlushMidBody)
  - [func TestH12_Head_ExplicitLen(t *testing.T)](#net-http_test-func-TestH12_Head_ExplicitLen)
  - [func TestH12_Head_ImplicitLen(t *testing.T)](#net-http_test-func-TestH12_Head_ImplicitLen)
  - [func TestH12_HandlerWritesTooLittle(t *testing.T)](#net-http_test-func-TestH12_HandlerWritesTooLittle)
  - [func TestH12_HandlerWritesTooMuch(t *testing.T)](#net-http_test-func-TestH12_HandlerWritesTooMuch)
  - [func TestH12_AutoGzip(t *testing.T)](#net-http_test-func-TestH12_AutoGzip)
  - [func TestH12_AutoGzip_Disabled(t *testing.T)](#net-http_test-func-TestH12_AutoGzip_Disabled)
  - [func Test304Responses_h1(t *testing.T)](#net-http_test-func-Test304Responses_h1)
  - [func Test304Responses_h2(t *testing.T)](#net-http_test-func-Test304Responses_h2)
  - [func test304Responses(t *testing.T, h2 bool)](#net-http_test-func-test304Responses)
  - [func TestH12_ServerEmptyContentLength(t *testing.T)](#net-http_test-func-TestH12_ServerEmptyContentLength)
  - [func TestH12_RequestContentLength_Known_NonZero(t *testing.T)](#net-http_test-func-TestH12_RequestContentLength_Known_NonZero)
  - [func TestH12_RequestContentLength_Known_Zero(t *testing.T)](#net-http_test-func-TestH12_RequestContentLength_Known_Zero)
  - [func TestH12_RequestContentLength_Unknown(t *testing.T)](#net-http_test-func-TestH12_RequestContentLength_Unknown)
  - [func h12requestContentLength(t *testing.T, bodyfn func() io.Reader, wantLen int64)](#net-http_test-func-h12requestContentLength)
  - [func TestCancelRequestMidBody_h1(t *testing.T)](#net-http_test-func-TestCancelRequestMidBody_h1)
  - [func TestCancelRequestMidBody_h2(t *testing.T)](#net-http_test-func-TestCancelRequestMidBody_h2)
  - [func testCancelRequestMidBody(t *testing.T, h2 bool)](#net-http_test-func-testCancelRequestMidBody)
  - [func TestTrailersClientToServer_h1(t *testing.T)](#net-http_test-func-TestTrailersClientToServer_h1)
  - [func TestTrailersClientToServer_h2(t *testing.T)](#net-http_test-func-TestTrailersClientToServer_h2)
  - [func testTrailersClientToServer(t *testing.T, h2 bool)](#net-http_test-func-testTrailersClientToServer)
  - [func TestTrailersServerToClient_h1(t *testing.T)](#net-http_test-func-TestTrailersServerToClient_h1)
  - [func TestTrailersServerToClient_h2(t *testing.T)](#net-http_test-func-TestTrailersServerToClient_h2)
  - [func TestTrailersServerToClient_Flush_h1(t *testing.T)](#net-http_test-func-TestTrailersServerToClient_Flush_h1)
  - [func TestTrailersServerToClient_Flush_h2(t *testing.T)](#net-http_test-func-TestTrailersServerToClient_Flush_h2)
  - [func testTrailersServerToClient(t *testing.T, h2, flush bool)](#net-http_test-func-testTrailersServerToClient)
  - [func TestResponseBodyReadAfterClose_h1(t *testing.T)](#net-http_test-func-TestResponseBodyReadAfterClose_h1)
  - [func TestResponseBodyReadAfterClose_h2(t *testing.T)](#net-http_test-func-TestResponseBodyReadAfterClose_h2)
  - [func testResponseBodyReadAfterClose(t *testing.T, h2 bool)](#net-http_test-func-testResponseBodyReadAfterClose)
  - [func TestConcurrentReadWriteReqBody_h1(t *testing.T)](#net-http_test-func-TestConcurrentReadWriteReqBody_h1)
  - [func TestConcurrentReadWriteReqBody_h2(t *testing.T)](#net-http_test-func-TestConcurrentReadWriteReqBody_h2)
  - [func testConcurrentReadWriteReqBody(t *testing.T, h2 bool)](#net-http_test-func-testConcurrentReadWriteReqBody)
  - [func TestConnectRequest_h1(t *testing.T)](#net-http_test-func-TestConnectRequest_h1)
  - [func TestConnectRequest_h2(t *testing.T)](#net-http_test-func-TestConnectRequest_h2)
  - [func testConnectRequest(t *testing.T, h2 bool)](#net-http_test-func-testConnectRequest)
  - [func TestTransportUserAgent_h1(t *testing.T)](#net-http_test-func-TestTransportUserAgent_h1)
  - [func TestTransportUserAgent_h2(t *testing.T)](#net-http_test-func-TestTransportUserAgent_h2)
  - [func testTransportUserAgent(t *testing.T, h2 bool)](#net-http_test-func-testTransportUserAgent)
  - [func TestStarRequestFoo_h1(t *testing.T)](#net-http_test-func-TestStarRequestFoo_h1)
  - [func TestStarRequestFoo_h2(t *testing.T)](#net-http_test-func-TestStarRequestFoo_h2)
  - [func TestStarRequestOptions_h1(t *testing.T)](#net-http_test-func-TestStarRequestOptions_h1)
  - [func TestStarRequestOptions_h2(t *testing.T)](#net-http_test-func-TestStarRequestOptions_h2)
  - [func testStarRequest(t *testing.T, method string, h2 bool)](#net-http_test-func-testStarRequest)
  - [func TestTransportDiscardsUnneededConns(t *testing.T)](#net-http_test-func-TestTransportDiscardsUnneededConns)
  - [func TestTransportGCRequest_Body_h1(t *testing.T)](#net-http_test-func-TestTransportGCRequest_Body_h1)
  - [func TestTransportGCRequest_Body_h2(t *testing.T)](#net-http_test-func-TestTransportGCRequest_Body_h2)
  - [func TestTransportGCRequest_NoBody_h1(t *testing.T)](#net-http_test-func-TestTransportGCRequest_NoBody_h1)
  - [func TestTransportGCRequest_NoBody_h2(t *testing.T)](#net-http_test-func-TestTransportGCRequest_NoBody_h2)
  - [func testTransportGCRequest(t *testing.T, h2, body bool)](#net-http_test-func-testTransportGCRequest)
  - [func TestTransportRejectsInvalidHeaders_h1(t *testing.T)](#net-http_test-func-TestTransportRejectsInvalidHeaders_h1)
  - [func TestTransportRejectsInvalidHeaders_h2(t *testing.T)](#net-http_test-func-TestTransportRejectsInvalidHeaders_h2)
  - [func testTransportRejectsInvalidHeaders(t *testing.T, h2 bool)](#net-http_test-func-testTransportRejectsInvalidHeaders)
  - [func TestInterruptWithPanic_h1(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_h1)
  - [func TestInterruptWithPanic_h2(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_h2)
  - [func TestInterruptWithPanic_nil_h1(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_nil_h1)
  - [func TestInterruptWithPanic_nil_h2(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_nil_h2)
  - [func TestInterruptWithPanic_ErrAbortHandler_h1(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_ErrAbortHandler_h1)
  - [func TestInterruptWithPanic_ErrAbortHandler_h2(t *testing.T)](#net-http_test-func-TestInterruptWithPanic_ErrAbortHandler_h2)
  - [func testInterruptWithPanic(t *testing.T, h2 bool, panicValue interface{})](#net-http_test-func-testInterruptWithPanic)
  - [func TestH12_AutoGzipWithDumpResponse(t *testing.T)](#net-http_test-func-TestH12_AutoGzipWithDumpResponse)
  - [func TestCloseIdleConnections_h1(t *testing.T)](#net-http_test-func-TestCloseIdleConnections_h1)
  - [func TestCloseIdleConnections_h2(t *testing.T)](#net-http_test-func-TestCloseIdleConnections_h2)
  - [func testCloseIdleConnections(t *testing.T, h2 bool)](#net-http_test-func-testCloseIdleConnections)
  - [func TestNoSniffExpectRequestBody_h1(t *testing.T)](#net-http_test-func-TestNoSniffExpectRequestBody_h1)
  - [func TestNoSniffExpectRequestBody_h2(t *testing.T)](#net-http_test-func-TestNoSniffExpectRequestBody_h2)
  - [func testNoSniffExpectRequestBody(t *testing.T, h2 bool)](#net-http_test-func-testNoSniffExpectRequestBody)
  - [func TestServerUndeclaredTrailers_h1(t *testing.T)](#net-http_test-func-TestServerUndeclaredTrailers_h1)
  - [func TestServerUndeclaredTrailers_h2(t *testing.T)](#net-http_test-func-TestServerUndeclaredTrailers_h2)
  - [func testServerUndeclaredTrailers(t *testing.T, h2 bool)](#net-http_test-func-testServerUndeclaredTrailers)
  - [func TestBadResponseAfterReadingBody(t *testing.T)](#net-http_test-func-TestBadResponseAfterReadingBody)
  - [func TestWriteHeader0_h1(t *testing.T)](#net-http_test-func-TestWriteHeader0_h1)
  - [func TestWriteHeader0_h2(t *testing.T)](#net-http_test-func-TestWriteHeader0_h2)
  - [func testWriteHeader0(t *testing.T, h2 bool)](#net-http_test-func-testWriteHeader0)
  - [func TestWriteHeaderNoCodeCheck_h1(t *testing.T)](#net-http_test-func-TestWriteHeaderNoCodeCheck_h1)
  - [func TestWriteHeaderNoCodeCheck_h1hijack(t *testing.T)](#net-http_test-func-TestWriteHeaderNoCodeCheck_h1hijack)
  - [func TestWriteHeaderNoCodeCheck_h2(t *testing.T)](#net-http_test-func-TestWriteHeaderNoCodeCheck_h2)
  - [func testWriteHeaderAfterWrite(t *testing.T, h2, hijack bool)](#net-http_test-func-testWriteHeaderAfterWrite)
  - [func TestBidiStreamReverseProxy(t *testing.T)](#net-http_test-func-TestBidiStreamReverseProxy)
  - [func TestH12_WebSocketUpgrade(t *testing.T)](#net-http_test-func-TestH12_WebSocketUpgrade)
  - [func containsDotFile(name string) bool](#net-http_test-func-containsDotFile)
  - [func ExampleFileServer_dotFileHiding()](#net-http_test-func-ExampleFileServer_dotFileHiding)
  - [func ExampleHandle()](#net-http_test-func-ExampleHandle)
  - [func ExampleHijacker()](#net-http_test-func-ExampleHijacker)
  - [func ExampleGet()](#net-http_test-func-ExampleGet)
  - [func ExampleFileServer()](#net-http_test-func-ExampleFileServer)
  - [func ExampleFileServer_stripPrefix()](#net-http_test-func-ExampleFileServer_stripPrefix)
  - [func ExampleStripPrefix()](#net-http_test-func-ExampleStripPrefix)
  - [func ExampleServeMux_Handle()](#net-http_test-func-ExampleServeMux_Handle)
  - [func ExampleResponseWriter_trailers()](#net-http_test-func-ExampleResponseWriter_trailers)
  - [func ExampleServer_Shutdown()](#net-http_test-func-ExampleServer_Shutdown)
  - [func ExampleListenAndServeTLS()](#net-http_test-func-ExampleListenAndServeTLS)
  - [func ExampleListenAndServe()](#net-http_test-func-ExampleListenAndServe)
  - [func ExampleHandleFunc()](#net-http_test-func-ExampleHandleFunc)
  - [func newPeopleHandler() http.Handler](#net-http_test-func-newPeopleHandler)
  - [func ExampleNotFoundHandler()](#net-http_test-func-ExampleNotFoundHandler)
  - [func TestServeFile(t *testing.T)](#net-http_test-func-TestServeFile)
  - [func TestServeFile_DotDot(t *testing.T)](#net-http_test-func-TestServeFile_DotDot)
  - [func TestServeFileDirPanicEmptyPath(t *testing.T)](#net-http_test-func-TestServeFileDirPanicEmptyPath)
  - [func TestFSRedirect(t *testing.T)](#net-http_test-func-TestFSRedirect)
  - [func TestFileServerCleans(t *testing.T)](#net-http_test-func-TestFileServerCleans)
  - [func TestFileServerEscapesNames(t *testing.T)](#net-http_test-func-TestFileServerEscapesNames)
  - [func TestFileServerSortsNames(t *testing.T)](#net-http_test-func-TestFileServerSortsNames)
  - [func mustRemoveAll(dir string)](#net-http_test-func-mustRemoveAll)
  - [func TestFileServerImplicitLeadingSlash(t *testing.T)](#net-http_test-func-TestFileServerImplicitLeadingSlash)
  - [func TestDirJoin(t *testing.T)](#net-http_test-func-TestDirJoin)
  - [func TestEmptyDirOpenCWD(t *testing.T)](#net-http_test-func-TestEmptyDirOpenCWD)
  - [func TestServeFileContentType(t *testing.T)](#net-http_test-func-TestServeFileContentType)
  - [func TestServeFileMimeType(t *testing.T)](#net-http_test-func-TestServeFileMimeType)
  - [func TestServeFileFromCWD(t *testing.T)](#net-http_test-func-TestServeFileFromCWD)
  - [func TestServeDirWithoutTrailingSlash(t *testing.T)](#net-http_test-func-TestServeDirWithoutTrailingSlash)
  - [func TestServeFileWithContentEncoding_h1(t *testing.T)](#net-http_test-func-TestServeFileWithContentEncoding_h1)
  - [func TestServeFileWithContentEncoding_h2(t *testing.T)](#net-http_test-func-TestServeFileWithContentEncoding_h2)
  - [func testServeFileWithContentEncoding(t *testing.T, h2 bool)](#net-http_test-func-testServeFileWithContentEncoding)
  - [func TestServeIndexHtml(t *testing.T)](#net-http_test-func-TestServeIndexHtml)
  - [func TestServeIndexHtmlFS(t *testing.T)](#net-http_test-func-TestServeIndexHtmlFS)
  - [func TestFileServerZeroByte(t *testing.T)](#net-http_test-func-TestFileServerZeroByte)
  - [func TestDirectoryIfNotModified(t *testing.T)](#net-http_test-func-TestDirectoryIfNotModified)
  - [func mustStat(t *testing.T, fileName string) fs.FileInfo](#net-http_test-func-mustStat)
  - [func TestServeContent(t *testing.T)](#net-http_test-func-TestServeContent)
  - [func TestServerFileStatError(t *testing.T)](#net-http_test-func-TestServerFileStatError)
  - [func TestServeContentErrorMessages(t *testing.T)](#net-http_test-func-TestServeContentErrorMessages)
  - [func TestLinuxSendfile(t *testing.T)](#net-http_test-func-TestLinuxSendfile)
  - [func getBody(t *testing.T, testName string, req Request, client *Client) (*Response, []byte)](#net-http_test-func-getBody)
  - [func TestLinuxSendfileChild(*testing.T)](#net-http_test-func-TestLinuxSendfileChild)
  - [func TestFileServerNotDirError(t *testing.T)](#net-http_test-func-TestFileServerNotDirError)
  - [func TestFileServerCleanPath(t *testing.T)](#net-http_test-func-TestFileServerCleanPath)
  - [func Test_scanETag(t *testing.T)](#net-http_test-func-Test_scanETag)
  - [func TestServeFileRejectsInvalidSuffixLengths_h1(t *testing.T)](#net-http_test-func-TestServeFileRejectsInvalidSuffixLengths_h1)
  - [func TestServeFileRejectsInvalidSuffixLengths_h2(t *testing.T)](#net-http_test-func-TestServeFileRejectsInvalidSuffixLengths_h2)
  - [func testServeFileRejectsInvalidSuffixLengths(t *testing.T, h2 bool)](#net-http_test-func-testServeFileRejectsInvalidSuffixLengths)
  - [func TestMain(m *testing.M)](#net-http_test-func-TestMain)
  - [func interestingGoroutines() (gs []string)](#net-http_test-func-interestingGoroutines)
  - [func goroutineLeaked() bool](#net-http_test-func-goroutineLeaked)
  - [func setParallel(t *testing.T)](#net-http_test-func-setParallel)
  - [func runningBenchmarks() bool](#net-http_test-func-runningBenchmarks)
  - [func afterTest(t testing.TB)](#net-http_test-func-afterTest)
  - [func waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool](#net-http_test-func-waitCondition)
  - [func waitErrCondition(waitFor, checkEvery time.Duration, fn func() error) error](#net-http_test-func-waitErrCondition)
  - [func TestQuery(t *testing.T)](#net-http_test-func-TestQuery)
  - [func TestParseFormQuery(t *testing.T)](#net-http_test-func-TestParseFormQuery)
  - [func TestParseFormQueryMethods(t *testing.T)](#net-http_test-func-TestParseFormQueryMethods)
  - [func TestParseFormUnknownContentType(t *testing.T)](#net-http_test-func-TestParseFormUnknownContentType)
  - [func TestParseFormInitializeOnError(t *testing.T)](#net-http_test-func-TestParseFormInitializeOnError)
  - [func TestMultipartReader(t *testing.T)](#net-http_test-func-TestMultipartReader)
  - [func TestParseMultipartFormPopulatesPostForm(t *testing.T)](#net-http_test-func-TestParseMultipartFormPopulatesPostForm)
  - [func TestParseMultipartForm(t *testing.T)](#net-http_test-func-TestParseMultipartForm)
  - [func TestMaxInt64ForMultipartFormMaxMemoryOverflow(t *testing.T)](#net-http_test-func-TestMaxInt64ForMultipartFormMaxMemoryOverflow)
  - [func TestRedirect_h1(t *testing.T)](#net-http_test-func-TestRedirect_h1)
  - [func TestRedirect_h2(t *testing.T)](#net-http_test-func-TestRedirect_h2)
  - [func testRedirect(t *testing.T, h2 bool)](#net-http_test-func-testRedirect)
  - [func TestSetBasicAuth(t *testing.T)](#net-http_test-func-TestSetBasicAuth)
  - [func TestMultipartRequest(t *testing.T)](#net-http_test-func-TestMultipartRequest)
  - [func TestMultipartRequestAuto(t *testing.T)](#net-http_test-func-TestMultipartRequestAuto)
  - [func TestMissingFileMultipartRequest(t *testing.T)](#net-http_test-func-TestMissingFileMultipartRequest)
  - [func TestFormValueCallsParseMultipartForm(t *testing.T)](#net-http_test-func-TestFormValueCallsParseMultipartForm)
  - [func TestFormFileCallsParseMultipartForm(t *testing.T)](#net-http_test-func-TestFormFileCallsParseMultipartForm)
  - [func TestParseMultipartFormOrder(t *testing.T)](#net-http_test-func-TestParseMultipartFormOrder)
  - [func TestMultipartReaderOrder(t *testing.T)](#net-http_test-func-TestMultipartReaderOrder)
  - [func TestFormFileOrder(t *testing.T)](#net-http_test-func-TestFormFileOrder)
  - [func TestReadRequestErrors(t *testing.T)](#net-http_test-func-TestReadRequestErrors)
  - [func TestNewRequestHost(t *testing.T)](#net-http_test-func-TestNewRequestHost)
  - [func TestRequestInvalidMethod(t *testing.T)](#net-http_test-func-TestRequestInvalidMethod)
  - [func TestNewRequestContentLength(t *testing.T)](#net-http_test-func-TestNewRequestContentLength)
  - [func TestParseHTTPVersion(t *testing.T)](#net-http_test-func-TestParseHTTPVersion)
  - [func TestGetBasicAuth(t *testing.T)](#net-http_test-func-TestGetBasicAuth)
  - [func TestParseBasicAuth(t *testing.T)](#net-http_test-func-TestParseBasicAuth)
  - [func TestRequestWriteBufferedWriter(t *testing.T)](#net-http_test-func-TestRequestWriteBufferedWriter)
  - [func TestRequestBadHost(t *testing.T)](#net-http_test-func-TestRequestBadHost)
  - [func TestStarRequest(t *testing.T)](#net-http_test-func-TestStarRequest)
  - [func TestIssue10884_MaxBytesEOF(t *testing.T)](#net-http_test-func-TestIssue10884_MaxBytesEOF)
  - [func TestMaxBytesReaderStickyError(t *testing.T)](#net-http_test-func-TestMaxBytesReaderStickyError)
  - [func TestWithContextDeepCopiesURL(t *testing.T)](#net-http_test-func-TestWithContextDeepCopiesURL)
  - [func TestRequestCloneTransferEncoding(t *testing.T)](#net-http_test-func-TestRequestCloneTransferEncoding)
  - [func TestNoPanicOnRoundTripWithBasicAuth_h1(t *testing.T)](#net-http_test-func-TestNoPanicOnRoundTripWithBasicAuth_h1)
  - [func TestNoPanicOnRoundTripWithBasicAuth_h2(t *testing.T)](#net-http_test-func-TestNoPanicOnRoundTripWithBasicAuth_h2)
  - [func testNoPanicWithBasicAuth(t *testing.T, h2 bool)](#net-http_test-func-testNoPanicWithBasicAuth)
  - [func TestNewRequestGetBody(t *testing.T)](#net-http_test-func-TestNewRequestGetBody)
  - [func testMissingFile(t *testing.T, req *Request)](#net-http_test-func-testMissingFile)
  - [func newTestMultipartRequest(t *testing.T) *Request](#net-http_test-func-newTestMultipartRequest)
  - [func validateTestMultipartContents(t *testing.T, req *Request, allMem bool)](#net-http_test-func-validateTestMultipartContents)
  - [func testMultipartFile(t *testing.T, req *Request, key, expectFilename, expectContent string) multipart.File](#net-http_test-func-testMultipartFile)
  - [func benchmarkReadRequest(b *testing.B, request string)](#net-http_test-func-benchmarkReadRequest)
  - [func BenchmarkReadRequestChrome(b *testing.B)](#net-http_test-func-BenchmarkReadRequestChrome)
  - [func BenchmarkReadRequestCurl(b *testing.B)](#net-http_test-func-BenchmarkReadRequestCurl)
  - [func BenchmarkReadRequestApachebench(b *testing.B)](#net-http_test-func-BenchmarkReadRequestApachebench)
  - [func BenchmarkReadRequestSiege(b *testing.B)](#net-http_test-func-BenchmarkReadRequestSiege)
  - [func BenchmarkReadRequestWrk(b *testing.B)](#net-http_test-func-BenchmarkReadRequestWrk)
  - [func BenchmarkFileAndServer_1KB(b *testing.B)](#net-http_test-func-BenchmarkFileAndServer_1KB)
  - [func BenchmarkFileAndServer_16MB(b *testing.B)](#net-http_test-func-BenchmarkFileAndServer_16MB)
  - [func BenchmarkFileAndServer_64MB(b *testing.B)](#net-http_test-func-BenchmarkFileAndServer_64MB)
  - [func benchmarkFileAndServer(b *testing.B, n int64)](#net-http_test-func-benchmarkFileAndServer)
  - [func runFileAndServerBenchmarks(b *testing.B, tlsOption bool, f *os.File, n int64)](#net-http_test-func-runFileAndServerBenchmarks)
  - [func reqBytes(req string) []byte](#net-http_test-func-reqBytes)
  - [func TestConsumingBodyOnNextConn(t *testing.T)](#net-http_test-func-TestConsumingBodyOnNextConn)
  - [func TestHostHandlers(t *testing.T)](#net-http_test-func-TestHostHandlers)
  - [func serve(code int) HandlerFunc](#net-http_test-func-serve)
  - [func checkQueryStringHandler(w ResponseWriter, r *Request)](#net-http_test-func-checkQueryStringHandler)
  - [func TestServeMuxHandler(t *testing.T)](#net-http_test-func-TestServeMuxHandler)
  - [func TestServeMuxHandleFuncWithNilHandler(t *testing.T)](#net-http_test-func-TestServeMuxHandleFuncWithNilHandler)
  - [func TestServeMuxHandlerRedirects(t *testing.T)](#net-http_test-func-TestServeMuxHandlerRedirects)
  - [func TestMuxRedirectLeadingSlashes(t *testing.T)](#net-http_test-func-TestMuxRedirectLeadingSlashes)
  - [func TestServeWithSlashRedirectKeepsQueryString(t *testing.T)](#net-http_test-func-TestServeWithSlashRedirectKeepsQueryString)
  - [func TestServeWithSlashRedirectForHostPatterns(t *testing.T)](#net-http_test-func-TestServeWithSlashRedirectForHostPatterns)
  - [func TestShouldRedirectConcurrency(t *testing.T)](#net-http_test-func-TestShouldRedirectConcurrency)
  - [func BenchmarkServeMux(b *testing.B)](#net-http_test-func-BenchmarkServeMux)
  - [func BenchmarkServeMux_SkipServe(b *testing.B)](#net-http_test-func-BenchmarkServeMux_SkipServe)
  - [func benchmarkServeMux(b *testing.B, runHandler bool)](#net-http_test-func-benchmarkServeMux)
  - [func TestServerTimeouts(t *testing.T)](#net-http_test-func-TestServerTimeouts)
  - [func testServerTimeouts(timeout time.Duration) error](#net-http_test-func-testServerTimeouts)
  - [func TestHTTP2WriteDeadlineExtendedOnNewRequest(t *testing.T)](#net-http_test-func-TestHTTP2WriteDeadlineExtendedOnNewRequest)
  - [func tryTimeouts(t *testing.T, testFunc func(timeout time.Duration) error)](#net-http_test-func-tryTimeouts)
  - [func TestHTTP2WriteDeadlineEnforcedPerStream(t *testing.T)](#net-http_test-func-TestHTTP2WriteDeadlineEnforcedPerStream)
  - [func testHTTP2WriteDeadlineEnforcedPerStream(timeout time.Duration) error](#net-http_test-func-testHTTP2WriteDeadlineEnforcedPerStream)
  - [func TestHTTP2NoWriteDeadline(t *testing.T)](#net-http_test-func-TestHTTP2NoWriteDeadline)
  - [func testHTTP2NoWriteDeadline(timeout time.Duration) error](#net-http_test-func-testHTTP2NoWriteDeadline)
  - [func TestOnlyWriteTimeout(t *testing.T)](#net-http_test-func-TestOnlyWriteTimeout)
  - [func TestIdentityResponse(t *testing.T)](#net-http_test-func-TestIdentityResponse)
  - [func testTCPConnectionCloses(t *testing.T, req string, h Handler)](#net-http_test-func-testTCPConnectionCloses)
  - [func testTCPConnectionStaysOpen(t *testing.T, req string, handler Handler)](#net-http_test-func-testTCPConnectionStaysOpen)
  - [func TestServeHTTP10Close(t *testing.T)](#net-http_test-func-TestServeHTTP10Close)
  - [func TestClientCanClose(t *testing.T)](#net-http_test-func-TestClientCanClose)
  - [func TestHandlersCanSetConnectionClose11(t *testing.T)](#net-http_test-func-TestHandlersCanSetConnectionClose11)
  - [func TestHandlersCanSetConnectionClose10(t *testing.T)](#net-http_test-func-TestHandlersCanSetConnectionClose10)
  - [func TestHTTP2UpgradeClosesConnection(t *testing.T)](#net-http_test-func-TestHTTP2UpgradeClosesConnection)
  - [func send204(w ResponseWriter, r *Request)](#net-http_test-func-send204)
  - [func send304(w ResponseWriter, r *Request)](#net-http_test-func-send304)
  - [func TestHTTP10KeepAlive204Response(t *testing.T)](#net-http_test-func-TestHTTP10KeepAlive204Response)
  - [func TestHTTP11KeepAlive204Response(t *testing.T)](#net-http_test-func-TestHTTP11KeepAlive204Response)
  - [func TestHTTP10KeepAlive304Response(t *testing.T)](#net-http_test-func-TestHTTP10KeepAlive304Response)
  - [func TestKeepAliveFinalChunkWithEOF(t *testing.T)](#net-http_test-func-TestKeepAliveFinalChunkWithEOF)
  - [func TestSetsRemoteAddr_h1(t *testing.T)](#net-http_test-func-TestSetsRemoteAddr_h1)
  - [func TestSetsRemoteAddr_h2(t *testing.T)](#net-http_test-func-TestSetsRemoteAddr_h2)
  - [func testSetsRemoteAddr(t *testing.T, h2 bool)](#net-http_test-func-testSetsRemoteAddr)
  - [func TestServerAllowsBlockingRemoteAddr(t *testing.T)](#net-http_test-func-TestServerAllowsBlockingRemoteAddr)
  - [func TestHeadResponses_h1(t *testing.T)](#net-http_test-func-TestHeadResponses_h1)
  - [func TestHeadResponses_h2(t *testing.T)](#net-http_test-func-TestHeadResponses_h2)
  - [func testHeadResponses(t *testing.T, h2 bool)](#net-http_test-func-testHeadResponses)
  - [func TestTLSHandshakeTimeout(t *testing.T)](#net-http_test-func-TestTLSHandshakeTimeout)
  - [func TestTLSServer(t *testing.T)](#net-http_test-func-TestTLSServer)
  - [func TestServeTLS(t *testing.T)](#net-http_test-func-TestServeTLS)
  - [func TestTLSServerRejectHTTPRequests(t *testing.T)](#net-http_test-func-TestTLSServerRejectHTTPRequests)
  - [func TestAutomaticHTTP2_Serve_NoTLSConfig(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_Serve_NoTLSConfig)
  - [func TestAutomaticHTTP2_Serve_NonH2TLSConfig(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_Serve_NonH2TLSConfig)
  - [func TestAutomaticHTTP2_Serve_H2TLSConfig(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_Serve_H2TLSConfig)
  - [func testAutomaticHTTP2_Serve(t *testing.T, tlsConf *tls.Config, wantH2 bool)](#net-http_test-func-testAutomaticHTTP2_Serve)
  - [func TestAutomaticHTTP2_Serve_WithTLSConfig(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_Serve_WithTLSConfig)
  - [func TestAutomaticHTTP2_ListenAndServe(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_ListenAndServe)
  - [func TestAutomaticHTTP2_ListenAndServe_GetCertificate(t *testing.T)](#net-http_test-func-TestAutomaticHTTP2_ListenAndServe_GetCertificate)
  - [func testAutomaticHTTP2_ListenAndServe(t *testing.T, tlsConf *tls.Config)](#net-http_test-func-testAutomaticHTTP2_ListenAndServe)
  - [func TestServerExpect(t *testing.T)](#net-http_test-func-TestServerExpect)
  - [func TestServerUnreadRequestBodyLittle(t *testing.T)](#net-http_test-func-TestServerUnreadRequestBodyLittle)
  - [func TestServerUnreadRequestBodyLarge(t *testing.T)](#net-http_test-func-TestServerUnreadRequestBodyLarge)
  - [func TestHandlerBodyClose(t *testing.T)](#net-http_test-func-TestHandlerBodyClose)
  - [func testHandlerBodyClose(t *testing.T, i int, tt handlerBodyCloseTest)](#net-http_test-func-testHandlerBodyClose)
  - [func TestRequestBodyReadErrorClosesConnection(t *testing.T)](#net-http_test-func-TestRequestBodyReadErrorClosesConnection)
  - [func TestInvalidTrailerClosesConnection(t *testing.T)](#net-http_test-func-TestInvalidTrailerClosesConnection)
  - [func TestRequestBodyTimeoutClosesConnection(t *testing.T)](#net-http_test-func-TestRequestBodyTimeoutClosesConnection)
  - [func TestTimeoutHandler_h1(t *testing.T)](#net-http_test-func-TestTimeoutHandler_h1)
  - [func TestTimeoutHandler_h2(t *testing.T)](#net-http_test-func-TestTimeoutHandler_h2)
  - [func testTimeoutHandler(t *testing.T, h2 bool)](#net-http_test-func-testTimeoutHandler)
  - [func TestTimeoutHandlerRace(t *testing.T)](#net-http_test-func-TestTimeoutHandlerRace)
  - [func TestTimeoutHandlerRaceHeader(t *testing.T)](#net-http_test-func-TestTimeoutHandlerRaceHeader)
  - [func TestTimeoutHandlerRaceHeaderTimeout(t *testing.T)](#net-http_test-func-TestTimeoutHandlerRaceHeaderTimeout)
  - [func TestTimeoutHandlerStartTimerWhenServing(t *testing.T)](#net-http_test-func-TestTimeoutHandlerStartTimerWhenServing)
  - [func TestTimeoutHandlerEmptyResponse(t *testing.T)](#net-http_test-func-TestTimeoutHandlerEmptyResponse)
  - [func TestTimeoutHandlerPanicRecovery(t *testing.T)](#net-http_test-func-TestTimeoutHandlerPanicRecovery)
  - [func TestRedirectBadPath(t *testing.T)](#net-http_test-func-TestRedirectBadPath)
  - [func TestRedirect(t *testing.T)](#net-http_test-func-TestRedirect)
  - [func TestRedirectContentTypeAndBody(t *testing.T)](#net-http_test-func-TestRedirectContentTypeAndBody)
  - [func TestZeroLengthPostAndResponse_h1(t *testing.T)](#net-http_test-func-TestZeroLengthPostAndResponse_h1)
  - [func TestZeroLengthPostAndResponse_h2(t *testing.T)](#net-http_test-func-TestZeroLengthPostAndResponse_h2)
  - [func testZeroLengthPostAndResponse(t *testing.T, h2 bool)](#net-http_test-func-testZeroLengthPostAndResponse)
  - [func TestHandlerPanicNil_h1(t *testing.T)](#net-http_test-func-TestHandlerPanicNil_h1)
  - [func TestHandlerPanicNil_h2(t *testing.T)](#net-http_test-func-TestHandlerPanicNil_h2)
  - [func TestHandlerPanic_h1(t *testing.T)](#net-http_test-func-TestHandlerPanic_h1)
  - [func TestHandlerPanic_h2(t *testing.T)](#net-http_test-func-TestHandlerPanic_h2)
  - [func TestHandlerPanicWithHijack(t *testing.T)](#net-http_test-func-TestHandlerPanicWithHijack)
  - [func testHandlerPanic(t *testing.T, withHijack, h2 bool, wrapper func(Handler) Handler, panicValue interface{})](#net-http_test-func-testHandlerPanic)
  - [func TestServerWriteHijackZeroBytes(t *testing.T)](#net-http_test-func-TestServerWriteHijackZeroBytes)
  - [func TestServerNoDate_h1(t *testing.T)](#net-http_test-func-TestServerNoDate_h1)
  - [func TestServerNoDate_h2(t *testing.T)](#net-http_test-func-TestServerNoDate_h2)
  - [func TestServerNoContentType_h1(t *testing.T)](#net-http_test-func-TestServerNoContentType_h1)
  - [func TestServerNoContentType_h2(t *testing.T)](#net-http_test-func-TestServerNoContentType_h2)
  - [func testServerNoHeader(t *testing.T, h2 bool, header string)](#net-http_test-func-testServerNoHeader)
  - [func TestStripPrefix(t *testing.T)](#net-http_test-func-TestStripPrefix)
  - [func TestStripPrefixNotModifyRequest(t *testing.T)](#net-http_test-func-TestStripPrefixNotModifyRequest)
  - [func TestRequestLimit_h1(t *testing.T)](#net-http_test-func-TestRequestLimit_h1)
  - [func TestRequestLimit_h2(t *testing.T)](#net-http_test-func-TestRequestLimit_h2)
  - [func testRequestLimit(t *testing.T, h2 bool)](#net-http_test-func-testRequestLimit)
  - [func TestRequestBodyLimit_h1(t *testing.T)](#net-http_test-func-TestRequestBodyLimit_h1)
  - [func TestRequestBodyLimit_h2(t *testing.T)](#net-http_test-func-TestRequestBodyLimit_h2)
  - [func testRequestBodyLimit(t *testing.T, h2 bool)](#net-http_test-func-testRequestBodyLimit)
  - [func TestClientWriteShutdown(t *testing.T)](#net-http_test-func-TestClientWriteShutdown)
  - [func TestServerBufferedChunking(t *testing.T)](#net-http_test-func-TestServerBufferedChunking)
  - [func TestServerGracefulClose(t *testing.T)](#net-http_test-func-TestServerGracefulClose)
  - [func TestCaseSensitiveMethod_h1(t *testing.T)](#net-http_test-func-TestCaseSensitiveMethod_h1)
  - [func TestCaseSensitiveMethod_h2(t *testing.T)](#net-http_test-func-TestCaseSensitiveMethod_h2)
  - [func testCaseSensitiveMethod(t *testing.T, h2 bool)](#net-http_test-func-testCaseSensitiveMethod)
  - [func TestContentLengthZero(t *testing.T)](#net-http_test-func-TestContentLengthZero)
  - [func TestCloseNotifier(t *testing.T)](#net-http_test-func-TestCloseNotifier)
  - [func TestCloseNotifierPipelined(t *testing.T)](#net-http_test-func-TestCloseNotifierPipelined)
  - [func TestCloseNotifierChanLeak(t *testing.T)](#net-http_test-func-TestCloseNotifierChanLeak)
  - [func TestHijackAfterCloseNotifier(t *testing.T)](#net-http_test-func-TestHijackAfterCloseNotifier)
  - [func TestHijackBeforeRequestBodyRead(t *testing.T)](#net-http_test-func-TestHijackBeforeRequestBodyRead)
  - [func TestOptions(t *testing.T)](#net-http_test-func-TestOptions)
  - [func TestHeaderToWire(t *testing.T)](#net-http_test-func-TestHeaderToWire)
  - [func TestAcceptMaxFds(t *testing.T)](#net-http_test-func-TestAcceptMaxFds)
  - [func TestWriteAfterHijack(t *testing.T)](#net-http_test-func-TestWriteAfterHijack)
  - [func TestDoubleHijack(t *testing.T)](#net-http_test-func-TestDoubleHijack)
  - [func TestHTTP10ConnectionHeader(t *testing.T)](#net-http_test-func-TestHTTP10ConnectionHeader)
  - [func TestServerReaderFromOrder_h1(t *testing.T)](#net-http_test-func-TestServerReaderFromOrder_h1)
  - [func TestServerReaderFromOrder_h2(t *testing.T)](#net-http_test-func-TestServerReaderFromOrder_h2)
  - [func testServerReaderFromOrder(t *testing.T, h2 bool)](#net-http_test-func-testServerReaderFromOrder)
  - [func TestCodesPreventingContentTypeAndBody(t *testing.T)](#net-http_test-func-TestCodesPreventingContentTypeAndBody)
  - [func TestContentTypeOkayOn204(t *testing.T)](#net-http_test-func-TestContentTypeOkayOn204)
  - [func TestTransportAndServerSharedBodyRace_h1(t *testing.T)](#net-http_test-func-TestTransportAndServerSharedBodyRace_h1)
  - [func TestTransportAndServerSharedBodyRace_h2(t *testing.T)](#net-http_test-func-TestTransportAndServerSharedBodyRace_h2)
  - [func testTransportAndServerSharedBodyRace(t *testing.T, h2 bool)](#net-http_test-func-testTransportAndServerSharedBodyRace)
  - [func TestRequestBodyCloseDoesntBlock(t *testing.T)](#net-http_test-func-TestRequestBodyCloseDoesntBlock)
  - [func TestResponseWriterWriteString(t *testing.T)](#net-http_test-func-TestResponseWriterWriteString)
  - [func TestAppendTime(t *testing.T)](#net-http_test-func-TestAppendTime)
  - [func TestServerConnState(t *testing.T)](#net-http_test-func-TestServerConnState)
  - [func TestServerKeepAlivesEnabled(t *testing.T)](#net-http_test-func-TestServerKeepAlivesEnabled)
  - [func TestServerEmptyBodyRace_h1(t *testing.T)](#net-http_test-func-TestServerEmptyBodyRace_h1)
  - [func TestServerEmptyBodyRace_h2(t *testing.T)](#net-http_test-func-TestServerEmptyBodyRace_h2)
  - [func testServerEmptyBodyRace(t *testing.T, h2 bool)](#net-http_test-func-testServerEmptyBodyRace)
  - [func TestServerConnStateNew(t *testing.T)](#net-http_test-func-TestServerConnStateNew)
  - [func TestCloseWrite(t *testing.T)](#net-http_test-func-TestCloseWrite)
  - [func TestServerFlushAndHijack(t *testing.T)](#net-http_test-func-TestServerFlushAndHijack)
  - [func TestServerKeepAliveAfterWriteError(t *testing.T)](#net-http_test-func-TestServerKeepAliveAfterWriteError)
  - [func TestNoContentLengthIfTransferEncoding(t *testing.T)](#net-http_test-func-TestNoContentLengthIfTransferEncoding)
  - [func TestTolerateCRLFBeforeRequestLine(t *testing.T)](#net-http_test-func-TestTolerateCRLFBeforeRequestLine)
  - [func TestIssue13893_Expect100(t *testing.T)](#net-http_test-func-TestIssue13893_Expect100)
  - [func TestIssue11549_Expect100(t *testing.T)](#net-http_test-func-TestIssue11549_Expect100)
  - [func TestHandlerFinishSkipBigContentLengthRead(t *testing.T)](#net-http_test-func-TestHandlerFinishSkipBigContentLengthRead)
  - [func TestHandlerSetsBodyNil_h1(t *testing.T)](#net-http_test-func-TestHandlerSetsBodyNil_h1)
  - [func TestHandlerSetsBodyNil_h2(t *testing.T)](#net-http_test-func-TestHandlerSetsBodyNil_h2)
  - [func testHandlerSetsBodyNil(t *testing.T, h2 bool)](#net-http_test-func-testHandlerSetsBodyNil)
  - [func TestServerValidatesHostHeader(t *testing.T)](#net-http_test-func-TestServerValidatesHostHeader)
  - [func TestServerHandlersCanHandleH2PRI(t *testing.T)](#net-http_test-func-TestServerHandlersCanHandleH2PRI)
  - [func TestServerValidatesHeaders(t *testing.T)](#net-http_test-func-TestServerValidatesHeaders)
  - [func TestServerRequestContextCancel_ServeHTTPDone_h1(t *testing.T)](#net-http_test-func-TestServerRequestContextCancel_ServeHTTPDone_h1)
  - [func TestServerRequestContextCancel_ServeHTTPDone_h2(t *testing.T)](#net-http_test-func-TestServerRequestContextCancel_ServeHTTPDone_h2)
  - [func testServerRequestContextCancel_ServeHTTPDone(t *testing.T, h2 bool)](#net-http_test-func-testServerRequestContextCancel_ServeHTTPDone)
  - [func TestServerRequestContextCancel_ConnClose(t *testing.T)](#net-http_test-func-TestServerRequestContextCancel_ConnClose)
  - [func TestServerContext_ServerContextKey_h1(t *testing.T)](#net-http_test-func-TestServerContext_ServerContextKey_h1)
  - [func TestServerContext_ServerContextKey_h2(t *testing.T)](#net-http_test-func-TestServerContext_ServerContextKey_h2)
  - [func testServerContext_ServerContextKey(t *testing.T, h2 bool)](#net-http_test-func-testServerContext_ServerContextKey)
  - [func TestServerContext_LocalAddrContextKey_h1(t *testing.T)](#net-http_test-func-TestServerContext_LocalAddrContextKey_h1)
  - [func TestServerContext_LocalAddrContextKey_h2(t *testing.T)](#net-http_test-func-TestServerContext_LocalAddrContextKey_h2)
  - [func testServerContext_LocalAddrContextKey(t *testing.T, h2 bool)](#net-http_test-func-testServerContext_LocalAddrContextKey)
  - [func TestHandlerSetTransferEncodingChunked(t *testing.T)](#net-http_test-func-TestHandlerSetTransferEncodingChunked)
  - [func TestHandlerSetTransferEncodingGzip(t *testing.T)](#net-http_test-func-TestHandlerSetTransferEncodingGzip)
  - [func BenchmarkClientServer(b *testing.B)](#net-http_test-func-BenchmarkClientServer)
  - [func BenchmarkClientServerParallel4(b *testing.B)](#net-http_test-func-BenchmarkClientServerParallel4)
  - [func BenchmarkClientServerParallel64(b *testing.B)](#net-http_test-func-BenchmarkClientServerParallel64)
  - [func BenchmarkClientServerParallelTLS4(b *testing.B)](#net-http_test-func-BenchmarkClientServerParallelTLS4)
  - [func BenchmarkClientServerParallelTLS64(b *testing.B)](#net-http_test-func-BenchmarkClientServerParallelTLS64)
  - [func benchmarkClientServerParallel(b *testing.B, parallelism int, useTLS bool)](#net-http_test-func-benchmarkClientServerParallel)
  - [func BenchmarkServer(b *testing.B)](#net-http_test-func-BenchmarkServer)
  - [func getNoBody(urlStr string) (*Response, error)](#net-http_test-func-getNoBody)
  - [func BenchmarkClient(b *testing.B)](#net-http_test-func-BenchmarkClient)
  - [func BenchmarkServerFakeConnNoKeepAlive(b *testing.B)](#net-http_test-func-BenchmarkServerFakeConnNoKeepAlive)
  - [func BenchmarkServerFakeConnWithKeepAlive(b *testing.B)](#net-http_test-func-BenchmarkServerFakeConnWithKeepAlive)
  - [func BenchmarkServerFakeConnWithKeepAliveLite(b *testing.B)](#net-http_test-func-BenchmarkServerFakeConnWithKeepAliveLite)
  - [func BenchmarkServerHandlerTypeLen(b *testing.B)](#net-http_test-func-BenchmarkServerHandlerTypeLen)
  - [func BenchmarkServerHandlerNoLen(b *testing.B)](#net-http_test-func-BenchmarkServerHandlerNoLen)
  - [func BenchmarkServerHandlerNoType(b *testing.B)](#net-http_test-func-BenchmarkServerHandlerNoType)
  - [func BenchmarkServerHandlerNoHeader(b *testing.B)](#net-http_test-func-BenchmarkServerHandlerNoHeader)
  - [func benchmarkHandler(b *testing.B, h Handler)](#net-http_test-func-benchmarkHandler)
  - [func BenchmarkServerHijack(b *testing.B)](#net-http_test-func-BenchmarkServerHijack)
  - [func BenchmarkCloseNotifier(b *testing.B)](#net-http_test-func-BenchmarkCloseNotifier)
  - [func TestConcurrentServerServe(t *testing.T)](#net-http_test-func-TestConcurrentServerServe)
  - [func TestServerIdleTimeout(t *testing.T)](#net-http_test-func-TestServerIdleTimeout)
  - [func get(t *testing.T, c *Client, url string) string](#net-http_test-func-get)
  - [func TestServerSetKeepAlivesEnabledClosesConns(t *testing.T)](#net-http_test-func-TestServerSetKeepAlivesEnabledClosesConns)
  - [func TestServerShutdown_h1(t *testing.T)](#net-http_test-func-TestServerShutdown_h1)
  - [func TestServerShutdown_h2(t *testing.T)](#net-http_test-func-TestServerShutdown_h2)
  - [func testServerShutdown(t *testing.T, h2 bool)](#net-http_test-func-testServerShutdown)
  - [func TestServerShutdownStateNew(t *testing.T)](#net-http_test-func-TestServerShutdownStateNew)
  - [func TestServerCloseDeadlock(t *testing.T)](#net-http_test-func-TestServerCloseDeadlock)
  - [func TestServerKeepAlivesEnabled_h1(t *testing.T)](#net-http_test-func-TestServerKeepAlivesEnabled_h1)
  - [func TestServerKeepAlivesEnabled_h2(t *testing.T)](#net-http_test-func-TestServerKeepAlivesEnabled_h2)
  - [func testServerKeepAlivesEnabled(t *testing.T, h2 bool)](#net-http_test-func-testServerKeepAlivesEnabled)
  - [func TestServerCancelsReadTimeoutWhenIdle(t *testing.T)](#net-http_test-func-TestServerCancelsReadTimeoutWhenIdle)
  - [func runTimeSensitiveTest(t *testing.T, durations []time.Duration, test func(t *testing.T, d time.Duration) error)](#net-http_test-func-runTimeSensitiveTest)
  - [func TestServerDuplicateBackgroundRead(t *testing.T)](#net-http_test-func-TestServerDuplicateBackgroundRead)
  - [func TestServerHijackGetsBackgroundByte(t *testing.T)](#net-http_test-func-TestServerHijackGetsBackgroundByte)
  - [func TestServerHijackGetsBackgroundByte_big(t *testing.T)](#net-http_test-func-TestServerHijackGetsBackgroundByte_big)
  - [func TestServerValidatesMethod(t *testing.T)](#net-http_test-func-TestServerValidatesMethod)
  - [func TestServerListenNotComparableListener(t *testing.T)](#net-http_test-func-TestServerListenNotComparableListener)
  - [func TestServerCloseListenerOnce(t *testing.T)](#net-http_test-func-TestServerCloseListenerOnce)
  - [func TestServerShutdownThenServe(t *testing.T)](#net-http_test-func-TestServerShutdownThenServe)
  - [func TestStripPortFromHost(t *testing.T)](#net-http_test-func-TestStripPortFromHost)
  - [func TestServerContexts(t *testing.T)](#net-http_test-func-TestServerContexts)
  - [func TestServerContextsHTTP2(t *testing.T)](#net-http_test-func-TestServerContextsHTTP2)
  - [func TestConnContextNotModifyingAllContexts(t *testing.T)](#net-http_test-func-TestConnContextNotModifyingAllContexts)
  - [func TestUnsupportedTransferEncodingsReturn501(t *testing.T)](#net-http_test-func-TestUnsupportedTransferEncodingsReturn501)
  - [func TestContentEncodingNoSniffing_h1(t *testing.T)](#net-http_test-func-TestContentEncodingNoSniffing_h1)
  - [func TestContentEncodingNoSniffing_h2(t *testing.T)](#net-http_test-func-TestContentEncodingNoSniffing_h2)
  - [func testContentEncodingNoSniffing(t *testing.T, h2 bool)](#net-http_test-func-testContentEncodingNoSniffing)
  - [func TestTimeoutHandlerSuperfluousLogs(t *testing.T)](#net-http_test-func-TestTimeoutHandlerSuperfluousLogs)
  - [func fetchWireResponse(host string, http1ReqBody []byte) ([]byte, error)](#net-http_test-func-fetchWireResponse)
  - [func BenchmarkResponseStatusLine(b *testing.B)](#net-http_test-func-BenchmarkResponseStatusLine)
  - [func TestDisableKeepAliveUpgrade(t *testing.T)](#net-http_test-func-TestDisableKeepAliveUpgrade)
  - [func TestDetectContentType(t *testing.T)](#net-http_test-func-TestDetectContentType)
  - [func TestServerContentType_h1(t *testing.T)](#net-http_test-func-TestServerContentType_h1)
  - [func TestServerContentType_h2(t *testing.T)](#net-http_test-func-TestServerContentType_h2)
  - [func testServerContentType(t *testing.T, h2 bool)](#net-http_test-func-testServerContentType)
  - [func TestServerIssue5953_h1(t *testing.T)](#net-http_test-func-TestServerIssue5953_h1)
  - [func TestServerIssue5953_h2(t *testing.T)](#net-http_test-func-TestServerIssue5953_h2)
  - [func testServerIssue5953(t *testing.T, h2 bool)](#net-http_test-func-testServerIssue5953)
  - [func TestContentTypeWithCopy_h1(t *testing.T)](#net-http_test-func-TestContentTypeWithCopy_h1)
  - [func TestContentTypeWithCopy_h2(t *testing.T)](#net-http_test-func-TestContentTypeWithCopy_h2)
  - [func testContentTypeWithCopy(t *testing.T, h2 bool)](#net-http_test-func-testContentTypeWithCopy)
  - [func TestSniffWriteSize_h1(t *testing.T)](#net-http_test-func-TestSniffWriteSize_h1)
  - [func TestSniffWriteSize_h2(t *testing.T)](#net-http_test-func-TestSniffWriteSize_h2)
  - [func testSniffWriteSize(t *testing.T, h2 bool)](#net-http_test-func-testSniffWriteSize)
  - [func TestReuseRequest(t *testing.T)](#net-http_test-func-TestReuseRequest)
  - [func TestTransportKeepAlives(t *testing.T)](#net-http_test-func-TestTransportKeepAlives)
  - [func TestTransportConnectionCloseOnResponse(t *testing.T)](#net-http_test-func-TestTransportConnectionCloseOnResponse)
  - [func TestTransportConnectionCloseOnRequest(t *testing.T)](#net-http_test-func-TestTransportConnectionCloseOnRequest)
  - [func TestTransportConnectionCloseOnRequestDisableKeepAlive(t *testing.T)](#net-http_test-func-TestTransportConnectionCloseOnRequestDisableKeepAlive)
  - [func TestTransportRespectRequestWantsClose(t *testing.T)](#net-http_test-func-TestTransportRespectRequestWantsClose)
  - [func TestTransportIdleCacheKeys(t *testing.T)](#net-http_test-func-TestTransportIdleCacheKeys)
  - [func TestTransportReadToEndReusesConn(t *testing.T)](#net-http_test-func-TestTransportReadToEndReusesConn)
  - [func TestTransportMaxPerHostIdleConns(t *testing.T)](#net-http_test-func-TestTransportMaxPerHostIdleConns)
  - [func TestTransportMaxConnsPerHostIncludeDialInProgress(t *testing.T)](#net-http_test-func-TestTransportMaxConnsPerHostIncludeDialInProgress)
  - [func TestTransportMaxConnsPerHost(t *testing.T)](#net-http_test-func-TestTransportMaxConnsPerHost)
  - [func TestTransportRemovesDeadIdleConnections(t *testing.T)](#net-http_test-func-TestTransportRemovesDeadIdleConnections)
  - [func TestTransportServerClosingUnexpectedly(t *testing.T)](#net-http_test-func-TestTransportServerClosingUnexpectedly)
  - [func TestStressSurpriseServerCloses(t *testing.T)](#net-http_test-func-TestStressSurpriseServerCloses)
  - [func TestTransportHeadResponses(t *testing.T)](#net-http_test-func-TestTransportHeadResponses)
  - [func TestTransportHeadChunkedResponse(t *testing.T)](#net-http_test-func-TestTransportHeadChunkedResponse)
  - [func TestRoundTripGzip(t *testing.T)](#net-http_test-func-TestRoundTripGzip)
  - [func TestTransportGzip(t *testing.T)](#net-http_test-func-TestTransportGzip)
  - [func TestTransportExpect100Continue(t *testing.T)](#net-http_test-func-TestTransportExpect100Continue)
  - [func TestSOCKS5Proxy(t *testing.T)](#net-http_test-func-TestSOCKS5Proxy)
  - [func TestTransportProxy(t *testing.T)](#net-http_test-func-TestTransportProxy)
  - [func TestTransportProxyHTTPSConnectLeak(t *testing.T)](#net-http_test-func-TestTransportProxyHTTPSConnectLeak)
  - [func TestTransportDialPreservesNetOpProxyError(t *testing.T)](#net-http_test-func-TestTransportDialPreservesNetOpProxyError)
  - [func TestTransportProxyDialDoesNotMutateProxyConnectHeader(t *testing.T)](#net-http_test-func-TestTransportProxyDialDoesNotMutateProxyConnectHeader)
  - [func TestTransportGzipRecursive(t *testing.T)](#net-http_test-func-TestTransportGzipRecursive)
  - [func TestTransportGzipShort(t *testing.T)](#net-http_test-func-TestTransportGzipShort)
  - [func waitNumGoroutine(nmax int) int](#net-http_test-func-waitNumGoroutine)
  - [func TestTransportPersistConnLeak(t *testing.T)](#net-http_test-func-TestTransportPersistConnLeak)
  - [func TestTransportPersistConnLeakShortBody(t *testing.T)](#net-http_test-func-TestTransportPersistConnLeakShortBody)
  - [func TestTransportPersistConnLeakNeverIdle(t *testing.T)](#net-http_test-func-TestTransportPersistConnLeakNeverIdle)
  - [func TestTransportPersistConnContextLeakMaxConnsPerHost(t *testing.T)](#net-http_test-func-TestTransportPersistConnContextLeakMaxConnsPerHost)
  - [func TestTransportIdleConnCrash(t *testing.T)](#net-http_test-func-TestTransportIdleConnCrash)
  - [func TestIssue3644(t *testing.T)](#net-http_test-func-TestIssue3644)
  - [func TestIssue3595(t *testing.T)](#net-http_test-func-TestIssue3595)
  - [func TestChunkedNoContent(t *testing.T)](#net-http_test-func-TestChunkedNoContent)
  - [func TestTransportConcurrency(t *testing.T)](#net-http_test-func-TestTransportConcurrency)
  - [func TestIssue4191_InfiniteGetTimeout(t *testing.T)](#net-http_test-func-TestIssue4191_InfiniteGetTimeout)
  - [func TestIssue4191_InfiniteGetToPutTimeout(t *testing.T)](#net-http_test-func-TestIssue4191_InfiniteGetToPutTimeout)
  - [func TestTransportResponseHeaderTimeout(t *testing.T)](#net-http_test-func-TestTransportResponseHeaderTimeout)
  - [func TestTransportCancelRequest(t *testing.T)](#net-http_test-func-TestTransportCancelRequest)
  - [func testTransportCancelRequestInDo(t *testing.T, body io.Reader)](#net-http_test-func-testTransportCancelRequestInDo)
  - [func TestTransportCancelRequestInDo(t *testing.T)](#net-http_test-func-TestTransportCancelRequestInDo)
  - [func TestTransportCancelRequestWithBodyInDo(t *testing.T)](#net-http_test-func-TestTransportCancelRequestWithBodyInDo)
  - [func TestTransportCancelRequestInDial(t *testing.T)](#net-http_test-func-TestTransportCancelRequestInDial)
  - [func TestCancelRequestWithChannel(t *testing.T)](#net-http_test-func-TestCancelRequestWithChannel)
  - [func TestCancelRequestWithChannelBeforeDo_Cancel(t *testing.T)](#net-http_test-func-TestCancelRequestWithChannelBeforeDo_Cancel)
  - [func TestCancelRequestWithChannelBeforeDo_Context(t *testing.T)](#net-http_test-func-TestCancelRequestWithChannelBeforeDo_Context)
  - [func testCancelRequestWithChannelBeforeDo(t *testing.T, withCtx bool)](#net-http_test-func-testCancelRequestWithChannelBeforeDo)
  - [func TestTransportCancelBeforeResponseHeaders(t *testing.T)](#net-http_test-func-TestTransportCancelBeforeResponseHeaders)
  - [func TestTransportCloseResponseBody(t *testing.T)](#net-http_test-func-TestTransportCloseResponseBody)
  - [func TestTransportAltProto(t *testing.T)](#net-http_test-func-TestTransportAltProto)
  - [func TestTransportNoHost(t *testing.T)](#net-http_test-func-TestTransportNoHost)
  - [func TestTransportEmptyMethod(t *testing.T)](#net-http_test-func-TestTransportEmptyMethod)
  - [func TestTransportSocketLateBinding(t *testing.T)](#net-http_test-func-TestTransportSocketLateBinding)
  - [func TestTransportReading100Continue(t *testing.T)](#net-http_test-func-TestTransportReading100Continue)
  - [func TestTransportIgnore1xxResponses(t *testing.T)](#net-http_test-func-TestTransportIgnore1xxResponses)
  - [func TestTransportLimits1xxResponses(t *testing.T)](#net-http_test-func-TestTransportLimits1xxResponses)
  - [func TestTransportTreat101Terminal(t *testing.T)](#net-http_test-func-TestTransportTreat101Terminal)
  - [func testProxyForRequest(t *testing.T, tt proxyFromEnvTest, proxyForRequest func(req *Request) (*url.URL, error))](#net-http_test-func-testProxyForRequest)
  - [func TestProxyFromEnvironment(t *testing.T)](#net-http_test-func-TestProxyFromEnvironment)
  - [func TestProxyFromEnvironmentLowerCase(t *testing.T)](#net-http_test-func-TestProxyFromEnvironmentLowerCase)
  - [func TestIdleConnChannelLeak(t *testing.T)](#net-http_test-func-TestIdleConnChannelLeak)
  - [func TestTransportClosesRequestBody(t *testing.T)](#net-http_test-func-TestTransportClosesRequestBody)
  - [func TestTransportTLSHandshakeTimeout(t *testing.T)](#net-http_test-func-TestTransportTLSHandshakeTimeout)
  - [func TestTLSServerClosesConnection(t *testing.T)](#net-http_test-func-TestTLSServerClosesConnection)
  - [func TestTransportNoReuseAfterEarlyResponse(t *testing.T)](#net-http_test-func-TestTransportNoReuseAfterEarlyResponse)
  - [func TestTransportIssue10457(t *testing.T)](#net-http_test-func-TestTransportIssue10457)
  - [func TestRetryRequestsOnError(t *testing.T)](#net-http_test-func-TestRetryRequestsOnError)
  - [func TestTransportClosesBodyOnError(t *testing.T)](#net-http_test-func-TestTransportClosesBodyOnError)
  - [func TestTransportDialTLS(t *testing.T)](#net-http_test-func-TestTransportDialTLS)
  - [func TestTransportDialContext(t *testing.T)](#net-http_test-func-TestTransportDialContext)
  - [func TestTransportDialTLSContext(t *testing.T)](#net-http_test-func-TestTransportDialTLSContext)
  - [func TestRoundTripReturnsProxyError(t *testing.T)](#net-http_test-func-TestRoundTripReturnsProxyError)
  - [func TestTransportCloseIdleConnsThenReturn(t *testing.T)](#net-http_test-func-TestTransportCloseIdleConnsThenReturn)
  - [func TestTransportTraceGotConnH2IdleConns(t *testing.T)](#net-http_test-func-TestTransportTraceGotConnH2IdleConns)
  - [func TestTransportRemovesH2ConnsAfterIdle(t *testing.T)](#net-http_test-func-TestTransportRemovesH2ConnsAfterIdle)
  - [func TestTransportRangeAndGzip(t *testing.T)](#net-http_test-func-TestTransportRangeAndGzip)
  - [func TestTransportResponseCancelRace(t *testing.T)](#net-http_test-func-TestTransportResponseCancelRace)
  - [func TestTransportContentEncodingCaseInsensitive(t *testing.T)](#net-http_test-func-TestTransportContentEncodingCaseInsensitive)
  - [func TestTransportDialCancelRace(t *testing.T)](#net-http_test-func-TestTransportDialCancelRace)
  - [func TestTransportFlushesBodyChunks(t *testing.T)](#net-http_test-func-TestTransportFlushesBodyChunks)
  - [func TestTransportFlushesRequestHeader(t *testing.T)](#net-http_test-func-TestTransportFlushesRequestHeader)
  - [func TestTransportPrefersResponseOverWriteError(t *testing.T)](#net-http_test-func-TestTransportPrefersResponseOverWriteError)
  - [func TestTransportAutomaticHTTP2(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2)
  - [func TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig)
  - [func TestTransportAutomaticHTTP2_DefaultTransport(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_DefaultTransport)
  - [func TestTransportAutomaticHTTP2_TLSNextProto(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_TLSNextProto)
  - [func TestTransportAutomaticHTTP2_TLSConfig(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_TLSConfig)
  - [func TestTransportAutomaticHTTP2_ExpectContinueTimeout(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_ExpectContinueTimeout)
  - [func TestTransportAutomaticHTTP2_Dial(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_Dial)
  - [func TestTransportAutomaticHTTP2_DialContext(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_DialContext)
  - [func TestTransportAutomaticHTTP2_DialTLS(t *testing.T)](#net-http_test-func-TestTransportAutomaticHTTP2_DialTLS)
  - [func testTransportAutoHTTP(t *testing.T, tr *Transport, wantH2 bool)](#net-http_test-func-testTransportAutoHTTP)
  - [func TestTransportReuseConnEmptyResponseBody(t *testing.T)](#net-http_test-func-TestTransportReuseConnEmptyResponseBody)
  - [func TestNoCrashReturningTransportAltConn(t *testing.T)](#net-http_test-func-TestNoCrashReturningTransportAltConn)
  - [func TestTransportReuseConnection_Gzip_Chunked(t *testing.T)](#net-http_test-func-TestTransportReuseConnection_Gzip_Chunked)
  - [func TestTransportReuseConnection_Gzip_ContentLength(t *testing.T)](#net-http_test-func-TestTransportReuseConnection_Gzip_ContentLength)
  - [func testTransportReuseConnection_Gzip(t *testing.T, chunked bool)](#net-http_test-func-testTransportReuseConnection_Gzip)
  - [func TestTransportResponseHeaderLength(t *testing.T)](#net-http_test-func-TestTransportResponseHeaderLength)
  - [func TestTransportEventTrace(t *testing.T)](#net-http_test-func-TestTransportEventTrace)
  - [func TestTransportEventTrace_h2(t *testing.T)](#net-http_test-func-TestTransportEventTrace_h2)
  - [func TestTransportEventTrace_NoHooks(t *testing.T)](#net-http_test-func-TestTransportEventTrace_NoHooks)
  - [func TestTransportEventTrace_NoHooks_h2(t *testing.T)](#net-http_test-func-TestTransportEventTrace_NoHooks_h2)
  - [func testTransportEventTrace(t *testing.T, h2 bool, noHooks bool)](#net-http_test-func-testTransportEventTrace)
  - [func TestTransportEventTraceTLSVerify(t *testing.T)](#net-http_test-func-TestTransportEventTraceTLSVerify)
  - [func skipIfDNSHijacked(t *testing.T)](#net-http_test-func-skipIfDNSHijacked)
  - [func TestTransportEventTraceRealDNS(t *testing.T)](#net-http_test-func-TestTransportEventTraceRealDNS)
  - [func TestTransportRejectsAlphaPort(t *testing.T)](#net-http_test-func-TestTransportRejectsAlphaPort)
  - [func TestTLSHandshakeTrace(t *testing.T)](#net-http_test-func-TestTLSHandshakeTrace)
  - [func TestTransportMaxIdleConns(t *testing.T)](#net-http_test-func-TestTransportMaxIdleConns)
  - [func TestTransportIdleConnTimeout_h1(t *testing.T)](#net-http_test-func-TestTransportIdleConnTimeout_h1)
  - [func TestTransportIdleConnTimeout_h2(t *testing.T)](#net-http_test-func-TestTransportIdleConnTimeout_h2)
  - [func testTransportIdleConnTimeout(t *testing.T, h2 bool)](#net-http_test-func-testTransportIdleConnTimeout)
  - [func TestIdleConnH2Crash(t *testing.T)](#net-http_test-func-TestIdleConnH2Crash)
  - [func TestTransportReturnsPeekError(t *testing.T)](#net-http_test-func-TestTransportReturnsPeekError)
  - [func TestTransportIDNA_h1(t *testing.T)](#net-http_test-func-TestTransportIDNA_h1)
  - [func TestTransportIDNA_h2(t *testing.T)](#net-http_test-func-TestTransportIDNA_h2)
  - [func testTransportIDNA(t *testing.T, h2 bool)](#net-http_test-func-testTransportIDNA)
  - [func TestTransportProxyConnectHeader(t *testing.T)](#net-http_test-func-TestTransportProxyConnectHeader)
  - [func TestTransportProxyGetConnectHeader(t *testing.T)](#net-http_test-func-TestTransportProxyGetConnectHeader)
  - [func wantBody(res *Response, err error, want string) error](#net-http_test-func-wantBody)
  - [func newLocalListener(t *testing.T) net.Listener](#net-http_test-func-newLocalListener)
  - [func TestMissingStatusNoPanic(t *testing.T)](#net-http_test-func-TestMissingStatusNoPanic)
  - [func doFetchCheckPanic(tr *Transport, req *Request) (res *Response, err error, panicked bool)](#net-http_test-func-doFetchCheckPanic)
  - [func TestNoBodyOnChunked304Response(t *testing.T)](#net-http_test-func-TestNoBodyOnChunked304Response)
  - [func TestTransportCheckContextDoneEarly(t *testing.T)](#net-http_test-func-TestTransportCheckContextDoneEarly)
  - [func TestClientTimeoutKillsConn_BeforeHeaders(t *testing.T)](#net-http_test-func-TestClientTimeoutKillsConn_BeforeHeaders)
  - [func TestClientTimeoutKillsConn_AfterHeaders(t *testing.T)](#net-http_test-func-TestClientTimeoutKillsConn_AfterHeaders)
  - [func TestTransportResponseBodyWritableOnProtocolSwitch(t *testing.T)](#net-http_test-func-TestTransportResponseBodyWritableOnProtocolSwitch)
  - [func TestTransportCONNECTBidi(t *testing.T)](#net-http_test-func-TestTransportCONNECTBidi)
  - [func TestTransportRequestReplayable(t *testing.T)](#net-http_test-func-TestTransportRequestReplayable)
  - [func TestTransportRequestWriteRoundTrip(t *testing.T)](#net-http_test-func-TestTransportRequestWriteRoundTrip)
  - [func TestTransportClone(t *testing.T)](#net-http_test-func-TestTransportClone)
  - [func TestIs408(t *testing.T)](#net-http_test-func-TestIs408)
  - [func TestTransportIgnores408(t *testing.T)](#net-http_test-func-TestTransportIgnores408)
  - [func TestInvalidHeaderResponse(t *testing.T)](#net-http_test-func-TestInvalidHeaderResponse)
  - [func TestTransportClosesBodyOnInvalidRequests(t *testing.T)](#net-http_test-func-TestTransportClosesBodyOnInvalidRequests)
  - [func TestDontCacheBrokenHTTP2Conn(t *testing.T)](#net-http_test-func-TestDontCacheBrokenHTTP2Conn)
  - [func TestTransportDecrementConnWhenIdleConnRemoved(t *testing.T)](#net-http_test-func-TestTransportDecrementConnWhenIdleConnRemoved)
  - [func TestAltProtoCancellation(t *testing.T)](#net-http_test-func-TestAltProtoCancellation)
  - [func TestIssue32441(t *testing.T)](#net-http_test-func-TestIssue32441)
  - [func TestTransportRejectsSignInContentLength(t *testing.T)](#net-http_test-func-TestTransportRejectsSignInContentLength)
  - [func testTransportRace(req *Request)](#net-http_test-func-testTransportRace)
  - [func TestErrorWriteLoopRace(t *testing.T)](#net-http_test-func-TestErrorWriteLoopRace)
  - [func TestCancelRequestWhenSharingConnection(t *testing.T)](#net-http_test-func-TestCancelRequestWhenSharingConnection)

### <a name="net-http_test-const">Constants</a>

#### <a name="net-http_test-const-body">const body</a>

```Go
const body = "Hello, world."
```

#### <a name="net-http_test-const-fakeURL">const fakeURL</a>

```Go
const fakeURL = "https://localhost:1234/" // won't be hit

```

#### <a name="net-http_test-const-serverName">const serverName</a>

```Go
const serverName = "example.com"
```

#### <a name="net-http_test-const-timeout">const timeout</a>

```Go
const timeout = 200 * time.Millisecond
```

200ms should be long enough to get a normal request (the / handler), but not so long that it makes the test slow. 

#### <a name="net-http_test-const-failTime">const failTime</a>

```Go
const failTime = 5 * time.Second
```

#### <a name="net-http_test-const-ua">const ua</a>

```Go
const ua = "some-agent/1.2"
```

#### <a name="net-http_test-const-xfoo">const xfoo</a>

```Go
const xfoo = "foo-val"
```

#### <a name="net-http_test-const-wantBody">const wantBody</a>

```Go
const wantBody = "response body"
```

Actual hostname: should not receive any request. 

#### <a name="net-http_test-const-h1Mode">const h1Mode</a>

```Go
const h1Mode = false
```

#### <a name="net-http_test-const-h2Mode">const h2Mode</a>

```Go
const h2Mode = true
```

#### <a name="net-http_test-const-body">const body</a>

```Go
const body = "Some body"
```

#### <a name="net-http_test-const-body">const body</a>

```Go
const body = "Some body"
```

#### <a name="net-http_test-const-reqBody">const reqBody</a>

```Go
const reqBody = "some request body"
```

#### <a name="net-http_test-const-resBody">const resBody</a>

```Go
const resBody = "some response body"
```

#### <a name="net-http_test-const-N">const N</a>

```Go
const N = 10
```

#### <a name="net-http_test-const-msg">const msg</a>

```Go
const msg = "hello"
```

#### <a name="net-http_test-const-size">const size</a>

```Go
const size = 4 << 20
```

#### <a name="net-http_test-const-testFile">const testFile</a>

```Go
const testFile = "testdata/file"
```

#### <a name="net-http_test-const-testFileLen">const testFileLen</a>

```Go
const testFileLen = 11
```

#### <a name="net-http_test-const-dirListPrefix">const dirListPrefix</a>

```Go
const dirListPrefix = "<pre>\n"
```

#### <a name="net-http_test-const-dirListSuffix">const dirListSuffix</a>

```Go
const dirListSuffix = "\n</pre>\n"
```

#### <a name="net-http_test-const-contents">const contents</a>

```Go
const contents = "I am a fake file"
```

#### <a name="net-http_test-const-ctype">const ctype</a>

```Go
const ctype = "icecream/chocolate"
```

#### <a name="net-http_test-const-want">const want</a>

```Go
const want = "index.html says hello\n"
```

#### <a name="net-http_test-const-want">const want</a>

```Go
const want = "index.html says hello\n"
```

#### <a name="net-http_test-const-indexContents">const indexContents</a>

```Go
const indexContents = "I am a fake index.html file"
```

#### <a name="net-http_test-const-fileaContents">const fileaContents</a>

```Go
const fileaContents = "This is a test file."
```

#### <a name="net-http_test-const-filebContents">const filebContents</a>

```Go
const filebContents = "Another test file."
```

#### <a name="net-http_test-const-textaValue">const textaValue</a>

```Go
const textaValue = "foo"
```

#### <a name="net-http_test-const-textbValue">const textbValue</a>

```Go
const textbValue = "bar"
```

#### <a name="net-http_test-const-boundary">const boundary</a>

```Go
const boundary = `MyBoundary`
```

#### <a name="net-http_test-const-message">const message</a>

```Go
const message = `
--MyBoundary
Content-Disposition: form-data; name="filea"; filename="filea.txt"
Content-Type: text/plain

` + fileaContents + `
--MyBoundary
Content-Disposition: form-data; name="fileb"; filename="fileb.txt"
Content-Type: text/plain

` + filebContents + `
--MyBoundary
Content-Disposition: form-data; name="texta"

` + textaValue + `
--MyBoundary
Content-Disposition: form-data; name="textb"

` + textbValue + `
--MyBoundary--
`
```

#### <a name="net-http_test-const-withTLS">const withTLS</a>

```Go
const withTLS = true
```

#### <a name="net-http_test-const-noTLS">const noTLS</a>

```Go
const noTLS = false
```

#### <a name="net-http_test-const-wantPrefix">const wantPrefix</a>

```Go
const wantPrefix = "HTTP/1.0 400 Bad Request\r\n"
```

#### <a name="net-http_test-const-maxTries">const maxTries</a>

```Go
const maxTries = 5
```

#### <a name="net-http_test-const-limit">const limit</a>

```Go
const limit = 1 << 20
```

#### <a name="net-http_test-const-bodySize">const bodySize</a>

```Go
const bodySize = 5 << 20
```

#### <a name="net-http_test-const-req">const req</a>

```Go
const req = "GET / HTTP/1.1\r\nConnection: keep-alive\r\nHost: foo\r\n\r\n"
```

#### <a name="net-http_test-const-size">const size</a>

```Go
const size = 3 << 20
```

#### <a name="net-http_test-const-bodySize">const bodySize</a>

```Go
const bodySize = 1 << 20
```

#### <a name="net-http_test-const-arbitraryCleanupMargin">const arbitraryCleanupMargin</a>

```Go
const arbitraryCleanupMargin = 1 * time.Second
```

Allow an arbitrarily long delay. This test was observed to be flaky on the darwin-arm64-corellium builder, so we're increasing the deadline to see if it starts passing. See [https://golang.org/issue/37322](https://golang.org/issue/37322). 

#### <a name="net-http_test-const-reqs">const reqs</a>

```Go
const reqs = 20
```

#### <a name="net-http_test-const-numReq">const numReq</a>

```Go
const numReq = 3
```

#### <a name="net-http_test-const-upgradeResponse">const upgradeResponse</a>

```Go
const upgradeResponse = "upgrade here"
```

#### <a name="net-http_test-const-want">const want</a>

```Go
const want = "SM\r\n\r\n"
```

#### <a name="net-http_test-const-hdr">const hdr</a>

```Go
const hdr = "Transfer-Encoding: chunked"
```

#### <a name="net-http_test-const-someResponse">const someResponse</a>

```Go
const someResponse = "<html>some response</html>"
```

#### <a name="net-http_test-const-expectTimeout">const expectTimeout</a>

```Go
const expectTimeout = 5 * time.Second
```

#### <a name="net-http_test-const-size">const size</a>

```Go
const size = 8 << 10
```

#### <a name="net-http_test-const-input">const input</a>

```Go
const input = "\n<html>\n\t<head>\n"
```

#### <a name="net-http_test-const-expected">const expected</a>

```Go
const expected = "text/html; charset=utf-8"
```

#### <a name="net-http_test-const-msg">const msg</a>

```Go
const msg = "foobar"
```

#### <a name="net-http_test-const-numClients">const numClients</a>

```Go
const numClients = 20
```

Do a bunch of traffic from different goroutines. Send to activityc after each request completes, regardless of whether it failed. If these are too high, OS X exhausts its ephemeral ports and hangs waiting for them to transition TCP states. That's not what we want to test. TODO(bradfitz): use an io.Pipe dialer for this test instead? 

#### <a name="net-http_test-const-reqsPerClient">const reqsPerClient</a>

```Go
const reqsPerClient = 25
```

Do a bunch of traffic from different goroutines. Send to activityc after each request completes, regardless of whether it failed. If these are too high, OS X exhausts its ephemeral ports and hangs waiting for them to transition TCP states. That's not what we want to test. TODO(bradfitz): use an io.Pipe dialer for this test instead? 

#### <a name="net-http_test-const-responseBody">const responseBody</a>

```Go
const responseBody = "test response body"
```

#### <a name="net-http_test-const-testString">const testString</a>

```Go
const testString = "The test string aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
```

#### <a name="net-http_test-const-nRandBytes">const nRandBytes</a>

```Go
const nRandBytes = 1024 * 1024
```

#### <a name="net-http_test-const-numReq">const numReq</a>

```Go
const numReq = 25
```

#### <a name="net-http_test-const-numFoos">const numFoos</a>

```Go
const numFoos = 5000
```

#### <a name="net-http_test-const-deniedMsg">const deniedMsg</a>

```Go
const deniedMsg = "sorry, denied."
```

#### <a name="net-http_test-const-n">const n</a>

```Go
const n = 4
```

#### <a name="net-http_test-const-debug">const debug</a>

```Go
const debug = false
```

#### <a name="net-http_test-const-debug">const debug</a>

```Go
const debug = false
```

#### <a name="net-http_test-const-repeats">const repeats</a>

```Go
const repeats = 3
```

#### <a name="net-http_test-const-numReqs">const numReqs</a>

```Go
const numReqs = 5
```

#### <a name="net-http_test-const-nReqs">const nReqs</a>

```Go
const nReqs = 5
```

#### <a name="net-http_test-const-trials">const trials</a>

```Go
const trials = 20
```

#### <a name="net-http_test-const-bodySize">const bodySize</a>

```Go
const bodySize = 256 << 10
```

#### <a name="net-http_test-const-encodedString">const encodedString</a>

```Go
const encodedString = "Hello Gopher"
```

#### <a name="net-http_test-const-contentLengthLimit">const contentLengthLimit</a>

```Go
const contentLengthLimit = 1024 * 1024 // 1MB

```

#### <a name="net-http_test-const-resBody">const resBody</a>

```Go
const resBody = "some body"
```

#### <a name="net-http_test-const-timeout">const timeout</a>

```Go
const timeout = 1 * time.Second
```

#### <a name="net-http_test-const-uniDomain">const uniDomain</a>

```Go
const uniDomain = "гофер.го"
```

#### <a name="net-http_test-const-punyDomain">const punyDomain</a>

```Go
const punyDomain = "xn--c1ae0ajs.xn--c1aw"
```

#### <a name="net-http_test-const-want">const want</a>

```Go
const want = "unknown status code"
```

#### <a name="net-http_test-const-timeout">const timeout</a>

```Go
const timeout = 50 * time.Millisecond
```

#### <a name="net-http_test-const-target">const target</a>

```Go
const target = "backend:443"
```

#### <a name="net-http_test-const-target">const target</a>

```Go
const target = "backend:443"
```

#### <a name="net-http_test-const-numReqs">const numReqs</a>

```Go
const numReqs = 5
```

### <a name="net-http_test-var">Variables</a>

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-robotsTxtHandler">var robotsTxtHandler</a>

```Go
var robotsTxtHandler = HandlerFunc(func(w ResponseWriter, r *Request) {
	w.Header().Set("Last-Modified", "sometime")
	fmt.Fprintf(w, "User-agent: go\nDisallow: /something/")
})
```

#### <a name="net-http_test-var-bufa">var bufa</a>

```Go
var bufa [64]byte
```

#### <a name="net-http_test-var-b">var b</a>

```Go
var b []byte
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-checkErr">var checkErr</a>

```Go
var checkErr error
```

#### <a name="net-http_test-var-lastVia">var lastVia</a>

```Go
var lastVia []*Request
```

#### <a name="net-http_test-var-lastReq">var lastReq</a>

```Go
var lastReq *Request
```

#### <a name="net-http_test-var-log">var log</a>

```Go
var log struct {
	sync.Mutex
	bytes.Buffer
} = ...
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-expectedCookies">var expectedCookies</a>

```Go
var expectedCookies = ...
```

#### <a name="net-http_test-var-echoCookiesRedirectHandler">var echoCookiesRedirectHandler</a>

```Go
var echoCookiesRedirectHandler = HandlerFunc(func(w ResponseWriter, r *Request) {
	for _, cookie := range r.Cookies() {
		SetCookie(w, cookie)
	}
	if r.URL.Path == "/" {
		SetCookie(w, expectedCookies[1])
		Redirect(w, r, "/second", StatusMovedPermanently)
	} else {
		SetCookie(w, expectedCookies[2])
		w.Write([]byte("hello"))
	}
})
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf [10]byte
```

#### <a name="net-http_test-var-first">var first</a>

```Go
var first string
```

#### <a name="net-http_test-var-second">var second</a>

```Go
var second string
```

#### <a name="net-http_test-var-ts2URL">var ts2URL</a>

```Go
var ts2URL string
```

#### <a name="net-http_test-var-tsURL">var tsURL</a>

```Go
var tsURL string
```

#### <a name="net-http_test-var-tsHost">var tsHost</a>

```Go
var tsHost string
```

#### <a name="net-http_test-var-want">var want</a>

```Go
var want map[string][]string
```

#### <a name="net-http_test-var-readCallsAtomic">var readCallsAtomic</a>

```Go
var readCallsAtomic int32
```

#### <a name="net-http_test-var-closeCallsAtomic">var closeCallsAtomic</a>

```Go
var closeCallsAtomic int32 // atomic

```

#### <a name="net-http_test-var-tr">var tr</a>

```Go
var tr RoundTripper = roundTripperWithCloseIdle(func() {
	closed = true
})
```

#### <a name="net-http_test-var-ctx">var ctx</a>

```Go
var ctx context.Context
```

#### <a name="net-http_test-var-cancel">var cancel</a>

```Go
var cancel func()
```

#### <a name="net-http_test-var-wantIsTimeout">var wantIsTimeout</a>

```Go
var wantIsTimeout bool
```

#### <a name="net-http_test-var-wantErr">var wantErr</a>

```Go
var wantErr error = context.Canceled
```

#### <a name="net-http_test-var-optQuietLog">var optQuietLog</a>

```Go
var optQuietLog = ...
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got struct {
	sync.Mutex
	log []string
} = ...
```

#### <a name="net-http_test-var-decl">var decl</a>

```Go
var decl []string
```

#### <a name="net-http_test-var-req">var req</a>

```Go
var req *Request
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-numOpen">var numOpen</a>

```Go
var numOpen, numClose int32 // atomic

```

#### <a name="net-http_test-var-numClose">var numClose</a>

```Go
var numOpen, numClose int32 // atomic

```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-last">var last</a>

```Go
var last string
```

#### <a name="net-http_test-var-open">var open</a>

```Go
var open, close int32
```

#### <a name="net-http_test-var-close">var close</a>

```Go
var open, close int32
```

#### <a name="net-http_test-var-body">var body</a>

```Go
var body []byte
```

#### <a name="net-http_test-var-dialed">var dialed</a>

```Go
var dialed bool
```

#### <a name="net-http_test-var-errorLog">var errorLog</a>

```Go
var errorLog lockedBytesBuffer
```

#### <a name="net-http_test-var-errorLog">var errorLog</a>

```Go
var errorLog lockedBytesBuffer
```

#### <a name="net-http_test-var-srv">var srv</a>

```Go
var srv http.Server
```

#### <a name="net-http_test-var-ServeFileRangeTests">var ServeFileRangeTests</a>

```Go
var ServeFileRangeTests = ...
```

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-req">var req</a>

```Go
var req Request
```

set up the Request (re-used for all tests) 

#### <a name="net-http_test-var-fsRedirectTestData">var fsRedirectTestData</a>

```Go
var fsRedirectTestData = ...
```

#### <a name="net-http_test-var-h">var h</a>

```Go
var h Handler
```

#### <a name="net-http_test-var-name">var name</a>

```Go
var name string
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got bytes.Buffer
```

#### <a name="net-http_test-var-fis">var fis</a>

```Go
var fis []fs.FileInfo
```

#### <a name="net-http_test-var-content">var content</a>

```Go
var content io.ReadSeeker
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-log">var log</a>

```Go
var log []string
```

#### <a name="net-http_test-var-quietLog">var quietLog</a>

```Go
var quietLog = log.New(io.Discard, "", 0)
```

#### <a name="net-http_test-var-stackCount">var stackCount</a>

```Go
var stackCount map[string]int
```

#### <a name="net-http_test-var-bad">var bad</a>

```Go
var bad string
```

#### <a name="net-http_test-var-stacks">var stacks</a>

```Go
var stacks string
```

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-end">var end</a>

```Go
var end = regexp.MustCompile("/foo/$")
```

#### <a name="net-http_test-var-readRequestErrorTests">var readRequestErrorTests</a>

```Go
var readRequestErrorTests = ...
```

#### <a name="net-http_test-var-newRequestHostTests">var newRequestHostTests</a>

```Go
var newRequestHostTests = ...
```

#### <a name="net-http_test-var-b">var b</a>

```Go
var b [1]byte
```

#### <a name="net-http_test-var-parseHTTPVersionTests">var parseHTTPVersionTests</a>

```Go
var parseHTTPVersionTests = ...
```

#### <a name="net-http_test-var-getBasicAuthTests">var getBasicAuthTests</a>

```Go
var getBasicAuthTests = ...
```

#### <a name="net-http_test-var-parseBasicAuthTests">var parseBasicAuthTests</a>

```Go
var parseBasicAuthTests = ...
```

#### <a name="net-http_test-var-out">var out</a>

```Go
var out bytes.Buffer
```

#### <a name="net-http_test-var-log">var log</a>

```Go
var log bytes.Buffer
```

#### <a name="net-http_test-var-firstErr">var firstErr</a>

```Go
var firstErr error
```

#### <a name="net-http_test-var-b">var b</a>

```Go
var b bytes.Buffer
```

#### <a name="net-http_test-var-cst">var cst</a>

```Go
var cst *httptest.Server
```

#### <a name="net-http_test-var-output">var output</a>

```Go
var output bytes.Buffer
```

#### <a name="net-http_test-var-req">var req</a>

```Go
var req *Request
```

#### <a name="net-http_test-var-handlers">var handlers</a>

```Go
var handlers = ...
```

#### <a name="net-http_test-var-vtests">var vtests</a>

```Go
var vtests = ...
```

#### <a name="net-http_test-var-r">var r</a>

```Go
var r *Response
```

#### <a name="net-http_test-var-req">var req</a>

```Go
var req Request
```

#### <a name="net-http_test-var-serveMuxRegister">var serveMuxRegister</a>

```Go
var serveMuxRegister = ...
```

#### <a name="net-http_test-var-serveMuxTests">var serveMuxTests</a>

```Go
var serveMuxTests = ...
```

#### <a name="net-http_test-var-serveMuxTests2">var serveMuxTests2</a>

```Go
var serveMuxTests2 = ...
```

#### <a name="net-http_test-var-tests">var tests</a>

```Go
var tests []test
```

Build example handlers and requests 

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.RWMutex
```

#### <a name="net-http_test-var-conn">var conn</a>

```Go
var conn net.Conn
```

#### <a name="net-http_test-var-afterTimeoutErrc">var afterTimeoutErrc</a>

```Go
var afterTimeoutErrc = make(chan error, 1)
```

#### <a name="net-http_test-var-addrs">var addrs</a>

```Go
var addrs [2]data
```

#### <a name="net-http_test-var-conn2">var conn2</a>

```Go
var conn2 net.Conn
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf [1]byte
```

#### <a name="net-http_test-var-errBuf">var errBuf</a>

```Go
var errBuf bytes.Buffer
```

#### <a name="net-http_test-var-s">var s</a>

```Go
var s Server
```

#### <a name="net-http_test-var-s">var s</a>

```Go
var s Server
```

#### <a name="net-http_test-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http_test-var-s">var s</a>

```Go
var s *Server
```

#### <a name="net-http_test-var-ln">var ln</a>

```Go
var ln net.Listener
```

#### <a name="net-http_test-var-serverExpectTests">var serverExpectTests</a>

```Go
var serverExpectTests = ...
```

#### <a name="net-http_test-var-targ">var targ</a>

```Go
var targ io.WriteCloser = ...
```

#### <a name="net-http_test-var-handlerBodyCloseTests">var handlerBodyCloseTests</a>

```Go
var handlerBodyCloseTests = ...
```

#### <a name="net-http_test-var-numReqs">var numReqs</a>

```Go
var numReqs int
```

#### <a name="net-http_test-var-size0">var size0</a>

```Go
var size0, size1 int
```

#### <a name="net-http_test-var-size1">var size1</a>

```Go
var size0, size1 int
```

#### <a name="net-http_test-var-testHandlerBodyConsumers">var testHandlerBodyConsumers</a>

```Go
var testHandlerBodyConsumers = ...
```

#### <a name="net-http_test-var-numReqs">var numReqs</a>

```Go
var numReqs int
```

#### <a name="net-http_test-var-numReqs">var numReqs</a>

```Go
var numReqs int
```

#### <a name="net-http_test-var-numReqs">var numReqs</a>

```Go
var numReqs int
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-handler">var handler</a>

```Go
var handler HandlerFunc = ...
```

#### <a name="net-http_test-var-handler">var handler</a>

```Go
var handler HandlerFunc = ...
```

#### <a name="net-http_test-var-tests">var tests</a>

```Go
var tests = ...
```

#### <a name="net-http_test-var-tests">var tests</a>

```Go
var tests = ...
```

#### <a name="net-http_test-var-resp">var resp</a>

```Go
var resp [5]*Response
```

#### <a name="net-http_test-var-handler">var handler</a>

```Go
var handler Handler = HandlerFunc(func(w ResponseWriter, r *Request) {
	if withHijack {
		rwc, _, err := w.(Hijacker).Hijack()
		if err != nil {
			t.Logf("unexpected error: %v", err)
		}
		defer rwc.Close()
	}
	panic(panicValue)
})
```

#### <a name="net-http_test-var-bytesPerHeader">var bytesPerHeader</a>

```Go
var bytesPerHeader = len("header12345: val12345\r\n")
```

#### <a name="net-http_test-var-output">var output</a>

```Go
var output bytes.Buffer
```

#### <a name="net-http_test-var-requestBody">var requestBody</a>

```Go
var requestBody = bytes.Repeat([]byte("a"), 1<<20)
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-quitTimer">var quitTimer</a>

```Go
var quitTimer *time.Timer
```

#### <a name="net-http_test-var-proxy">var proxy</a>

```Go
var proxy *clientServerTest
```

#### <a name="net-http_test-var-b">var b</a>

```Go
var b [len(TimeFormat)]byte
```

#### <a name="net-http_test-var-n">var n</a>

```Go
var n int32
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-srv">var srv</a>

```Go
var srv Server
```

#### <a name="net-http_test-var-testConn">var testConn</a>

```Go
var testConn closeWriteTestConn
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-inHandlerLen">var inHandlerLen</a>

```Go
var inHandlerLen int
```

#### <a name="net-http_test-var-res">var res</a>

```Go
var res = []byte("Hello world.\n")
```

#### <a name="net-http_test-var-data">var data</a>

```Go
var data = []byte("Hello world.\n")
```

#### <a name="net-http_test-var-srv">var srv</a>

```Go
var srv Server
```

#### <a name="net-http_test-var-response">var response</a>

```Go
var response = bytes.Repeat([]byte(someResponse), 2<<10/len(someResponse))
```

A Response that's just no bigger than 2KB, the buffer-before-chunking threshold. 

#### <a name="net-http_test-var-idle1">var idle1</a>

```Go
var idle1 int
```

#### <a name="net-http_test-var-doShutdown">var doShutdown</a>

```Go
var doShutdown func() // set later

```

#### <a name="net-http_test-var-doStateCount">var doStateCount</a>

```Go
var doStateCount func()
```

#### <a name="net-http_test-var-shutdownRes">var shutdownRes</a>

```Go
var shutdownRes = make(chan error, 1)
```

#### <a name="net-http_test-var-statesRes">var statesRes</a>

```Go
var statesRes = make(chan map[ConnState]int, 1)
```

#### <a name="net-http_test-var-gotOnShutdown">var gotOnShutdown</a>

```Go
var gotOnShutdown = make(chan struct{}, 1)
```

#### <a name="net-http_test-var-connAccepted">var connAccepted</a>

```Go
var connAccepted sync.WaitGroup
```

#### <a name="net-http_test-var-s">var s</a>

```Go
var s Server
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-s">var s</a>

```Go
var s Server
```

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-srv">var srv</a>

```Go
var srv Server
```

#### <a name="net-http_test-var-res">var res</a>

```Go
var res *Response
```

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-buf3">var buf3</a>

```Go
var buf3 [3]byte
```

#### <a name="net-http_test-var-sniffTests">var sniffTests</a>

```Go
var sniffTests = ...
```

#### <a name="net-http_test-var-hostPortHandler">var hostPortHandler</a>

```Go
var hostPortHandler = HandlerFunc(func(w ResponseWriter, r *Request) {
	if r.FormValue("close") == "true" {
		w.Header().Set("Connection", "close")
	}
	w.Header().Set("X-Saw-Close", fmt.Sprint(r.Close))
	w.Write([]byte(r.RemoteAddr))
})
```

hostPortHandler writes back the client's "host:port". 

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-err">var err</a>

```Go
var err error
```

#### <a name="net-http_test-var-addrSeen">var addrSeen</a>

```Go
var addrSeen map[string]int
```

#### <a name="net-http_test-var-msg">var msg</a>

```Go
var msg string
```

#### <a name="net-http_test-var-dialCnt">var dialCnt</a>

```Go
var dialCnt, gotConnCnt, tlsHandshakeCnt int32
```

#### <a name="net-http_test-var-gotConnCnt">var gotConnCnt</a>

```Go
var dialCnt, gotConnCnt, tlsHandshakeCnt int32
```

#### <a name="net-http_test-var-tlsHandshakeCnt">var tlsHandshakeCnt</a>

```Go
var dialCnt, gotConnCnt, tlsHandshakeCnt int32
```

#### <a name="net-http_test-var-keys2">var keys2</a>

```Go
var keys2 []string
```

#### <a name="net-http_test-var-roundTripTests">var roundTripTests</a>

```Go
var roundTripTests = ...
```

#### <a name="net-http_test-var-body">var body</a>

```Go
var body []byte
```

#### <a name="net-http_test-var-r">var r</a>

```Go
var r *gzip.Reader
```

#### <a name="net-http_test-var-w">var w</a>

```Go
var w io.Writer = rw
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf [22]byte
```

#### <a name="net-http_test-var-ipLen">var ipLen</a>

```Go
var ipLen int
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got string
```

#### <a name="net-http_test-var-ts">var ts</a>

```Go
var ts *httptest.Server
```

#### <a name="net-http_test-var-proxy">var proxy</a>

```Go
var proxy *httptest.Server
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got *Request
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf [1]byte
```

#### <a name="net-http_test-var-errDial">var errDial</a>

```Go
var errDial = errors.New("some dial error")
```

#### <a name="net-http_test-var-d">var d</a>

```Go
var d countingDialer
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-initialCC">var initialCC</a>

```Go
var initialCC contextCounter
```

#### <a name="net-http_test-var-flushCC">var flushCC</a>

```Go
var flushCC contextCounter
```

flushCC exists only to put pressure on the GC to finalize the initialCC contexts: the flushCC allocations should eventually displace the initialCC allocations. 

#### <a name="net-http_test-var-tr">var tr</a>

```Go
var tr *Transport
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-logbuf">var logbuf</a>

```Go
var logbuf bytes.Buffer
```

#### <a name="net-http_test-var-got">var got</a>

```Go
var got bytes.Buffer
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-proxyFromEnvTests">var proxyFromEnvTests</a>

```Go
var proxyFromEnvTests = ...
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex
```

Not parallel: uses global test hooks. 

#### <a name="net-http_test-var-n">var n</a>

```Go
var n int
```

#### <a name="net-http_test-var-nSuccess">var nSuccess</a>

```Go
var nSuccess = 0
```

#### <a name="net-http_test-var-errs">var errs</a>

```Go
var errs []error
```

#### <a name="net-http_test-var-sconn">var sconn</a>

```Go
var sconn struct {
	sync.Mutex
	c net.Conn
} = ...
```

#### <a name="net-http_test-var-getOkay">var getOkay</a>

```Go
var getOkay bool
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex
```

#### <a name="net-http_test-var-logbuf">var logbuf</a>

```Go
var logbuf bytes.Buffer
```

#### <a name="net-http_test-var-writeNumAtomic">var writeNumAtomic</a>

```Go
var writeNumAtomic int32
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex // guards following

```

#### <a name="net-http_test-var-gotReq">var gotReq</a>

```Go
var gotReq, didDial bool
```

#### <a name="net-http_test-var-didDial">var didDial</a>

```Go
var gotReq, didDial bool
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex // guards following

```

#### <a name="net-http_test-var-gotReq">var gotReq</a>

```Go
var gotReq bool
```

#### <a name="net-http_test-var-receivedContext">var receivedContext</a>

```Go
var receivedContext context.Context
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex // guards following

```

#### <a name="net-http_test-var-gotReq">var gotReq</a>

```Go
var gotReq bool
```

#### <a name="net-http_test-var-receivedContext">var receivedContext</a>

```Go
var receivedContext context.Context
```

#### <a name="net-http_test-var-b">var b</a>

```Go
var b [1024]byte
```

important that this response has a body. 

#### <a name="net-http_test-var-d">var d</a>

```Go
var d net.Dialer
```

#### <a name="net-http_test-var-d">var d</a>

```Go
var d net.Dialer
```

#### <a name="net-http_test-var-firstAddr">var firstAddr</a>

```Go
var firstAddr string
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-n">var n</a>

```Go
var n int64
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex // guards buf

```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex
```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-isDNSHijackedOnce">var isDNSHijackedOnce</a>

```Go
var isDNSHijackedOnce sync.Once
```

#### <a name="net-http_test-var-isDNSHijacked">var isDNSHijacked</a>

```Go
var isDNSHijacked bool
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex // guards buf

```

#### <a name="net-http_test-var-buf">var buf</a>

```Go
var buf bytes.Buffer
```

#### <a name="net-http_test-var-mu">var mu</a>

```Go
var mu sync.Mutex
```

#### <a name="net-http_test-var-start">var start</a>

```Go
var start, done bool
```

#### <a name="net-http_test-var-done">var done</a>

```Go
var start, done bool
```

#### <a name="net-http_test-var-conn">var conn</a>

```Go
var conn string
```

#### <a name="net-http_test-var-wroteOnce">var wroteOnce</a>

```Go
var wroteOnce sync.Once
```

#### <a name="net-http_test-var-port">var port</a>

```Go
var port string
```

#### <a name="net-http_test-var-errFakeRoundTrip">var errFakeRoundTrip</a>

```Go
var errFakeRoundTrip = errors.New("fake roundtrip")
```

#### <a name="net-http_test-var-rgz">var rgz</a>

```Go
var rgz = ...
```

rgz is a gzip quine that uncompresses to itself. 

#### <a name="net-http_test-var-d">var d</a>

```Go
var d net.Dialer
```

#### <a name="net-http_test-var-logout">var logout</a>

```Go
var logout bytes.Buffer
```

#### <a name="net-http_test-var-bc">var bc</a>

```Go
var bc bodyCloser
```

#### <a name="net-http_test-var-brokenState">var brokenState</a>

```Go
var brokenState brokenState
```

#### <a name="net-http_test-var-numDials">var numDials</a>

```Go
var numDials, gotConns uint32 // atomic

```

#### <a name="net-http_test-var-gotConns">var gotConns</a>

```Go
var numDials, gotConns uint32 // atomic

```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

#### <a name="net-http_test-var-timeoutProtoErr">var timeoutProtoErr</a>

```Go
var timeoutProtoErr = errors.New("canceled as expected")
```

#### <a name="net-http_test-var-ok">var ok</a>

```Go
var ok bool
```

#### <a name="net-http_test-var-wg">var wg</a>

```Go
var wg sync.WaitGroup
```

### <a name="net-http_test-type">Types</a>

#### <a name="net-http_test-type-http09Writer">type http09Writer struct</a>

```Go
type http09Writer struct {
	io.Writer
	h Header
}
```

##### <a name="net-http_test-type-http09Writer-Header">func (w http09Writer) Header() Header</a>

```Go
func (w http09Writer) Header() Header
```

##### <a name="net-http_test-type-http09Writer-WriteHeader">func (w http09Writer) WriteHeader(int)</a>

```Go
func (w http09Writer) WriteHeader(int)
```

#### <a name="net-http_test-type-chanWriter">type chanWriter chan string</a>

```Go
type chanWriter chan string
```

##### <a name="net-http_test-type-chanWriter-Write">func (w chanWriter) Write(p []byte) (n int, err error)</a>

```Go
func (w chanWriter) Write(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-recordingTransport">type recordingTransport struct</a>

```Go
type recordingTransport struct {
	req *Request
}
```

##### <a name="net-http_test-type-recordingTransport-RoundTrip">func (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error)</a>

```Go
func (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error)
```

#### <a name="net-http_test-type-redirectTest">type redirectTest struct</a>

```Go
type redirectTest struct {
	suffix       string
	want         int // response code
	redirectBody string
}
```

#### <a name="net-http_test-type-TestJar">type TestJar struct</a>

```Go
type TestJar struct {
	m      sync.Mutex
	perURL map[string][]*Cookie
}
```

Just enough correctness for our redirect tests. Uses the URL.Host as the scope of all cookies. 

##### <a name="net-http_test-type-TestJar-SetCookies">func (j *TestJar) SetCookies(u *url.URL, cookies []*Cookie)</a>

```Go
func (j *TestJar) SetCookies(u *url.URL, cookies []*Cookie)
```

##### <a name="net-http_test-type-TestJar-Cookies">func (j *TestJar) Cookies(u *url.URL) []*Cookie</a>

```Go
func (j *TestJar) Cookies(u *url.URL) []*Cookie
```

#### <a name="net-http_test-type-RecordingJar">type RecordingJar struct</a>

```Go
type RecordingJar struct {
	mu  sync.Mutex
	log bytes.Buffer
}
```

RecordingJar keeps a log of calls made to it, without tracking any cookies. 

##### <a name="net-http_test-type-RecordingJar-SetCookies">func (j *RecordingJar) SetCookies(u *url.URL, cookies []*Cookie)</a>

```Go
func (j *RecordingJar) SetCookies(u *url.URL, cookies []*Cookie)
```

##### <a name="net-http_test-type-RecordingJar-Cookies">func (j *RecordingJar) Cookies(u *url.URL) []*Cookie</a>

```Go
func (j *RecordingJar) Cookies(u *url.URL) []*Cookie
```

##### <a name="net-http_test-type-RecordingJar-logf">func (j *RecordingJar) logf(format string, args ...interface{})</a>

```Go
func (j *RecordingJar) logf(format string, args ...interface{})
```

#### <a name="net-http_test-type-writeCountingConn">type writeCountingConn struct</a>

```Go
type writeCountingConn struct {
	net.Conn
	count *int
}
```

##### <a name="net-http_test-type-writeCountingConn-Write">func (c *writeCountingConn) Write(p []byte) (int, error)</a>

```Go
func (c *writeCountingConn) Write(p []byte) (int, error)
```

#### <a name="net-http_test-type-eofReaderFunc">type eofReaderFunc func()</a>

```Go
type eofReaderFunc func()
```

eofReaderFunc is an io.Reader that runs itself, and then returns io.EOF. 

##### <a name="net-http_test-type-eofReaderFunc-Read">func (f eofReaderFunc) Read(p []byte) (n int, err error)</a>

```Go
func (f eofReaderFunc) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-issue15577Tripper">type issue15577Tripper struct{}</a>

```Go
type issue15577Tripper struct{}
```

issue15577Tripper returns a Response with a redirect response header and doesn't populate its Response.Request field. 

##### <a name="net-http_test-type-issue15577Tripper-RoundTrip">func (issue15577Tripper) RoundTrip(*Request) (*Response, error)</a>

```Go
func (issue15577Tripper) RoundTrip(*Request) (*Response, error)
```

#### <a name="net-http_test-type-issue18239Body">type issue18239Body struct</a>

```Go
type issue18239Body struct {
	readCalls  *int32
	closeCalls *int32
	readErr    error
}
```

issue18239Body is an io.ReadCloser for TestTransportBodyReadError. Its Read returns readErr and increments *readCalls atomically. Its Close returns nil and increments *closeCalls atomically. 

##### <a name="net-http_test-type-issue18239Body-Read">func (b issue18239Body) Read([]byte) (int, error)</a>

```Go
func (b issue18239Body) Read([]byte) (int, error)
```

##### <a name="net-http_test-type-issue18239Body-Close">func (b issue18239Body) Close() error</a>

```Go
func (b issue18239Body) Close() error
```

#### <a name="net-http_test-type-roundTripperWithoutCloseIdle">type roundTripperWithoutCloseIdle struct{}</a>

```Go
type roundTripperWithoutCloseIdle struct{}
```

##### <a name="net-http_test-type-roundTripperWithoutCloseIdle-RoundTrip">func (roundTripperWithoutCloseIdle) RoundTrip(*Request) (*Response, error)</a>

```Go
func (roundTripperWithoutCloseIdle) RoundTrip(*Request) (*Response, error)
```

#### <a name="net-http_test-type-roundTripperWithCloseIdle">type roundTripperWithCloseIdle func()</a>

```Go
type roundTripperWithCloseIdle func() // underlying func is CloseIdleConnections func

```

##### <a name="net-http_test-type-roundTripperWithCloseIdle-RoundTrip">func (roundTripperWithCloseIdle) RoundTrip(*Request) (*Response, error)</a>

```Go
func (roundTripperWithCloseIdle) RoundTrip(*Request) (*Response, error)
```

##### <a name="net-http_test-type-roundTripperWithCloseIdle-CloseIdleConnections">func (f roundTripperWithCloseIdle) CloseIdleConnections()</a>

```Go
func (f roundTripperWithCloseIdle) CloseIdleConnections()
```

#### <a name="net-http_test-type-nilBodyRoundTripper">type nilBodyRoundTripper struct{}</a>

```Go
type nilBodyRoundTripper struct{}
```

##### <a name="net-http_test-type-nilBodyRoundTripper-RoundTrip">func (nilBodyRoundTripper) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (nilBodyRoundTripper) RoundTrip(req *Request) (*Response, error)
```

#### <a name="net-http_test-type-issue40382Body">type issue40382Body struct</a>

```Go
type issue40382Body struct {
	t                *testing.T
	n                int
	closeCallsAtomic int32
}
```

issue40382Body is an io.ReadCloser for TestClientCallsCloseOnlyOnce. Its Read reads n bytes before returning io.EOF. Its Close returns nil but fails the test if called more than once. 

##### <a name="net-http_test-type-issue40382Body-Read">func (b *issue40382Body) Read(p []byte) (int, error)</a>

```Go
func (b *issue40382Body) Read(p []byte) (int, error)
```

##### <a name="net-http_test-type-issue40382Body-Close">func (b *issue40382Body) Close() error</a>

```Go
func (b *issue40382Body) Close() error
```

#### <a name="net-http_test-type-clientServerTest">type clientServerTest struct</a>

```Go
type clientServerTest struct {
	t  *testing.T
	h2 bool
	h  Handler
	ts *httptest.Server
	tr *Transport
	c  *Client
}
```

##### <a name="net-http_test-type-clientServerTest-newClientServerTest">func newClientServerTest(t *testing.T, h2 bool, h Handler, opts ...interface{}) *clientServerTest</a>

```Go
func newClientServerTest(t *testing.T, h2 bool, h Handler, opts ...interface{}) *clientServerTest
```

##### <a name="net-http_test-type-clientServerTest-close">func (t *clientServerTest) close()</a>

```Go
func (t *clientServerTest) close()
```

##### <a name="net-http_test-type-clientServerTest-getURL">func (t *clientServerTest) getURL(u string) string</a>

```Go
func (t *clientServerTest) getURL(u string) string
```

##### <a name="net-http_test-type-clientServerTest-scheme">func (t *clientServerTest) scheme() string</a>

```Go
func (t *clientServerTest) scheme() string
```

#### <a name="net-http_test-type-reqFunc">type reqFunc func(c *net/http.Client, url string) (*net/http.Response, error)</a>

```Go
type reqFunc func(c *Client, url string) (*Response, error)
```

#### <a name="net-http_test-type-h12Compare">type h12Compare struct</a>

```Go
type h12Compare struct {
	Handler            func(ResponseWriter, *Request)    // required
	ReqFunc            reqFunc                           // optional
	CheckResponse      func(proto string, res *Response) // optional
	EarlyCheckResponse func(proto string, res *Response) // optional; pre-normalize
	Opts               []interface{}
}
```

h12Compare is a test that compares HTTP/1 and HTTP/2 behavior against each other. 

##### <a name="net-http_test-type-h12Compare-reqFunc">func (tt h12Compare) reqFunc() reqFunc</a>

```Go
func (tt h12Compare) reqFunc() reqFunc
```

##### <a name="net-http_test-type-h12Compare-run">func (tt h12Compare) run(t *testing.T)</a>

```Go
func (tt h12Compare) run(t *testing.T)
```

##### <a name="net-http_test-type-h12Compare-normalizeRes">func (tt h12Compare) normalizeRes(t *testing.T, res *Response, wantProto string)</a>

```Go
func (tt h12Compare) normalizeRes(t *testing.T, res *Response, wantProto string)
```

#### <a name="net-http_test-type-slurpResult">type slurpResult struct</a>

```Go
type slurpResult struct {
	io.ReadCloser
	body []byte
	err  error
}
```

##### <a name="net-http_test-type-slurpResult-String">func (sr slurpResult) String() string</a>

```Go
func (sr slurpResult) String() string
```

#### <a name="net-http_test-type-lockedBytesBuffer">type lockedBytesBuffer struct</a>

```Go
type lockedBytesBuffer struct {
	sync.Mutex
	bytes.Buffer
}
```

##### <a name="net-http_test-type-lockedBytesBuffer-Write">func (b *lockedBytesBuffer) Write(p []byte) (int, error)</a>

```Go
func (b *lockedBytesBuffer) Write(p []byte) (int, error)
```

#### <a name="net-http_test-type-noteCloseConn">type noteCloseConn struct</a>

```Go
type noteCloseConn struct {
	net.Conn
	closeFunc func()
}
```

##### <a name="net-http_test-type-noteCloseConn-Close">func (x noteCloseConn) Close() error</a>

```Go
func (x noteCloseConn) Close() error
```

#### <a name="net-http_test-type-testErrorReader">type testErrorReader struct</a>

```Go
type testErrorReader struct{ t *testing.T }
```

##### <a name="net-http_test-type-testErrorReader-Read">func (r testErrorReader) Read(p []byte) (n int, err error)</a>

```Go
func (r testErrorReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-dotFileHidingFile">type dotFileHidingFile struct</a>

```Go
type dotFileHidingFile struct {
	http.File
}
```

dotFileHidingFile is the http.File use in dotFileHidingFileSystem. It is used to wrap the Readdir method of http.File so that we can remove files and directories that start with a period from its output. 

##### <a name="net-http_test-type-dotFileHidingFile-Readdir">func (f dotFileHidingFile) Readdir(n int) (fis []fs.FileInfo, err error)</a>

```Go
func (f dotFileHidingFile) Readdir(n int) (fis []fs.FileInfo, err error)
```

Readdir is a wrapper around the Readdir method of the embedded File that filters out all files that start with a period in their name. 

#### <a name="net-http_test-type-dotFileHidingFileSystem">type dotFileHidingFileSystem struct</a>

```Go
type dotFileHidingFileSystem struct {
	http.FileSystem
}
```

dotFileHidingFileSystem is an http.FileSystem that hides hidden "dot files" from being served. 

##### <a name="net-http_test-type-dotFileHidingFileSystem-Open">func (fsys dotFileHidingFileSystem) Open(name string) (http.File, error)</a>

```Go
func (fsys dotFileHidingFileSystem) Open(name string) (http.File, error)
```

Open is a wrapper around the Open method of the embedded FileSystem that serves a 403 permission error when name has a file or directory with whose name starts with a period in its path. 

#### <a name="net-http_test-type-countHandler">type countHandler struct</a>

```Go
type countHandler struct {
	mu sync.Mutex // guards n
	n  int
}
```

##### <a name="net-http_test-type-countHandler-ServeHTTP">func (h *countHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)</a>

```Go
func (h *countHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)
```

#### <a name="net-http_test-type-apiHandler">type apiHandler struct{}</a>

```Go
type apiHandler struct{}
```

##### <a name="net-http_test-type-apiHandler-ServeHTTP">func (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request)</a>

```Go
func (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request)
```

#### <a name="net-http_test-type-wantRange">type wantRange struct</a>

```Go
type wantRange struct {
	start, end int64 // range [start,end)
}
```

#### <a name="net-http_test-type-testFileSystem">type testFileSystem struct</a>

```Go
type testFileSystem struct {
	open func(name string) (File, error)
}
```

##### <a name="net-http_test-type-testFileSystem-Open">func (fs *testFileSystem) Open(name string) (File, error)</a>

```Go
func (fs *testFileSystem) Open(name string) (File, error)
```

#### <a name="net-http_test-type-fakeFileInfo">type fakeFileInfo struct</a>

```Go
type fakeFileInfo struct {
	dir      bool
	basename string
	modtime  time.Time
	ents     []*fakeFileInfo
	contents string
	err      error
}
```

##### <a name="net-http_test-type-fakeFileInfo-Name">func (f *fakeFileInfo) Name() string</a>

```Go
func (f *fakeFileInfo) Name() string
```

##### <a name="net-http_test-type-fakeFileInfo-Sys">func (f *fakeFileInfo) Sys() interface{}</a>

```Go
func (f *fakeFileInfo) Sys() interface{}
```

##### <a name="net-http_test-type-fakeFileInfo-ModTime">func (f *fakeFileInfo) ModTime() time.Time</a>

```Go
func (f *fakeFileInfo) ModTime() time.Time
```

##### <a name="net-http_test-type-fakeFileInfo-IsDir">func (f *fakeFileInfo) IsDir() bool</a>

```Go
func (f *fakeFileInfo) IsDir() bool
```

##### <a name="net-http_test-type-fakeFileInfo-Size">func (f *fakeFileInfo) Size() int64</a>

```Go
func (f *fakeFileInfo) Size() int64
```

##### <a name="net-http_test-type-fakeFileInfo-Mode">func (f *fakeFileInfo) Mode() fs.FileMode</a>

```Go
func (f *fakeFileInfo) Mode() fs.FileMode
```

#### <a name="net-http_test-type-fakeFile">type fakeFile struct</a>

```Go
type fakeFile struct {
	io.ReadSeeker
	fi     *fakeFileInfo
	path   string // as opened
	entpos int
}
```

##### <a name="net-http_test-type-fakeFile-Close">func (f *fakeFile) Close() error</a>

```Go
func (f *fakeFile) Close() error
```

##### <a name="net-http_test-type-fakeFile-Stat">func (f *fakeFile) Stat() (fs.FileInfo, error)</a>

```Go
func (f *fakeFile) Stat() (fs.FileInfo, error)
```

##### <a name="net-http_test-type-fakeFile-Readdir">func (f *fakeFile) Readdir(count int) ([]fs.FileInfo, error)</a>

```Go
func (f *fakeFile) Readdir(count int) ([]fs.FileInfo, error)
```

#### <a name="net-http_test-type-fakeFS">type fakeFS map[string]*http_test.fakeFileInfo</a>

```Go
type fakeFS map[string]*fakeFileInfo
```

##### <a name="net-http_test-type-fakeFS-Open">func (fsys fakeFS) Open(name string) (File, error)</a>

```Go
func (fsys fakeFS) Open(name string) (File, error)
```

#### <a name="net-http_test-type-serveParam">type serveParam struct</a>

```Go
type serveParam struct {
	name        string
	modtime     time.Time
	content     io.ReadSeeker
	contentType string
	etag        string
}
```

#### <a name="net-http_test-type-testCase">type testCase struct</a>

```Go
type testCase struct {
	// One of file or content must be set:
	file    string
	content io.ReadSeeker

	modtime          time.Time
	serveETag        string // optional
	serveContentType string // optional
	reqHeader        map[string]string
	wantLastMod      string
	wantContentType  string
	wantContentRange string
	wantStatus       int
}
```

#### <a name="net-http_test-type-issue12991FS">type issue12991FS struct{}</a>

```Go
type issue12991FS struct{}
```

##### <a name="net-http_test-type-issue12991FS-Open">func (issue12991FS) Open(string) (File, error)</a>

```Go
func (issue12991FS) Open(string) (File, error)
```

#### <a name="net-http_test-type-issue12991File">type issue12991File struct</a>

```Go
type issue12991File struct{ File }
```

##### <a name="net-http_test-type-issue12991File-Stat">func (issue12991File) Stat() (fs.FileInfo, error)</a>

```Go
func (issue12991File) Stat() (fs.FileInfo, error)
```

##### <a name="net-http_test-type-issue12991File-Close">func (issue12991File) Close() error</a>

```Go
func (issue12991File) Close() error
```

#### <a name="net-http_test-type-fileServerCleanPathDir">type fileServerCleanPathDir struct</a>

```Go
type fileServerCleanPathDir struct {
	log *[]string
}
```

##### <a name="net-http_test-type-fileServerCleanPathDir-Open">func (d fileServerCleanPathDir) Open(path string) (File, error)</a>

```Go
func (d fileServerCleanPathDir) Open(path string) (File, error)
```

#### <a name="net-http_test-type-panicOnSeek">type panicOnSeek struct</a>

```Go
type panicOnSeek struct{ io.ReadSeeker }
```

#### <a name="net-http_test-type-version">type version struct</a>

```Go
type version struct {
	major, minor int
	ok           bool
}
```

#### <a name="net-http_test-type-getBasicAuthTest">type getBasicAuthTest struct</a>

```Go
type getBasicAuthTest struct {
	username, password string
	ok                 bool
}
```

#### <a name="net-http_test-type-basicAuthCredentialsTest">type basicAuthCredentialsTest struct</a>

```Go
type basicAuthCredentialsTest struct {
	username, password string
}
```

#### <a name="net-http_test-type-logWrites">type logWrites struct</a>

```Go
type logWrites struct {
	t   *testing.T
	dst *[]string
}
```

##### <a name="net-http_test-type-logWrites-WriteByte">func (l logWrites) WriteByte(c byte) error</a>

```Go
func (l logWrites) WriteByte(c byte) error
```

##### <a name="net-http_test-type-logWrites-Write">func (l logWrites) Write(p []byte) (n int, err error)</a>

```Go
func (l logWrites) Write(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-responseWriterJustWriter">type responseWriterJustWriter struct</a>

```Go
type responseWriterJustWriter struct {
	io.Writer
}
```

##### <a name="net-http_test-type-responseWriterJustWriter-Header">func (responseWriterJustWriter) Header() Header</a>

```Go
func (responseWriterJustWriter) Header() Header
```

##### <a name="net-http_test-type-responseWriterJustWriter-WriteHeader">func (responseWriterJustWriter) WriteHeader(int)</a>

```Go
func (responseWriterJustWriter) WriteHeader(int)
```

#### <a name="net-http_test-type-delayedEOFReader">type delayedEOFReader struct</a>

```Go
type delayedEOFReader struct {
	r io.Reader
}
```

delayedEOFReader never returns (n > 0, io.EOF), instead putting off the io.EOF until a subsequent Read call. 

##### <a name="net-http_test-type-delayedEOFReader-Read">func (dr delayedEOFReader) Read(p []byte) (n int, err error)</a>

```Go
func (dr delayedEOFReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-infiniteReader">type infiniteReader struct</a>

```Go
type infiniteReader struct {
	buf    []byte
	offset int
}
```

infiniteReader satisfies Read requests as if the contents of buf loop indefinitely. 

##### <a name="net-http_test-type-infiniteReader-Read">func (r *infiniteReader) Read(b []byte) (int, error)</a>

```Go
func (r *infiniteReader) Read(b []byte) (int, error)
```

#### <a name="net-http_test-type-dummyAddr">type dummyAddr string</a>

```Go
type dummyAddr string
```

##### <a name="net-http_test-type-dummyAddr-Network">func (a dummyAddr) Network() string</a>

```Go
func (a dummyAddr) Network() string
```

##### <a name="net-http_test-type-dummyAddr-String">func (a dummyAddr) String() string</a>

```Go
func (a dummyAddr) String() string
```

#### <a name="net-http_test-type-oneConnListener">type oneConnListener struct</a>

```Go
type oneConnListener struct {
	conn net.Conn
}
```

##### <a name="net-http_test-type-oneConnListener-Accept">func (l *oneConnListener) Accept() (c net.Conn, err error)</a>

```Go
func (l *oneConnListener) Accept() (c net.Conn, err error)
```

##### <a name="net-http_test-type-oneConnListener-Close">func (l *oneConnListener) Close() error</a>

```Go
func (l *oneConnListener) Close() error
```

##### <a name="net-http_test-type-oneConnListener-Addr">func (l *oneConnListener) Addr() net.Addr</a>

```Go
func (l *oneConnListener) Addr() net.Addr
```

#### <a name="net-http_test-type-noopConn">type noopConn struct{}</a>

```Go
type noopConn struct{}
```

##### <a name="net-http_test-type-noopConn-LocalAddr">func (noopConn) LocalAddr() net.Addr</a>

```Go
func (noopConn) LocalAddr() net.Addr
```

##### <a name="net-http_test-type-noopConn-RemoteAddr">func (noopConn) RemoteAddr() net.Addr</a>

```Go
func (noopConn) RemoteAddr() net.Addr
```

##### <a name="net-http_test-type-noopConn-SetDeadline">func (noopConn) SetDeadline(t time.Time) error</a>

```Go
func (noopConn) SetDeadline(t time.Time) error
```

##### <a name="net-http_test-type-noopConn-SetReadDeadline">func (noopConn) SetReadDeadline(t time.Time) error</a>

```Go
func (noopConn) SetReadDeadline(t time.Time) error
```

##### <a name="net-http_test-type-noopConn-SetWriteDeadline">func (noopConn) SetWriteDeadline(t time.Time) error</a>

```Go
func (noopConn) SetWriteDeadline(t time.Time) error
```

#### <a name="net-http_test-type-rwTestConn">type rwTestConn struct</a>

```Go
type rwTestConn struct {
	io.Reader
	io.Writer
	noopConn

	closeFunc func() error // called if non-nil
	closec    chan bool    // else, if non-nil, send value to it on close
}
```

##### <a name="net-http_test-type-rwTestConn-Close">func (c *rwTestConn) Close() error</a>

```Go
func (c *rwTestConn) Close() error
```

#### <a name="net-http_test-type-testConn">type testConn struct</a>

```Go
type testConn struct {
	readMu   sync.Mutex // for TestHandlerBodyClose
	readBuf  bytes.Buffer
	writeBuf bytes.Buffer
	closec   chan bool // if non-nil, send value to it on close
	noopConn
}
```

##### <a name="net-http_test-type-testConn-Read">func (c *testConn) Read(b []byte) (int, error)</a>

```Go
func (c *testConn) Read(b []byte) (int, error)
```

##### <a name="net-http_test-type-testConn-Write">func (c *testConn) Write(b []byte) (int, error)</a>

```Go
func (c *testConn) Write(b []byte) (int, error)
```

##### <a name="net-http_test-type-testConn-Close">func (c *testConn) Close() error</a>

```Go
func (c *testConn) Close() error
```

#### <a name="net-http_test-type-handlerTest">type handlerTest struct</a>

```Go
type handlerTest struct {
	logbuf  bytes.Buffer
	handler Handler
}
```

##### <a name="net-http_test-type-handlerTest-newHandlerTest">func newHandlerTest(h Handler) handlerTest</a>

```Go
func newHandlerTest(h Handler) handlerTest
```

##### <a name="net-http_test-type-handlerTest-rawResponse">func (ht *handlerTest) rawResponse(req string) string</a>

```Go
func (ht *handlerTest) rawResponse(req string) string
```

#### <a name="net-http_test-type-stringHandler">type stringHandler string</a>

```Go
type stringHandler string
```

##### <a name="net-http_test-type-stringHandler-ServeHTTP">func (s stringHandler) ServeHTTP(w ResponseWriter, r *Request)</a>

```Go
func (s stringHandler) ServeHTTP(w ResponseWriter, r *Request)
```

#### <a name="net-http_test-type-test">type test struct</a>

```Go
type test struct {
	path string
	code int
	req  *Request
}
```

#### <a name="net-http_test-type-trackLastConnListener">type trackLastConnListener struct</a>

```Go
type trackLastConnListener struct {
	net.Listener

	mu   *sync.RWMutex
	last *net.Conn // destination
}
```

trackLastConnListener tracks the last net.Conn that was accepted. 

##### <a name="net-http_test-type-trackLastConnListener-Accept">func (l trackLastConnListener) Accept() (c net.Conn, err error)</a>

```Go
func (l trackLastConnListener) Accept() (c net.Conn, err error)
```

#### <a name="net-http_test-type-data">type data struct</a>

```Go
type data struct {
	Addr string
}
```

#### <a name="net-http_test-type-blockingRemoteAddrListener">type blockingRemoteAddrListener struct</a>

```Go
type blockingRemoteAddrListener struct {
	net.Listener
	conns chan<- net.Conn
}
```

##### <a name="net-http_test-type-blockingRemoteAddrListener-Accept">func (l *blockingRemoteAddrListener) Accept() (net.Conn, error)</a>

```Go
func (l *blockingRemoteAddrListener) Accept() (net.Conn, error)
```

#### <a name="net-http_test-type-blockingRemoteAddrConn">type blockingRemoteAddrConn struct</a>

```Go
type blockingRemoteAddrConn struct {
	net.Conn
	addrs chan net.Addr
}
```

##### <a name="net-http_test-type-blockingRemoteAddrConn-RemoteAddr">func (c *blockingRemoteAddrConn) RemoteAddr() net.Addr</a>

```Go
func (c *blockingRemoteAddrConn) RemoteAddr() net.Addr
```

#### <a name="net-http_test-type-serverExpectTest">type serverExpectTest struct</a>

```Go
type serverExpectTest struct {
	contentLength    int // of request body
	chunked          bool
	expectation      string // e.g. "100-continue"
	readBody         bool   // whether handler should read the body (if false, sends StatusUnauthorized)
	expectedResponse string // expected substring in first line of http response
}
```

##### <a name="net-http_test-type-serverExpectTest-expectTest">func expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest</a>

```Go
func expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest
```

#### <a name="net-http_test-type-handlerBodyCloseTest">type handlerBodyCloseTest struct</a>

```Go
type handlerBodyCloseTest struct {
	bodySize     int
	bodyChunked  bool
	reqConnClose bool

	wantEOFSearch bool // should Handler's Body.Close do Reads, looking for EOF?
	wantNextReq   bool // should it find the next request on the same conn?
}
```

##### <a name="net-http_test-type-handlerBodyCloseTest-connectionHeader">func (t handlerBodyCloseTest) connectionHeader() string</a>

```Go
func (t handlerBodyCloseTest) connectionHeader() string
```

#### <a name="net-http_test-type-testHandlerBodyConsumer">type testHandlerBodyConsumer struct</a>

```Go
type testHandlerBodyConsumer struct {
	name string
	f    func(io.ReadCloser)
}
```

testHandlerBodyConsumer represents a function injected into a test handler to vary work done on a request Body. 

#### <a name="net-http_test-type-slowTestConn">type slowTestConn struct</a>

```Go
type slowTestConn struct {
	// over multiple calls to Read, time.Durations are slept, strings are read.
	script []interface{}
	closec chan bool

	mu     sync.Mutex // guards rd/wd
	rd, wd time.Time  // read, write deadline
	noopConn
}
```

slowTestConn is a net.Conn that provides a means to simulate parts of a request being received piecemeal. Deadlines can be set and enforced in both Read and Write. 

##### <a name="net-http_test-type-slowTestConn-SetDeadline">func (c *slowTestConn) SetDeadline(t time.Time) error</a>

```Go
func (c *slowTestConn) SetDeadline(t time.Time) error
```

##### <a name="net-http_test-type-slowTestConn-SetReadDeadline">func (c *slowTestConn) SetReadDeadline(t time.Time) error</a>

```Go
func (c *slowTestConn) SetReadDeadline(t time.Time) error
```

##### <a name="net-http_test-type-slowTestConn-SetWriteDeadline">func (c *slowTestConn) SetWriteDeadline(t time.Time) error</a>

```Go
func (c *slowTestConn) SetWriteDeadline(t time.Time) error
```

##### <a name="net-http_test-type-slowTestConn-Read">func (c *slowTestConn) Read(b []byte) (n int, err error)</a>

```Go
func (c *slowTestConn) Read(b []byte) (n int, err error)
```

##### <a name="net-http_test-type-slowTestConn-Close">func (c *slowTestConn) Close() error</a>

```Go
func (c *slowTestConn) Close() error
```

##### <a name="net-http_test-type-slowTestConn-Write">func (c *slowTestConn) Write(b []byte) (int, error)</a>

```Go
func (c *slowTestConn) Write(b []byte) (int, error)
```

#### <a name="net-http_test-type-ctHeader">type ctHeader struct</a>

```Go
type ctHeader struct {
	Values []string
}
```

#### <a name="net-http_test-type-terrorWriter">type terrorWriter struct</a>

```Go
type terrorWriter struct{ t *testing.T }
```

##### <a name="net-http_test-type-terrorWriter-Write">func (w terrorWriter) Write(p []byte) (int, error)</a>

```Go
func (w terrorWriter) Write(p []byte) (int, error)
```

#### <a name="net-http_test-type-neverEnding">type neverEnding byte</a>

```Go
type neverEnding byte
```

##### <a name="net-http_test-type-neverEnding-Read">func (b neverEnding) Read(p []byte) (n int, err error)</a>

```Go
func (b neverEnding) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-countReader">type countReader struct</a>

```Go
type countReader struct {
	r io.Reader
	n *int64
}
```

##### <a name="net-http_test-type-countReader-Read">func (cr countReader) Read(p []byte) (n int, err error)</a>

```Go
func (cr countReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-errorListener">type errorListener struct</a>

```Go
type errorListener struct {
	errs []error
}
```

##### <a name="net-http_test-type-errorListener-Accept">func (l *errorListener) Accept() (c net.Conn, err error)</a>

```Go
func (l *errorListener) Accept() (c net.Conn, err error)
```

##### <a name="net-http_test-type-errorListener-Close">func (l *errorListener) Close() error</a>

```Go
func (l *errorListener) Close() error
```

##### <a name="net-http_test-type-errorListener-Addr">func (l *errorListener) Addr() net.Addr</a>

```Go
func (l *errorListener) Addr() net.Addr
```

#### <a name="net-http_test-type-stateLog">type stateLog struct</a>

```Go
type stateLog struct {
	active   net.Conn // The connection for which the log is recorded; set to the first connection seen in StateNew.
	got      []ConnState
	want     []ConnState
	complete chan<- struct{} // If non-nil, closed when either 'got' is equal to 'want', or 'got' is no longer a prefix of 'want'.
}
```

A stateLog is a log of states over the lifetime of a connection. 

#### <a name="net-http_test-type-closeWriteTestConn">type closeWriteTestConn struct</a>

```Go
type closeWriteTestConn struct {
	rwTestConn
	didCloseWrite bool
}
```

##### <a name="net-http_test-type-closeWriteTestConn-CloseWrite">func (c *closeWriteTestConn) CloseWrite() error</a>

```Go
func (c *closeWriteTestConn) CloseWrite() error
```

#### <a name="net-http_test-type-repeatReader">type repeatReader struct</a>

```Go
type repeatReader struct {
	content []byte
	count   int
	off     int
}
```

repeatReader reads content count times, then EOFs. 

##### <a name="net-http_test-type-repeatReader-Read">func (r *repeatReader) Read(p []byte) (n int, err error)</a>

```Go
func (r *repeatReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-eofListenerNotComparable">type eofListenerNotComparable []int</a>

```Go
type eofListenerNotComparable []int
```

Listener for TestServerListenNotComparableListener. 

##### <a name="net-http_test-type-eofListenerNotComparable-Accept">func (eofListenerNotComparable) Accept() (net.Conn, error)</a>

```Go
func (eofListenerNotComparable) Accept() (net.Conn, error)
```

##### <a name="net-http_test-type-eofListenerNotComparable-Addr">func (eofListenerNotComparable) Addr() net.Addr</a>

```Go
func (eofListenerNotComparable) Addr() net.Addr
```

##### <a name="net-http_test-type-eofListenerNotComparable-Close">func (eofListenerNotComparable) Close() error</a>

```Go
func (eofListenerNotComparable) Close() error
```

#### <a name="net-http_test-type-countCloseListener">type countCloseListener struct</a>

```Go
type countCloseListener struct {
	net.Listener
	closes int32 // atomic
}
```

countCloseListener is a Listener wrapper that counts the number of Close calls. 

##### <a name="net-http_test-type-countCloseListener-Close">func (p *countCloseListener) Close() error</a>

```Go
func (p *countCloseListener) Close() error
```

#### <a name="net-http_test-type-baseKey">type baseKey struct{}</a>

```Go
type baseKey struct{}
```

#### <a name="net-http_test-type-connKey">type connKey struct{}</a>

```Go
type connKey struct{}
```

#### <a name="net-http_test-type-baseKey">type baseKey struct{}</a>

```Go
type baseKey struct{}
```

#### <a name="net-http_test-type-connKey">type connKey struct{}</a>

```Go
type connKey struct{}
```

#### <a name="net-http_test-type-connKey">type connKey struct{}</a>

```Go
type connKey struct{}
```

#### <a name="net-http_test-type-setting">type setting struct</a>

```Go
type setting struct {
	name string
	body []byte

	// setting contentEncoding as an interface instead of a string
	// directly, so as to differentiate between 3 states:
	//    unset, empty string "" and set string "foo/bar".
	contentEncoding interface{}
	wantContentType string
}
```

#### <a name="net-http_test-type-testCloseConn">type testCloseConn struct</a>

```Go
type testCloseConn struct {
	net.Conn
	set *testConnSet
}
```

testCloseConn is a net.Conn tracked by a testConnSet. 

##### <a name="net-http_test-type-testCloseConn-Close">func (c *testCloseConn) Close() error</a>

```Go
func (c *testCloseConn) Close() error
```

#### <a name="net-http_test-type-testConnSet">type testConnSet struct</a>

```Go
type testConnSet struct {
	t      *testing.T
	mu     sync.Mutex // guards closed and list
	closed map[net.Conn]bool
	list   []net.Conn // in order created
}
```

testConnSet tracks a set of TCP connections and whether they've been closed. 

##### <a name="net-http_test-type-testConnSet-makeTestDial">func makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, error))</a>

```Go
func makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, error))
```

some tests use this to manage raw tcp connections for later inspection 

##### <a name="net-http_test-type-testConnSet-insert">func (tcs *testConnSet) insert(c net.Conn)</a>

```Go
func (tcs *testConnSet) insert(c net.Conn)
```

##### <a name="net-http_test-type-testConnSet-remove">func (tcs *testConnSet) remove(c net.Conn)</a>

```Go
func (tcs *testConnSet) remove(c net.Conn)
```

##### <a name="net-http_test-type-testConnSet-check">func (tcs *testConnSet) check(t *testing.T)</a>

```Go
func (tcs *testConnSet) check(t *testing.T)
```

#### <a name="net-http_test-type-countedConn">type countedConn struct</a>

```Go
type countedConn struct {
	net.Conn
}
```

A countedConn is a net.Conn that decrements an atomic counter when finalized. 

#### <a name="net-http_test-type-countingDialer">type countingDialer struct</a>

```Go
type countingDialer struct {
	dialer      net.Dialer
	mu          sync.Mutex
	total, live int64
}
```

A countingDialer dials connections and counts the number that remain reachable. 

##### <a name="net-http_test-type-countingDialer-DialContext">func (d *countingDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)</a>

```Go
func (d *countingDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)
```

##### <a name="net-http_test-type-countingDialer-decrement">func (d *countingDialer) decrement(*countedConn)</a>

```Go
func (d *countingDialer) decrement(*countedConn)
```

##### <a name="net-http_test-type-countingDialer-Read">func (d *countingDialer) Read() (total, live int64)</a>

```Go
func (d *countingDialer) Read() (total, live int64)
```

#### <a name="net-http_test-type-countedContext">type countedContext struct</a>

```Go
type countedContext struct {
	context.Context
}
```

#### <a name="net-http_test-type-contextCounter">type contextCounter struct</a>

```Go
type contextCounter struct {
	mu   sync.Mutex
	live int64
}
```

##### <a name="net-http_test-type-contextCounter-Track">func (cc *contextCounter) Track(ctx context.Context) context.Context</a>

```Go
func (cc *contextCounter) Track(ctx context.Context) context.Context
```

##### <a name="net-http_test-type-contextCounter-decrement">func (cc *contextCounter) decrement(*countedContext)</a>

```Go
func (cc *contextCounter) decrement(*countedContext)
```

##### <a name="net-http_test-type-contextCounter-Read">func (cc *contextCounter) Read() (live int64)</a>

```Go
func (cc *contextCounter) Read() (live int64)
```

#### <a name="net-http_test-type-fooProto">type fooProto struct{}</a>

```Go
type fooProto struct{}
```

##### <a name="net-http_test-type-fooProto-RoundTrip">func (fooProto) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (fooProto) RoundTrip(req *Request) (*Response, error)
```

#### <a name="net-http_test-type-proxyFromEnvTest">type proxyFromEnvTest struct</a>

```Go
type proxyFromEnvTest struct {
	req string // URL to fetch; blank means "http://example.com"

	env      string // HTTP_PROXY
	httpsenv string // HTTPS_PROXY
	noenv    string // NO_PROXY
	reqmeth  string // REQUEST_METHOD

	want    string
	wanterr error
}
```

##### <a name="net-http_test-type-proxyFromEnvTest-String">func (t proxyFromEnvTest) String() string</a>

```Go
func (t proxyFromEnvTest) String() string
```

#### <a name="net-http_test-type-byteFromChanReader">type byteFromChanReader chan byte</a>

```Go
type byteFromChanReader chan byte
```

byteFromChanReader is an io.Reader that reads a single byte at a time from the channel. When the channel is closed, the reader returns io.EOF. 

##### <a name="net-http_test-type-byteFromChanReader-Read">func (c byteFromChanReader) Read(p []byte) (n int, err error)</a>

```Go
func (c byteFromChanReader) Read(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-closerFunc">type closerFunc func() error</a>

```Go
type closerFunc func() error
```

##### <a name="net-http_test-type-closerFunc-Close">func (f closerFunc) Close() error</a>

```Go
func (f closerFunc) Close() error
```

#### <a name="net-http_test-type-writerFuncConn">type writerFuncConn struct</a>

```Go
type writerFuncConn struct {
	net.Conn
	write func(p []byte) (n int, err error)
}
```

##### <a name="net-http_test-type-writerFuncConn-Write">func (c writerFuncConn) Write(p []byte) (n int, err error)</a>

```Go
func (c writerFuncConn) Write(p []byte) (n int, err error)
```

#### <a name="net-http_test-type-logWritesConn">type logWritesConn struct</a>

```Go
type logWritesConn struct {
	net.Conn // nil. crash on use.

	w io.Writer

	rch <-chan io.Reader
	r   io.Reader // nil until received by rch

	mu     sync.Mutex
	writes []string
}
```

logWritesConn is a net.Conn that logs each Write call to writes and then proxies to w. It proxies Read calls to a reader it receives from rch. 

##### <a name="net-http_test-type-logWritesConn-Write">func (c *logWritesConn) Write(p []byte) (n int, err error)</a>

```Go
func (c *logWritesConn) Write(p []byte) (n int, err error)
```

##### <a name="net-http_test-type-logWritesConn-Read">func (c *logWritesConn) Read(p []byte) (n int, err error)</a>

```Go
func (c *logWritesConn) Read(p []byte) (n int, err error)
```

##### <a name="net-http_test-type-logWritesConn-Close">func (c *logWritesConn) Close() error</a>

```Go
func (c *logWritesConn) Close() error
```

#### <a name="net-http_test-type-funcConn">type funcConn struct</a>

```Go
type funcConn struct {
	net.Conn
	read  func([]byte) (int, error)
	write func([]byte) (int, error)
}
```

##### <a name="net-http_test-type-funcConn-Read">func (c funcConn) Read(p []byte) (int, error)</a>

```Go
func (c funcConn) Read(p []byte) (int, error)
```

##### <a name="net-http_test-type-funcConn-Write">func (c funcConn) Write(p []byte) (int, error)</a>

```Go
func (c funcConn) Write(p []byte) (int, error)
```

##### <a name="net-http_test-type-funcConn-Close">func (c funcConn) Close() error</a>

```Go
func (c funcConn) Close() error
```

#### <a name="net-http_test-type-funcRoundTripper">type funcRoundTripper func()</a>

```Go
type funcRoundTripper func()
```

##### <a name="net-http_test-type-funcRoundTripper-RoundTrip">func (fn funcRoundTripper) RoundTrip(*Request) (*Response, error)</a>

```Go
func (fn funcRoundTripper) RoundTrip(*Request) (*Response, error)
```

#### <a name="net-http_test-type-countCloseReader">type countCloseReader struct</a>

```Go
type countCloseReader struct {
	n *int
	io.Reader
}
```

##### <a name="net-http_test-type-countCloseReader-Close">func (cr countCloseReader) Close() error</a>

```Go
func (cr countCloseReader) Close() error
```

#### <a name="net-http_test-type-funcWriter">type funcWriter func([]byte) (int, error)</a>

```Go
type funcWriter func([]byte) (int, error)
```

##### <a name="net-http_test-type-funcWriter-Write">func (f funcWriter) Write(p []byte) (int, error)</a>

```Go
func (f funcWriter) Write(p []byte) (int, error)
```

#### <a name="net-http_test-type-doneContext">type doneContext struct</a>

```Go
type doneContext struct {
	context.Context
	err error
}
```

##### <a name="net-http_test-type-doneContext-Done">func (doneContext) Done() <-chan struct{}</a>

```Go
func (doneContext) Done() <-chan struct{}
```

##### <a name="net-http_test-type-doneContext-Err">func (d doneContext) Err() error</a>

```Go
func (d doneContext) Err() error
```

#### <a name="net-http_test-type-testMockTCPConn">type testMockTCPConn struct</a>

```Go
type testMockTCPConn struct {
	*net.TCPConn

	ReadFromCalled bool
}
```

testMockTCPConn is a mock TCP connection used to test that ReadFrom is called when sending the request body. 

##### <a name="net-http_test-type-testMockTCPConn-ReadFrom">func (c *testMockTCPConn) ReadFrom(r io.Reader) (int64, error)</a>

```Go
func (c *testMockTCPConn) ReadFrom(r io.Reader) (int64, error)
```

#### <a name="net-http_test-type-bodyCloser">type bodyCloser bool</a>

```Go
type bodyCloser bool
```

##### <a name="net-http_test-type-bodyCloser-Close">func (bc *bodyCloser) Close() error</a>

```Go
func (bc *bodyCloser) Close() error
```

##### <a name="net-http_test-type-bodyCloser-Read">func (bc *bodyCloser) Read(b []byte) (n int, err error)</a>

```Go
func (bc *bodyCloser) Read(b []byte) (n int, err error)
```

#### <a name="net-http_test-type-breakableConn">type breakableConn struct</a>

```Go
type breakableConn struct {
	net.Conn
	*brokenState
}
```

breakableConn is a net.Conn wrapper with a Write method that will fail when its brokenState is true. 

##### <a name="net-http_test-type-breakableConn-Write">func (w *breakableConn) Write(b []byte) (n int, err error)</a>

```Go
func (w *breakableConn) Write(b []byte) (n int, err error)
```

#### <a name="net-http_test-type-brokenState">type brokenState struct</a>

```Go
type brokenState struct {
	sync.Mutex
	broken bool
}
```

#### <a name="net-http_test-type-timeoutProto">type timeoutProto struct{}</a>

```Go
type timeoutProto struct{}
```

##### <a name="net-http_test-type-timeoutProto-RoundTrip">func (timeoutProto) RoundTrip(req *Request) (*Response, error)</a>

```Go
func (timeoutProto) RoundTrip(req *Request) (*Response, error)
```

#### <a name="net-http_test-type-roundTripFunc">type roundTripFunc func(r *net/http.Request) (*net/http.Response, error)</a>

```Go
type roundTripFunc func(r *Request) (*Response, error)
```

##### <a name="net-http_test-type-roundTripFunc-RoundTrip">func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)</a>

```Go
func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)
```

#### <a name="net-http_test-type-dumpConn">type dumpConn struct</a>

```Go
type dumpConn struct {
	io.Writer
	io.Reader
}
```

dumpConn is a net.Conn which writes to Writer and reads from Reader 

##### <a name="net-http_test-type-dumpConn-Close">func (c *dumpConn) Close() error</a>

```Go
func (c *dumpConn) Close() error
```

##### <a name="net-http_test-type-dumpConn-LocalAddr">func (c *dumpConn) LocalAddr() net.Addr</a>

```Go
func (c *dumpConn) LocalAddr() net.Addr
```

##### <a name="net-http_test-type-dumpConn-RemoteAddr">func (c *dumpConn) RemoteAddr() net.Addr</a>

```Go
func (c *dumpConn) RemoteAddr() net.Addr
```

##### <a name="net-http_test-type-dumpConn-SetDeadline">func (c *dumpConn) SetDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetDeadline(t time.Time) error
```

##### <a name="net-http_test-type-dumpConn-SetReadDeadline">func (c *dumpConn) SetReadDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetReadDeadline(t time.Time) error
```

##### <a name="net-http_test-type-dumpConn-SetWriteDeadline">func (c *dumpConn) SetWriteDeadline(t time.Time) error</a>

```Go
func (c *dumpConn) SetWriteDeadline(t time.Time) error
```

#### <a name="net-http_test-type-delegateReader">type delegateReader struct</a>

```Go
type delegateReader struct {
	c chan io.Reader
	r io.Reader // nil until received from c
}
```

delegateReader is a reader that delegates to another reader, once it arrives on a channel. 

##### <a name="net-http_test-type-delegateReader-Read">func (r *delegateReader) Read(p []byte) (int, error)</a>

```Go
func (r *delegateReader) Read(p []byte) (int, error)
```

### <a name="net-http_test-func">Functions</a>

#### <a name="net-http_test-func-TestNextProtoUpgrade">func TestNextProtoUpgrade(t *testing.T)</a>

```Go
func TestNextProtoUpgrade(t *testing.T)
```

#### <a name="net-http_test-func-handleTLSProtocol09">func handleTLSProtocol09(srv *Server, conn *tls.Conn, h Handler)</a>

```Go
func handleTLSProtocol09(srv *Server, conn *tls.Conn, h Handler)
```

handleTLSProtocol09 implements the HTTP/0.9 protocol over TLS, for the TestNextProtoUpgrade test. 

#### <a name="net-http_test-func-pedanticReadAll">func pedanticReadAll(r io.Reader) (b []byte, err error)</a>

```Go
func pedanticReadAll(r io.Reader) (b []byte, err error)
```

pedanticReadAll works like io.ReadAll but additionally verifies that r obeys the documented io.Reader contract. 

#### <a name="net-http_test-func-TestClient">func TestClient(t *testing.T)</a>

```Go
func TestClient(t *testing.T)
```

#### <a name="net-http_test-func-TestClientHead_h1">func TestClientHead_h1(t *testing.T)</a>

```Go
func TestClientHead_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestClientHead_h2">func TestClientHead_h2(t *testing.T)</a>

```Go
func TestClientHead_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientHead">func testClientHead(t *testing.T, h2 bool)</a>

```Go
func testClientHead(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestGetRequestFormat">func TestGetRequestFormat(t *testing.T)</a>

```Go
func TestGetRequestFormat(t *testing.T)
```

#### <a name="net-http_test-func-TestPostRequestFormat">func TestPostRequestFormat(t *testing.T)</a>

```Go
func TestPostRequestFormat(t *testing.T)
```

#### <a name="net-http_test-func-TestPostFormRequestFormat">func TestPostFormRequestFormat(t *testing.T)</a>

```Go
func TestPostFormRequestFormat(t *testing.T)
```

#### <a name="net-http_test-func-TestClientRedirects">func TestClientRedirects(t *testing.T)</a>

```Go
func TestClientRedirects(t *testing.T)
```

#### <a name="net-http_test-func-TestClientRedirectContext">func TestClientRedirectContext(t *testing.T)</a>

```Go
func TestClientRedirectContext(t *testing.T)
```

Tests that Client redirects' contexts are derived from the original request's context. 

#### <a name="net-http_test-func-TestPostRedirects">func TestPostRedirects(t *testing.T)</a>

```Go
func TestPostRedirects(t *testing.T)
```

#### <a name="net-http_test-func-TestDeleteRedirects">func TestDeleteRedirects(t *testing.T)</a>

```Go
func TestDeleteRedirects(t *testing.T)
```

#### <a name="net-http_test-func-testRedirectsByMethod">func testRedirectsByMethod(t *testing.T, method string, table []redirectTest, want string)</a>

```Go
func testRedirectsByMethod(t *testing.T, method string, table []redirectTest, want string)
```

#### <a name="net-http_test-func-removeCommonLines">func removeCommonLines(a, b string) (asuffix, bsuffix string, commonLines int)</a>

```Go
func removeCommonLines(a, b string) (asuffix, bsuffix string, commonLines int)
```

#### <a name="net-http_test-func-TestClientRedirectUseResponse">func TestClientRedirectUseResponse(t *testing.T)</a>

```Go
func TestClientRedirectUseResponse(t *testing.T)
```

#### <a name="net-http_test-func-TestClientRedirect308NoLocation">func TestClientRedirect308NoLocation(t *testing.T)</a>

```Go
func TestClientRedirect308NoLocation(t *testing.T)
```

Issue 17773: don't follow a 308 (or 307) if the response doesn't have a Location header. 

#### <a name="net-http_test-func-TestClientRedirect308NoGetBody">func TestClientRedirect308NoGetBody(t *testing.T)</a>

```Go
func TestClientRedirect308NoGetBody(t *testing.T)
```

Don't follow a 307/308 if we can't resent the request body. 

#### <a name="net-http_test-func-TestClientSendsCookieFromJar">func TestClientSendsCookieFromJar(t *testing.T)</a>

```Go
func TestClientSendsCookieFromJar(t *testing.T)
```

#### <a name="net-http_test-func-TestRedirectCookiesJar">func TestRedirectCookiesJar(t *testing.T)</a>

```Go
func TestRedirectCookiesJar(t *testing.T)
```

#### <a name="net-http_test-func-matchReturnedCookies">func matchReturnedCookies(t *testing.T, expected, given []*Cookie)</a>

```Go
func matchReturnedCookies(t *testing.T, expected, given []*Cookie)
```

#### <a name="net-http_test-func-TestJarCalls">func TestJarCalls(t *testing.T)</a>

```Go
func TestJarCalls(t *testing.T)
```

#### <a name="net-http_test-func-TestStreamingGet_h1">func TestStreamingGet_h1(t *testing.T)</a>

```Go
func TestStreamingGet_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestStreamingGet_h2">func TestStreamingGet_h2(t *testing.T)</a>

```Go
func TestStreamingGet_h2(t *testing.T)
```

#### <a name="net-http_test-func-testStreamingGet">func testStreamingGet(t *testing.T, h2 bool)</a>

```Go
func testStreamingGet(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestClientWrites">func TestClientWrites(t *testing.T)</a>

```Go
func TestClientWrites(t *testing.T)
```

TestClientWrites verifies that client requests are buffered and we don't send a TCP packet per line of the http request + body. 

#### <a name="net-http_test-func-TestClientInsecureTransport">func TestClientInsecureTransport(t *testing.T)</a>

```Go
func TestClientInsecureTransport(t *testing.T)
```

#### <a name="net-http_test-func-TestClientErrorWithRequestURI">func TestClientErrorWithRequestURI(t *testing.T)</a>

```Go
func TestClientErrorWithRequestURI(t *testing.T)
```

#### <a name="net-http_test-func-TestClientWithCorrectTLSServerName">func TestClientWithCorrectTLSServerName(t *testing.T)</a>

```Go
func TestClientWithCorrectTLSServerName(t *testing.T)
```

#### <a name="net-http_test-func-TestClientWithIncorrectTLSServerName">func TestClientWithIncorrectTLSServerName(t *testing.T)</a>

```Go
func TestClientWithIncorrectTLSServerName(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportUsesTLSConfigServerName">func TestTransportUsesTLSConfigServerName(t *testing.T)</a>

```Go
func TestTransportUsesTLSConfigServerName(t *testing.T)
```

Test for golang.org/issue/5829; the Transport should respect TLSClientConfig.ServerName when not empty. 

tls.Config.ServerName (non-empty, set to "example.com") takes precedence over "some-other-host.tld" which previously incorrectly took precedence. We don't actually connect to (or even resolve) "some-other-host.tld", though, because of the Transport.Dial hook. 

The httptest.Server has a cert with "example.com" as its name. 

#### <a name="net-http_test-func-TestResponseSetsTLSConnectionState">func TestResponseSetsTLSConnectionState(t *testing.T)</a>

```Go
func TestResponseSetsTLSConnectionState(t *testing.T)
```

#### <a name="net-http_test-func-TestHTTPSClientDetectsHTTPServer">func TestHTTPSClientDetectsHTTPServer(t *testing.T)</a>

```Go
func TestHTTPSClientDetectsHTTPServer(t *testing.T)
```

Check that an HTTPS client can interpret a particular TLS error to determine that the server is speaking HTTP. See golang.org/issue/11111. 

#### <a name="net-http_test-func-TestClientHeadContentLength_h1">func TestClientHeadContentLength_h1(t *testing.T)</a>

```Go
func TestClientHeadContentLength_h1(t *testing.T)
```

Verify Response.ContentLength is populated. [https://golang.org/issue/4126](https://golang.org/issue/4126) 

#### <a name="net-http_test-func-TestClientHeadContentLength_h2">func TestClientHeadContentLength_h2(t *testing.T)</a>

```Go
func TestClientHeadContentLength_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientHeadContentLength">func testClientHeadContentLength(t *testing.T, h2 bool)</a>

```Go
func testClientHeadContentLength(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestEmptyPasswordAuth">func TestEmptyPasswordAuth(t *testing.T)</a>

```Go
func TestEmptyPasswordAuth(t *testing.T)
```

#### <a name="net-http_test-func-TestBasicAuth">func TestBasicAuth(t *testing.T)</a>

```Go
func TestBasicAuth(t *testing.T)
```

#### <a name="net-http_test-func-TestBasicAuthHeadersPreserved">func TestBasicAuthHeadersPreserved(t *testing.T)</a>

```Go
func TestBasicAuthHeadersPreserved(t *testing.T)
```

#### <a name="net-http_test-func-TestStripPasswordFromError">func TestStripPasswordFromError(t *testing.T)</a>

```Go
func TestStripPasswordFromError(t *testing.T)
```

#### <a name="net-http_test-func-TestClientTimeout_h1">func TestClientTimeout_h1(t *testing.T)</a>

```Go
func TestClientTimeout_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestClientTimeout_h2">func TestClientTimeout_h2(t *testing.T)</a>

```Go
func TestClientTimeout_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientTimeout">func testClientTimeout(t *testing.T, h2 bool)</a>

```Go
func testClientTimeout(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestClientTimeout_Headers_h1">func TestClientTimeout_Headers_h1(t *testing.T)</a>

```Go
func TestClientTimeout_Headers_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestClientTimeout_Headers_h2">func TestClientTimeout_Headers_h2(t *testing.T)</a>

```Go
func TestClientTimeout_Headers_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientTimeout_Headers">func testClientTimeout_Headers(t *testing.T, h2 bool)</a>

```Go
func testClientTimeout_Headers(t *testing.T, h2 bool)
```

Client.Timeout firing before getting to the body 

#### <a name="net-http_test-func-TestClientTimeoutCancel">func TestClientTimeoutCancel(t *testing.T)</a>

```Go
func TestClientTimeoutCancel(t *testing.T)
```

Issue 16094: if Client.Timeout is set but not hit, a Timeout error shouldn't be returned. 

#### <a name="net-http_test-func-TestClientRedirectEatsBody_h1">func TestClientRedirectEatsBody_h1(t *testing.T)</a>

```Go
func TestClientRedirectEatsBody_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestClientRedirectEatsBody_h2">func TestClientRedirectEatsBody_h2(t *testing.T)</a>

```Go
func TestClientRedirectEatsBody_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientRedirectEatsBody">func testClientRedirectEatsBody(t *testing.T, h2 bool)</a>

```Go
func testClientRedirectEatsBody(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestReferer">func TestReferer(t *testing.T)</a>

```Go
func TestReferer(t *testing.T)
```

#### <a name="net-http_test-func-TestClientRedirectResponseWithoutRequest">func TestClientRedirectResponseWithoutRequest(t *testing.T)</a>

```Go
func TestClientRedirectResponseWithoutRequest(t *testing.T)
```

Issue 15577: don't assume the roundtripper's response populates its Request field. 

#### <a name="net-http_test-func-TestClientCopyHeadersOnRedirect">func TestClientCopyHeadersOnRedirect(t *testing.T)</a>

```Go
func TestClientCopyHeadersOnRedirect(t *testing.T)
```

Issue 4800: copy (some) headers when Client follows a redirect. 

#### <a name="net-http_test-func-TestClientCopyHostOnRedirect">func TestClientCopyHostOnRedirect(t *testing.T)</a>

```Go
func TestClientCopyHostOnRedirect(t *testing.T)
```

Issue 22233: copy host when Client follows a relative redirect. 

#### <a name="net-http_test-func-TestClientAltersCookiesOnRedirect">func TestClientAltersCookiesOnRedirect(t *testing.T)</a>

```Go
func TestClientAltersCookiesOnRedirect(t *testing.T)
```

Issue 17494: cookies should be altered when Client follows redirects. 

#### <a name="net-http_test-func-TestShouldCopyHeaderOnRedirect">func TestShouldCopyHeaderOnRedirect(t *testing.T)</a>

```Go
func TestShouldCopyHeaderOnRedirect(t *testing.T)
```

Part of Issue 4800 

#### <a name="net-http_test-func-TestClientRedirectTypes">func TestClientRedirectTypes(t *testing.T)</a>

```Go
func TestClientRedirectTypes(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportBodyReadError">func TestTransportBodyReadError(t *testing.T)</a>

```Go
func TestTransportBodyReadError(t *testing.T)
```

Issue 18239: make sure the Transport doesn't retry requests with bodies if Request.GetBody is not defined. 

#### <a name="net-http_test-func-TestClientCloseIdleConnections">func TestClientCloseIdleConnections(t *testing.T)</a>

```Go
func TestClientCloseIdleConnections(t *testing.T)
```

#### <a name="net-http_test-func-TestClientPropagatesTimeoutToContext">func TestClientPropagatesTimeoutToContext(t *testing.T)</a>

```Go
func TestClientPropagatesTimeoutToContext(t *testing.T)
```

#### <a name="net-http_test-func-TestClientDoCanceledVsTimeout_h1">func TestClientDoCanceledVsTimeout_h1(t *testing.T)</a>

```Go
func TestClientDoCanceledVsTimeout_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestClientDoCanceledVsTimeout_h2">func TestClientDoCanceledVsTimeout_h2(t *testing.T)</a>

```Go
func TestClientDoCanceledVsTimeout_h2(t *testing.T)
```

#### <a name="net-http_test-func-testClientDoCanceledVsTimeout">func testClientDoCanceledVsTimeout(t *testing.T, h2 bool)</a>

```Go
func testClientDoCanceledVsTimeout(t *testing.T, h2 bool)
```

Issue 33545: lock-in the behavior promised by Client.Do's docs about request cancelation vs timing out. 

#### <a name="net-http_test-func-TestClientPopulatesNilResponseBody">func TestClientPopulatesNilResponseBody(t *testing.T)</a>

```Go
func TestClientPopulatesNilResponseBody(t *testing.T)
```

#### <a name="net-http_test-func-TestClientCallsCloseOnlyOnce">func TestClientCallsCloseOnlyOnce(t *testing.T)</a>

```Go
func TestClientCallsCloseOnlyOnce(t *testing.T)
```

Issue 40382: Client calls Close multiple times on Request.Body. 

#### <a name="net-http_test-func-optWithServerLog">func optWithServerLog(lg *log.Logger) func(*httptest.Server)</a>

```Go
func optWithServerLog(lg *log.Logger) func(*httptest.Server)
```

#### <a name="net-http_test-func-TestNewClientServerTest">func TestNewClientServerTest(t *testing.T)</a>

```Go
func TestNewClientServerTest(t *testing.T)
```

Testing the newClientServerTest helper itself. 

#### <a name="net-http_test-func-TestChunkedResponseHeaders_h1">func TestChunkedResponseHeaders_h1(t *testing.T)</a>

```Go
func TestChunkedResponseHeaders_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestChunkedResponseHeaders_h2">func TestChunkedResponseHeaders_h2(t *testing.T)</a>

```Go
func TestChunkedResponseHeaders_h2(t *testing.T)
```

#### <a name="net-http_test-func-testChunkedResponseHeaders">func testChunkedResponseHeaders(t *testing.T, h2 bool)</a>

```Go
func testChunkedResponseHeaders(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-mostlyCopy">func mostlyCopy(r *Response) *Response</a>

```Go
func mostlyCopy(r *Response) *Response
```

#### <a name="net-http_test-func-TestH12_HeadContentLengthNoBody">func TestH12_HeadContentLengthNoBody(t *testing.T)</a>

```Go
func TestH12_HeadContentLengthNoBody(t *testing.T)
```

Issue 13532 

#### <a name="net-http_test-func-TestH12_HeadContentLengthSmallBody">func TestH12_HeadContentLengthSmallBody(t *testing.T)</a>

```Go
func TestH12_HeadContentLengthSmallBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_HeadContentLengthLargeBody">func TestH12_HeadContentLengthLargeBody(t *testing.T)</a>

```Go
func TestH12_HeadContentLengthLargeBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_200NoBody">func TestH12_200NoBody(t *testing.T)</a>

```Go
func TestH12_200NoBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH2_204NoBody">func TestH2_204NoBody(t *testing.T)</a>

```Go
func TestH2_204NoBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH2_304NoBody">func TestH2_304NoBody(t *testing.T)</a>

```Go
func TestH2_304NoBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH2_404NoBody">func TestH2_404NoBody(t *testing.T)</a>

```Go
func TestH2_404NoBody(t *testing.T)
```

#### <a name="net-http_test-func-testH12_noBody">func testH12_noBody(t *testing.T, status int)</a>

```Go
func testH12_noBody(t *testing.T, status int)
```

#### <a name="net-http_test-func-TestH12_SmallBody">func TestH12_SmallBody(t *testing.T)</a>

```Go
func TestH12_SmallBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_ExplicitContentLength">func TestH12_ExplicitContentLength(t *testing.T)</a>

```Go
func TestH12_ExplicitContentLength(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_FlushBeforeBody">func TestH12_FlushBeforeBody(t *testing.T)</a>

```Go
func TestH12_FlushBeforeBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_FlushMidBody">func TestH12_FlushMidBody(t *testing.T)</a>

```Go
func TestH12_FlushMidBody(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_Head_ExplicitLen">func TestH12_Head_ExplicitLen(t *testing.T)</a>

```Go
func TestH12_Head_ExplicitLen(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_Head_ImplicitLen">func TestH12_Head_ImplicitLen(t *testing.T)</a>

```Go
func TestH12_Head_ImplicitLen(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_HandlerWritesTooLittle">func TestH12_HandlerWritesTooLittle(t *testing.T)</a>

```Go
func TestH12_HandlerWritesTooLittle(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_HandlerWritesTooMuch">func TestH12_HandlerWritesTooMuch(t *testing.T)</a>

```Go
func TestH12_HandlerWritesTooMuch(t *testing.T)
```

Tests that the HTTP/1 and HTTP/2 servers prevent handlers from writing more than they declared. This test does not test whether the transport deals with too much data, though, since the server doesn't make it possible to send bogus data. For those tests, see transport_test.go (for HTTP/1) or x/net/http2/transport_test.go (for HTTP/2). 

#### <a name="net-http_test-func-TestH12_AutoGzip">func TestH12_AutoGzip(t *testing.T)</a>

```Go
func TestH12_AutoGzip(t *testing.T)
```

Verify that both our HTTP/1 and HTTP/2 request and auto-decompress gzip. Some hosts send gzip even if you don't ask for it; see golang.org/issue/13298 

#### <a name="net-http_test-func-TestH12_AutoGzip_Disabled">func TestH12_AutoGzip_Disabled(t *testing.T)</a>

```Go
func TestH12_AutoGzip_Disabled(t *testing.T)
```

#### <a name="net-http_test-func-Test304Responses_h1">func Test304Responses_h1(t *testing.T)</a>

```Go
func Test304Responses_h1(t *testing.T)
```

Test304Responses verifies that 304s don't declare that they're chunking in their response headers and aren't allowed to produce output. 

#### <a name="net-http_test-func-Test304Responses_h2">func Test304Responses_h2(t *testing.T)</a>

```Go
func Test304Responses_h2(t *testing.T)
```

#### <a name="net-http_test-func-test304Responses">func test304Responses(t *testing.T, h2 bool)</a>

```Go
func test304Responses(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestH12_ServerEmptyContentLength">func TestH12_ServerEmptyContentLength(t *testing.T)</a>

```Go
func TestH12_ServerEmptyContentLength(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_RequestContentLength_Known_NonZero">func TestH12_RequestContentLength_Known_NonZero(t *testing.T)</a>

```Go
func TestH12_RequestContentLength_Known_NonZero(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_RequestContentLength_Known_Zero">func TestH12_RequestContentLength_Known_Zero(t *testing.T)</a>

```Go
func TestH12_RequestContentLength_Known_Zero(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_RequestContentLength_Unknown">func TestH12_RequestContentLength_Unknown(t *testing.T)</a>

```Go
func TestH12_RequestContentLength_Unknown(t *testing.T)
```

#### <a name="net-http_test-func-h12requestContentLength">func h12requestContentLength(t *testing.T, bodyfn func() io.Reader, wantLen int64)</a>

```Go
func h12requestContentLength(t *testing.T, bodyfn func() io.Reader, wantLen int64)
```

#### <a name="net-http_test-func-TestCancelRequestMidBody_h1">func TestCancelRequestMidBody_h1(t *testing.T)</a>

```Go
func TestCancelRequestMidBody_h1(t *testing.T)
```

Tests that closing the Request.Cancel channel also while still reading the response body. Issue 13159. 

#### <a name="net-http_test-func-TestCancelRequestMidBody_h2">func TestCancelRequestMidBody_h2(t *testing.T)</a>

```Go
func TestCancelRequestMidBody_h2(t *testing.T)
```

#### <a name="net-http_test-func-testCancelRequestMidBody">func testCancelRequestMidBody(t *testing.T, h2 bool)</a>

```Go
func testCancelRequestMidBody(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTrailersClientToServer_h1">func TestTrailersClientToServer_h1(t *testing.T)</a>

```Go
func TestTrailersClientToServer_h1(t *testing.T)
```

Tests that clients can send trailers to a server and that the server can read them. 

#### <a name="net-http_test-func-TestTrailersClientToServer_h2">func TestTrailersClientToServer_h2(t *testing.T)</a>

```Go
func TestTrailersClientToServer_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTrailersClientToServer">func testTrailersClientToServer(t *testing.T, h2 bool)</a>

```Go
func testTrailersClientToServer(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTrailersServerToClient_h1">func TestTrailersServerToClient_h1(t *testing.T)</a>

```Go
func TestTrailersServerToClient_h1(t *testing.T)
```

Tests that servers send trailers to a client and that the client can read them. 

#### <a name="net-http_test-func-TestTrailersServerToClient_h2">func TestTrailersServerToClient_h2(t *testing.T)</a>

```Go
func TestTrailersServerToClient_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestTrailersServerToClient_Flush_h1">func TestTrailersServerToClient_Flush_h1(t *testing.T)</a>

```Go
func TestTrailersServerToClient_Flush_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTrailersServerToClient_Flush_h2">func TestTrailersServerToClient_Flush_h2(t *testing.T)</a>

```Go
func TestTrailersServerToClient_Flush_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTrailersServerToClient">func testTrailersServerToClient(t *testing.T, h2, flush bool)</a>

```Go
func testTrailersServerToClient(t *testing.T, h2, flush bool)
```

#### <a name="net-http_test-func-TestResponseBodyReadAfterClose_h1">func TestResponseBodyReadAfterClose_h1(t *testing.T)</a>

```Go
func TestResponseBodyReadAfterClose_h1(t *testing.T)
```

Don't allow a Body.Read after Body.Close. Issue 13648. 

#### <a name="net-http_test-func-TestResponseBodyReadAfterClose_h2">func TestResponseBodyReadAfterClose_h2(t *testing.T)</a>

```Go
func TestResponseBodyReadAfterClose_h2(t *testing.T)
```

#### <a name="net-http_test-func-testResponseBodyReadAfterClose">func testResponseBodyReadAfterClose(t *testing.T, h2 bool)</a>

```Go
func testResponseBodyReadAfterClose(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestConcurrentReadWriteReqBody_h1">func TestConcurrentReadWriteReqBody_h1(t *testing.T)</a>

```Go
func TestConcurrentReadWriteReqBody_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestConcurrentReadWriteReqBody_h2">func TestConcurrentReadWriteReqBody_h2(t *testing.T)</a>

```Go
func TestConcurrentReadWriteReqBody_h2(t *testing.T)
```

#### <a name="net-http_test-func-testConcurrentReadWriteReqBody">func testConcurrentReadWriteReqBody(t *testing.T, h2 bool)</a>

```Go
func testConcurrentReadWriteReqBody(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestConnectRequest_h1">func TestConnectRequest_h1(t *testing.T)</a>

```Go
func TestConnectRequest_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestConnectRequest_h2">func TestConnectRequest_h2(t *testing.T)</a>

```Go
func TestConnectRequest_h2(t *testing.T)
```

#### <a name="net-http_test-func-testConnectRequest">func testConnectRequest(t *testing.T, h2 bool)</a>

```Go
func testConnectRequest(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTransportUserAgent_h1">func TestTransportUserAgent_h1(t *testing.T)</a>

```Go
func TestTransportUserAgent_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportUserAgent_h2">func TestTransportUserAgent_h2(t *testing.T)</a>

```Go
func TestTransportUserAgent_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportUserAgent">func testTransportUserAgent(t *testing.T, h2 bool)</a>

```Go
func testTransportUserAgent(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestStarRequestFoo_h1">func TestStarRequestFoo_h1(t *testing.T)</a>

```Go
func TestStarRequestFoo_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestStarRequestFoo_h2">func TestStarRequestFoo_h2(t *testing.T)</a>

```Go
func TestStarRequestFoo_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestStarRequestOptions_h1">func TestStarRequestOptions_h1(t *testing.T)</a>

```Go
func TestStarRequestOptions_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestStarRequestOptions_h2">func TestStarRequestOptions_h2(t *testing.T)</a>

```Go
func TestStarRequestOptions_h2(t *testing.T)
```

#### <a name="net-http_test-func-testStarRequest">func testStarRequest(t *testing.T, method string, h2 bool)</a>

```Go
func testStarRequest(t *testing.T, method string, h2 bool)
```

#### <a name="net-http_test-func-TestTransportDiscardsUnneededConns">func TestTransportDiscardsUnneededConns(t *testing.T)</a>

```Go
func TestTransportDiscardsUnneededConns(t *testing.T)
```

Issue 13957 

#### <a name="net-http_test-func-TestTransportGCRequest_Body_h1">func TestTransportGCRequest_Body_h1(t *testing.T)</a>

```Go
func TestTransportGCRequest_Body_h1(t *testing.T)
```

tests that Transport doesn't retain a pointer to the provided request. 

#### <a name="net-http_test-func-TestTransportGCRequest_Body_h2">func TestTransportGCRequest_Body_h2(t *testing.T)</a>

```Go
func TestTransportGCRequest_Body_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportGCRequest_NoBody_h1">func TestTransportGCRequest_NoBody_h1(t *testing.T)</a>

```Go
func TestTransportGCRequest_NoBody_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportGCRequest_NoBody_h2">func TestTransportGCRequest_NoBody_h2(t *testing.T)</a>

```Go
func TestTransportGCRequest_NoBody_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportGCRequest">func testTransportGCRequest(t *testing.T, h2, body bool)</a>

```Go
func testTransportGCRequest(t *testing.T, h2, body bool)
```

#### <a name="net-http_test-func-TestTransportRejectsInvalidHeaders_h1">func TestTransportRejectsInvalidHeaders_h1(t *testing.T)</a>

```Go
func TestTransportRejectsInvalidHeaders_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRejectsInvalidHeaders_h2">func TestTransportRejectsInvalidHeaders_h2(t *testing.T)</a>

```Go
func TestTransportRejectsInvalidHeaders_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportRejectsInvalidHeaders">func testTransportRejectsInvalidHeaders(t *testing.T, h2 bool)</a>

```Go
func testTransportRejectsInvalidHeaders(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_h1">func TestInterruptWithPanic_h1(t *testing.T)</a>

```Go
func TestInterruptWithPanic_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_h2">func TestInterruptWithPanic_h2(t *testing.T)</a>

```Go
func TestInterruptWithPanic_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_nil_h1">func TestInterruptWithPanic_nil_h1(t *testing.T)</a>

```Go
func TestInterruptWithPanic_nil_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_nil_h2">func TestInterruptWithPanic_nil_h2(t *testing.T)</a>

```Go
func TestInterruptWithPanic_nil_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_ErrAbortHandler_h1">func TestInterruptWithPanic_ErrAbortHandler_h1(t *testing.T)</a>

```Go
func TestInterruptWithPanic_ErrAbortHandler_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestInterruptWithPanic_ErrAbortHandler_h2">func TestInterruptWithPanic_ErrAbortHandler_h2(t *testing.T)</a>

```Go
func TestInterruptWithPanic_ErrAbortHandler_h2(t *testing.T)
```

#### <a name="net-http_test-func-testInterruptWithPanic">func testInterruptWithPanic(t *testing.T, h2 bool, panicValue interface{})</a>

```Go
func testInterruptWithPanic(t *testing.T, h2 bool, panicValue interface{})
```

#### <a name="net-http_test-func-TestH12_AutoGzipWithDumpResponse">func TestH12_AutoGzipWithDumpResponse(t *testing.T)</a>

```Go
func TestH12_AutoGzipWithDumpResponse(t *testing.T)
```

Issue 15366 

#### <a name="net-http_test-func-TestCloseIdleConnections_h1">func TestCloseIdleConnections_h1(t *testing.T)</a>

```Go
func TestCloseIdleConnections_h1(t *testing.T)
```

Issue 14607 

#### <a name="net-http_test-func-TestCloseIdleConnections_h2">func TestCloseIdleConnections_h2(t *testing.T)</a>

```Go
func TestCloseIdleConnections_h2(t *testing.T)
```

#### <a name="net-http_test-func-testCloseIdleConnections">func testCloseIdleConnections(t *testing.T, h2 bool)</a>

```Go
func testCloseIdleConnections(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestNoSniffExpectRequestBody_h1">func TestNoSniffExpectRequestBody_h1(t *testing.T)</a>

```Go
func TestNoSniffExpectRequestBody_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestNoSniffExpectRequestBody_h2">func TestNoSniffExpectRequestBody_h2(t *testing.T)</a>

```Go
func TestNoSniffExpectRequestBody_h2(t *testing.T)
```

#### <a name="net-http_test-func-testNoSniffExpectRequestBody">func testNoSniffExpectRequestBody(t *testing.T, h2 bool)</a>

```Go
func testNoSniffExpectRequestBody(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerUndeclaredTrailers_h1">func TestServerUndeclaredTrailers_h1(t *testing.T)</a>

```Go
func TestServerUndeclaredTrailers_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerUndeclaredTrailers_h2">func TestServerUndeclaredTrailers_h2(t *testing.T)</a>

```Go
func TestServerUndeclaredTrailers_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerUndeclaredTrailers">func testServerUndeclaredTrailers(t *testing.T, h2 bool)</a>

```Go
func testServerUndeclaredTrailers(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestBadResponseAfterReadingBody">func TestBadResponseAfterReadingBody(t *testing.T)</a>

```Go
func TestBadResponseAfterReadingBody(t *testing.T)
```

#### <a name="net-http_test-func-TestWriteHeader0_h1">func TestWriteHeader0_h1(t *testing.T)</a>

```Go
func TestWriteHeader0_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestWriteHeader0_h2">func TestWriteHeader0_h2(t *testing.T)</a>

```Go
func TestWriteHeader0_h2(t *testing.T)
```

#### <a name="net-http_test-func-testWriteHeader0">func testWriteHeader0(t *testing.T, h2 bool)</a>

```Go
func testWriteHeader0(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestWriteHeaderNoCodeCheck_h1">func TestWriteHeaderNoCodeCheck_h1(t *testing.T)</a>

```Go
func TestWriteHeaderNoCodeCheck_h1(t *testing.T)
```

Issue 23010: don't be super strict checking WriteHeader's code if it's not even valid to call WriteHeader then anyway. 

#### <a name="net-http_test-func-TestWriteHeaderNoCodeCheck_h1hijack">func TestWriteHeaderNoCodeCheck_h1hijack(t *testing.T)</a>

```Go
func TestWriteHeaderNoCodeCheck_h1hijack(t *testing.T)
```

#### <a name="net-http_test-func-TestWriteHeaderNoCodeCheck_h2">func TestWriteHeaderNoCodeCheck_h2(t *testing.T)</a>

```Go
func TestWriteHeaderNoCodeCheck_h2(t *testing.T)
```

#### <a name="net-http_test-func-testWriteHeaderAfterWrite">func testWriteHeaderAfterWrite(t *testing.T, h2, hijack bool)</a>

```Go
func testWriteHeaderAfterWrite(t *testing.T, h2, hijack bool)
```

#### <a name="net-http_test-func-TestBidiStreamReverseProxy">func TestBidiStreamReverseProxy(t *testing.T)</a>

```Go
func TestBidiStreamReverseProxy(t *testing.T)
```

#### <a name="net-http_test-func-TestH12_WebSocketUpgrade">func TestH12_WebSocketUpgrade(t *testing.T)</a>

```Go
func TestH12_WebSocketUpgrade(t *testing.T)
```

Always use HTTP/1.1 for WebSocket upgrades. 

#### <a name="net-http_test-func-containsDotFile">func containsDotFile(name string) bool</a>

```Go
func containsDotFile(name string) bool
```

containsDotFile reports whether name contains a path element starting with a period. The name is assumed to be a delimited by forward slashes, as guaranteed by the http.FileSystem interface. 

#### <a name="net-http_test-func-ExampleFileServer_dotFileHiding">func ExampleFileServer_dotFileHiding()</a>

```Go
func ExampleFileServer_dotFileHiding()
```

#### <a name="net-http_test-func-ExampleHandle">func ExampleHandle()</a>

```Go
func ExampleHandle()
```

#### <a name="net-http_test-func-ExampleHijacker">func ExampleHijacker()</a>

```Go
func ExampleHijacker()
```

#### <a name="net-http_test-func-ExampleGet">func ExampleGet()</a>

```Go
func ExampleGet()
```

#### <a name="net-http_test-func-ExampleFileServer">func ExampleFileServer()</a>

```Go
func ExampleFileServer()
```

#### <a name="net-http_test-func-ExampleFileServer_stripPrefix">func ExampleFileServer_stripPrefix()</a>

```Go
func ExampleFileServer_stripPrefix()
```

#### <a name="net-http_test-func-ExampleStripPrefix">func ExampleStripPrefix()</a>

```Go
func ExampleStripPrefix()
```

#### <a name="net-http_test-func-ExampleServeMux_Handle">func ExampleServeMux_Handle()</a>

```Go
func ExampleServeMux_Handle()
```

#### <a name="net-http_test-func-ExampleResponseWriter_trailers">func ExampleResponseWriter_trailers()</a>

```Go
func ExampleResponseWriter_trailers()
```

HTTP Trailers are a set of key/value pairs like headers that come after the HTTP response, instead of before. 

#### <a name="net-http_test-func-ExampleServer_Shutdown">func ExampleServer_Shutdown()</a>

```Go
func ExampleServer_Shutdown()
```

#### <a name="net-http_test-func-ExampleListenAndServeTLS">func ExampleListenAndServeTLS()</a>

```Go
func ExampleListenAndServeTLS()
```

#### <a name="net-http_test-func-ExampleListenAndServe">func ExampleListenAndServe()</a>

```Go
func ExampleListenAndServe()
```

#### <a name="net-http_test-func-ExampleHandleFunc">func ExampleHandleFunc()</a>

```Go
func ExampleHandleFunc()
```

#### <a name="net-http_test-func-newPeopleHandler">func newPeopleHandler() http.Handler</a>

```Go
func newPeopleHandler() http.Handler
```

#### <a name="net-http_test-func-ExampleNotFoundHandler">func ExampleNotFoundHandler()</a>

```Go
func ExampleNotFoundHandler()
```

#### <a name="net-http_test-func-TestServeFile">func TestServeFile(t *testing.T)</a>

```Go
func TestServeFile(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFile_DotDot">func TestServeFile_DotDot(t *testing.T)</a>

```Go
func TestServeFile_DotDot(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFileDirPanicEmptyPath">func TestServeFileDirPanicEmptyPath(t *testing.T)</a>

```Go
func TestServeFileDirPanicEmptyPath(t *testing.T)
```

Tests that this doesn't panic. (Issue 30165) 

#### <a name="net-http_test-func-TestFSRedirect">func TestFSRedirect(t *testing.T)</a>

```Go
func TestFSRedirect(t *testing.T)
```

#### <a name="net-http_test-func-TestFileServerCleans">func TestFileServerCleans(t *testing.T)</a>

```Go
func TestFileServerCleans(t *testing.T)
```

#### <a name="net-http_test-func-TestFileServerEscapesNames">func TestFileServerEscapesNames(t *testing.T)</a>

```Go
func TestFileServerEscapesNames(t *testing.T)
```

#### <a name="net-http_test-func-TestFileServerSortsNames">func TestFileServerSortsNames(t *testing.T)</a>

```Go
func TestFileServerSortsNames(t *testing.T)
```

#### <a name="net-http_test-func-mustRemoveAll">func mustRemoveAll(dir string)</a>

```Go
func mustRemoveAll(dir string)
```

#### <a name="net-http_test-func-TestFileServerImplicitLeadingSlash">func TestFileServerImplicitLeadingSlash(t *testing.T)</a>

```Go
func TestFileServerImplicitLeadingSlash(t *testing.T)
```

#### <a name="net-http_test-func-TestDirJoin">func TestDirJoin(t *testing.T)</a>

```Go
func TestDirJoin(t *testing.T)
```

#### <a name="net-http_test-func-TestEmptyDirOpenCWD">func TestEmptyDirOpenCWD(t *testing.T)</a>

```Go
func TestEmptyDirOpenCWD(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFileContentType">func TestServeFileContentType(t *testing.T)</a>

```Go
func TestServeFileContentType(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFileMimeType">func TestServeFileMimeType(t *testing.T)</a>

```Go
func TestServeFileMimeType(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFileFromCWD">func TestServeFileFromCWD(t *testing.T)</a>

```Go
func TestServeFileFromCWD(t *testing.T)
```

#### <a name="net-http_test-func-TestServeDirWithoutTrailingSlash">func TestServeDirWithoutTrailingSlash(t *testing.T)</a>

```Go
func TestServeDirWithoutTrailingSlash(t *testing.T)
```

Issue 13996 

#### <a name="net-http_test-func-TestServeFileWithContentEncoding_h1">func TestServeFileWithContentEncoding_h1(t *testing.T)</a>

```Go
func TestServeFileWithContentEncoding_h1(t *testing.T)
```

Tests that ServeFile doesn't add a Content-Length if a Content-Encoding is specified. 

#### <a name="net-http_test-func-TestServeFileWithContentEncoding_h2">func TestServeFileWithContentEncoding_h2(t *testing.T)</a>

```Go
func TestServeFileWithContentEncoding_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServeFileWithContentEncoding">func testServeFileWithContentEncoding(t *testing.T, h2 bool)</a>

```Go
func testServeFileWithContentEncoding(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServeIndexHtml">func TestServeIndexHtml(t *testing.T)</a>

```Go
func TestServeIndexHtml(t *testing.T)
```

#### <a name="net-http_test-func-TestServeIndexHtmlFS">func TestServeIndexHtmlFS(t *testing.T)</a>

```Go
func TestServeIndexHtmlFS(t *testing.T)
```

#### <a name="net-http_test-func-TestFileServerZeroByte">func TestFileServerZeroByte(t *testing.T)</a>

```Go
func TestFileServerZeroByte(t *testing.T)
```

#### <a name="net-http_test-func-TestDirectoryIfNotModified">func TestDirectoryIfNotModified(t *testing.T)</a>

```Go
func TestDirectoryIfNotModified(t *testing.T)
```

#### <a name="net-http_test-func-mustStat">func mustStat(t *testing.T, fileName string) fs.FileInfo</a>

```Go
func mustStat(t *testing.T, fileName string) fs.FileInfo
```

#### <a name="net-http_test-func-TestServeContent">func TestServeContent(t *testing.T)</a>

```Go
func TestServeContent(t *testing.T)
```

#### <a name="net-http_test-func-TestServerFileStatError">func TestServerFileStatError(t *testing.T)</a>

```Go
func TestServerFileStatError(t *testing.T)
```

Issue 12991 

#### <a name="net-http_test-func-TestServeContentErrorMessages">func TestServeContentErrorMessages(t *testing.T)</a>

```Go
func TestServeContentErrorMessages(t *testing.T)
```

#### <a name="net-http_test-func-TestLinuxSendfile">func TestLinuxSendfile(t *testing.T)</a>

```Go
func TestLinuxSendfile(t *testing.T)
```

verifies that sendfile is being used on Linux 

#### <a name="net-http_test-func-getBody">func getBody(t *testing.T, testName string, req Request, client *Client) (*Response, []byte)</a>

```Go
func getBody(t *testing.T, testName string, req Request, client *Client) (*Response, []byte)
```

#### <a name="net-http_test-func-TestLinuxSendfileChild">func TestLinuxSendfileChild(*testing.T)</a>

```Go
func TestLinuxSendfileChild(*testing.T)
```

TestLinuxSendfileChild isn't a real test. It's used as a helper process for TestLinuxSendfile. 

#### <a name="net-http_test-func-TestFileServerNotDirError">func TestFileServerNotDirError(t *testing.T)</a>

```Go
func TestFileServerNotDirError(t *testing.T)
```

Issue 18984: tests that requests for paths beyond files return not-found errors 

#### <a name="net-http_test-func-TestFileServerCleanPath">func TestFileServerCleanPath(t *testing.T)</a>

```Go
func TestFileServerCleanPath(t *testing.T)
```

#### <a name="net-http_test-func-Test_scanETag">func Test_scanETag(t *testing.T)</a>

```Go
func Test_scanETag(t *testing.T)
```

#### <a name="net-http_test-func-TestServeFileRejectsInvalidSuffixLengths_h1">func TestServeFileRejectsInvalidSuffixLengths_h1(t *testing.T)</a>

```Go
func TestServeFileRejectsInvalidSuffixLengths_h1(t *testing.T)
```

Issue 40940: Ensure that we only accept non-negative suffix-lengths in "Range": "bytes=-N", and should reject "bytes=--2". 

#### <a name="net-http_test-func-TestServeFileRejectsInvalidSuffixLengths_h2">func TestServeFileRejectsInvalidSuffixLengths_h2(t *testing.T)</a>

```Go
func TestServeFileRejectsInvalidSuffixLengths_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServeFileRejectsInvalidSuffixLengths">func testServeFileRejectsInvalidSuffixLengths(t *testing.T, h2 bool)</a>

```Go
func testServeFileRejectsInvalidSuffixLengths(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestMain">func TestMain(m *testing.M)</a>

```Go
func TestMain(m *testing.M)
```

#### <a name="net-http_test-func-interestingGoroutines">func interestingGoroutines() (gs []string)</a>

```Go
func interestingGoroutines() (gs []string)
```

#### <a name="net-http_test-func-goroutineLeaked">func goroutineLeaked() bool</a>

```Go
func goroutineLeaked() bool
```

Verify the other tests didn't leave any goroutines running. 

#### <a name="net-http_test-func-setParallel">func setParallel(t *testing.T)</a>

```Go
func setParallel(t *testing.T)
```

setParallel marks t as a parallel test if we're in short mode (all.bash), but as a serial test otherwise. Using t.Parallel isn't compatible with the afterTest func in non-short mode. 

#### <a name="net-http_test-func-runningBenchmarks">func runningBenchmarks() bool</a>

```Go
func runningBenchmarks() bool
```

#### <a name="net-http_test-func-afterTest">func afterTest(t testing.TB)</a>

```Go
func afterTest(t testing.TB)
```

#### <a name="net-http_test-func-waitCondition">func waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool</a>

```Go
func waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool
```

waitCondition reports whether fn eventually returned true, checking immediately and then every checkEvery amount, until waitFor has elapsed, at which point it returns false. 

#### <a name="net-http_test-func-waitErrCondition">func waitErrCondition(waitFor, checkEvery time.Duration, fn func() error) error</a>

```Go
func waitErrCondition(waitFor, checkEvery time.Duration, fn func() error) error
```

waitErrCondition is like waitCondition but with errors instead of bools. 

#### <a name="net-http_test-func-TestQuery">func TestQuery(t *testing.T)</a>

```Go
func TestQuery(t *testing.T)
```

#### <a name="net-http_test-func-TestParseFormQuery">func TestParseFormQuery(t *testing.T)</a>

```Go
func TestParseFormQuery(t *testing.T)
```

#### <a name="net-http_test-func-TestParseFormQueryMethods">func TestParseFormQueryMethods(t *testing.T)</a>

```Go
func TestParseFormQueryMethods(t *testing.T)
```

Tests that we only parse the form automatically for certain methods. 

#### <a name="net-http_test-func-TestParseFormUnknownContentType">func TestParseFormUnknownContentType(t *testing.T)</a>

```Go
func TestParseFormUnknownContentType(t *testing.T)
```

#### <a name="net-http_test-func-TestParseFormInitializeOnError">func TestParseFormInitializeOnError(t *testing.T)</a>

```Go
func TestParseFormInitializeOnError(t *testing.T)
```

#### <a name="net-http_test-func-TestMultipartReader">func TestMultipartReader(t *testing.T)</a>

```Go
func TestMultipartReader(t *testing.T)
```

#### <a name="net-http_test-func-TestParseMultipartFormPopulatesPostForm">func TestParseMultipartFormPopulatesPostForm(t *testing.T)</a>

```Go
func TestParseMultipartFormPopulatesPostForm(t *testing.T)
```

Issue 9305: ParseMultipartForm should populate PostForm too 

#### <a name="net-http_test-func-TestParseMultipartForm">func TestParseMultipartForm(t *testing.T)</a>

```Go
func TestParseMultipartForm(t *testing.T)
```

#### <a name="net-http_test-func-TestMaxInt64ForMultipartFormMaxMemoryOverflow">func TestMaxInt64ForMultipartFormMaxMemoryOverflow(t *testing.T)</a>

```Go
func TestMaxInt64ForMultipartFormMaxMemoryOverflow(t *testing.T)
```

Issue #40430: Test that if maxMemory for ParseMultipartForm when combined with the payload size and the internal leeway buffer size of 10MiB overflows, that we correctly return an error. 

#### <a name="net-http_test-func-TestRedirect_h1">func TestRedirect_h1(t *testing.T)</a>

```Go
func TestRedirect_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestRedirect_h2">func TestRedirect_h2(t *testing.T)</a>

```Go
func TestRedirect_h2(t *testing.T)
```

#### <a name="net-http_test-func-testRedirect">func testRedirect(t *testing.T, h2 bool)</a>

```Go
func testRedirect(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestSetBasicAuth">func TestSetBasicAuth(t *testing.T)</a>

```Go
func TestSetBasicAuth(t *testing.T)
```

#### <a name="net-http_test-func-TestMultipartRequest">func TestMultipartRequest(t *testing.T)</a>

```Go
func TestMultipartRequest(t *testing.T)
```

#### <a name="net-http_test-func-TestMultipartRequestAuto">func TestMultipartRequestAuto(t *testing.T)</a>

```Go
func TestMultipartRequestAuto(t *testing.T)
```

#### <a name="net-http_test-func-TestMissingFileMultipartRequest">func TestMissingFileMultipartRequest(t *testing.T)</a>

```Go
func TestMissingFileMultipartRequest(t *testing.T)
```

#### <a name="net-http_test-func-TestFormValueCallsParseMultipartForm">func TestFormValueCallsParseMultipartForm(t *testing.T)</a>

```Go
func TestFormValueCallsParseMultipartForm(t *testing.T)
```

Test that FormValue invokes ParseMultipartForm. 

#### <a name="net-http_test-func-TestFormFileCallsParseMultipartForm">func TestFormFileCallsParseMultipartForm(t *testing.T)</a>

```Go
func TestFormFileCallsParseMultipartForm(t *testing.T)
```

Test that FormFile invokes ParseMultipartForm. 

#### <a name="net-http_test-func-TestParseMultipartFormOrder">func TestParseMultipartFormOrder(t *testing.T)</a>

```Go
func TestParseMultipartFormOrder(t *testing.T)
```

Test that ParseMultipartForm errors if called after MultipartReader on the same request. 

#### <a name="net-http_test-func-TestMultipartReaderOrder">func TestMultipartReaderOrder(t *testing.T)</a>

```Go
func TestMultipartReaderOrder(t *testing.T)
```

Test that MultipartReader errors if called after ParseMultipartForm on the same request. 

#### <a name="net-http_test-func-TestFormFileOrder">func TestFormFileOrder(t *testing.T)</a>

```Go
func TestFormFileOrder(t *testing.T)
```

Test that FormFile errors if called after MultipartReader on the same request. 

#### <a name="net-http_test-func-TestReadRequestErrors">func TestReadRequestErrors(t *testing.T)</a>

```Go
func TestReadRequestErrors(t *testing.T)
```

#### <a name="net-http_test-func-TestNewRequestHost">func TestNewRequestHost(t *testing.T)</a>

```Go
func TestNewRequestHost(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestInvalidMethod">func TestRequestInvalidMethod(t *testing.T)</a>

```Go
func TestRequestInvalidMethod(t *testing.T)
```

#### <a name="net-http_test-func-TestNewRequestContentLength">func TestNewRequestContentLength(t *testing.T)</a>

```Go
func TestNewRequestContentLength(t *testing.T)
```

#### <a name="net-http_test-func-TestParseHTTPVersion">func TestParseHTTPVersion(t *testing.T)</a>

```Go
func TestParseHTTPVersion(t *testing.T)
```

#### <a name="net-http_test-func-TestGetBasicAuth">func TestGetBasicAuth(t *testing.T)</a>

```Go
func TestGetBasicAuth(t *testing.T)
```

#### <a name="net-http_test-func-TestParseBasicAuth">func TestParseBasicAuth(t *testing.T)</a>

```Go
func TestParseBasicAuth(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestWriteBufferedWriter">func TestRequestWriteBufferedWriter(t *testing.T)</a>

```Go
func TestRequestWriteBufferedWriter(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestBadHost">func TestRequestBadHost(t *testing.T)</a>

```Go
func TestRequestBadHost(t *testing.T)
```

#### <a name="net-http_test-func-TestStarRequest">func TestStarRequest(t *testing.T)</a>

```Go
func TestStarRequest(t *testing.T)
```

#### <a name="net-http_test-func-TestIssue10884_MaxBytesEOF">func TestIssue10884_MaxBytesEOF(t *testing.T)</a>

```Go
func TestIssue10884_MaxBytesEOF(t *testing.T)
```

#### <a name="net-http_test-func-TestMaxBytesReaderStickyError">func TestMaxBytesReaderStickyError(t *testing.T)</a>

```Go
func TestMaxBytesReaderStickyError(t *testing.T)
```

Issue 14981: MaxBytesReader's return error wasn't sticky. It doesn't technically need to be, but people expected it to be. 

#### <a name="net-http_test-func-TestWithContextDeepCopiesURL">func TestWithContextDeepCopiesURL(t *testing.T)</a>

```Go
func TestWithContextDeepCopiesURL(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestCloneTransferEncoding">func TestRequestCloneTransferEncoding(t *testing.T)</a>

```Go
func TestRequestCloneTransferEncoding(t *testing.T)
```

Ensure that Request.Clone creates a deep copy of TransferEncoding. See issue 41907. 

#### <a name="net-http_test-func-TestNoPanicOnRoundTripWithBasicAuth_h1">func TestNoPanicOnRoundTripWithBasicAuth_h1(t *testing.T)</a>

```Go
func TestNoPanicOnRoundTripWithBasicAuth_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestNoPanicOnRoundTripWithBasicAuth_h2">func TestNoPanicOnRoundTripWithBasicAuth_h2(t *testing.T)</a>

```Go
func TestNoPanicOnRoundTripWithBasicAuth_h2(t *testing.T)
```

#### <a name="net-http_test-func-testNoPanicWithBasicAuth">func testNoPanicWithBasicAuth(t *testing.T, h2 bool)</a>

```Go
func testNoPanicWithBasicAuth(t *testing.T, h2 bool)
```

Issue 34878: verify we don't panic when including basic auth (Go 1.13 regression) 

#### <a name="net-http_test-func-TestNewRequestGetBody">func TestNewRequestGetBody(t *testing.T)</a>

```Go
func TestNewRequestGetBody(t *testing.T)
```

verify that NewRequest sets Request.GetBody and that it works 

#### <a name="net-http_test-func-testMissingFile">func testMissingFile(t *testing.T, req *Request)</a>

```Go
func testMissingFile(t *testing.T, req *Request)
```

#### <a name="net-http_test-func-newTestMultipartRequest">func newTestMultipartRequest(t *testing.T) *Request</a>

```Go
func newTestMultipartRequest(t *testing.T) *Request
```

#### <a name="net-http_test-func-validateTestMultipartContents">func validateTestMultipartContents(t *testing.T, req *Request, allMem bool)</a>

```Go
func validateTestMultipartContents(t *testing.T, req *Request, allMem bool)
```

#### <a name="net-http_test-func-testMultipartFile">func testMultipartFile(t *testing.T, req *Request, key, expectFilename, expectContent string) multipart.File</a>

```Go
func testMultipartFile(t *testing.T, req *Request, key, expectFilename, expectContent string) multipart.File
```

#### <a name="net-http_test-func-benchmarkReadRequest">func benchmarkReadRequest(b *testing.B, request string)</a>

```Go
func benchmarkReadRequest(b *testing.B, request string)
```

#### <a name="net-http_test-func-BenchmarkReadRequestChrome">func BenchmarkReadRequestChrome(b *testing.B)</a>

```Go
func BenchmarkReadRequestChrome(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkReadRequestCurl">func BenchmarkReadRequestCurl(b *testing.B)</a>

```Go
func BenchmarkReadRequestCurl(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkReadRequestApachebench">func BenchmarkReadRequestApachebench(b *testing.B)</a>

```Go
func BenchmarkReadRequestApachebench(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkReadRequestSiege">func BenchmarkReadRequestSiege(b *testing.B)</a>

```Go
func BenchmarkReadRequestSiege(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkReadRequestWrk">func BenchmarkReadRequestWrk(b *testing.B)</a>

```Go
func BenchmarkReadRequestWrk(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkFileAndServer_1KB">func BenchmarkFileAndServer_1KB(b *testing.B)</a>

```Go
func BenchmarkFileAndServer_1KB(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkFileAndServer_16MB">func BenchmarkFileAndServer_16MB(b *testing.B)</a>

```Go
func BenchmarkFileAndServer_16MB(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkFileAndServer_64MB">func BenchmarkFileAndServer_64MB(b *testing.B)</a>

```Go
func BenchmarkFileAndServer_64MB(b *testing.B)
```

#### <a name="net-http_test-func-benchmarkFileAndServer">func benchmarkFileAndServer(b *testing.B, n int64)</a>

```Go
func benchmarkFileAndServer(b *testing.B, n int64)
```

#### <a name="net-http_test-func-runFileAndServerBenchmarks">func runFileAndServerBenchmarks(b *testing.B, tlsOption bool, f *os.File, n int64)</a>

```Go
func runFileAndServerBenchmarks(b *testing.B, tlsOption bool, f *os.File, n int64)
```

#### <a name="net-http_test-func-reqBytes">func reqBytes(req string) []byte</a>

```Go
func reqBytes(req string) []byte
```

reqBytes treats req as a request (with \n delimiters) and returns it with \r\n delimiters, ending in \r\n\r\n 

#### <a name="net-http_test-func-TestConsumingBodyOnNextConn">func TestConsumingBodyOnNextConn(t *testing.T)</a>

```Go
func TestConsumingBodyOnNextConn(t *testing.T)
```

#### <a name="net-http_test-func-TestHostHandlers">func TestHostHandlers(t *testing.T)</a>

```Go
func TestHostHandlers(t *testing.T)
```

#### <a name="net-http_test-func-serve">func serve(code int) HandlerFunc</a>

```Go
func serve(code int) HandlerFunc
```

serve returns a handler that sends a response with the given code. 

#### <a name="net-http_test-func-checkQueryStringHandler">func checkQueryStringHandler(w ResponseWriter, r *Request)</a>

```Go
func checkQueryStringHandler(w ResponseWriter, r *Request)
```

checkQueryStringHandler checks if r.URL.RawQuery has the same value as the URL excluding the scheme and the query string and sends 200 response code if it is, 500 otherwise. 

#### <a name="net-http_test-func-TestServeMuxHandler">func TestServeMuxHandler(t *testing.T)</a>

```Go
func TestServeMuxHandler(t *testing.T)
```

#### <a name="net-http_test-func-TestServeMuxHandleFuncWithNilHandler">func TestServeMuxHandleFuncWithNilHandler(t *testing.T)</a>

```Go
func TestServeMuxHandleFuncWithNilHandler(t *testing.T)
```

Issue 24297 

#### <a name="net-http_test-func-TestServeMuxHandlerRedirects">func TestServeMuxHandlerRedirects(t *testing.T)</a>

```Go
func TestServeMuxHandlerRedirects(t *testing.T)
```

TestServeMuxHandlerRedirects tests that automatic redirects generated by mux.Handler() shouldn't clear the request's query string. 

#### <a name="net-http_test-func-TestMuxRedirectLeadingSlashes">func TestMuxRedirectLeadingSlashes(t *testing.T)</a>

```Go
func TestMuxRedirectLeadingSlashes(t *testing.T)
```

Tests for [https://golang.org/issue/900](https://golang.org/issue/900) 

#### <a name="net-http_test-func-TestServeWithSlashRedirectKeepsQueryString">func TestServeWithSlashRedirectKeepsQueryString(t *testing.T)</a>

```Go
func TestServeWithSlashRedirectKeepsQueryString(t *testing.T)
```

Test that the special cased "/route" redirect implicitly created by a registered "/route/" properly sets the query string in the redirect URL. See Issue 17841. 

#### <a name="net-http_test-func-TestServeWithSlashRedirectForHostPatterns">func TestServeWithSlashRedirectForHostPatterns(t *testing.T)</a>

```Go
func TestServeWithSlashRedirectForHostPatterns(t *testing.T)
```

#### <a name="net-http_test-func-TestShouldRedirectConcurrency">func TestShouldRedirectConcurrency(t *testing.T)</a>

```Go
func TestShouldRedirectConcurrency(t *testing.T)
```

#### <a name="net-http_test-func-BenchmarkServeMux">func BenchmarkServeMux(b *testing.B)</a>

```Go
func BenchmarkServeMux(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkServeMux_SkipServe">func BenchmarkServeMux_SkipServe(b *testing.B)</a>

```Go
func BenchmarkServeMux_SkipServe(b *testing.B)
```

#### <a name="net-http_test-func-benchmarkServeMux">func benchmarkServeMux(b *testing.B, runHandler bool)</a>

```Go
func benchmarkServeMux(b *testing.B, runHandler bool)
```

#### <a name="net-http_test-func-TestServerTimeouts">func TestServerTimeouts(t *testing.T)</a>

```Go
func TestServerTimeouts(t *testing.T)
```

#### <a name="net-http_test-func-testServerTimeouts">func testServerTimeouts(timeout time.Duration) error</a>

```Go
func testServerTimeouts(timeout time.Duration) error
```

#### <a name="net-http_test-func-TestHTTP2WriteDeadlineExtendedOnNewRequest">func TestHTTP2WriteDeadlineExtendedOnNewRequest(t *testing.T)</a>

```Go
func TestHTTP2WriteDeadlineExtendedOnNewRequest(t *testing.T)
```

Test that the HTTP/2 server handles Server.WriteTimeout (Issue 18437) 

#### <a name="net-http_test-func-tryTimeouts">func tryTimeouts(t *testing.T, testFunc func(timeout time.Duration) error)</a>

```Go
func tryTimeouts(t *testing.T, testFunc func(timeout time.Duration) error)
```

tryTimeouts runs testFunc with increasing timeouts. Test passes on first success, and fails if all timeouts fail. 

#### <a name="net-http_test-func-TestHTTP2WriteDeadlineEnforcedPerStream">func TestHTTP2WriteDeadlineEnforcedPerStream(t *testing.T)</a>

```Go
func TestHTTP2WriteDeadlineEnforcedPerStream(t *testing.T)
```

Test that the HTTP/2 server RSTs stream on slow write. 

#### <a name="net-http_test-func-testHTTP2WriteDeadlineEnforcedPerStream">func testHTTP2WriteDeadlineEnforcedPerStream(timeout time.Duration) error</a>

```Go
func testHTTP2WriteDeadlineEnforcedPerStream(timeout time.Duration) error
```

#### <a name="net-http_test-func-TestHTTP2NoWriteDeadline">func TestHTTP2NoWriteDeadline(t *testing.T)</a>

```Go
func TestHTTP2NoWriteDeadline(t *testing.T)
```

Test that the HTTP/2 server does not send RST when WriteDeadline not set. 

#### <a name="net-http_test-func-testHTTP2NoWriteDeadline">func testHTTP2NoWriteDeadline(timeout time.Duration) error</a>

```Go
func testHTTP2NoWriteDeadline(timeout time.Duration) error
```

#### <a name="net-http_test-func-TestOnlyWriteTimeout">func TestOnlyWriteTimeout(t *testing.T)</a>

```Go
func TestOnlyWriteTimeout(t *testing.T)
```

golang.org/issue/4741 -- setting only a write timeout that triggers shouldn't cause a handler to block forever on reads (next HTTP request) that will never happen. 

#### <a name="net-http_test-func-TestIdentityResponse">func TestIdentityResponse(t *testing.T)</a>

```Go
func TestIdentityResponse(t *testing.T)
```

TestIdentityResponse verifies that a handler can unset 

#### <a name="net-http_test-func-testTCPConnectionCloses">func testTCPConnectionCloses(t *testing.T, req string, h Handler)</a>

```Go
func testTCPConnectionCloses(t *testing.T, req string, h Handler)
```

#### <a name="net-http_test-func-testTCPConnectionStaysOpen">func testTCPConnectionStaysOpen(t *testing.T, req string, handler Handler)</a>

```Go
func testTCPConnectionStaysOpen(t *testing.T, req string, handler Handler)
```

#### <a name="net-http_test-func-TestServeHTTP10Close">func TestServeHTTP10Close(t *testing.T)</a>

```Go
func TestServeHTTP10Close(t *testing.T)
```

TestServeHTTP10Close verifies that HTTP/1.0 requests won't be kept alive. 

#### <a name="net-http_test-func-TestClientCanClose">func TestClientCanClose(t *testing.T)</a>

```Go
func TestClientCanClose(t *testing.T)
```

TestClientCanClose verifies that clients can also force a connection to close. 

#### <a name="net-http_test-func-TestHandlersCanSetConnectionClose11">func TestHandlersCanSetConnectionClose11(t *testing.T)</a>

```Go
func TestHandlersCanSetConnectionClose11(t *testing.T)
```

TestHandlersCanSetConnectionClose verifies that handlers can force a connection to close, even for HTTP/1.1 requests. 

#### <a name="net-http_test-func-TestHandlersCanSetConnectionClose10">func TestHandlersCanSetConnectionClose10(t *testing.T)</a>

```Go
func TestHandlersCanSetConnectionClose10(t *testing.T)
```

#### <a name="net-http_test-func-TestHTTP2UpgradeClosesConnection">func TestHTTP2UpgradeClosesConnection(t *testing.T)</a>

```Go
func TestHTTP2UpgradeClosesConnection(t *testing.T)
```

#### <a name="net-http_test-func-send204">func send204(w ResponseWriter, r *Request)</a>

```Go
func send204(w ResponseWriter, r *Request)
```

#### <a name="net-http_test-func-send304">func send304(w ResponseWriter, r *Request)</a>

```Go
func send304(w ResponseWriter, r *Request)
```

#### <a name="net-http_test-func-TestHTTP10KeepAlive204Response">func TestHTTP10KeepAlive204Response(t *testing.T)</a>

```Go
func TestHTTP10KeepAlive204Response(t *testing.T)
```

Issue 15647: 204 responses can't have bodies, so HTTP/1.0 keep-alive conns should stay open. 

#### <a name="net-http_test-func-TestHTTP11KeepAlive204Response">func TestHTTP11KeepAlive204Response(t *testing.T)</a>

```Go
func TestHTTP11KeepAlive204Response(t *testing.T)
```

#### <a name="net-http_test-func-TestHTTP10KeepAlive304Response">func TestHTTP10KeepAlive304Response(t *testing.T)</a>

```Go
func TestHTTP10KeepAlive304Response(t *testing.T)
```

#### <a name="net-http_test-func-TestKeepAliveFinalChunkWithEOF">func TestKeepAliveFinalChunkWithEOF(t *testing.T)</a>

```Go
func TestKeepAliveFinalChunkWithEOF(t *testing.T)
```

Issue 15703 

#### <a name="net-http_test-func-TestSetsRemoteAddr_h1">func TestSetsRemoteAddr_h1(t *testing.T)</a>

```Go
func TestSetsRemoteAddr_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestSetsRemoteAddr_h2">func TestSetsRemoteAddr_h2(t *testing.T)</a>

```Go
func TestSetsRemoteAddr_h2(t *testing.T)
```

#### <a name="net-http_test-func-testSetsRemoteAddr">func testSetsRemoteAddr(t *testing.T, h2 bool)</a>

```Go
func testSetsRemoteAddr(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerAllowsBlockingRemoteAddr">func TestServerAllowsBlockingRemoteAddr(t *testing.T)</a>

```Go
func TestServerAllowsBlockingRemoteAddr(t *testing.T)
```

Issue 12943 

#### <a name="net-http_test-func-TestHeadResponses_h1">func TestHeadResponses_h1(t *testing.T)</a>

```Go
func TestHeadResponses_h1(t *testing.T)
```

TestHeadResponses verifies that all MIME type sniffing and Content-Length counting of GET requests also happens on HEAD requests. 

#### <a name="net-http_test-func-TestHeadResponses_h2">func TestHeadResponses_h2(t *testing.T)</a>

```Go
func TestHeadResponses_h2(t *testing.T)
```

#### <a name="net-http_test-func-testHeadResponses">func testHeadResponses(t *testing.T, h2 bool)</a>

```Go
func testHeadResponses(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTLSHandshakeTimeout">func TestTLSHandshakeTimeout(t *testing.T)</a>

```Go
func TestTLSHandshakeTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestTLSServer">func TestTLSServer(t *testing.T)</a>

```Go
func TestTLSServer(t *testing.T)
```

#### <a name="net-http_test-func-TestServeTLS">func TestServeTLS(t *testing.T)</a>

```Go
func TestServeTLS(t *testing.T)
```

#### <a name="net-http_test-func-TestTLSServerRejectHTTPRequests">func TestTLSServerRejectHTTPRequests(t *testing.T)</a>

```Go
func TestTLSServerRejectHTTPRequests(t *testing.T)
```

Test that the HTTPS server nicely rejects plaintext HTTP/1.x requests. 

#### <a name="net-http_test-func-TestAutomaticHTTP2_Serve_NoTLSConfig">func TestAutomaticHTTP2_Serve_NoTLSConfig(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_Serve_NoTLSConfig(t *testing.T)
```

Issue 15908 

#### <a name="net-http_test-func-TestAutomaticHTTP2_Serve_NonH2TLSConfig">func TestAutomaticHTTP2_Serve_NonH2TLSConfig(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_Serve_NonH2TLSConfig(t *testing.T)
```

#### <a name="net-http_test-func-TestAutomaticHTTP2_Serve_H2TLSConfig">func TestAutomaticHTTP2_Serve_H2TLSConfig(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_Serve_H2TLSConfig(t *testing.T)
```

#### <a name="net-http_test-func-testAutomaticHTTP2_Serve">func testAutomaticHTTP2_Serve(t *testing.T, tlsConf *tls.Config, wantH2 bool)</a>

```Go
func testAutomaticHTTP2_Serve(t *testing.T, tlsConf *tls.Config, wantH2 bool)
```

#### <a name="net-http_test-func-TestAutomaticHTTP2_Serve_WithTLSConfig">func TestAutomaticHTTP2_Serve_WithTLSConfig(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_Serve_WithTLSConfig(t *testing.T)
```

#### <a name="net-http_test-func-TestAutomaticHTTP2_ListenAndServe">func TestAutomaticHTTP2_ListenAndServe(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_ListenAndServe(t *testing.T)
```

#### <a name="net-http_test-func-TestAutomaticHTTP2_ListenAndServe_GetCertificate">func TestAutomaticHTTP2_ListenAndServe_GetCertificate(t *testing.T)</a>

```Go
func TestAutomaticHTTP2_ListenAndServe_GetCertificate(t *testing.T)
```

#### <a name="net-http_test-func-testAutomaticHTTP2_ListenAndServe">func testAutomaticHTTP2_ListenAndServe(t *testing.T, tlsConf *tls.Config)</a>

```Go
func testAutomaticHTTP2_ListenAndServe(t *testing.T, tlsConf *tls.Config)
```

#### <a name="net-http_test-func-TestServerExpect">func TestServerExpect(t *testing.T)</a>

```Go
func TestServerExpect(t *testing.T)
```

Tests that the server responds to the "Expect" request header correctly. http2 test: TestServer_Response_Automatic100Continue 

#### <a name="net-http_test-func-TestServerUnreadRequestBodyLittle">func TestServerUnreadRequestBodyLittle(t *testing.T)</a>

```Go
func TestServerUnreadRequestBodyLittle(t *testing.T)
```

Under a ~256KB (maxPostHandlerReadBytes) threshold, the server should consume client request bodies that a handler didn't read. 

#### <a name="net-http_test-func-TestServerUnreadRequestBodyLarge">func TestServerUnreadRequestBodyLarge(t *testing.T)</a>

```Go
func TestServerUnreadRequestBodyLarge(t *testing.T)
```

Over a ~256KB (maxPostHandlerReadBytes) threshold, the server should ignore client request bodies that a handler didn't read and close the connection. 

#### <a name="net-http_test-func-TestHandlerBodyClose">func TestHandlerBodyClose(t *testing.T)</a>

```Go
func TestHandlerBodyClose(t *testing.T)
```

#### <a name="net-http_test-func-testHandlerBodyClose">func testHandlerBodyClose(t *testing.T, i int, tt handlerBodyCloseTest)</a>

```Go
func testHandlerBodyClose(t *testing.T, i int, tt handlerBodyCloseTest)
```

#### <a name="net-http_test-func-TestRequestBodyReadErrorClosesConnection">func TestRequestBodyReadErrorClosesConnection(t *testing.T)</a>

```Go
func TestRequestBodyReadErrorClosesConnection(t *testing.T)
```

#### <a name="net-http_test-func-TestInvalidTrailerClosesConnection">func TestInvalidTrailerClosesConnection(t *testing.T)</a>

```Go
func TestInvalidTrailerClosesConnection(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestBodyTimeoutClosesConnection">func TestRequestBodyTimeoutClosesConnection(t *testing.T)</a>

```Go
func TestRequestBodyTimeoutClosesConnection(t *testing.T)
```

#### <a name="net-http_test-func-TestTimeoutHandler_h1">func TestTimeoutHandler_h1(t *testing.T)</a>

```Go
func TestTimeoutHandler_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTimeoutHandler_h2">func TestTimeoutHandler_h2(t *testing.T)</a>

```Go
func TestTimeoutHandler_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTimeoutHandler">func testTimeoutHandler(t *testing.T, h2 bool)</a>

```Go
func testTimeoutHandler(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTimeoutHandlerRace">func TestTimeoutHandlerRace(t *testing.T)</a>

```Go
func TestTimeoutHandlerRace(t *testing.T)
```

See issues 8209 and 8414. 

#### <a name="net-http_test-func-TestTimeoutHandlerRaceHeader">func TestTimeoutHandlerRaceHeader(t *testing.T)</a>

```Go
func TestTimeoutHandlerRaceHeader(t *testing.T)
```

See issues 8209 and 8414. Both issues involved panics in the implementation of TimeoutHandler. 

#### <a name="net-http_test-func-TestTimeoutHandlerRaceHeaderTimeout">func TestTimeoutHandlerRaceHeaderTimeout(t *testing.T)</a>

```Go
func TestTimeoutHandlerRaceHeaderTimeout(t *testing.T)
```

Issue 9162 

#### <a name="net-http_test-func-TestTimeoutHandlerStartTimerWhenServing">func TestTimeoutHandlerStartTimerWhenServing(t *testing.T)</a>

```Go
func TestTimeoutHandlerStartTimerWhenServing(t *testing.T)
```

Issue 14568. 

#### <a name="net-http_test-func-TestTimeoutHandlerEmptyResponse">func TestTimeoutHandlerEmptyResponse(t *testing.T)</a>

```Go
func TestTimeoutHandlerEmptyResponse(t *testing.T)
```

[https://golang.org/issue/15948](https://golang.org/issue/15948) 

#### <a name="net-http_test-func-TestTimeoutHandlerPanicRecovery">func TestTimeoutHandlerPanicRecovery(t *testing.T)</a>

```Go
func TestTimeoutHandlerPanicRecovery(t *testing.T)
```

[https://golang.org/issues/22084](https://golang.org/issues/22084) 

#### <a name="net-http_test-func-TestRedirectBadPath">func TestRedirectBadPath(t *testing.T)</a>

```Go
func TestRedirectBadPath(t *testing.T)
```

#### <a name="net-http_test-func-TestRedirect">func TestRedirect(t *testing.T)</a>

```Go
func TestRedirect(t *testing.T)
```

Test different URL formats and schemes 

#### <a name="net-http_test-func-TestRedirectContentTypeAndBody">func TestRedirectContentTypeAndBody(t *testing.T)</a>

```Go
func TestRedirectContentTypeAndBody(t *testing.T)
```

Test that Redirect sets Content-Type header for GET and HEAD requests and writes a short HTML body, unless the request already has a Content-Type header. 

#### <a name="net-http_test-func-TestZeroLengthPostAndResponse_h1">func TestZeroLengthPostAndResponse_h1(t *testing.T)</a>

```Go
func TestZeroLengthPostAndResponse_h1(t *testing.T)
```

TestZeroLengthPostAndResponse exercises an optimization done by the Transport: when there is no body (either because the method doesn't permit a body, or an explicit Content-Length of zero is present), then the transport can re-use the connection immediately. But when it re-uses the connection, it typically closes the previous request's body, which is not optimal for zero-lengthed bodies, as the client would then see http.ErrBodyReadAfterClose and not 0, io.EOF. 

#### <a name="net-http_test-func-TestZeroLengthPostAndResponse_h2">func TestZeroLengthPostAndResponse_h2(t *testing.T)</a>

```Go
func TestZeroLengthPostAndResponse_h2(t *testing.T)
```

#### <a name="net-http_test-func-testZeroLengthPostAndResponse">func testZeroLengthPostAndResponse(t *testing.T, h2 bool)</a>

```Go
func testZeroLengthPostAndResponse(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestHandlerPanicNil_h1">func TestHandlerPanicNil_h1(t *testing.T)</a>

```Go
func TestHandlerPanicNil_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerPanicNil_h2">func TestHandlerPanicNil_h2(t *testing.T)</a>

```Go
func TestHandlerPanicNil_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerPanic_h1">func TestHandlerPanic_h1(t *testing.T)</a>

```Go
func TestHandlerPanic_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerPanic_h2">func TestHandlerPanic_h2(t *testing.T)</a>

```Go
func TestHandlerPanic_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerPanicWithHijack">func TestHandlerPanicWithHijack(t *testing.T)</a>

```Go
func TestHandlerPanicWithHijack(t *testing.T)
```

#### <a name="net-http_test-func-testHandlerPanic">func testHandlerPanic(t *testing.T, withHijack, h2 bool, wrapper func(Handler) Handler, panicValue interface{})</a>

```Go
func testHandlerPanic(t *testing.T, withHijack, h2 bool, wrapper func(Handler) Handler, panicValue interface{})
```

#### <a name="net-http_test-func-TestServerWriteHijackZeroBytes">func TestServerWriteHijackZeroBytes(t *testing.T)</a>

```Go
func TestServerWriteHijackZeroBytes(t *testing.T)
```

Issue 16456: allow writing 0 bytes on hijacked conn to test hijack without any log spam. 

#### <a name="net-http_test-func-TestServerNoDate_h1">func TestServerNoDate_h1(t *testing.T)</a>

```Go
func TestServerNoDate_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerNoDate_h2">func TestServerNoDate_h2(t *testing.T)</a>

```Go
func TestServerNoDate_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestServerNoContentType_h1">func TestServerNoContentType_h1(t *testing.T)</a>

```Go
func TestServerNoContentType_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerNoContentType_h2">func TestServerNoContentType_h2(t *testing.T)</a>

```Go
func TestServerNoContentType_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerNoHeader">func testServerNoHeader(t *testing.T, h2 bool, header string)</a>

```Go
func testServerNoHeader(t *testing.T, h2 bool, header string)
```

#### <a name="net-http_test-func-TestStripPrefix">func TestStripPrefix(t *testing.T)</a>

```Go
func TestStripPrefix(t *testing.T)
```

#### <a name="net-http_test-func-TestStripPrefixNotModifyRequest">func TestStripPrefixNotModifyRequest(t *testing.T)</a>

```Go
func TestStripPrefixNotModifyRequest(t *testing.T)
```

[https://golang.org/issue/18952](https://golang.org/issue/18952). 

#### <a name="net-http_test-func-TestRequestLimit_h1">func TestRequestLimit_h1(t *testing.T)</a>

```Go
func TestRequestLimit_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestLimit_h2">func TestRequestLimit_h2(t *testing.T)</a>

```Go
func TestRequestLimit_h2(t *testing.T)
```

#### <a name="net-http_test-func-testRequestLimit">func testRequestLimit(t *testing.T, h2 bool)</a>

```Go
func testRequestLimit(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestRequestBodyLimit_h1">func TestRequestBodyLimit_h1(t *testing.T)</a>

```Go
func TestRequestBodyLimit_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestRequestBodyLimit_h2">func TestRequestBodyLimit_h2(t *testing.T)</a>

```Go
func TestRequestBodyLimit_h2(t *testing.T)
```

#### <a name="net-http_test-func-testRequestBodyLimit">func testRequestBodyLimit(t *testing.T, h2 bool)</a>

```Go
func testRequestBodyLimit(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestClientWriteShutdown">func TestClientWriteShutdown(t *testing.T)</a>

```Go
func TestClientWriteShutdown(t *testing.T)
```

TestClientWriteShutdown tests that if the client shuts down the write side of their TCP connection, the server doesn't send a 400 Bad Request. 

#### <a name="net-http_test-func-TestServerBufferedChunking">func TestServerBufferedChunking(t *testing.T)</a>

```Go
func TestServerBufferedChunking(t *testing.T)
```

Tests that chunked server responses that write 1 byte at a time are buffered before chunk headers are added, not after chunk headers. 

#### <a name="net-http_test-func-TestServerGracefulClose">func TestServerGracefulClose(t *testing.T)</a>

```Go
func TestServerGracefulClose(t *testing.T)
```

Tests that the server flushes its response headers out when it's ignoring the response body and waits a bit before forcefully closing the TCP connection, causing the client to get a RST. See [https://golang.org/issue/3595](https://golang.org/issue/3595) 

#### <a name="net-http_test-func-TestCaseSensitiveMethod_h1">func TestCaseSensitiveMethod_h1(t *testing.T)</a>

```Go
func TestCaseSensitiveMethod_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestCaseSensitiveMethod_h2">func TestCaseSensitiveMethod_h2(t *testing.T)</a>

```Go
func TestCaseSensitiveMethod_h2(t *testing.T)
```

#### <a name="net-http_test-func-testCaseSensitiveMethod">func testCaseSensitiveMethod(t *testing.T, h2 bool)</a>

```Go
func testCaseSensitiveMethod(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestContentLengthZero">func TestContentLengthZero(t *testing.T)</a>

```Go
func TestContentLengthZero(t *testing.T)
```

TestContentLengthZero tests that for both an HTTP/1.0 and HTTP/1.1 request (both keep-alive), when a Handler never writes any response, the net/http package adds a "Content-Length: 0" response header. 

#### <a name="net-http_test-func-TestCloseNotifier">func TestCloseNotifier(t *testing.T)</a>

```Go
func TestCloseNotifier(t *testing.T)
```

#### <a name="net-http_test-func-TestCloseNotifierPipelined">func TestCloseNotifierPipelined(t *testing.T)</a>

```Go
func TestCloseNotifierPipelined(t *testing.T)
```

Tests that a pipelined request does not cause the first request's Handler's CloseNotify channel to fire. 

Issue 13165 (where it used to deadlock), but behavior changed in Issue 23921. 

#### <a name="net-http_test-func-TestCloseNotifierChanLeak">func TestCloseNotifierChanLeak(t *testing.T)</a>

```Go
func TestCloseNotifierChanLeak(t *testing.T)
```

#### <a name="net-http_test-func-TestHijackAfterCloseNotifier">func TestHijackAfterCloseNotifier(t *testing.T)</a>

```Go
func TestHijackAfterCloseNotifier(t *testing.T)
```

Tests that we can use CloseNotifier in one request, and later call Hijack on a second request on the same connection. 

It also tests that the connReader stitches together its background 1-byte read for CloseNotifier when CloseNotifier doesn't fire with the rest of the second HTTP later. 

Issue 9763. HTTP/1-only test. (http2 doesn't have Hijack) 

#### <a name="net-http_test-func-TestHijackBeforeRequestBodyRead">func TestHijackBeforeRequestBodyRead(t *testing.T)</a>

```Go
func TestHijackBeforeRequestBodyRead(t *testing.T)
```

#### <a name="net-http_test-func-TestOptions">func TestOptions(t *testing.T)</a>

```Go
func TestOptions(t *testing.T)
```

#### <a name="net-http_test-func-TestHeaderToWire">func TestHeaderToWire(t *testing.T)</a>

```Go
func TestHeaderToWire(t *testing.T)
```

Tests regarding the ordering of Write, WriteHeader, Header, and Flush calls. In Go 1.0, rw.WriteHeader immediately flushed the (*response).header to the wire. In Go 1.1, the actual wire flush is delayed, so we could maybe tack on a Content-Length and better Content-Type after we see more (or all) of the output. To preserve compatibility with Go 1, we need to be careful to track which headers were live at the time of WriteHeader, so we write the same ones, even if the handler modifies them (~erroneously) after the first Write. 

#### <a name="net-http_test-func-TestAcceptMaxFds">func TestAcceptMaxFds(t *testing.T)</a>

```Go
func TestAcceptMaxFds(t *testing.T)
```

#### <a name="net-http_test-func-TestWriteAfterHijack">func TestWriteAfterHijack(t *testing.T)</a>

```Go
func TestWriteAfterHijack(t *testing.T)
```

#### <a name="net-http_test-func-TestDoubleHijack">func TestDoubleHijack(t *testing.T)</a>

```Go
func TestDoubleHijack(t *testing.T)
```

#### <a name="net-http_test-func-TestHTTP10ConnectionHeader">func TestHTTP10ConnectionHeader(t *testing.T)</a>

```Go
func TestHTTP10ConnectionHeader(t *testing.T)
```

[https://golang.org/issue/5955](https://golang.org/issue/5955) Note that this does not test the "request too large" exit path from the http server. This is intentional; not sending Connection: close is just a minor wire optimization and is pointless if dealing with a badly behaved client. 

#### <a name="net-http_test-func-TestServerReaderFromOrder_h1">func TestServerReaderFromOrder_h1(t *testing.T)</a>

```Go
func TestServerReaderFromOrder_h1(t *testing.T)
```

See golang.org/issue/5660 

#### <a name="net-http_test-func-TestServerReaderFromOrder_h2">func TestServerReaderFromOrder_h2(t *testing.T)</a>

```Go
func TestServerReaderFromOrder_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerReaderFromOrder">func testServerReaderFromOrder(t *testing.T, h2 bool)</a>

```Go
func testServerReaderFromOrder(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestCodesPreventingContentTypeAndBody">func TestCodesPreventingContentTypeAndBody(t *testing.T)</a>

```Go
func TestCodesPreventingContentTypeAndBody(t *testing.T)
```

Issue 6157, Issue 6685 

#### <a name="net-http_test-func-TestContentTypeOkayOn204">func TestContentTypeOkayOn204(t *testing.T)</a>

```Go
func TestContentTypeOkayOn204(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAndServerSharedBodyRace_h1">func TestTransportAndServerSharedBodyRace_h1(t *testing.T)</a>

```Go
func TestTransportAndServerSharedBodyRace_h1(t *testing.T)
```

Issue 6995 A server Handler can receive a Request, and then turn around and give a copy of that Request.Body out to the Transport (e.g. any proxy).  So then two people own that Request.Body (both the server and the http client), and both think they can close it on failure. Therefore, all incoming server requests Bodies need to be thread-safe. 

#### <a name="net-http_test-func-TestTransportAndServerSharedBodyRace_h2">func TestTransportAndServerSharedBodyRace_h2(t *testing.T)</a>

```Go
func TestTransportAndServerSharedBodyRace_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportAndServerSharedBodyRace">func testTransportAndServerSharedBodyRace(t *testing.T, h2 bool)</a>

```Go
func testTransportAndServerSharedBodyRace(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestRequestBodyCloseDoesntBlock">func TestRequestBodyCloseDoesntBlock(t *testing.T)</a>

```Go
func TestRequestBodyCloseDoesntBlock(t *testing.T)
```

Test that a hanging Request.Body.Read from another goroutine can't cause the Handler goroutine's Request.Body.Close to block. See issue 7121. 

#### <a name="net-http_test-func-TestResponseWriterWriteString">func TestResponseWriterWriteString(t *testing.T)</a>

```Go
func TestResponseWriterWriteString(t *testing.T)
```

test that ResponseWriter implements io.StringWriter. 

#### <a name="net-http_test-func-TestAppendTime">func TestAppendTime(t *testing.T)</a>

```Go
func TestAppendTime(t *testing.T)
```

#### <a name="net-http_test-func-TestServerConnState">func TestServerConnState(t *testing.T)</a>

```Go
func TestServerConnState(t *testing.T)
```

#### <a name="net-http_test-func-TestServerKeepAlivesEnabled">func TestServerKeepAlivesEnabled(t *testing.T)</a>

```Go
func TestServerKeepAlivesEnabled(t *testing.T)
```

#### <a name="net-http_test-func-TestServerEmptyBodyRace_h1">func TestServerEmptyBodyRace_h1(t *testing.T)</a>

```Go
func TestServerEmptyBodyRace_h1(t *testing.T)
```

golang.org/issue/7856 

#### <a name="net-http_test-func-TestServerEmptyBodyRace_h2">func TestServerEmptyBodyRace_h2(t *testing.T)</a>

```Go
func TestServerEmptyBodyRace_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerEmptyBodyRace">func testServerEmptyBodyRace(t *testing.T, h2 bool)</a>

```Go
func testServerEmptyBodyRace(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerConnStateNew">func TestServerConnStateNew(t *testing.T)</a>

```Go
func TestServerConnStateNew(t *testing.T)
```

#### <a name="net-http_test-func-TestCloseWrite">func TestCloseWrite(t *testing.T)</a>

```Go
func TestCloseWrite(t *testing.T)
```

#### <a name="net-http_test-func-TestServerFlushAndHijack">func TestServerFlushAndHijack(t *testing.T)</a>

```Go
func TestServerFlushAndHijack(t *testing.T)
```

This verifies that a handler can Flush and then Hijack. 

A similar test crashed once during development, but it was only testing this tangentially and temporarily until another TODO was fixed. 

So add an explicit test for this. 

#### <a name="net-http_test-func-TestServerKeepAliveAfterWriteError">func TestServerKeepAliveAfterWriteError(t *testing.T)</a>

```Go
func TestServerKeepAliveAfterWriteError(t *testing.T)
```

golang.org/issue/8534 -- the Server shouldn't reuse a connection for keep-alive after it's seen any Write error (e.g. a timeout) on that net.Conn. 

To test, verify we don't timeout or see fewer unique client addresses (== unique connections) than requests. 

#### <a name="net-http_test-func-TestNoContentLengthIfTransferEncoding">func TestNoContentLengthIfTransferEncoding(t *testing.T)</a>

```Go
func TestNoContentLengthIfTransferEncoding(t *testing.T)
```

Issue 9987: shouldn't add automatic Content-Length (or Content-Type) if a Transfer-Encoding was set by the handler. 

#### <a name="net-http_test-func-TestTolerateCRLFBeforeRequestLine">func TestTolerateCRLFBeforeRequestLine(t *testing.T)</a>

```Go
func TestTolerateCRLFBeforeRequestLine(t *testing.T)
```

tolerate extra CRLF(s) before Request-Line on subsequent requests on a conn Issue 10876. 

#### <a name="net-http_test-func-TestIssue13893_Expect100">func TestIssue13893_Expect100(t *testing.T)</a>

```Go
func TestIssue13893_Expect100(t *testing.T)
```

#### <a name="net-http_test-func-TestIssue11549_Expect100">func TestIssue11549_Expect100(t *testing.T)</a>

```Go
func TestIssue11549_Expect100(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerFinishSkipBigContentLengthRead">func TestHandlerFinishSkipBigContentLengthRead(t *testing.T)</a>

```Go
func TestHandlerFinishSkipBigContentLengthRead(t *testing.T)
```

If a Handler finishes and there's an unread request body, verify the server try to do implicit read on it before replying. 

#### <a name="net-http_test-func-TestHandlerSetsBodyNil_h1">func TestHandlerSetsBodyNil_h1(t *testing.T)</a>

```Go
func TestHandlerSetsBodyNil_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestHandlerSetsBodyNil_h2">func TestHandlerSetsBodyNil_h2(t *testing.T)</a>

```Go
func TestHandlerSetsBodyNil_h2(t *testing.T)
```

#### <a name="net-http_test-func-testHandlerSetsBodyNil">func testHandlerSetsBodyNil(t *testing.T, h2 bool)</a>

```Go
func testHandlerSetsBodyNil(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerValidatesHostHeader">func TestServerValidatesHostHeader(t *testing.T)</a>

```Go
func TestServerValidatesHostHeader(t *testing.T)
```

Test that we validate the Host header. Issue 11206 (invalid bytes in Host) and 13624 (Host present in HTTP/1.1) 

#### <a name="net-http_test-func-TestServerHandlersCanHandleH2PRI">func TestServerHandlersCanHandleH2PRI(t *testing.T)</a>

```Go
func TestServerHandlersCanHandleH2PRI(t *testing.T)
```

#### <a name="net-http_test-func-TestServerValidatesHeaders">func TestServerValidatesHeaders(t *testing.T)</a>

```Go
func TestServerValidatesHeaders(t *testing.T)
```

Test that we validate the valid bytes in HTTP/1 headers. Issue 11207. 

#### <a name="net-http_test-func-TestServerRequestContextCancel_ServeHTTPDone_h1">func TestServerRequestContextCancel_ServeHTTPDone_h1(t *testing.T)</a>

```Go
func TestServerRequestContextCancel_ServeHTTPDone_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerRequestContextCancel_ServeHTTPDone_h2">func TestServerRequestContextCancel_ServeHTTPDone_h2(t *testing.T)</a>

```Go
func TestServerRequestContextCancel_ServeHTTPDone_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerRequestContextCancel_ServeHTTPDone">func testServerRequestContextCancel_ServeHTTPDone(t *testing.T, h2 bool)</a>

```Go
func testServerRequestContextCancel_ServeHTTPDone(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerRequestContextCancel_ConnClose">func TestServerRequestContextCancel_ConnClose(t *testing.T)</a>

```Go
func TestServerRequestContextCancel_ConnClose(t *testing.T)
```

Tests that the Request.Context available to the Handler is canceled if the peer closes their TCP connection. This requires that the server is always blocked in a Read call so it notices the EOF from the client. See issues 15927 and 15224. 

#### <a name="net-http_test-func-TestServerContext_ServerContextKey_h1">func TestServerContext_ServerContextKey_h1(t *testing.T)</a>

```Go
func TestServerContext_ServerContextKey_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerContext_ServerContextKey_h2">func TestServerContext_ServerContextKey_h2(t *testing.T)</a>

```Go
func TestServerContext_ServerContextKey_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerContext_ServerContextKey">func testServerContext_ServerContextKey(t *testing.T, h2 bool)</a>

```Go
func testServerContext_ServerContextKey(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerContext_LocalAddrContextKey_h1">func TestServerContext_LocalAddrContextKey_h1(t *testing.T)</a>

```Go
func TestServerContext_LocalAddrContextKey_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerContext_LocalAddrContextKey_h2">func TestServerContext_LocalAddrContextKey_h2(t *testing.T)</a>

```Go
func TestServerContext_LocalAddrContextKey_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerContext_LocalAddrContextKey">func testServerContext_LocalAddrContextKey(t *testing.T, h2 bool)</a>

```Go
func testServerContext_LocalAddrContextKey(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestHandlerSetTransferEncodingChunked">func TestHandlerSetTransferEncodingChunked(t *testing.T)</a>

```Go
func TestHandlerSetTransferEncodingChunked(t *testing.T)
```

[https://golang.org/issue/15960](https://golang.org/issue/15960) 

#### <a name="net-http_test-func-TestHandlerSetTransferEncodingGzip">func TestHandlerSetTransferEncodingGzip(t *testing.T)</a>

```Go
func TestHandlerSetTransferEncodingGzip(t *testing.T)
```

[https://golang.org/issue/16063](https://golang.org/issue/16063) 

#### <a name="net-http_test-func-BenchmarkClientServer">func BenchmarkClientServer(b *testing.B)</a>

```Go
func BenchmarkClientServer(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkClientServerParallel4">func BenchmarkClientServerParallel4(b *testing.B)</a>

```Go
func BenchmarkClientServerParallel4(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkClientServerParallel64">func BenchmarkClientServerParallel64(b *testing.B)</a>

```Go
func BenchmarkClientServerParallel64(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkClientServerParallelTLS4">func BenchmarkClientServerParallelTLS4(b *testing.B)</a>

```Go
func BenchmarkClientServerParallelTLS4(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkClientServerParallelTLS64">func BenchmarkClientServerParallelTLS64(b *testing.B)</a>

```Go
func BenchmarkClientServerParallelTLS64(b *testing.B)
```

#### <a name="net-http_test-func-benchmarkClientServerParallel">func benchmarkClientServerParallel(b *testing.B, parallelism int, useTLS bool)</a>

```Go
func benchmarkClientServerParallel(b *testing.B, parallelism int, useTLS bool)
```

#### <a name="net-http_test-func-BenchmarkServer">func BenchmarkServer(b *testing.B)</a>

```Go
func BenchmarkServer(b *testing.B)
```

A benchmark for profiling the server without the HTTP client code. The client code runs in a subprocess. 

For use like: 

```
$ go test -c
$ ./http.test -test.run=XX -test.bench=BenchmarkServer -test.benchtime=15s -test.cpuprofile=http.prof
$ go tool pprof http.test http.prof
(pprof) web

```
#### <a name="net-http_test-func-getNoBody">func getNoBody(urlStr string) (*Response, error)</a>

```Go
func getNoBody(urlStr string) (*Response, error)
```

getNoBody wraps Get but closes any Response.Body before returning the response. 

#### <a name="net-http_test-func-BenchmarkClient">func BenchmarkClient(b *testing.B)</a>

```Go
func BenchmarkClient(b *testing.B)
```

A benchmark for profiling the client without the HTTP server code. The server code runs in a subprocess. 

#### <a name="net-http_test-func-BenchmarkServerFakeConnNoKeepAlive">func BenchmarkServerFakeConnNoKeepAlive(b *testing.B)</a>

```Go
func BenchmarkServerFakeConnNoKeepAlive(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkServerFakeConnWithKeepAlive">func BenchmarkServerFakeConnWithKeepAlive(b *testing.B)</a>

```Go
func BenchmarkServerFakeConnWithKeepAlive(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkServerFakeConnWithKeepAliveLite">func BenchmarkServerFakeConnWithKeepAliveLite(b *testing.B)</a>

```Go
func BenchmarkServerFakeConnWithKeepAliveLite(b *testing.B)
```

same as above, but representing the most simple possible request and handler. Notably: the handler does not call rw.Header(). 

#### <a name="net-http_test-func-BenchmarkServerHandlerTypeLen">func BenchmarkServerHandlerTypeLen(b *testing.B)</a>

```Go
func BenchmarkServerHandlerTypeLen(b *testing.B)
```

Both Content-Type and Content-Length set. Should be no buffering. 

#### <a name="net-http_test-func-BenchmarkServerHandlerNoLen">func BenchmarkServerHandlerNoLen(b *testing.B)</a>

```Go
func BenchmarkServerHandlerNoLen(b *testing.B)
```

A Content-Type is set, but no length. No sniffing, but will count the Content-Length. 

#### <a name="net-http_test-func-BenchmarkServerHandlerNoType">func BenchmarkServerHandlerNoType(b *testing.B)</a>

```Go
func BenchmarkServerHandlerNoType(b *testing.B)
```

A Content-Length is set, but the Content-Type will be sniffed. 

#### <a name="net-http_test-func-BenchmarkServerHandlerNoHeader">func BenchmarkServerHandlerNoHeader(b *testing.B)</a>

```Go
func BenchmarkServerHandlerNoHeader(b *testing.B)
```

Neither a Content-Type or Content-Length, so sniffed and counted. 

#### <a name="net-http_test-func-benchmarkHandler">func benchmarkHandler(b *testing.B, h Handler)</a>

```Go
func benchmarkHandler(b *testing.B, h Handler)
```

#### <a name="net-http_test-func-BenchmarkServerHijack">func BenchmarkServerHijack(b *testing.B)</a>

```Go
func BenchmarkServerHijack(b *testing.B)
```

#### <a name="net-http_test-func-BenchmarkCloseNotifier">func BenchmarkCloseNotifier(b *testing.B)</a>

```Go
func BenchmarkCloseNotifier(b *testing.B)
```

#### <a name="net-http_test-func-TestConcurrentServerServe">func TestConcurrentServerServe(t *testing.T)</a>

```Go
func TestConcurrentServerServe(t *testing.T)
```

Verify this doesn't race (Issue 16505) 

#### <a name="net-http_test-func-TestServerIdleTimeout">func TestServerIdleTimeout(t *testing.T)</a>

```Go
func TestServerIdleTimeout(t *testing.T)
```

#### <a name="net-http_test-func-get">func get(t *testing.T, c *Client, url string) string</a>

```Go
func get(t *testing.T, c *Client, url string) string
```

#### <a name="net-http_test-func-TestServerSetKeepAlivesEnabledClosesConns">func TestServerSetKeepAlivesEnabledClosesConns(t *testing.T)</a>

```Go
func TestServerSetKeepAlivesEnabledClosesConns(t *testing.T)
```

Tests that calls to Server.SetKeepAlivesEnabled(false) closes any currently-open connections. 

#### <a name="net-http_test-func-TestServerShutdown_h1">func TestServerShutdown_h1(t *testing.T)</a>

```Go
func TestServerShutdown_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerShutdown_h2">func TestServerShutdown_h2(t *testing.T)</a>

```Go
func TestServerShutdown_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerShutdown">func testServerShutdown(t *testing.T, h2 bool)</a>

```Go
func testServerShutdown(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerShutdownStateNew">func TestServerShutdownStateNew(t *testing.T)</a>

```Go
func TestServerShutdownStateNew(t *testing.T)
```

#### <a name="net-http_test-func-TestServerCloseDeadlock">func TestServerCloseDeadlock(t *testing.T)</a>

```Go
func TestServerCloseDeadlock(t *testing.T)
```

Issue 17878: tests that we can call Close twice. 

#### <a name="net-http_test-func-TestServerKeepAlivesEnabled_h1">func TestServerKeepAlivesEnabled_h1(t *testing.T)</a>

```Go
func TestServerKeepAlivesEnabled_h1(t *testing.T)
```

Issue 17717: tests that Server.SetKeepAlivesEnabled is respected by both HTTP/1 and HTTP/2. 

#### <a name="net-http_test-func-TestServerKeepAlivesEnabled_h2">func TestServerKeepAlivesEnabled_h2(t *testing.T)</a>

```Go
func TestServerKeepAlivesEnabled_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerKeepAlivesEnabled">func testServerKeepAlivesEnabled(t *testing.T, h2 bool)</a>

```Go
func testServerKeepAlivesEnabled(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerCancelsReadTimeoutWhenIdle">func TestServerCancelsReadTimeoutWhenIdle(t *testing.T)</a>

```Go
func TestServerCancelsReadTimeoutWhenIdle(t *testing.T)
```

Issue 18447: test that the Server's ReadTimeout is stopped while the server's doing its 1-byte background read between requests, waiting for the connection to maybe close. 

#### <a name="net-http_test-func-runTimeSensitiveTest">func runTimeSensitiveTest(t *testing.T, durations []time.Duration, test func(t *testing.T, d time.Duration) error)</a>

```Go
func runTimeSensitiveTest(t *testing.T, durations []time.Duration, test func(t *testing.T, d time.Duration) error)
```

runTimeSensitiveTest runs test with the provided durations until one passes. If they all fail, t.Fatal is called with the last one's duration and error value. 

#### <a name="net-http_test-func-TestServerDuplicateBackgroundRead">func TestServerDuplicateBackgroundRead(t *testing.T)</a>

```Go
func TestServerDuplicateBackgroundRead(t *testing.T)
```

Issue 18535: test that the Server doesn't try to do a background read if it's already done one. 

#### <a name="net-http_test-func-TestServerHijackGetsBackgroundByte">func TestServerHijackGetsBackgroundByte(t *testing.T)</a>

```Go
func TestServerHijackGetsBackgroundByte(t *testing.T)
```

Test that the bufio.Reader returned by Hijack includes any buffered byte (from the Server's backgroundRead) in its buffer. We want the Handler code to be able to tell that a byte is available via bufio.Reader.Buffered(), without resorting to Reading it (potentially blocking) to get at it. 

#### <a name="net-http_test-func-TestServerHijackGetsBackgroundByte_big">func TestServerHijackGetsBackgroundByte_big(t *testing.T)</a>

```Go
func TestServerHijackGetsBackgroundByte_big(t *testing.T)
```

Like TestServerHijackGetsBackgroundByte above but sending a immediate 1MB of data to the server to fill up the server's 4KB buffer. 

#### <a name="net-http_test-func-TestServerValidatesMethod">func TestServerValidatesMethod(t *testing.T)</a>

```Go
func TestServerValidatesMethod(t *testing.T)
```

Issue 18319: test that the Server validates the request method. 

#### <a name="net-http_test-func-TestServerListenNotComparableListener">func TestServerListenNotComparableListener(t *testing.T)</a>

```Go
func TestServerListenNotComparableListener(t *testing.T)
```

Issue 24812: don't crash on non-comparable Listener 

#### <a name="net-http_test-func-TestServerCloseListenerOnce">func TestServerCloseListenerOnce(t *testing.T)</a>

```Go
func TestServerCloseListenerOnce(t *testing.T)
```

Issue 24803: don't call Listener.Close on Server.Shutdown. 

#### <a name="net-http_test-func-TestServerShutdownThenServe">func TestServerShutdownThenServe(t *testing.T)</a>

```Go
func TestServerShutdownThenServe(t *testing.T)
```

Issue 20239: don't block in Serve if Shutdown is called first. 

#### <a name="net-http_test-func-TestStripPortFromHost">func TestStripPortFromHost(t *testing.T)</a>

```Go
func TestStripPortFromHost(t *testing.T)
```

Issue 23351: document and test behavior of ServeMux with ports 

#### <a name="net-http_test-func-TestServerContexts">func TestServerContexts(t *testing.T)</a>

```Go
func TestServerContexts(t *testing.T)
```

#### <a name="net-http_test-func-TestServerContextsHTTP2">func TestServerContextsHTTP2(t *testing.T)</a>

```Go
func TestServerContextsHTTP2(t *testing.T)
```

#### <a name="net-http_test-func-TestConnContextNotModifyingAllContexts">func TestConnContextNotModifyingAllContexts(t *testing.T)</a>

```Go
func TestConnContextNotModifyingAllContexts(t *testing.T)
```

Issue 35750: check ConnContext not modifying context for other connections 

#### <a name="net-http_test-func-TestUnsupportedTransferEncodingsReturn501">func TestUnsupportedTransferEncodingsReturn501(t *testing.T)</a>

```Go
func TestUnsupportedTransferEncodingsReturn501(t *testing.T)
```

Issue 30710: ensure that as per the spec, a server responds with 501 Not Implemented for unsupported transfer-encodings. 

#### <a name="net-http_test-func-TestContentEncodingNoSniffing_h1">func TestContentEncodingNoSniffing_h1(t *testing.T)</a>

```Go
func TestContentEncodingNoSniffing_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestContentEncodingNoSniffing_h2">func TestContentEncodingNoSniffing_h2(t *testing.T)</a>

```Go
func TestContentEncodingNoSniffing_h2(t *testing.T)
```

#### <a name="net-http_test-func-testContentEncodingNoSniffing">func testContentEncodingNoSniffing(t *testing.T, h2 bool)</a>

```Go
func testContentEncodingNoSniffing(t *testing.T, h2 bool)
```

Issue 31753: don't sniff when Content-Encoding is set 

#### <a name="net-http_test-func-TestTimeoutHandlerSuperfluousLogs">func TestTimeoutHandlerSuperfluousLogs(t *testing.T)</a>

```Go
func TestTimeoutHandlerSuperfluousLogs(t *testing.T)
```

Issue 30803: ensure that TimeoutHandler logs spurious WriteHeader calls, for consistency with other Handlers. 

#### <a name="net-http_test-func-fetchWireResponse">func fetchWireResponse(host string, http1ReqBody []byte) ([]byte, error)</a>

```Go
func fetchWireResponse(host string, http1ReqBody []byte) ([]byte, error)
```

fetchWireResponse is a helper for dialing to host, sending http1ReqBody as the payload and retrieving the response as it was sent on the wire. 

#### <a name="net-http_test-func-BenchmarkResponseStatusLine">func BenchmarkResponseStatusLine(b *testing.B)</a>

```Go
func BenchmarkResponseStatusLine(b *testing.B)
```

#### <a name="net-http_test-func-TestDisableKeepAliveUpgrade">func TestDisableKeepAliveUpgrade(t *testing.T)</a>

```Go
func TestDisableKeepAliveUpgrade(t *testing.T)
```

#### <a name="net-http_test-func-TestDetectContentType">func TestDetectContentType(t *testing.T)</a>

```Go
func TestDetectContentType(t *testing.T)
```

#### <a name="net-http_test-func-TestServerContentType_h1">func TestServerContentType_h1(t *testing.T)</a>

```Go
func TestServerContentType_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestServerContentType_h2">func TestServerContentType_h2(t *testing.T)</a>

```Go
func TestServerContentType_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerContentType">func testServerContentType(t *testing.T, h2 bool)</a>

```Go
func testServerContentType(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestServerIssue5953_h1">func TestServerIssue5953_h1(t *testing.T)</a>

```Go
func TestServerIssue5953_h1(t *testing.T)
```

Issue 5953: shouldn't sniff if the handler set a Content-Type header, even if it's the empty string. 

#### <a name="net-http_test-func-TestServerIssue5953_h2">func TestServerIssue5953_h2(t *testing.T)</a>

```Go
func TestServerIssue5953_h2(t *testing.T)
```

#### <a name="net-http_test-func-testServerIssue5953">func testServerIssue5953(t *testing.T, h2 bool)</a>

```Go
func testServerIssue5953(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestContentTypeWithCopy_h1">func TestContentTypeWithCopy_h1(t *testing.T)</a>

```Go
func TestContentTypeWithCopy_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestContentTypeWithCopy_h2">func TestContentTypeWithCopy_h2(t *testing.T)</a>

```Go
func TestContentTypeWithCopy_h2(t *testing.T)
```

#### <a name="net-http_test-func-testContentTypeWithCopy">func testContentTypeWithCopy(t *testing.T, h2 bool)</a>

```Go
func testContentTypeWithCopy(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestSniffWriteSize_h1">func TestSniffWriteSize_h1(t *testing.T)</a>

```Go
func TestSniffWriteSize_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestSniffWriteSize_h2">func TestSniffWriteSize_h2(t *testing.T)</a>

```Go
func TestSniffWriteSize_h2(t *testing.T)
```

#### <a name="net-http_test-func-testSniffWriteSize">func testSniffWriteSize(t *testing.T, h2 bool)</a>

```Go
func testSniffWriteSize(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestReuseRequest">func TestReuseRequest(t *testing.T)</a>

```Go
func TestReuseRequest(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportKeepAlives">func TestTransportKeepAlives(t *testing.T)</a>

```Go
func TestTransportKeepAlives(t *testing.T)
```

Two subsequent requests and verify their response is the same. The response from the server is our own IP:port 

#### <a name="net-http_test-func-TestTransportConnectionCloseOnResponse">func TestTransportConnectionCloseOnResponse(t *testing.T)</a>

```Go
func TestTransportConnectionCloseOnResponse(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportConnectionCloseOnRequest">func TestTransportConnectionCloseOnRequest(t *testing.T)</a>

```Go
func TestTransportConnectionCloseOnRequest(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportConnectionCloseOnRequestDisableKeepAlive">func TestTransportConnectionCloseOnRequestDisableKeepAlive(t *testing.T)</a>

```Go
func TestTransportConnectionCloseOnRequestDisableKeepAlive(t *testing.T)
```

if the Transport's DisableKeepAlives is set, all requests should send Connection: close. HTTP/1-only (Connection: close doesn't exist in h2) 

#### <a name="net-http_test-func-TestTransportRespectRequestWantsClose">func TestTransportRespectRequestWantsClose(t *testing.T)</a>

```Go
func TestTransportRespectRequestWantsClose(t *testing.T)
```

Test that Transport only sends one "Connection: close", regardless of how "close" was indicated. 

#### <a name="net-http_test-func-TestTransportIdleCacheKeys">func TestTransportIdleCacheKeys(t *testing.T)</a>

```Go
func TestTransportIdleCacheKeys(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportReadToEndReusesConn">func TestTransportReadToEndReusesConn(t *testing.T)</a>

```Go
func TestTransportReadToEndReusesConn(t *testing.T)
```

Tests that the HTTP transport re-uses connections when a client reads to the end of a response Body without closing it. 

#### <a name="net-http_test-func-TestTransportMaxPerHostIdleConns">func TestTransportMaxPerHostIdleConns(t *testing.T)</a>

```Go
func TestTransportMaxPerHostIdleConns(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportMaxConnsPerHostIncludeDialInProgress">func TestTransportMaxConnsPerHostIncludeDialInProgress(t *testing.T)</a>

```Go
func TestTransportMaxConnsPerHostIncludeDialInProgress(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportMaxConnsPerHost">func TestTransportMaxConnsPerHost(t *testing.T)</a>

```Go
func TestTransportMaxConnsPerHost(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRemovesDeadIdleConnections">func TestTransportRemovesDeadIdleConnections(t *testing.T)</a>

```Go
func TestTransportRemovesDeadIdleConnections(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportServerClosingUnexpectedly">func TestTransportServerClosingUnexpectedly(t *testing.T)</a>

```Go
func TestTransportServerClosingUnexpectedly(t *testing.T)
```

Test that the Transport notices when a server hangs up on its unexpectedly (a keep-alive connection is closed). 

#### <a name="net-http_test-func-TestStressSurpriseServerCloses">func TestStressSurpriseServerCloses(t *testing.T)</a>

```Go
func TestStressSurpriseServerCloses(t *testing.T)
```

Test for [https://golang.org/issue/2616](https://golang.org/issue/2616) (appropriate issue number) This fails pretty reliably with GOMAXPROCS=100 or something high. 

#### <a name="net-http_test-func-TestTransportHeadResponses">func TestTransportHeadResponses(t *testing.T)</a>

```Go
func TestTransportHeadResponses(t *testing.T)
```

TestTransportHeadResponses verifies that we deal with Content-Lengths with no bodies properly 

#### <a name="net-http_test-func-TestTransportHeadChunkedResponse">func TestTransportHeadChunkedResponse(t *testing.T)</a>

```Go
func TestTransportHeadChunkedResponse(t *testing.T)
```

TestTransportHeadChunkedResponse verifies that we ignore chunked transfer-encoding on responses to HEAD requests. 

#### <a name="net-http_test-func-TestRoundTripGzip">func TestRoundTripGzip(t *testing.T)</a>

```Go
func TestRoundTripGzip(t *testing.T)
```

Test that the modification made to the Request by the RoundTripper is cleaned up 

#### <a name="net-http_test-func-TestTransportGzip">func TestTransportGzip(t *testing.T)</a>

```Go
func TestTransportGzip(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportExpect100Continue">func TestTransportExpect100Continue(t *testing.T)</a>

```Go
func TestTransportExpect100Continue(t *testing.T)
```

If a request has Expect:100-continue header, the request blocks sending body until the first response. Premature consumption of the request body should not be occurred. 

#### <a name="net-http_test-func-TestSOCKS5Proxy">func TestSOCKS5Proxy(t *testing.T)</a>

```Go
func TestSOCKS5Proxy(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportProxy">func TestTransportProxy(t *testing.T)</a>

```Go
func TestTransportProxy(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportProxyHTTPSConnectLeak">func TestTransportProxyHTTPSConnectLeak(t *testing.T)</a>

```Go
func TestTransportProxyHTTPSConnectLeak(t *testing.T)
```

Issue 28012: verify that the Transport closes its TCP connection to http proxies when they're slow to reply to HTTPS CONNECT responses. 

#### <a name="net-http_test-func-TestTransportDialPreservesNetOpProxyError">func TestTransportDialPreservesNetOpProxyError(t *testing.T)</a>

```Go
func TestTransportDialPreservesNetOpProxyError(t *testing.T)
```

Issue 16997: test transport dial preserves typed errors 

#### <a name="net-http_test-func-TestTransportProxyDialDoesNotMutateProxyConnectHeader">func TestTransportProxyDialDoesNotMutateProxyConnectHeader(t *testing.T)</a>

```Go
func TestTransportProxyDialDoesNotMutateProxyConnectHeader(t *testing.T)
```

Issue 36431: calls to RoundTrip should not mutate t.ProxyConnectHeader. 

(A bug caused dialConn to instead write the per-request Proxy-Authorization header through to the shared Header instance, introducing a data race.) 

#### <a name="net-http_test-func-TestTransportGzipRecursive">func TestTransportGzipRecursive(t *testing.T)</a>

```Go
func TestTransportGzipRecursive(t *testing.T)
```

TestTransportGzipRecursive sends a gzip quine and checks that the client gets the same value back. This is more cute than anything, but checks that we don't recurse forever, and checks that Content-Encoding is removed. 

#### <a name="net-http_test-func-TestTransportGzipShort">func TestTransportGzipShort(t *testing.T)</a>

```Go
func TestTransportGzipShort(t *testing.T)
```

golang.org/issue/7750: request fails when server replies with a short gzip body 

#### <a name="net-http_test-func-waitNumGoroutine">func waitNumGoroutine(nmax int) int</a>

```Go
func waitNumGoroutine(nmax int) int
```

Wait until number of goroutines is no greater than nmax, or time out. 

#### <a name="net-http_test-func-TestTransportPersistConnLeak">func TestTransportPersistConnLeak(t *testing.T)</a>

```Go
func TestTransportPersistConnLeak(t *testing.T)
```

tests that persistent goroutine connections shut down when no longer desired. 

#### <a name="net-http_test-func-TestTransportPersistConnLeakShortBody">func TestTransportPersistConnLeakShortBody(t *testing.T)</a>

```Go
func TestTransportPersistConnLeakShortBody(t *testing.T)
```

golang.org/issue/4531: Transport leaks goroutines when request.ContentLength is explicitly short 

#### <a name="net-http_test-func-TestTransportPersistConnLeakNeverIdle">func TestTransportPersistConnLeakNeverIdle(t *testing.T)</a>

```Go
func TestTransportPersistConnLeakNeverIdle(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportPersistConnContextLeakMaxConnsPerHost">func TestTransportPersistConnContextLeakMaxConnsPerHost(t *testing.T)</a>

```Go
func TestTransportPersistConnContextLeakMaxConnsPerHost(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportIdleConnCrash">func TestTransportIdleConnCrash(t *testing.T)</a>

```Go
func TestTransportIdleConnCrash(t *testing.T)
```

This used to crash; [https://golang.org/issue/3266](https://golang.org/issue/3266) 

#### <a name="net-http_test-func-TestIssue3644">func TestIssue3644(t *testing.T)</a>

```Go
func TestIssue3644(t *testing.T)
```

Test that the transport doesn't close the TCP connection early, before the response body has been read. This was a regression which sadly lacked a triggering test. The large response body made the old race easier to trigger. 

#### <a name="net-http_test-func-TestIssue3595">func TestIssue3595(t *testing.T)</a>

```Go
func TestIssue3595(t *testing.T)
```

Test that a client receives a server's reply, even if the server doesn't read the entire request body. 

#### <a name="net-http_test-func-TestChunkedNoContent">func TestChunkedNoContent(t *testing.T)</a>

```Go
func TestChunkedNoContent(t *testing.T)
```

From [https://golang.org/issue/4454](https://golang.org/issue/4454) , "client fails to handle requests with no body and chunked encoding" 

#### <a name="net-http_test-func-TestTransportConcurrency">func TestTransportConcurrency(t *testing.T)</a>

```Go
func TestTransportConcurrency(t *testing.T)
```

#### <a name="net-http_test-func-TestIssue4191_InfiniteGetTimeout">func TestIssue4191_InfiniteGetTimeout(t *testing.T)</a>

```Go
func TestIssue4191_InfiniteGetTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestIssue4191_InfiniteGetToPutTimeout">func TestIssue4191_InfiniteGetToPutTimeout(t *testing.T)</a>

```Go
func TestIssue4191_InfiniteGetToPutTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportResponseHeaderTimeout">func TestTransportResponseHeaderTimeout(t *testing.T)</a>

```Go
func TestTransportResponseHeaderTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportCancelRequest">func TestTransportCancelRequest(t *testing.T)</a>

```Go
func TestTransportCancelRequest(t *testing.T)
```

#### <a name="net-http_test-func-testTransportCancelRequestInDo">func testTransportCancelRequestInDo(t *testing.T, body io.Reader)</a>

```Go
func testTransportCancelRequestInDo(t *testing.T, body io.Reader)
```

#### <a name="net-http_test-func-TestTransportCancelRequestInDo">func TestTransportCancelRequestInDo(t *testing.T)</a>

```Go
func TestTransportCancelRequestInDo(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportCancelRequestWithBodyInDo">func TestTransportCancelRequestWithBodyInDo(t *testing.T)</a>

```Go
func TestTransportCancelRequestWithBodyInDo(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportCancelRequestInDial">func TestTransportCancelRequestInDial(t *testing.T)</a>

```Go
func TestTransportCancelRequestInDial(t *testing.T)
```

#### <a name="net-http_test-func-TestCancelRequestWithChannel">func TestCancelRequestWithChannel(t *testing.T)</a>

```Go
func TestCancelRequestWithChannel(t *testing.T)
```

#### <a name="net-http_test-func-TestCancelRequestWithChannelBeforeDo_Cancel">func TestCancelRequestWithChannelBeforeDo_Cancel(t *testing.T)</a>

```Go
func TestCancelRequestWithChannelBeforeDo_Cancel(t *testing.T)
```

#### <a name="net-http_test-func-TestCancelRequestWithChannelBeforeDo_Context">func TestCancelRequestWithChannelBeforeDo_Context(t *testing.T)</a>

```Go
func TestCancelRequestWithChannelBeforeDo_Context(t *testing.T)
```

#### <a name="net-http_test-func-testCancelRequestWithChannelBeforeDo">func testCancelRequestWithChannelBeforeDo(t *testing.T, withCtx bool)</a>

```Go
func testCancelRequestWithChannelBeforeDo(t *testing.T, withCtx bool)
```

#### <a name="net-http_test-func-TestTransportCancelBeforeResponseHeaders">func TestTransportCancelBeforeResponseHeaders(t *testing.T)</a>

```Go
func TestTransportCancelBeforeResponseHeaders(t *testing.T)
```

Issue 11020. The returned error message should be errRequestCanceled 

#### <a name="net-http_test-func-TestTransportCloseResponseBody">func TestTransportCloseResponseBody(t *testing.T)</a>

```Go
func TestTransportCloseResponseBody(t *testing.T)
```

golang.org/issue/3672 -- Client can't close HTTP stream Calling Close on a Response.Body used to just read until EOF. Now it actually closes the TCP connection. 

#### <a name="net-http_test-func-TestTransportAltProto">func TestTransportAltProto(t *testing.T)</a>

```Go
func TestTransportAltProto(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportNoHost">func TestTransportNoHost(t *testing.T)</a>

```Go
func TestTransportNoHost(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportEmptyMethod">func TestTransportEmptyMethod(t *testing.T)</a>

```Go
func TestTransportEmptyMethod(t *testing.T)
```

Issue 13311 

#### <a name="net-http_test-func-TestTransportSocketLateBinding">func TestTransportSocketLateBinding(t *testing.T)</a>

```Go
func TestTransportSocketLateBinding(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportReading100Continue">func TestTransportReading100Continue(t *testing.T)</a>

```Go
func TestTransportReading100Continue(t *testing.T)
```

Issue 2184 

#### <a name="net-http_test-func-TestTransportIgnore1xxResponses">func TestTransportIgnore1xxResponses(t *testing.T)</a>

```Go
func TestTransportIgnore1xxResponses(t *testing.T)
```

Issue 17739: the HTTP client must ignore any unknown 1xx informational responses before the actual response. 

#### <a name="net-http_test-func-TestTransportLimits1xxResponses">func TestTransportLimits1xxResponses(t *testing.T)</a>

```Go
func TestTransportLimits1xxResponses(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportTreat101Terminal">func TestTransportTreat101Terminal(t *testing.T)</a>

```Go
func TestTransportTreat101Terminal(t *testing.T)
```

Issue 26161: the HTTP client must treat 101 responses as the final response. 

#### <a name="net-http_test-func-testProxyForRequest">func testProxyForRequest(t *testing.T, tt proxyFromEnvTest, proxyForRequest func(req *Request) (*url.URL, error))</a>

```Go
func testProxyForRequest(t *testing.T, tt proxyFromEnvTest, proxyForRequest func(req *Request) (*url.URL, error))
```

#### <a name="net-http_test-func-TestProxyFromEnvironment">func TestProxyFromEnvironment(t *testing.T)</a>

```Go
func TestProxyFromEnvironment(t *testing.T)
```

#### <a name="net-http_test-func-TestProxyFromEnvironmentLowerCase">func TestProxyFromEnvironmentLowerCase(t *testing.T)</a>

```Go
func TestProxyFromEnvironmentLowerCase(t *testing.T)
```

#### <a name="net-http_test-func-TestIdleConnChannelLeak">func TestIdleConnChannelLeak(t *testing.T)</a>

```Go
func TestIdleConnChannelLeak(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportClosesRequestBody">func TestTransportClosesRequestBody(t *testing.T)</a>

```Go
func TestTransportClosesRequestBody(t *testing.T)
```

Verify the status quo: that the Client.Post function coerces its body into a ReadCloser if it's a Closer, and that the Transport then closes it. 

#### <a name="net-http_test-func-TestTransportTLSHandshakeTimeout">func TestTransportTLSHandshakeTimeout(t *testing.T)</a>

```Go
func TestTransportTLSHandshakeTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestTLSServerClosesConnection">func TestTLSServerClosesConnection(t *testing.T)</a>

```Go
func TestTLSServerClosesConnection(t *testing.T)
```

Trying to repro golang.org/issue/3514 

#### <a name="net-http_test-func-TestTransportNoReuseAfterEarlyResponse">func TestTransportNoReuseAfterEarlyResponse(t *testing.T)</a>

```Go
func TestTransportNoReuseAfterEarlyResponse(t *testing.T)
```

Verifies that the Transport doesn't reuse a connection in the case where the server replies before the request has been fully written. We still honor that reply (see TestIssue3595), but don't send future requests on the connection because it's then in a questionable state. golang.org/issue/7569 

#### <a name="net-http_test-func-TestTransportIssue10457">func TestTransportIssue10457(t *testing.T)</a>

```Go
func TestTransportIssue10457(t *testing.T)
```

Tests that we don't leak Transport persistConn.readLoop goroutines when a server hangs up immediately after saying it would keep-alive. 

#### <a name="net-http_test-func-TestRetryRequestsOnError">func TestRetryRequestsOnError(t *testing.T)</a>

```Go
func TestRetryRequestsOnError(t *testing.T)
```

Issues 4677, 18241, and 17844. If we try to reuse a connection that the server is in the process of closing, we may end up successfully writing out our request (or a portion of our request) only to find a connection error when we try to read from (or finish writing to) the socket. 

NOTE: we resend a request only if: 

```
- we reused a keep-alive connection
- we haven't yet received any header data
- either we wrote no bytes to the server, or the request is idempotent

```
This automatically prevents an infinite resend loop because we'll run out of the cached keep-alive connections eventually. 

#### <a name="net-http_test-func-TestTransportClosesBodyOnError">func TestTransportClosesBodyOnError(t *testing.T)</a>

```Go
func TestTransportClosesBodyOnError(t *testing.T)
```

Issue 6981 

#### <a name="net-http_test-func-TestTransportDialTLS">func TestTransportDialTLS(t *testing.T)</a>

```Go
func TestTransportDialTLS(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportDialContext">func TestTransportDialContext(t *testing.T)</a>

```Go
func TestTransportDialContext(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportDialTLSContext">func TestTransportDialTLSContext(t *testing.T)</a>

```Go
func TestTransportDialTLSContext(t *testing.T)
```

#### <a name="net-http_test-func-TestRoundTripReturnsProxyError">func TestRoundTripReturnsProxyError(t *testing.T)</a>

```Go
func TestRoundTripReturnsProxyError(t *testing.T)
```

Test for issue 8755 Ensure that if a proxy returns an error, it is exposed by RoundTrip 

#### <a name="net-http_test-func-TestTransportCloseIdleConnsThenReturn">func TestTransportCloseIdleConnsThenReturn(t *testing.T)</a>

```Go
func TestTransportCloseIdleConnsThenReturn(t *testing.T)
```

tests that putting an idle conn after a call to CloseIdleConns does return it 

#### <a name="net-http_test-func-TestTransportTraceGotConnH2IdleConns">func TestTransportTraceGotConnH2IdleConns(t *testing.T)</a>

```Go
func TestTransportTraceGotConnH2IdleConns(t *testing.T)
```

Test for issue 34282 Ensure that getConn doesn't call the GotConn trace hook on a HTTP/2 idle conn 

#### <a name="net-http_test-func-TestTransportRemovesH2ConnsAfterIdle">func TestTransportRemovesH2ConnsAfterIdle(t *testing.T)</a>

```Go
func TestTransportRemovesH2ConnsAfterIdle(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRangeAndGzip">func TestTransportRangeAndGzip(t *testing.T)</a>

```Go
func TestTransportRangeAndGzip(t *testing.T)
```

This tests that a client requesting a content range won't also implicitly ask for gzip support. If they want that, they need to do it on their own. golang.org/issue/8923 

#### <a name="net-http_test-func-TestTransportResponseCancelRace">func TestTransportResponseCancelRace(t *testing.T)</a>

```Go
func TestTransportResponseCancelRace(t *testing.T)
```

Test for issue 10474 

#### <a name="net-http_test-func-TestTransportContentEncodingCaseInsensitive">func TestTransportContentEncodingCaseInsensitive(t *testing.T)</a>

```Go
func TestTransportContentEncodingCaseInsensitive(t *testing.T)
```

Test for issue 19248: Content-Encoding's value is case insensitive. 

#### <a name="net-http_test-func-TestTransportDialCancelRace">func TestTransportDialCancelRace(t *testing.T)</a>

```Go
func TestTransportDialCancelRace(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportFlushesBodyChunks">func TestTransportFlushesBodyChunks(t *testing.T)</a>

```Go
func TestTransportFlushesBodyChunks(t *testing.T)
```

Issue 6574 

#### <a name="net-http_test-func-TestTransportFlushesRequestHeader">func TestTransportFlushesRequestHeader(t *testing.T)</a>

```Go
func TestTransportFlushesRequestHeader(t *testing.T)
```

Issue 22088: flush Transport request headers if we're not sure the body won't block on read. 

#### <a name="net-http_test-func-TestTransportPrefersResponseOverWriteError">func TestTransportPrefersResponseOverWriteError(t *testing.T)</a>

```Go
func TestTransportPrefersResponseOverWriteError(t *testing.T)
```

Issue 11745. 

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2">func TestTransportAutomaticHTTP2(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig">func TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_DefaultTransport">func TestTransportAutomaticHTTP2_DefaultTransport(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_DefaultTransport(t *testing.T)
```

golang.org/issue/14391: also check DefaultTransport 

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_TLSNextProto">func TestTransportAutomaticHTTP2_TLSNextProto(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_TLSNextProto(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_TLSConfig">func TestTransportAutomaticHTTP2_TLSConfig(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_TLSConfig(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_ExpectContinueTimeout">func TestTransportAutomaticHTTP2_ExpectContinueTimeout(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_ExpectContinueTimeout(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_Dial">func TestTransportAutomaticHTTP2_Dial(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_Dial(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_DialContext">func TestTransportAutomaticHTTP2_DialContext(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_DialContext(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportAutomaticHTTP2_DialTLS">func TestTransportAutomaticHTTP2_DialTLS(t *testing.T)</a>

```Go
func TestTransportAutomaticHTTP2_DialTLS(t *testing.T)
```

#### <a name="net-http_test-func-testTransportAutoHTTP">func testTransportAutoHTTP(t *testing.T, tr *Transport, wantH2 bool)</a>

```Go
func testTransportAutoHTTP(t *testing.T, tr *Transport, wantH2 bool)
```

#### <a name="net-http_test-func-TestTransportReuseConnEmptyResponseBody">func TestTransportReuseConnEmptyResponseBody(t *testing.T)</a>

```Go
func TestTransportReuseConnEmptyResponseBody(t *testing.T)
```

Issue 13633: there was a race where we returned bodyless responses to callers before recycling the persistent connection, which meant a client doing two subsequent requests could end up on different connections. It's somewhat harmless but enough tests assume it's not true in order to test other things that it's worth fixing. Plus it's nice to be consistent and not have timing-dependent behavior. 

#### <a name="net-http_test-func-TestNoCrashReturningTransportAltConn">func TestNoCrashReturningTransportAltConn(t *testing.T)</a>

```Go
func TestNoCrashReturningTransportAltConn(t *testing.T)
```

Issue 13839 

#### <a name="net-http_test-func-TestTransportReuseConnection_Gzip_Chunked">func TestTransportReuseConnection_Gzip_Chunked(t *testing.T)</a>

```Go
func TestTransportReuseConnection_Gzip_Chunked(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportReuseConnection_Gzip_ContentLength">func TestTransportReuseConnection_Gzip_ContentLength(t *testing.T)</a>

```Go
func TestTransportReuseConnection_Gzip_ContentLength(t *testing.T)
```

#### <a name="net-http_test-func-testTransportReuseConnection_Gzip">func testTransportReuseConnection_Gzip(t *testing.T, chunked bool)</a>

```Go
func testTransportReuseConnection_Gzip(t *testing.T, chunked bool)
```

Make sure we re-use underlying TCP connection for gzipped responses too. 

#### <a name="net-http_test-func-TestTransportResponseHeaderLength">func TestTransportResponseHeaderLength(t *testing.T)</a>

```Go
func TestTransportResponseHeaderLength(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportEventTrace">func TestTransportEventTrace(t *testing.T)</a>

```Go
func TestTransportEventTrace(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportEventTrace_h2">func TestTransportEventTrace_h2(t *testing.T)</a>

```Go
func TestTransportEventTrace_h2(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportEventTrace_NoHooks">func TestTransportEventTrace_NoHooks(t *testing.T)</a>

```Go
func TestTransportEventTrace_NoHooks(t *testing.T)
```

test a non-nil httptrace.ClientTrace but with all hooks set to zero. 

#### <a name="net-http_test-func-TestTransportEventTrace_NoHooks_h2">func TestTransportEventTrace_NoHooks_h2(t *testing.T)</a>

```Go
func TestTransportEventTrace_NoHooks_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportEventTrace">func testTransportEventTrace(t *testing.T, h2 bool, noHooks bool)</a>

```Go
func testTransportEventTrace(t *testing.T, h2 bool, noHooks bool)
```

#### <a name="net-http_test-func-TestTransportEventTraceTLSVerify">func TestTransportEventTraceTLSVerify(t *testing.T)</a>

```Go
func TestTransportEventTraceTLSVerify(t *testing.T)
```

#### <a name="net-http_test-func-skipIfDNSHijacked">func skipIfDNSHijacked(t *testing.T)</a>

```Go
func skipIfDNSHijacked(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportEventTraceRealDNS">func TestTransportEventTraceRealDNS(t *testing.T)</a>

```Go
func TestTransportEventTraceRealDNS(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRejectsAlphaPort">func TestTransportRejectsAlphaPort(t *testing.T)</a>

```Go
func TestTransportRejectsAlphaPort(t *testing.T)
```

Issue 14353: port can only contain digits. 

#### <a name="net-http_test-func-TestTLSHandshakeTrace">func TestTLSHandshakeTrace(t *testing.T)</a>

```Go
func TestTLSHandshakeTrace(t *testing.T)
```

Test the httptrace.TLSHandshake{Start,Done} hooks with a https http1 connections. The http2 test is done in TestTransportEventTrace_h2 

#### <a name="net-http_test-func-TestTransportMaxIdleConns">func TestTransportMaxIdleConns(t *testing.T)</a>

```Go
func TestTransportMaxIdleConns(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportIdleConnTimeout_h1">func TestTransportIdleConnTimeout_h1(t *testing.T)</a>

```Go
func TestTransportIdleConnTimeout_h1(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportIdleConnTimeout_h2">func TestTransportIdleConnTimeout_h2(t *testing.T)</a>

```Go
func TestTransportIdleConnTimeout_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportIdleConnTimeout">func testTransportIdleConnTimeout(t *testing.T, h2 bool)</a>

```Go
func testTransportIdleConnTimeout(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestIdleConnH2Crash">func TestIdleConnH2Crash(t *testing.T)</a>

```Go
func TestIdleConnH2Crash(t *testing.T)
```

Issue 16208: Go 1.7 crashed after Transport.IdleConnTimeout if an HTTP/2 connection was established but its caller no longer wanted it. (Assuming the connection cache was enabled, which it is by default) 

This test reproduced the crash by setting the IdleConnTimeout low (to make the test reasonable) and then making a request which is canceled by the DialTLS hook, which then also waits to return the real connection until after the RoundTrip saw the error.  Then we know the successful tls.Dial from DialTLS will need to go into the idle pool. Then we give it a of time to explode. 

#### <a name="net-http_test-func-TestTransportReturnsPeekError">func TestTransportReturnsPeekError(t *testing.T)</a>

```Go
func TestTransportReturnsPeekError(t *testing.T)
```

Issue 16465: Transport.RoundTrip should return the raw net.Conn.Read error from Peek back to the caller. 

#### <a name="net-http_test-func-TestTransportIDNA_h1">func TestTransportIDNA_h1(t *testing.T)</a>

```Go
func TestTransportIDNA_h1(t *testing.T)
```

Issue 13835: international domain names should work 

#### <a name="net-http_test-func-TestTransportIDNA_h2">func TestTransportIDNA_h2(t *testing.T)</a>

```Go
func TestTransportIDNA_h2(t *testing.T)
```

#### <a name="net-http_test-func-testTransportIDNA">func testTransportIDNA(t *testing.T, h2 bool)</a>

```Go
func testTransportIDNA(t *testing.T, h2 bool)
```

#### <a name="net-http_test-func-TestTransportProxyConnectHeader">func TestTransportProxyConnectHeader(t *testing.T)</a>

```Go
func TestTransportProxyConnectHeader(t *testing.T)
```

Issue 13290: send User-Agent in proxy CONNECT 

#### <a name="net-http_test-func-TestTransportProxyGetConnectHeader">func TestTransportProxyGetConnectHeader(t *testing.T)</a>

```Go
func TestTransportProxyGetConnectHeader(t *testing.T)
```

#### <a name="net-http_test-func-wantBody">func wantBody(res *Response, err error, want string) error</a>

```Go
func wantBody(res *Response, err error, want string) error
```

#### <a name="net-http_test-func-newLocalListener">func newLocalListener(t *testing.T) net.Listener</a>

```Go
func newLocalListener(t *testing.T) net.Listener
```

#### <a name="net-http_test-func-TestMissingStatusNoPanic">func TestMissingStatusNoPanic(t *testing.T)</a>

```Go
func TestMissingStatusNoPanic(t *testing.T)
```

Ensure that a missing status doesn't make the server panic See Issue [https://golang.org/issues/21701](https://golang.org/issues/21701) 

#### <a name="net-http_test-func-doFetchCheckPanic">func doFetchCheckPanic(tr *Transport, req *Request) (res *Response, err error, panicked bool)</a>

```Go
func doFetchCheckPanic(tr *Transport, req *Request) (res *Response, err error, panicked bool)
```

#### <a name="net-http_test-func-TestNoBodyOnChunked304Response">func TestNoBodyOnChunked304Response(t *testing.T)</a>

```Go
func TestNoBodyOnChunked304Response(t *testing.T)
```

Issue 22330: do not allow the response body to be read when the status code forbids a response body. 

#### <a name="net-http_test-func-TestTransportCheckContextDoneEarly">func TestTransportCheckContextDoneEarly(t *testing.T)</a>

```Go
func TestTransportCheckContextDoneEarly(t *testing.T)
```

Issue 25852: Transport should check whether Context is done early. 

#### <a name="net-http_test-func-TestClientTimeoutKillsConn_BeforeHeaders">func TestClientTimeoutKillsConn_BeforeHeaders(t *testing.T)</a>

```Go
func TestClientTimeoutKillsConn_BeforeHeaders(t *testing.T)
```

Issue 23399: verify that if a client request times out, the Transport's conn is closed so that it's not reused. 

This is the test variant that times out before the server replies with any response headers. 

#### <a name="net-http_test-func-TestClientTimeoutKillsConn_AfterHeaders">func TestClientTimeoutKillsConn_AfterHeaders(t *testing.T)</a>

```Go
func TestClientTimeoutKillsConn_AfterHeaders(t *testing.T)
```

Issue 23399: verify that if a client request times out, the Transport's conn is closed so that it's not reused. 

This is the test variant that has the server send response headers first, and time out during the write of the response body. 

#### <a name="net-http_test-func-TestTransportResponseBodyWritableOnProtocolSwitch">func TestTransportResponseBodyWritableOnProtocolSwitch(t *testing.T)</a>

```Go
func TestTransportResponseBodyWritableOnProtocolSwitch(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportCONNECTBidi">func TestTransportCONNECTBidi(t *testing.T)</a>

```Go
func TestTransportCONNECTBidi(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRequestReplayable">func TestTransportRequestReplayable(t *testing.T)</a>

```Go
func TestTransportRequestReplayable(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportRequestWriteRoundTrip">func TestTransportRequestWriteRoundTrip(t *testing.T)</a>

```Go
func TestTransportRequestWriteRoundTrip(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportClone">func TestTransportClone(t *testing.T)</a>

```Go
func TestTransportClone(t *testing.T)
```

#### <a name="net-http_test-func-TestIs408">func TestIs408(t *testing.T)</a>

```Go
func TestIs408(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportIgnores408">func TestTransportIgnores408(t *testing.T)</a>

```Go
func TestTransportIgnores408(t *testing.T)
```

#### <a name="net-http_test-func-TestInvalidHeaderResponse">func TestInvalidHeaderResponse(t *testing.T)</a>

```Go
func TestInvalidHeaderResponse(t *testing.T)
```

#### <a name="net-http_test-func-TestTransportClosesBodyOnInvalidRequests">func TestTransportClosesBodyOnInvalidRequests(t *testing.T)</a>

```Go
func TestTransportClosesBodyOnInvalidRequests(t *testing.T)
```

Issue 35015: ensure that Transport closes the body on any error with an invalid request, as promised by Client.Do docs. 

#### <a name="net-http_test-func-TestDontCacheBrokenHTTP2Conn">func TestDontCacheBrokenHTTP2Conn(t *testing.T)</a>

```Go
func TestDontCacheBrokenHTTP2Conn(t *testing.T)
```

Issue 34978: don't cache a broken HTTP/2 connection 

#### <a name="net-http_test-func-TestTransportDecrementConnWhenIdleConnRemoved">func TestTransportDecrementConnWhenIdleConnRemoved(t *testing.T)</a>

```Go
func TestTransportDecrementConnWhenIdleConnRemoved(t *testing.T)
```

Issue 34941 When the client has too many concurrent requests on a single connection, http.http2noCachedConnError is reported on multiple requests. There should only be one decrement regardless of the number of failures. 

#### <a name="net-http_test-func-TestAltProtoCancellation">func TestAltProtoCancellation(t *testing.T)</a>

```Go
func TestAltProtoCancellation(t *testing.T)
```

Issue 36820 Test that we use the older backward compatible cancellation protocol when a RoundTripper is registered via RegisterProtocol. 

#### <a name="net-http_test-func-TestIssue32441">func TestIssue32441(t *testing.T)</a>

```Go
func TestIssue32441(t *testing.T)
```

Issue 32441: body is not reset after ErrSkipAltProtocol 

#### <a name="net-http_test-func-TestTransportRejectsSignInContentLength">func TestTransportRejectsSignInContentLength(t *testing.T)</a>

```Go
func TestTransportRejectsSignInContentLength(t *testing.T)
```

Issue 39017. Ensure that HTTP/1 transports reject Content-Length headers that contain a sign (eg. "+3"), per RFC 2616, Section 14.13. 

#### <a name="net-http_test-func-testTransportRace">func testTransportRace(req *Request)</a>

```Go
func testTransportRace(req *Request)
```

#### <a name="net-http_test-func-TestErrorWriteLoopRace">func TestErrorWriteLoopRace(t *testing.T)</a>

```Go
func TestErrorWriteLoopRace(t *testing.T)
```

Issue 37669 Test that a cancellation doesn't result in a data race due to the writeLoop goroutine being left running, if the caller mutates the processed Request upon completion. 

#### <a name="net-http_test-func-TestCancelRequestWhenSharingConnection">func TestCancelRequestWhenSharingConnection(t *testing.T)</a>

```Go
func TestCancelRequestWhenSharingConnection(t *testing.T)
```

Issue 41600 Test that a new request which uses the connection of an active request cannot cause it to be canceled as well. 

