{
  "pathID": "/",
  "documentation": {
    "identifier": "testdata",
    "newPage": true,
    "searchKey": "",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package testdata"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package testdata \n\ntestdata is a small package containing sample Go source code used for testing the indexing routines of github.com/sourcegraph/lsif-go. \n\n"
  },
  "children": [
    {
      "pathID": "/internal"
    },
    {
      "node": {
        "pathID": "/#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#AliasedString",
              "documentation": {
                "identifier": "AliasedString",
                "newPage": false,
                "searchKey": "testdata.AliasedString",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AliasedString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AliasedString StringAlias = \"foobar\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Const",
              "documentation": {
                "identifier": "Const",
                "newPage": false,
                "searchKey": "testdata.Const",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Const"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Const = 5\n```\n\nConst is a constant equal to 5. It's the best constant I've ever written. ðŸ˜¹ \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ConstBlock1",
              "documentation": {
                "identifier": "ConstBlock1",
                "newPage": false,
                "searchKey": "testdata.ConstBlock1",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ConstBlock1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ConstBlock1 = 1\n```\n\nDocs for the const block itself. \n\nConstBlock1 is a constant in a block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ConstBlock2",
              "documentation": {
                "identifier": "ConstBlock2",
                "newPage": false,
                "searchKey": "testdata.ConstBlock2",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ConstBlock2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ConstBlock2 = 2\n```\n\nDocs for the const block itself. \n\nConstBlock2 is a constant in a block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ConstMath",
              "documentation": {
                "identifier": "ConstMath",
                "newPage": false,
                "searchKey": "testdata.ConstMath",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ConstMath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ConstMath = 1 + (2+3)*5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#LongString",
              "documentation": {
                "identifier": "LongString",
                "newPage": false,
                "searchKey": "testdata.LongString",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const LongString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LongString = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Score",
              "documentation": {
                "identifier": "Score",
                "newPage": false,
                "searchKey": "testdata.Score",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Score"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Score = uint64(42)\n```\n\nScore is just a hardcoded number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#SomeString",
              "documentation": {
                "identifier": "SomeString",
                "newPage": false,
                "searchKey": "testdata.SomeString",
                "tags": [
                  "constant",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SomeString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SomeString = \"foobar\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#secretScore",
              "documentation": {
                "identifier": "secretScore",
                "newPage": false,
                "searchKey": "testdata.secretScore",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const secretScore"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst secretScore = secret.SecretScore\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#BigVar",
              "documentation": {
                "identifier": "BigVar",
                "newPage": false,
                "searchKey": "testdata.BigVar",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BigVar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BigVar Interface = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#SortExportedFirst",
              "documentation": {
                "identifier": "SortExportedFirst",
                "newPage": false,
                "searchKey": "testdata.SortExportedFirst",
                "tags": [
                  "variable",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SortExportedFirst"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SortExportedFirst = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Var",
              "documentation": {
                "identifier": "Var",
                "newPage": false,
                "searchKey": "testdata.Var",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Var"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Var Interface = &Struct{Field: \"bar!\"}\n```\n\nVar is a variable interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#VarBlock1",
              "documentation": {
                "identifier": "VarBlock1",
                "newPage": false,
                "searchKey": "testdata.VarBlock1",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var VarBlock1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar VarBlock1 = \"if you're reading this\"\n```\n\nWhat are docs, really? I can't say for sure, I don't write any. But look, a CAT! \n\n```\n      |\\      _,,,---,,_\nZZZzz /,`.-'`'    -.  ;-;;,_\n     |,4-  ) )-,_. ,\\ (  `'-'\n    '---''(_/--'  `-'\\_)\n\n```\nIt's sleeping! Some people write that as `sleeping` but Markdown isn't allowed in Go docstrings, right? right?! \n\nThis has some docs \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#VarBlock2",
              "documentation": {
                "identifier": "VarBlock2",
                "newPage": false,
                "searchKey": "testdata.VarBlock2",
                "tags": [
                  "variable",
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var VarBlock2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar VarBlock2 = \"hi\"\n```\n\nWhat are docs, really? I can't say for sure, I don't write any. But look, a CAT! \n\n```\n      |\\      _,,,---,,_\nZZZzz /,`.-'`'    -.  ;-;;,_\n     |,4-  ) )-,_. ,\\ (  `'-'\n    '---''(_/--'  `-'\\_)\n\n```\nIt's sleeping! Some people write that as `sleeping` but Markdown isn't allowed in Go docstrings, right? right?! \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#sortUnexportedSecond",
              "documentation": {
                "identifier": "sortUnexportedSecond",
                "newPage": false,
                "searchKey": "testdata.sortUnexportedSecond",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sortUnexportedSecond"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sortUnexportedSecond = 2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#unexportedVar",
              "documentation": {
                "identifier": "unexportedVar",
                "newPage": false,
                "searchKey": "testdata.unexportedVar",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var unexportedVar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unexportedVar Interface = &Struct{Field: \"bar!\"}\n```\n\nunexportedVar is an unexported variable interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#x",
              "documentation": {
                "identifier": "x",
                "newPage": false,
                "searchKey": "testdata.x",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x error\n```\n\nx has a builtin error type \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#_sortUnderscoreLast",
              "documentation": {
                "identifier": "_sortUnderscoreLast",
                "newPage": false,
                "searchKey": "testdata._sortUnderscoreLast",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _sortUnderscoreLast"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _sortUnderscoreLast = 3\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#BadBurger",
              "documentation": {
                "identifier": "BadBurger",
                "newPage": false,
                "searchKey": "testdata.BadBurger",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadBurger struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadBurger = struct {\n\tField string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Embedded",
              "documentation": {
                "identifier": "Embedded",
                "newPage": false,
                "searchKey": "testdata.Embedded",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embedded struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embedded struct {\n\t// EmbeddedField has some docs!\n\tEmbeddedField string\n\tField         string // conflicts with parent \"Field\"\n}\n```\n\nEmbedded is a struct, to be embedded in another struct. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Inner",
              "documentation": {
                "identifier": "Inner",
                "newPage": false,
                "searchKey": "testdata.Inner",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Inner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Inner struct {\n\tX int\n\tY int\n\tZ int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#InnerStruct",
              "documentation": {
                "identifier": "InnerStruct",
                "newPage": false,
                "searchKey": "testdata.InnerStruct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InnerStruct struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InnerStruct struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Interface",
              "documentation": {
                "identifier": "Interface",
                "newPage": false,
                "searchKey": "testdata.Interface",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Interface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Interface interface {\n\tImplementsInterface() string\n}\n```\n\nInterface has docs too \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#NewInterface",
                    "documentation": {
                      "identifier": "NewInterface",
                      "newPage": false,
                      "searchKey": "testdata.NewInterface",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewInterface() Interface"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewInterface() Interface\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#Outer",
              "documentation": {
                "identifier": "Outer",
                "newPage": false,
                "searchKey": "testdata.Outer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Outer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Outer struct {\n\tInner\n\tW int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ParallelizableFunc",
              "documentation": {
                "identifier": "ParallelizableFunc",
                "newPage": false,
                "searchKey": "testdata.ParallelizableFunc",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ParallelizableFunc func(ctx context.Context) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ParallelizableFunc func(ctx context.Context) error\n```\n\nParallelizableFunc is a function that can be called concurrently with other instances of this function type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#SecretBurger",
              "documentation": {
                "identifier": "SecretBurger",
                "newPage": false,
                "searchKey": "testdata.SecretBurger",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SecretBurger secret.Burger"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SecretBurger = secret.Burger\n```\n\nType aliased doc \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#ShellStruct",
              "documentation": {
                "identifier": "ShellStruct",
                "newPage": false,
                "searchKey": "testdata.ShellStruct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ShellStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ShellStruct struct {\n\t// Ensure this field comes before the definition\n\t// so that we grab the correct one in our unit\n\t// tests.\n\tInnerStruct\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#StringAlias",
              "documentation": {
                "identifier": "StringAlias",
                "newPage": false,
                "searchKey": "testdata.StringAlias",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StringAlias string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StringAlias string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Struct",
              "documentation": {
                "identifier": "Struct",
                "newPage": false,
                "searchKey": "testdata.Struct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Struct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Struct struct {\n\t*Embedded\n\tField     string\n\tAnonymous struct {\n\t\tFieldA int\n\t\tFieldB int\n\t\tFieldC int\n\t}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#Struct.ImplementsInterface",
                    "documentation": {
                      "identifier": "Struct.ImplementsInterface",
                      "newPage": false,
                      "searchKey": "testdata.Struct.ImplementsInterface",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Struct) ImplementsInterface() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Struct) ImplementsInterface() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Struct.MachineLearning",
                    "documentation": {
                      "identifier": "Struct.MachineLearning",
                      "newPage": false,
                      "searchKey": "testdata.Struct.MachineLearning",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Struct) MachineLearning(param1 float32,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Struct) MachineLearning(\n\tparam1 float32,\n\n\thyperparam2 float32,\n\thyperparam3 float32,\n) float32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/#Struct.StructMethod",
                    "documentation": {
                      "identifier": "Struct.StructMethod",
                      "newPage": false,
                      "searchKey": "testdata.Struct.StructMethod",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Struct) StructMethod()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Struct) StructMethod()\n```\n\nStructMethod has some docs! \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#StructTagRegression",
              "documentation": {
                "identifier": "StructTagRegression",
                "newPage": false,
                "searchKey": "testdata.StructTagRegression",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructTagRegression struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructTagRegression struct {\n\tValue int `key:\",range=[:}\"`\n}\n```\n\nStructTagRegression is a struct that caused panic in the wild. Added here to support a regression test. \n\nSee [https://github.com/tal-tech/go-zero/blob/11dd3d75ecceaa3f5772024fb3f26dec1ada8e9c/core/mapping/unmarshaler_test.go#L2272](https://github.com/tal-tech/go-zero/blob/11dd3d75ecceaa3f5772024fb3f26dec1ada8e9c/core/mapping/unmarshaler_test.go#L2272). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestEmptyStruct",
              "documentation": {
                "identifier": "TestEmptyStruct",
                "newPage": false,
                "searchKey": "testdata.TestEmptyStruct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestEmptyStruct struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestEmptyStruct struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestEqualsStruct",
              "documentation": {
                "identifier": "TestEqualsStruct",
                "newPage": false,
                "searchKey": "testdata.TestEqualsStruct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestEqualsStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestEqualsStruct = struct {\n\tValue int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestInterface",
              "documentation": {
                "identifier": "TestInterface",
                "newPage": false,
                "searchKey": "testdata.TestInterface",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestInterface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestInterface interface {\n\t// Do does a test thing.\n\tDo(ctx context.Context, data string) (score int, _ error)\n}\n```\n\nTestInterface is an interface used for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#TestStruct",
              "documentation": {
                "identifier": "TestStruct",
                "newPage": false,
                "searchKey": "testdata.TestStruct",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestStruct struct {\n\t// SimpleA docs\n\tSimpleA int\n\t// SimpleB docs\n\tSimpleB int\n\t// SimpleC docs\n\tSimpleC int\n\n\tFieldWithTag           string `json:\"tag\"`\n\tFieldWithAnonymousType struct {\n\t\tNestedA string\n\t\tNestedB string\n\t\t// NestedC docs\n\t\tNestedC string\n\t}\n\n\tEmptyStructField struct{}\n}\n```\n\nTestStruct is a struct used for testing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/#TestStruct.Doer",
                    "documentation": {
                      "identifier": "TestStruct.Doer",
                      "newPage": false,
                      "searchKey": "testdata.TestStruct.Doer",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ts *TestStruct) Doer(ctx context.Context, data string) (score int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ts *TestStruct) Doer(ctx context.Context, data string) (score int, err error)\n```\n\nDoer is similar to the test interface (but not the same). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/#X",
              "documentation": {
                "identifier": "X",
                "newPage": false,
                "searchKey": "testdata.X",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type X struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype X struct {\n\tbar string\n}\n```\n\nGo can be fun \n\nAnd confusing \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Y",
              "documentation": {
                "identifier": "Y",
                "newPage": false,
                "searchKey": "testdata.Y",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Y struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Y struct {\n\tbaz float\n}\n```\n\nGo can be fun \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/#Parallel",
              "documentation": {
                "identifier": "Parallel",
                "newPage": false,
                "searchKey": "testdata.Parallel",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Parallel(ctx context.Context, fns ...ParallelizableFunc) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Parallel(ctx context.Context, fns ...ParallelizableFunc) error\n```\n\nParallel invokes each of the given parallelizable functions in their own goroutines and returns the first error to occur. This method will block until all goroutines have returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#Switch",
              "documentation": {
                "identifier": "Switch",
                "newPage": false,
                "searchKey": "testdata.Switch",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Switch(interfaceValue interface{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Switch(interfaceValue interface{}) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/#useOfCompositeStructs",
              "documentation": {
                "identifier": "useOfCompositeStructs",
                "newPage": false,
                "searchKey": "testdata.useOfCompositeStructs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func useOfCompositeStructs()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc useOfCompositeStructs()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/duplicate_path_id"
    }
  ]
}
